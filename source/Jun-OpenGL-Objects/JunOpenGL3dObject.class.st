"
Imported by VwImportClass
"
Class {
	#name : #JunOpenGL3dObject,
	#superclass : #JunAbstractObject,
	#instVars : [
		'properties',
		'paint',
		'alpha',
		'bounds'
	],
	#classVars : [
		'IdClock',
		'IdNumber',
		'RandomStream'
	],
	#category : #'Jun-OpenGL-Objects'
}

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> acetylcholine [
	"(JunOpenGL3dObject acetylcholine) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
   -3.2800   -1.1600    2.0531 C
   -1.8350   -1.4552    1.7112 C
   -1.3335   -0.5151    0.8623 O
    0.0097   -0.7176    0.4443 C
    0.4160    0.4217   -0.4937 C
    1.8155    0.2627   -1.0872 N
    2.0930    1.4823   -1.9553 C
   -1.1989   -2.4011    2.1185 O
    1.9124   -0.9771   -1.9611 C
    2.8766    0.1924   -0.0023 C
   -3.6707   -1.9184    2.7687 H
   -3.9095   -1.1929    1.1350 H
   -3.3742   -0.1559    2.5249 H
    0.0613   -1.7012   -0.0736 H
    0.6572   -0.7297    1.3506 H
    0.3612    1.3817    0.0731 H
   -0.3275    0.4881   -1.3233 H
    3.1025    1.4204   -2.4211 H
    2.0528    2.4165   -1.3507 H
    1.3425    1.5648   -2.7738 H
    2.9036   -1.0247   -2.4662 H
    1.1238   -0.9689   -2.7471 H
    1.8094   -1.9098   -1.3653 H
    3.8957    0.1732   -0.4509 H
    2.7741   -0.7306    0.6093 H
    2.8110    1.0758    0.6722 H
	'.
	compoundObject name: 'acetylcholine'.
	^compoundObject
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> adrenaline [
	"(JunOpenGL3dObject adrenaline) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
   -1.8847    0.9647    0.9048 C
   -2.8496    0.0866    1.4070 C
   -2.5680   -1.2837    1.4492 C
   -1.3274   -1.7305    0.9876 C
   -0.3732   -0.8418    0.4900 C
   -0.6379    0.5305    0.4404 C
    0.3468    1.5577   -0.0781 C
    1.6634    1.0318   -0.6466 C
    2.4615    2.1610   -1.1295 N
    3.7743    1.7479   -1.6188 C
   -4.0529    0.5327    1.8573 O
   -3.4916   -2.1550    1.9353 O
    0.6718    2.4743    0.9716 O
   -2.1219    2.0408    0.8791 H
   -1.0984   -2.8085    1.0194 H
    0.5880   -1.2497    0.1428 H
   -0.1655    2.1455   -0.8779 H
    2.2298    0.4920    0.1485 H
    1.4673    0.3390   -1.4983 H
    1.9594    2.6261   -1.8869 H
    4.3273    2.6458   -1.9770 H
    4.3672    1.2700   -0.8062 H
    3.6659    1.0400   -2.4715 H
   -4.5379   -0.2537    2.1609 H
   -3.1100   -3.0464    1.8911 H
    1.4028    2.9838    0.6673 H
	'.
	compoundObject name: 'adrenaline'.
	^compoundObject
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> alanine [
	"(JunOpenGL3dObject alanine) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
-0002.2832 00002.2923 00001.055  N
-0002.3893 00002.6366 00002.013  H
-0000.9868 00002.7655 00000.516  C
-0000.8643 00002.3409 -0000.484  H
00000.1684 00002.3109 00001.379  C
00001.0354 00001.5757 00000.904  O
-0000.9936 00004.3095 00000.379  C
-0000.0479 00004.6483 -0000.046  H
-0001.8074 00004.6164 -0000.279  H
-0001.1326 00004.7772 00001.355  H
00000.2485 00002.6996 00002.674  O
-0002.2550 00001.2708 00001.106  H
00000.9611 00002.4209 00003.221  H
	'.
	compoundObject name: 'alanine'.
	^compoundObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> anpanman [
	"(JunOpenGL3dObject anpanman) show."

	| baseSphere baseCube baseCircle head leftEye transformation leftEyebrow nose noseLight leftCheek mouth leftCheekLight rightCheekLight leftObjects anpanman box maximum |
	baseSphere := (JunOpenGL3dTransformedObject 
				object: (JunOpenGL3dObject ball: 3))
				flushAllPaints;
				yourself.
	baseCube := (JunOpenGL3dTransformedObject 
				object: JunOpenGL3dObject xUnitBox)
				flushAllPaints;
				yourself.
	baseCircle := (JunOpenGL3dTransformedObject 
				object: ((JunOpenGL3dNurbsCurve circle)
						lineWidth: 2;
						yourself))
				flushAllPaints;
				yourself.
	head := baseSphere scaledBy: 4 * (0.9 , 1 , 0.9).
	leftEye := baseSphere scaledBy: 0.3 , 0.3 , 0.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: -25).
	leftEye := leftEye transform: transformation.
	leftEye := leftEye translatedBy: 3.0 , 1.1 , 1.5.
	leftEyebrow := baseCircle scaledBy: 0.8 , 0.8 , 1.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 70).
	transformation := transformation 
				product: (Jun3dTransformation rotateX: (JunAngle fromDeg: -60)).
	leftEyebrow := leftEyebrow transform: transformation.
	leftEyebrow := leftEyebrow translatedBy: 2.6 , 1.3 , 1.8.
	nose := baseSphere scaledBy: 1.2 * (0.8 , 1 , 0.9).
	nose := nose translatedBy: 3.5 , 0 , 0.
	noseLight := baseCube scaledBy: 0.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: -20).
	transformation := transformation 
				product: (Jun3dTransformation rotateZ: (JunAngle fromDeg: 15)).
	noseLight := noseLight transform: transformation.
	noseLight := noseLight translatedBy: 3.9 , 0.3 , 0.2.
	leftCheek := baseSphere scaledBy: 1.3 * (0.5 , 1 , 0.9).
	transformation := Jun3dTransformation rotateZ: (JunAngle fromDeg: 35).
	leftCheek := leftCheek transform: transformation.
	leftCheek := leftCheek translatedBy: 2.6 , 2.2 , 0.
	mouth := baseCircle scaledBy: 1 , 1.5 , 0.8.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	mouth := mouth transform: transformation.
	mouth := mouth translatedBy: 3.1 , 0.0 , -1.0.
	leftCheekLight := baseCube scaledBy: 0.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: -10).
	transformation := transformation 
				product: (Jun3dTransformation rotateZ: (JunAngle fromDeg: 40)).
	leftCheekLight := leftCheekLight transform: transformation.
	leftCheekLight := leftCheekLight translatedBy: 2.6 , 2.5 , 0.2.
	rightCheekLight := baseCube scaledBy: 0.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: -10).
	transformation := transformation 
				product: (Jun3dTransformation rotateZ: (JunAngle fromDeg: -20)).
	rightCheekLight := rightCheekLight transform: transformation.
	rightCheekLight := rightCheekLight translatedBy: 3.0 , -1.8 , 0.2.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftEye
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftEyebrow
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftCheek
				paint: (ColorValue orange blendWith: ColorValue red);
				yourself).
	anpanman := JunOpenGL3dCompoundObject new.
	anpanman add: leftObjects.
	anpanman 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	anpanman add: (head
				paint: (ColorValue 
							red: 0.968624
							green: 0.580271
							blue: 0.415578);
				yourself).
	anpanman add: (nose
				paint: ColorValue red;
				yourself).
	anpanman add: (noseLight
				paint: ColorValue white;
				yourself).
	anpanman add: (leftCheekLight
				paint: ColorValue white;
				yourself).
	anpanman add: (rightCheekLight
				paint: ColorValue white;
				yourself).
	anpanman add: (mouth
				paint: ColorValue black;
				yourself).
	box := anpanman boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	anpanman := JunOpenGL3dTransformedObject object: anpanman
				transformation: transformation.
	anpanman name: 'anpanman'.
	^anpanman
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> anthracene [
	"(JunOpenGL3dObject anthracene) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
-0009.9531 00005.9919 -0000.002  C
-0009.9530 00007.3393 -0000.002  C
-0008.7799 00007.9978 -0000.003  C
-0007.6072 00007.3388 -0000.002  C
-0007.6074 00005.9916 -0000.001  C
-0008.7803 00005.3330 -0000.003  C
-0011.1240 00005.3278 -0000.000  C
-0011.1239 00008.0031 00000.000  C
-0008.7794 00009.1021 -0000.003  H
-0006.4360 00008.0020 00000.000  C
-0006.4367 00005.3276 00000.001  C
-0008.7801 00004.2286 -0000.003  H
-0005.2721 00007.3347 00000.004  C
-0005.2724 00005.9942 00000.005  C
-0006.4087 00009.1060 00000.000  H
-0006.4102 00004.2237 00000.002  H
-0004.3158 00007.8860 00000.007  H
-0004.3165 00005.4422 00000.009  H
-0012.2881 00007.3358 00000.003  C
-0012.2881 00005.9951 00000.002  C
-0011.1511 00004.2237 -0000.000  H
-0011.1512 00009.1072 00000.001  H
-0013.2446 00007.8873 00000.006  H
-0013.2446 00005.4435 00000.005  H
	'.
	compoundObject name: 'anthracene'.
	^compoundObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> aoki [
	"(JunOpenGL3dObject aoki) show."

	| anObject |
	anObject := self aoki1.
	anObject name: 'aoki'.
	^anObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> aoki1 [
	"(JunOpenGL3dObject aoki1) show."

	| baseSphere baseCone hairAndBeard face leftEar transformation leftEyebrow leftEye leftEyeLight nose mustache mole mole1 mole2 leftObjects aoki box maximum |
	baseSphere := (JunOpenGL3dTransformedObject 
				object: (JunOpenGL3dObject ball: 3))
				flushAllPaints;
				yourself.
	baseCone := (JunOpenGL3dTransformedObject object: (JunOpenGL3dObject 
						cone: 10
						radius: 1
						height: 1))
				flushAllPaints;
				yourself.
	hairAndBeard := baseSphere scaledBy: 4.05.
	hairAndBeard := hairAndBeard translatedBy: -0.115 , 0 , 0.
	face := baseSphere scaledBy: 4.
	leftEar := JunOpenGL3dObject 
				pieFrom: 0
				to: 360
				by: 10
				radius: 1
				thickness: 0.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	leftEar := leftEar transform: transformation.
	leftEar := leftEar translatedBy: 0 , 3.8 , -0.5.
	leftEyebrow := JunOpenGL3dObject 
				chunkOfPieFrom: 330
				to: 360
				by: 10
				radius: 2.2
				thickness: 1.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 110).
	transformation := transformation 
				product: (Jun3dTransformation rotateX: (JunAngle fromDeg: 90)).
	leftEyebrow := leftEyebrow transform: transformation.
	leftEyebrow := leftEyebrow translatedBy: 3 , 0.5 , 2.
	leftEye := baseSphere scaledBy: 0.5.
	leftEye := leftEye translatedBy: 4 , 1.5 , 0.
	leftEyeLight := baseSphere scaledBy: 0.25.
	leftEyeLight := leftEyeLight translatedBy: 4.23 , 1.5 , 0.2.
	nose := baseCone scaledBy: 1 , 1 , 2.
	nose := nose translatedBy: 4 , 0 , -2.
	mustache := baseCone scaledBy: 1.5 , 1.5 , 2.
	mustache := mustache translatedBy: 3 , 0 , -3.
	mole := baseSphere scaledBy: 0.05.
	mole1 := mole translatedBy: 2.8 , 2 , -2.
	mole2 := mole translatedBy: 4.45 , -0.15 , -1.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftEar
				paint: ColorValue orange;
				yourself).
	leftObjects add: (leftEyebrow
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftEye
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftEyeLight
				paint: ColorValue white;
				yourself).
	aoki := JunOpenGL3dCompoundObject new.
	aoki add: leftObjects.
	aoki 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	aoki add: (hairAndBeard
				paint: ColorValue black;
				yourself).
	aoki add: (face
				paint: ColorValue orange;
				yourself).
	aoki add: (nose
				paint: ColorValue orange;
				yourself).
	aoki add: (mustache
				paint: ColorValue black;
				yourself).
	aoki add: (mole1
				paint: ColorValue black;
				yourself).
	aoki add: (mole2
				paint: ColorValue black;
				yourself).
	box := aoki boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	aoki := JunOpenGL3dTransformedObject object: aoki
				transformation: transformation.
	aoki name: 'aoki1'.
	^aoki
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> aoki2 [
	"(JunOpenGL3dObject aoki2) show."

	| aCompositePart aPixmap anImage aTexture anObject |
	aCompositePart := JunSampleTriangle exampleAoki.
	aPixmap := Pixmap extent: aCompositePart preferredBounds extent.
	aCompositePart displayOn: aPixmap graphicsContext at: aCompositePart preferredBounds origin negated.
	anImage := aPixmap asImage.
	aPixmap close.
	aTexture := JunOpenGLTexture image: anImage.
	aTexture linear: true; repeat: true.
	aTexture coordinates: (Array
			with: 0.0 , 0.0
			with: 1.0 , 0.0
			with: 1.0 , 1.0
			with: 0.0 , 1.0).
	anObject := JunOpenGL3dObject cube.
	anObject texture: aTexture.
	anObject name: 'aoki2'.
	^anObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> architecture [
	"(JunOpenGL3dObject architecture) show."

	"
	| aBody aTable aViewer |
	aBody := JunOpenGL3dObject architecture.
	aTable := Dictionary new.
	aTable add: #eyePoint -> (4.14 , 4.28 , 0.0).
	aTable add: #sightPoint -> (0 , 0 , 0).
	aTable add: #upVector -> (0 , 0 , 1).
	aTable add: #zoomHeight -> 1.5.
	aViewer := aBody showProjectionTable: aTable
				in: (600 , 320) alignedRectangleWithScreenCenter.
	aViewer movementVector: (JunAngle degrees: 1) sin negated, 0.
	^aViewer
	"

	| aBlock aBody |
	aBlock := 
			[:string :extent :color | 
			| aCompound aBox aText aCube aPoint |
			aCompound := JunOpenGL3dCompoundObject new.
			aBox := Jun3dBoundingBox vertex: 0 , 0 , 0
						vertex: extent x , extent y , extent z negated.
			aCompound add: (aBox asJunOpenGL3dObjectColor: color).
			aCompound add: ((aBox asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself).
			aText := string asText allBold.
			aText := JunOpenGL3dObject text: aText.
			aCube := aText boundingBox expandedBy: 6 , 6 , 0.
			aPoint := (extent x , extent y , 1) / (aCube width , aCube height , 1).
			aText := aText scaledBy: aPoint.
			aText paint: ColorValue black.
			aPoint := aBox center - aText boundingBox center.
			aText := aText translatedBy: aPoint x , aPoint y , 0.
			aCompound add: aText.
			aCompound yourself].
	aBody := JunOpenGL3dCompoundObject new.
	aBody 
		add: ((aBlock 
				value: 'Virtual Image'
				value: 280 , 20 , 280
				value: ColorValue gray) 
					transform: (Jun3dTransformation translate: -140 , 50 , 0)).
	aBody 
		add: ((aBlock 
				value: 'Virtual Machine'
				value: 280 , 20 , 280
				value: ColorValue cyan) 
					transform: ((Jun3dTransformation rotateY: (JunAngle degrees: 90)) 
							product: (Jun3dTransformation translate: 140 , 10 , 0))).
	aBody 
		add: ((aBlock 
				value: 'OpenGL'
				value: 80 , 20 , 280
				value: ColorValue magenta) 
					transform: (Jun3dTransformation translate: -40 , -30 , 0)).
	aBody 
		add: ((aBlock 
				value: 'QuickTime'
				value: 80 , 20 , 180
				value: ColorValue yellow) 
					transform: (Jun3dTransformation translate: 60 , -30 , 0)).
	aBody 
		add: ((aBlock 
				value: 'Windows'
				value: 80 , 20 , 280
				value: ColorValue red) 
					transform: ((Jun3dTransformation rotateY: (JunAngle degrees: 90)) 
							product: (Jun3dTransformation translate: 140 , -70 , 0))).
	aBody 
		add: ((aBlock 
				value: 'Mac OS X'
				value: 80 , 20 , 280
				value: ColorValue green) 
					transform: ((Jun3dTransformation rotateY: (JunAngle degrees: 90)) 
							product: (Jun3dTransformation translate: 140 , -70 , -100))).
	aBody 
		add: ((aBlock 
				value: 'Linux'
				value: 80 , 20 , 280
				value: ColorValue blue) 
					transform: ((Jun3dTransformation rotateY: (JunAngle degrees: 90)) 
							product: (Jun3dTransformation translate: 140 , -70 , -200))).
	aBody := aBody 
				transform: ((((Jun3dTransformation rotateX: (JunAngle degrees: 90)) 
						product: (Jun3dTransformation rotateZ: (JunAngle degrees: 90))) 
							product: (Jun3dTransformation translate: 140 , 0 , 0)) 
							product: (Jun3dTransformation scale: 1 / 140)).
	aBody name: 'architecture'.
	^aBody

	"
	| aBody aTable aViewer aFilename aStream |
	aBody := JunOpenGL3dObject architecture.
	aTable := Dictionary new.
	aTable add: #eyePoint -> (4.14 , 4.28 , 0.0).
	aTable add: #sightPoint -> (0 , 0 , 0).
	aTable add: #upVector -> (0 , 0 , 1).
	aTable add: #zoomHeight -> 1.5.
	aViewer := aBody showProjectionTable: aTable
				in: (600 , 320) alignedRectangleWithScreenCenter.
	aFilename := Filename defaultDirectory construct: 'architecture.gif'.
	JunControlUtility 
		assert: 
			[aStream := JunGifAnimationStream on: aFilename writeStream.
			aStream tick: 100.
			aStream loop: 0]
		do: 
			[| aBox anAngle |
			aBox := aViewer getWindow displayBox.
			aBox := aBox expandedBy: (4 @ 23 corner: 4 @ 4).
			anAngle := JunAngle degrees: 2.
			(0 to: 360 by: anAngle degrees) do: 
					[:angle | 
					| anImage |
					anImage := aViewer asImage.
					anImage := JunImageAdjuster adjust: anImage
								extent: (anImage extent / 2) rounded.
					aStream nextPutImage: anImage.
					aViewer grab: anAngle sin negated , 0]]
		ensure: [aStream close].
	aViewer closeRequest.
	^JunCartoonMovie showFile: aFilename
	"
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> arowana [
	"(JunOpenGL3dObject arowana) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:11:19

(CompoundBody (name . "arowana")
  (bodies (CompoundBody (bodies (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0817d , 0.3789d , 2.6354d)}
	    {(0.0606d , 0.373d , 2.6388d)}
	    {(0.0606d , 0.3561d , 2.6267d)}
	    {(0.0788d , 0.3561d , 2.6267d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0597d , 0.373d , 2.6388d)}
	    {(-0.0808d , 0.3789d , 2.6354d)}
	    {(-0.0779d , 0.3561d , 2.6267d)}
	    {(-0.0597d , 0.3561d , 2.6267d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0817d , 0.3789d , 2.6354d)}
	    {(0.0788d , 0.3561d , 2.6267d)}
	    {(0.0504d , 0.39d , 2.3958d)}
	    {(0.0566d , 0.4381d , 2.4142d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0606d , 0.373d , 2.6388d)}
	    {(0.0817d , 0.3789d , 2.6354d)}
	    {(0.0566d , 0.4381d , 2.4142d)}
	    {(0.0121d , 0.4257d , 2.4214d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0121d , 0.4257d , 2.4214d)}
	    {(0.0566d , 0.4381d , 2.4142d)}
	    {(0.0449d , 0.4755d , 2.3445d)}
	    {(5.0d-4 , 0.4631d , 2.3517d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.0633d , 0.5102d , 2.217d)}
	    {(0.0633d , 0.4981d , 2.2648d)}
	    {(0.1426d , 0.3279d , 2.2504d)}
	    {(0.1426d , 0.3771d , 2.2026d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0347d , 0.3793d , 2.3707d)}
	    {(0.0388d , 0.4274d , 2.3261d)}
	    {(5.0d-4 , 0.4274d , 2.3261d)}
	    {(-0.0379d , 0.4274d , 2.3261d)}
	    {(-0.0338d , 0.3793d , 2.3707d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.1356d , 0.3617d , 2.2125d)}
	    {(0.1103d , 0.271d , 2.2965d)}
	    {(0.1875d , -0.2734d , 1.8916d)}
	    {(0.236d , -0.2508d , 1.7676d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.2513d , 0.4676d , 1.8034d)}
	    {(-0.3601d , 0.3276d , 1.6592d)}
	    {(-0.283d , 0.3303d , 1.6577d)}
	    {(-0.2272d , 0.4654d , 1.7965d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.1356d , 0.3617d , 2.2125d)}
	    {(0.236d , -0.2508d , 1.7676d)}
	    {(-0.2231d , -0.2508d , 1.7676d)}
	    {(-0.1346d , 0.3617d , 2.2125d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.1788d , -0.5231d , 1.7593d)}
	    {(0.2187d , -0.2268d , 1.8673d)}
	    {(0.2027d , -0.1746d , 1.859d)}
	    {(0.2278d , -0.4152d , 1.5642d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2934d , 0.4952d , 0.7942d)}
	    {(0.4114d , 0.408d , 0.9966d)}
	    {(0.4004d , 0.3302d , 0.6563d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.055d , -0.3786d , 2.0296d)}
	    {(0.0347d , 0.3793d , 2.3707d)}
	    {(-0.0338d , 0.3793d , 2.3707d)}
	    {(-0.0563d , -0.3786d , 2.0296d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1917d , -0.1746d , 1.859d)}
	    {(-0.1098d , 0.3105d , 2.0835d)}
	    {(-0.1417d , 0.3277d , 2.2502d)}
	    {(-0.2081d , -0.2269d , 1.8671d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2632d , -0.4462d , 1.6884d)}
	    {(0.2485d , -0.1775d , 1.8195d)}
	    {(0.2187d , -0.2268d , 1.8673d)}
	    {(0.1788d , -0.5231d , 1.7593d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1417d , 0.3277d , 2.2502d)}
	    {(-0.1417d , 0.377d , 2.2024d)}
	    {(-0.2365d , -0.1777d , 1.8194d)}
	    {(-0.2081d , -0.2269d , 1.8671d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2411d , 0.5044d , 0.7648d)}
	    {(0.2934d , 0.4952d , 0.7942d)}
	    {(0.4004d , 0.3302d , 0.6563d)}
	    {(0.352d , 0.3417d , 0.6373d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1669d , 0.6304d , 1.0138d)}
	    {(0.2034d , 0.6649d , 0.6778d)}
	    {(-0.2034d , 0.6649d , 0.6778d)}
	    {(-0.1669d , 0.6304d , 1.0138d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.055d , -0.3786d , 2.0296d)}
	    {(-0.0563d , -0.3786d , 2.0296d)}
	    {(-0.1778d , -0.5231d , 1.7593d)}
	    {(0.1788d , -0.5231d , 1.7593d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.2231d , -0.2508d , 1.7676d)}
	    {(0.236d , -0.2508d , 1.7676d)}
	    {(0.2278d , -0.4152d , 1.5642d)}
	    {(-0.2264d , -0.4152d , 1.5642d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2081d , -0.2269d , 1.8671d)}
	    {(-0.1778d , -0.5231d , 1.7593d)}
	    {(-0.2264d , -0.4152d , 1.5642d)}
	    {(-0.1917d , -0.1746d , 1.859d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3864d , -0.4577d , 1.3822d)}
	    {(0.2955d , -0.2774d , 1.5807d)}
	    {(0.2632d , -0.4462d , 1.6884d)}
	    {(0.2011d , -0.6014d , 1.4455d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1393d , 0.591d , 1.3682d)}
	    {(-0.1669d , 0.6304d , 1.0138d)}
	    {(-0.4114d , 0.408d , 0.9966d)}
	    {(-0.3797d , 0.3492d , 1.3716d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1939d , 0.6304d , 0.6714d)}
	    {(-0.0958d , 0.5788d , 0.9775d)}
	    {(-0.2765d , 0.4221d , 0.95d)}
	    {(-0.2575d , 0.5044d , 0.7648d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2081d , -0.2269d , 1.8671d)}
	    {(-0.2365d , -0.1777d , 1.8194d)}
	    {(-0.2623d , -0.4462d , 1.6884d)}
	    {(-0.1778d , -0.5231d , 1.7593d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2034d , 0.6649d , 0.6778d)}
	    {(-0.1939d , 0.6304d , 0.6714d)}
	    {(-0.2575d , 0.5044d , 0.7648d)}
	    {(-0.3083d , 0.4952d , 0.7942d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2946d , -0.2774d , 1.5807d)}
	    {(-0.2623d , -0.4462d , 1.6884d)}
	    {(-0.2365d , -0.1777d , 1.8194d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1669d , 0.6304d , 1.0138d)}
	    {(-0.2034d , 0.6649d , 0.6778d)}
	    {(-0.3083d , 0.4952d , 0.7942d)}
	    {(-0.4114d , 0.408d , 0.9966d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.1788d , -0.5231d , 1.7593d)}
	    {(-0.1778d , -0.5231d , 1.7593d)}
	    {(-0.2001d , -0.6014d , 1.4455d)}
	    {(0.2011d , -0.6014d , 1.4455d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.4004d , 0.3302d , 0.6563d)}
	    {(0.4114d , 0.408d , 0.9966d)}
	    {(0.4738d , -0.5838d , 1.0445d)}
	    {(0.4877d , -0.4787d , 0.6521d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3083d , 0.4952d , 0.7942d)}
	    {(-0.3992d , 0.3302d , 0.6563d)}
	    {(-0.4114d , 0.408d , 0.9966d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3864d , -0.4577d , 1.3822d)}
	    {(0.2011d , -0.6014d , 1.4455d)}
	    {(0.172d , -0.7484d , 1.0352d)}
	    {(0.4738d , -0.5838d , 1.0445d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2946d , -0.2774d , 1.5807d)}
	    {(-0.3516d , -0.4577d , 1.3822d)}
	    {(-0.2001d , -0.6014d , 1.4455d)}
	    {(-0.2623d , -0.4462d , 1.6884d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2001d , -0.6014d , 1.4455d)}
	    {(-0.172d , -0.7484d , 1.0352d)}
	    {(0.172d , -0.7484d , 1.0352d)}
	    {(0.2011d , -0.6014d , 1.4455d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3516d , -0.4577d , 1.3822d)}
	    {(-0.3797d , 0.3492d , 1.3716d)}
	    {(-0.4114d , 0.408d , 0.9966d)}
	    {(-0.4738d , -0.5838d , 1.0445d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0987d , -0.5904d , 0.9898d)}
	    {(0.0987d , -0.5904d , 0.9898d)}
	    {(0.172d , -0.7484d , 1.0352d)}
	    {(-0.172d , -0.7484d , 1.0352d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.172d , -0.7484d , 1.0352d)}
	    {(-0.2001d , -0.6014d , 1.4455d)}
	    {(-0.3516d , -0.4577d , 1.3822d)}
	    {(-0.4738d , -0.5838d , 1.0445d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3184d , -0.4397d , 0.6931d)}
	    {(-0.0987d , -0.5904d , 0.9898d)}
	    {(-0.172d , -0.7484d , 1.0352d)}
	    {(-0.4738d , -0.5838d , 1.0445d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3508d , 0.3417d , 0.6373d)}
	    {(-0.2765d , 0.4221d , 0.95d)}
	    {(-0.3184d , -0.4397d , 0.6931d)}
	    {(-0.4362d , -0.382d , 0.6332d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.4114d , 0.408d , 0.9966d)}
	    {(-0.3992d , 0.3302d , 0.6563d)}
	    {(-0.4923d , -0.4787d , 0.6521d)}
	    {(-0.4738d , -0.5838d , 1.0445d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.4923d , -0.4787d , 0.6521d)}
	    {(-0.4362d , -0.382d , 0.6332d)}
	    {(-0.3184d , -0.4397d , 0.6931d)}
	    {(-0.4738d , -0.5838d , 1.0445d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.352d , 0.3417d , 0.6373d)}
	    {(0.4317d , -0.382d , 0.6332d)}
	    {(0.3184d , -0.4397d , 0.6931d)}
	    {(0.2765d , 0.4221d , 0.95d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2411d , 0.5044d , 0.7648d)}
	    {(0.1939d , 0.6304d , 0.6714d)}
	    {(0.2034d , 0.6649d , 0.6778d)}
	    {(0.2934d , 0.4952d , 0.7942d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2411d , 0.5044d , 0.7648d)}
	    {(0.2765d , 0.4221d , 0.95d)}
	    {(0.0958d , 0.5788d , 0.9775d)}
	    {(0.1939d , 0.6304d , 0.6714d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.2502d , 0.1657d , 1.7814d)}
	    {(-0.283d , 0.3303d , 1.6577d)}
	    {(-0.3601d , 0.3276d , 1.6592d)}
	    {(-0.2935d , 0.1697d , 1.7931d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.1103d , 0.271d , 2.2965d)}
	    {(0.0347d , 0.3793d , 2.3707d)}
	    {(0.055d , -0.3786d , 2.0296d)}
	    {(0.1875d , -0.2734d , 1.8916d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2934d , 0.4952d , 0.7942d)}
	    {(0.2034d , 0.6649d , 0.6778d)}
	    {(0.1669d , 0.6304d , 1.0138d)}
	    {(0.4114d , 0.408d , 0.9966d)}))
        (Polygon (color 0.894152
	    0.866683
	    0.772555)
	  (points {(-0.3316d , 0.3281d , 1.6136d)}
	    {(-0.3601d , 0.3276d , 1.6592d)}
	    {(-0.2513d , 0.4676d , 1.8034d)}
	    {(-0.2253d , 0.51d , 1.8009d)}))
        (Polygon (color 0.894152
	    0.866683
	    0.772555)
	  (points {(-0.2253d , 0.51d , 1.8009d)}
	    {(-0.2513d , 0.4676d , 1.8034d)}
	    {(-0.2516d , 0.298d , 1.973d)}
	    {(-0.2257d , 0.2897d , 2.0213d)}))
        (Polygon (color 0.894152
	    0.866683
	    0.772555)
	  (points {(0.2736d , 0.2943d , 1.9601d)}
	    {(0.2516d , 0.2869d , 2.0067d)}
	    {(0.2677d , 0.1219d , 1.7858d)}
	    {(0.286d , 0.1673d , 1.7901d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.2736d , 0.2943d , 1.9601d)}
	    {(0.286d , 0.1673d , 1.7901d)}
	    {(0.2521d , 0.1652d , 1.7843d)}
	    {(0.1949d , 0.2894d , 1.9471d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.2614d , 0.2936d , 1.9646d)}
	    {(0.2955d , 0.4692d , 1.8169d)}
	    {(0.2289d , 0.4649d , 1.7994d)}
	    {(0.1949d , 0.2894d , 1.9471d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.1426d , 0.3279d , 2.2504d)}
	    {(0.0633d , 0.4981d , 2.2648d)}
	    {(0.0549d , 0.3459d , 2.1027d)}
	    {(0.1111d , 0.3105d , 2.0835d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(5.0d-4 , 0.4274d , 2.3261d)}
	    {(-0.0112d , 0.39d , 2.3958d)}
	    {(-0.0495d , 0.39d , 2.3958d)}
	    {(-0.0379d , 0.4274d , 2.3261d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0788d , 0.3561d , 2.6267d)}
	    {(0.0606d , 0.3561d , 2.6267d)}
	    {(0.0121d , 0.39d , 2.3958d)}
	    {(0.0504d , 0.39d , 2.3958d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0597d , 0.373d , 2.6388d)}
	    {(-0.0112d , 0.4257d , 2.4214d)}
	    {(-0.0557d , 0.4381d , 2.4142d)}
	    {(-0.0808d , 0.3789d , 2.6354d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0449d , 0.4755d , 2.3445d)}
	    {(0.0451d , 0.5134d , 2.3226d)}
	    {(-0.0442d , 0.5134d , 2.3226d)}
	    {(-0.044d , 0.4755d , 2.3445d)}
	    {(5.0d-4 , 0.4631d , 2.3517d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0121d , 0.39d , 2.3958d)}
	    {(0.0121d , 0.4257d , 2.4214d)}
	    {(5.0d-4 , 0.4631d , 2.3517d)}
	    {(5.0d-4 , 0.4274d , 2.3261d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0112d , 0.4257d , 2.4214d)}
	    {(-0.0112d , 0.39d , 2.3958d)}
	    {(5.0d-4 , 0.4274d , 2.3261d)}
	    {(5.0d-4 , 0.4631d , 2.3517d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0557d , 0.4381d , 2.4142d)}
	    {(-0.044d , 0.4755d , 2.3445d)}
	    {(-0.0379d , 0.4274d , 2.3261d)}
	    {(-0.0495d , 0.39d , 2.3958d)}))
        (Polygon (color 0.894152
	    0.866683
	    0.772555)
	  (points {(0.2444d , 0.5117d , 1.8062d)}
	    {(0.2516d , 0.2869d , 2.0067d)}
	    {(0.2736d , 0.2943d , 1.9601d)}
	    {(0.268d , 0.4673d , 1.8058d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0828d , 0.4245d , 2.1762d)}
	    {(0.1356d , 0.3617d , 2.2125d)}
	    {(-0.1346d , 0.3617d , 2.2125d)}
	    {(-0.0819d , 0.4245d , 2.1762d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0597d , 0.373d , 2.6388d)}
	    {(-0.0597d , 0.3561d , 2.6267d)}
	    {(-0.0112d , 0.39d , 2.3958d)}
	    {(-0.0112d , 0.4257d , 2.4214d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0112d , 0.4257d , 2.4214d)}
	    {(5.0d-4 , 0.4631d , 2.3517d)}
	    {(-0.044d , 0.4755d , 2.3445d)}
	    {(-0.0557d , 0.4381d , 2.4142d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0504d , 0.39d , 2.3958d)}
	    {(0.0121d , 0.39d , 2.3958d)}
	    {(5.0d-4 , 0.4274d , 2.3261d)}
	    {(0.0388d , 0.4274d , 2.3261d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0779d , 0.3561d , 2.6267d)}
	    {(-0.0808d , 0.3789d , 2.6354d)}
	    {(-0.0557d , 0.4381d , 2.4142d)}
	    {(-0.0495d , 0.39d , 2.3958d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0442d , 0.5134d , 2.3226d)}
	    {(0.0451d , 0.5134d , 2.3226d)}
	    {(0.0697d , 0.5303d , 2.264d)}
	    {(-0.0688d , 0.5303d , 2.264d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0597d , 0.3561d , 2.6267d)}
	    {(-0.0779d , 0.3561d , 2.6267d)}
	    {(-0.0495d , 0.39d , 2.3958d)}
	    {(-0.0112d , 0.39d , 2.3958d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.044d , 0.4755d , 2.3445d)}
	    {(-0.0442d , 0.5134d , 2.3226d)}
	    {(-0.0688d , 0.5303d , 2.264d)}
	    {(-0.0379d , 0.4274d , 2.3261d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0697d , 0.5303d , 2.264d)}
	    {(0.0388d , 0.4274d , 2.3261d)}
	    {(0.1356d , 0.3617d , 2.2125d)}
	    {(0.0828d , 0.4245d , 2.1762d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.1356d , 0.3617d , 2.2125d)}
	    {(0.0388d , 0.4274d , 2.3261d)}
	    {(0.0347d , 0.3793d , 2.3707d)}
	    {(0.1103d , 0.271d , 2.2965d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.0633d , 0.4981d , 2.2648d)}
	    {(0.0633d , 0.5102d , 2.217d)}
	    {(-0.0623d , 0.5102d , 2.217d)}
	    {(-0.0623d , 0.4981d , 2.2648d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0688d , 0.5303d , 2.264d)}
	    {(0.0697d , 0.5303d , 2.264d)}
	    {(0.0828d , 0.4245d , 2.1762d)}
	    {(-0.0819d , 0.4245d , 2.1762d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0379d , 0.4274d , 2.3261d)}
	    {(-0.0688d , 0.5303d , 2.264d)}
	    {(-0.0819d , 0.4245d , 2.1762d)}
	    {(-0.1346d , 0.3617d , 2.2125d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0633d , 0.5102d , 2.217d)}
	    {(0.1426d , 0.3771d , 2.2026d)}
	    {(0.2516d , 0.2869d , 2.0067d)}
	    {(0.2444d , 0.5117d , 1.8062d)}
	    {(0.11d , 0.5467d , 1.8187d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.268d , 0.4673d , 1.8058d)}
	    {(0.2736d , 0.2943d , 1.9601d)}
	    {(0.1949d , 0.2894d , 1.9471d)}
	    {(0.2289d , 0.4649d , 1.7994d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1417d , 0.3277d , 2.2502d)}
	    {(-0.0623d , 0.4981d , 2.2648d)}
	    {(-0.0623d , 0.5102d , 2.217d)}
	    {(-0.1417d , 0.377d , 2.2024d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0623d , 0.5102d , 2.217d)}
	    {(0.0633d , 0.5102d , 2.217d)}
	    {(0.11d , 0.5467d , 1.8187d)}
	    {(-0.109d , 0.5467d , 1.8187d)}))
        (Polygon (color 0.894152
	    0.866683
	    0.772555)
	  (points {(0.268d , 0.4673d , 1.8058d)}
	    {(0.3623d , 0.33d , 1.6638d)}
	    {(0.3309d , 0.3332d , 1.6218d)}
	    {(0.2444d , 0.5117d , 1.8062d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.3344d , 0.3341d , 1.6781d)}
	    {(0.2955d , 0.4692d , 1.8169d)}
	    {(0.2614d , 0.2936d , 1.9646d)}
	    {(0.3186d , 0.1694d , 1.8019d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.1949d , 0.2894d , 1.9471d)}
	    {(0.2521d , 0.1652d , 1.7843d)}
	    {(0.3186d , 0.1694d , 1.8019d)}
	    {(0.2614d , 0.2936d , 1.9646d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.3186d , 0.1694d , 1.8019d)}
	    {(0.2521d , 0.1652d , 1.7843d)}
	    {(0.2678d , 0.3298d , 1.6606d)}
	    {(0.3344d , 0.3341d , 1.6781d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.3623d , 0.33d , 1.6638d)}
	    {(0.2678d , 0.3298d , 1.6606d)}
	    {(0.2521d , 0.1652d , 1.7843d)}
	    {(0.286d , 0.1673d , 1.7901d)}))
        (Polygon (color 0.894152
	    0.866683
	    0.772555)
	  (points {(0.3309d , 0.3332d , 1.6218d)}
	    {(0.3623d , 0.33d , 1.6638d)}
	    {(0.286d , 0.1673d , 1.7901d)}
	    {(0.2677d , 0.1219d , 1.7858d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1402d , 0.591d , 1.3682d)}
	    {(0.11d , 0.5467d , 1.8187d)}
	    {(0.2444d , 0.5117d , 1.8062d)}
	    {(0.3309d , 0.3332d , 1.6218d)}
	    {(0.3809d , 0.3492d , 1.3716d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2253d , 0.51d , 1.8009d)}
	    {(-0.2257d , 0.2897d , 2.0213d)}
	    {(-0.1417d , 0.377d , 2.2024d)}
	    {(-0.0623d , 0.5102d , 2.217d)}
	    {(-0.109d , 0.5467d , 1.8187d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.2272d , 0.4654d , 1.7965d)}
	    {(-0.157d , 0.2899d , 1.9442d)}
	    {(-0.2516d , 0.298d , 1.973d)}
	    {(-0.2513d , 0.4676d , 1.8034d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.2198d , 0.2933d , 1.9723d)}
	    {(-0.157d , 0.2899d , 1.9442d)}
	    {(-0.2272d , 0.4654d , 1.7965d)}
	    {(-0.29d , 0.4688d , 1.8246d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1393d , 0.591d , 1.3682d)}
	    {(-0.109d , 0.5467d , 1.8187d)}
	    {(0.11d , 0.5467d , 1.8187d)}
	    {(0.1402d , 0.591d , 1.3682d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.1426d , 0.3771d , 2.2026d)}
	    {(0.1426d , 0.3279d , 2.2504d)}
	    {(0.2187d , -0.2268d , 1.8673d)}
	    {(0.2485d , -0.1775d , 1.8195d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.1426d , 0.3279d , 2.2504d)}
	    {(0.1111d , 0.3105d , 2.0835d)}
	    {(0.2027d , -0.1746d , 1.859d)}
	    {(0.2187d , -0.2268d , 1.8673d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1669d , 0.6304d , 1.0138d)}
	    {(0.1402d , 0.591d , 1.3682d)}
	    {(0.3809d , 0.3492d , 1.3716d)}
	    {(0.4114d , 0.408d , 0.9966d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2677d , 0.1219d , 1.7858d)}
	    {(0.2516d , 0.2869d , 2.0067d)}
	    {(0.1426d , 0.3771d , 2.2026d)}
	    {(0.2485d , -0.1775d , 1.8195d)}
	    {(0.2955d , -0.2774d , 1.5807d)}))
        (Polygon (color 0.894152
	    0.866683
	    0.772555)
	  (points {(-0.2257d , 0.2897d , 2.0213d)}
	    {(-0.2516d , 0.298d , 1.973d)}
	    {(-0.2935d , 0.1697d , 1.7931d)}
	    {(-0.2801d , 0.123d , 1.7875d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1393d , 0.591d , 1.3682d)}
	    {(0.1402d , 0.591d , 1.3682d)}
	    {(0.1669d , 0.6304d , 1.0138d)}
	    {(-0.1669d , 0.6304d , 1.0138d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.3459d , 0.3337d , 1.6858d)}
	    {(-0.283d , 0.3303d , 1.6577d)}
	    {(-0.2502d , 0.1657d , 1.7814d)}
	    {(-0.3131d , 0.1691d , 1.8096d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.0623d , 0.4981d , 2.2648d)}
	    {(-0.0536d , 0.3459d , 2.1027d)}
	    {(0.0549d , 0.3459d , 2.1027d)}
	    {(0.0633d , 0.4981d , 2.2648d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0338d , 0.3793d , 2.3707d)}
	    {(-0.0379d , 0.4274d , 2.3261d)}
	    {(-0.1346d , 0.3617d , 2.2125d)}
	    {(-0.1092d , 0.271d , 2.2965d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.0536d , 0.3459d , 2.1027d)}
	    {(-0.0623d , 0.4981d , 2.2648d)}
	    {(-0.1417d , 0.3277d , 2.2502d)}
	    {(-0.1098d , 0.3105d , 2.0835d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.268d , 0.4673d , 1.8058d)}
	    {(0.2289d , 0.4649d , 1.7994d)}
	    {(0.2678d , 0.3298d , 1.6606d)}
	    {(0.3623d , 0.33d , 1.6638d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(0.2289d , 0.4649d , 1.7994d)}
	    {(0.2955d , 0.4692d , 1.8169d)}
	    {(0.3344d , 0.3341d , 1.6781d)}
	    {(0.2678d , 0.3298d , 1.6606d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.2272d , 0.4654d , 1.7965d)}
	    {(-0.283d , 0.3303d , 1.6577d)}
	    {(-0.3459d , 0.3337d , 1.6858d)}
	    {(-0.29d , 0.4688d , 1.8246d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.2198d , 0.2933d , 1.9723d)}
	    {(-0.3131d , 0.1691d , 1.8096d)}
	    {(-0.2502d , 0.1657d , 1.7814d)}
	    {(-0.157d , 0.2899d , 1.9442d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.3459d , 0.3337d , 1.6858d)}
	    {(-0.3131d , 0.1691d , 1.8096d)}
	    {(-0.2198d , 0.2933d , 1.9723d)}
	    {(-0.29d , 0.4688d , 1.8246d)}))
        (Polygon (color 0.0
	    0.0
	    0.251007)
	  (points {(-0.2516d , 0.298d , 1.973d)}
	    {(-0.157d , 0.2899d , 1.9442d)}
	    {(-0.2502d , 0.1657d , 1.7814d)}
	    {(-0.2935d , 0.1697d , 1.7931d)}))
        (Polygon (color 0.894152
	    0.866683
	    0.772555)
	  (points {(-0.2801d , 0.123d , 1.7875d)}
	    {(-0.2935d , 0.1697d , 1.7931d)}
	    {(-0.3601d , 0.3276d , 1.6592d)}
	    {(-0.3316d , 0.3281d , 1.6136d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2632d , -0.4462d , 1.6884d)}
	    {(0.2955d , -0.2774d , 1.5807d)}
	    {(0.2485d , -0.1775d , 1.8195d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2253d , 0.51d , 1.8009d)}
	    {(-0.109d , 0.5467d , 1.8187d)}
	    {(-0.1393d , 0.591d , 1.3682d)}
	    {(-0.3797d , 0.3492d , 1.3716d)}
	    {(-0.3316d , 0.3281d , 1.6136d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.1875d , -0.2734d , 1.8916d)}
	    {(0.055d , -0.3786d , 2.0296d)}
	    {(0.1788d , -0.5231d , 1.7593d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2677d , 0.1219d , 1.7858d)}
	    {(0.2955d , -0.2774d , 1.5807d)}
	    {(0.3864d , -0.4577d , 1.3822d)}
	    {(0.3809d , 0.3492d , 1.3716d)}
	    {(0.3309d , 0.3332d , 1.6218d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.352d , 0.3417d , 0.6373d)}
	    {(0.2765d , 0.4221d , 0.95d)}
	    {(0.2411d , 0.5044d , 0.7648d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0338d , 0.3793d , 2.3707d)}
	    {(-0.1092d , 0.271d , 2.2965d)}
	    {(-0.1888d , -0.2734d , 1.8916d)}
	    {(-0.0563d , -0.3786d , 2.0296d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1939d , 0.6304d , 0.6714d)}
	    {(0.0958d , 0.5788d , 0.9775d)}
	    {(-0.0958d , 0.5788d , 0.9775d)}
	    {(-0.1939d , 0.6304d , 0.6714d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.2231d , -0.2508d , 1.7676d)}
	    {(-0.1888d , -0.2734d , 1.8916d)}
	    {(-0.1092d , 0.271d , 2.2965d)}
	    {(-0.1346d , 0.3617d , 2.2125d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.2011d , -0.6014d , 1.4455d)}
	    {(0.2632d , -0.4462d , 1.6884d)}
	    {(0.1788d , -0.5231d , 1.7593d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1417d , 0.377d , 2.2024d)}
	    {(-0.2257d , 0.2897d , 2.0213d)}
	    {(-0.2801d , 0.123d , 1.7875d)}
	    {(-0.2946d , -0.2774d , 1.5807d)}
	    {(-0.2365d , -0.1777d , 1.8194d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2034d , 0.6649d , 0.6778d)}
	    {(0.1939d , 0.6304d , 0.6714d)}
	    {(-0.1939d , 0.6304d , 0.6714d)}
	    {(-0.2034d , 0.6649d , 0.6778d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.4114d , 0.408d , 0.9966d)}
	    {(0.3809d , 0.3492d , 1.3716d)}
	    {(0.3864d , -0.4577d , 1.3822d)}
	    {(0.4738d , -0.5838d , 1.0445d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2575d , 0.5044d , 0.7648d)}
	    {(-0.2765d , 0.4221d , 0.95d)}
	    {(-0.3508d , 0.3417d , 0.6373d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.2623d , -0.4462d , 1.6884d)}
	    {(-0.2001d , -0.6014d , 1.4455d)}
	    {(-0.1778d , -0.5231d , 1.7593d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3316d , 0.3281d , 1.6136d)}
	    {(-0.3797d , 0.3492d , 1.3716d)}
	    {(-0.3516d , -0.4577d , 1.3822d)}
	    {(-0.2946d , -0.2774d , 1.5807d)}
	    {(-0.2801d , 0.123d , 1.7875d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.352d , 0.3417d , 0.6373d)}
	    {(0.4004d , 0.3302d , 0.6563d)}
	    {(0.4877d , -0.4787d , 0.6521d)}
	    {(0.4317d , -0.382d , 0.6332d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.4877d , -0.4787d , 0.6521d)}
	    {(0.4738d , -0.5838d , 1.0445d)}
	    {(0.3184d , -0.4397d , 0.6931d)}
	    {(0.4317d , -0.382d , 0.6332d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2575d , 0.5044d , 0.7648d)}
	    {(-0.3508d , 0.3417d , 0.6373d)}
	    {(-0.3992d , 0.3302d , 0.6563d)}
	    {(-0.3083d , 0.4952d , 0.7942d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3184d , -0.4397d , 0.6931d)}
	    {(0.4738d , -0.5838d , 1.0445d)}
	    {(0.172d , -0.7484d , 1.0352d)}
	    {(0.0987d , -0.5904d , 0.9898d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0958d , 0.5788d , 0.9775d)}
	    {(0.2765d , 0.4221d , 0.95d)}
	    {(0.3184d , -0.4397d , 0.6931d)}
	    {(0.0987d , -0.5904d , 0.9898d)}
	    {(-0.0987d , -0.5904d , 0.9898d)}
	    {(-0.3184d , -0.4397d , 0.6931d)}
	    {(-0.2765d , 0.4221d , 0.95d)}
	    {(-0.0958d , 0.5788d , 0.9775d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3992d , 0.3302d , 0.6563d)}
	    {(-0.3508d , 0.3417d , 0.6373d)}
	    {(-0.4362d , -0.382d , 0.6332d)}
	    {(-0.4923d , -0.4787d , 0.6521d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.0549d , 0.3459d , 2.1027d)}
	    {(-0.0536d , 0.3459d , 2.1027d)}
	    {(-0.1098d , 0.3105d , 2.0835d)}
	    {(-0.1917d , -0.1746d , 1.859d)}
	    {(-0.2264d , -0.4152d , 1.5642d)}
	    {(0.2278d , -0.4152d , 1.5642d)}
	    {(0.2027d , -0.1746d , 1.859d)}
	    {(0.1111d , 0.3105d , 2.0835d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.0563d , -0.3786d , 2.0296d)}
	    {(-0.1888d , -0.2734d , 1.8916d)}
	    {(-0.1778d , -0.5231d , 1.7593d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(-0.2231d , -0.2508d , 1.7676d)}
	    {(-0.2264d , -0.4152d , 1.5642d)}
	    {(-0.1778d , -0.5231d , 1.7593d)}
	    {(-0.1888d , -0.2734d , 1.8916d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.236d , -0.2508d , 1.7676d)}
	    {(0.1875d , -0.2734d , 1.8916d)}
	    {(0.1788d , -0.5231d , 1.7593d)}
	    {(0.2278d , -0.4152d , 1.5642d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0449d , 0.4755d , 2.3445d)}
	    {(0.0566d , 0.4381d , 2.4142d)}
	    {(0.0504d , 0.39d , 2.3958d)}
	    {(0.0388d , 0.4274d , 2.3261d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0697d , 0.5303d , 2.264d)}
	    {(0.0451d , 0.5134d , 2.3226d)}
	    {(0.0449d , 0.4755d , 2.3445d)}
	    {(0.0388d , 0.4274d , 2.3261d)}))
        (Polygon (color 1.0
	    0.937248
	    0.690148)
	  (points {(0.0606d , 0.3561d , 2.6267d)}
	    {(0.0606d , 0.373d , 2.6388d)}
	    {(0.0121d , 0.4257d , 2.4214d)}
	    {(0.0121d , 0.39d , 2.3958d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1878d , 0.6552d , 0.5801d)}
	    {(0.1203d , 0.6039d , 1.0442d)}
	    {(0.2456d , 0.3511d , 1.0537d)}
	    {(0.3835d , 0.4214d , 0.6004d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1203d , 0.6039d , 1.0442d)}
	    {(-0.1878d , 0.6552d , 0.5801d)}
	    {(-0.3835d , 0.4214d , 0.6004d)}
	    {(-0.2456d , 0.3511d , 1.0537d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3832d , -0.705d , 0.9306d)}
	    {(0.3454d , -0.6415d , 0.8999d)}
	    {(0.2538d , -0.7392d , 0.8999d)}
	    {(0.2916d , -0.8026d , 0.9306d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3454d , -0.6415d , 0.8999d)}
	    {(0.2646d , -0.6729d , 0.9213d)}
	    {(0.2253d , -0.7309d , 0.9202d)}
	    {(0.2538d , -0.7392d , 0.8999d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.468d , -0.4735d , 0.5979d)}
	    {(0.2903d , -0.5923d , 1.0064d)}
	    {(0.2646d , -0.6729d , 0.9213d)}
	    {(0.2748d , -0.6529d , 0.6754d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3454d , -0.6415d , 0.8999d)}
	    {(0.3834d , -0.6421d , 0.5849d)}
	    {(0.2748d , -0.6529d , 0.6754d)}
	    {(0.2646d , -0.6729d , 0.9213d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3832d , -0.705d , 0.9306d)}
	    {(0.629d , -0.9458d , 0.6083d)}
	    {(0.5756d , -0.8926d , 0.5759d)}
	    {(0.3454d , -0.6415d , 0.8999d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1878d , 0.6552d , 0.5801d)}
	    {(0.3835d , 0.4214d , 0.6004d)}
	    {(0.4121d , 0.432d , -0.6073d)}
	    {(0.1384d , 0.764d , -0.605d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1878d , 0.6552d , 0.5801d)}
	    {(0.1878d , 0.6552d , 0.5801d)}
	    {(0.1384d , 0.764d , -0.605d)}
	    {(-0.1384d , 0.764d , -0.605d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2456d , 0.3511d , 1.0537d)}
	    {(0.1203d , 0.6039d , 1.0442d)}
	    {(-0.1203d , 0.6039d , 1.0442d)}
	    {(-0.2456d , 0.3511d , 1.0537d)}
	    {(-0.2903d , -0.5923d , 1.0064d)}
	    {(-0.1102d , -0.8167d , 1.0017d)}
	    {(0.1102d , -0.8167d , 1.0017d)}
	    {(0.2903d , -0.5923d , 1.0064d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1102d , -0.8167d , 1.0017d)}
	    {(-0.2903d , -0.5923d , 1.0064d)}
	    {(-0.2646d , -0.6729d , 0.9213d)}
	    {(-0.2253d , -0.7309d , 0.9202d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.4121d , 0.432d , -0.6073d)}
	    {(0.3835d , 0.4214d , 0.6004d)}
	    {(0.468d , -0.4735d , 0.5979d)}
	    {(0.3842d , -0.4563d , -0.6112d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1935d , -0.8194d , 0.5815d)}
	    {(0.1102d , -0.8167d , 1.0017d)}
	    {(-0.1102d , -0.8167d , 1.0017d)}
	    {(-0.1935d , -0.8194d , 0.5815d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3835d , 0.4214d , 0.6004d)}
	    {(-0.1878d , 0.6552d , 0.5801d)}
	    {(-0.1384d , 0.764d , -0.605d)}
	    {(-0.4121d , 0.4632d , -0.6073d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2748d , -0.6529d , 0.6754d)}
	    {(-0.2646d , -0.6729d , 0.9213d)}
	    {(-0.2903d , -0.5923d , 1.0064d)}
	    {(-0.468d , -0.4735d , 0.5979d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1316d , 0.7702d , -0.9359d)}
	    {(-0.3989d , 0.452d , -0.9389d)}
	    {(-0.4121d , 0.4632d , -0.6073d)}
	    {(-0.1384d , 0.764d , -0.605d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3989d , 0.4207d , -0.9389d)}
	    {(0.4121d , 0.432d , -0.6073d)}
	    {(0.3842d , -0.4563d , -0.6112d)}
	    {(0.3708d , -0.4451d , -0.9428d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3842d , -0.4563d , -0.6112d)}
	    {(0.468d , -0.4735d , 0.5979d)}
	    {(0.1935d , -0.8194d , 0.5815d)}
	    {(0.2084d , -0.829d , -0.6031d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3835d , 0.4214d , 0.6004d)}
	    {(-0.4121d , 0.4632d , -0.6073d)}
	    {(-0.3842d , -0.4563d , -0.6112d)}
	    {(-0.468d , -0.4735d , 0.5979d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1311d , 0.7588d , -1.957d)}
	    {(0.1316d , 0.7702d , -0.9359d)}
	    {(0.3989d , 0.4207d , -0.9389d)}
	    {(0.3332d , 0.3786d , -1.957d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1311d , 0.7588d , -1.957d)}
	    {(-0.1316d , 0.7702d , -0.9359d)}
	    {(0.1316d , 0.7702d , -0.9359d)}
	    {(0.1311d , 0.7588d , -1.957d)}
	    {(0.0437d , 0.7588d , -1.957d)}
	    {(-0.0437d , 0.7588d , -1.957d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0437d , 0.7588d , -1.957d)}
	    {(0.0437d , 0.7588d , -1.957d)}
	    {(0.0316d , 0.7967d , -2.3462d)}
	    {(-0.0316d , 0.7967d , -2.3462d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2084d , -0.829d , -0.6031d)}
	    {(0.1659d , -0.8519d , -0.7148d)}
	    {(0.1852d , -0.8596d , -0.8871d)}
	    {(0.1982d , -0.8335d , -0.9357d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2084d , -0.829d , -0.6031d)}
	    {(-0.0695d , -0.829d , -0.6031d)}
	    {(0.0695d , -0.829d , -0.6031d)}
	    {(0.2084d , -0.829d , -0.6031d)}
	    {(0.1935d , -0.8194d , 0.5815d)}
	    {(-0.1935d , -0.8194d , 0.5815d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.4121d , 0.4632d , -0.6073d)}
	    {(-0.3989d , 0.452d , -0.9389d)}
	    {(-0.3708d , -0.4451d , -0.9428d)}
	    {(-0.3842d , -0.4563d , -0.6112d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2053d , -0.8613d , -0.9279d)}
	    {(0.2489d , -0.8468d , -1.1261d)}
	    {(0.1684d , -0.8547d , -1.1324d)}
	    {(0.1315d , -0.8891d , -0.9275d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.266d , -0.831d , -1.2161d)}
	    {(0.3428d , -1.1688d , -1.289d)}
	    {(0.3416d , -1.1558d , -1.4871d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.3416d , -1.1558d , -1.4871d)}
	    {(0.3428d , -1.1688d , -1.289d)}
	    {(0.2577d , -1.1746d , -1.3124d)}
	    {(0.2643d , -1.1616d , -1.5106d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1547d , 0.6858d , -2.4669d)}
	    {(0.1311d , 0.7588d , -1.957d)}
	    {(0.3332d , 0.3786d , -1.957d)}
	    {(0.2284d , 0.2601d , -2.4959d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0695d , -0.829d , -0.6031d)}
	    {(-0.0695d , -0.829d , -0.6031d)}
	    {(-0.0661d , -0.9103d , -0.9357d)}
	    {(0.0661d , -0.9103d , -0.9357d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1982d , -0.8335d , -0.9357d)}
	    {(-0.2084d , -0.829d , -0.6031d)}
	    {(-0.3842d , -0.4563d , -0.6112d)}
	    {(-0.3708d , -0.4451d , -0.9428d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0695d , -0.829d , -0.6031d)}
	    {(-0.0837d , -0.8882d , -0.7171d)}
	    {(-0.1063d , -0.8961d , -0.8894d)}
	    {(-0.0661d , -0.9103d , -0.9357d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0437d , 0.7588d , -1.957d)}
	    {(-0.0956d , 0.6968d , -2.5298d)}
	    {(-0.1547d , 0.6858d , -2.4669d)}
	    {(-0.1311d , 0.7588d , -1.957d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0316d , 0.7967d , -2.3462d)}
	    {(-0.0241d , 0.7577d , -2.7037d)}
	    {(-0.0956d , 0.6968d , -2.5298d)}
	    {(-0.0437d , 0.7588d , -1.957d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0316d , 0.7967d , -2.3462d)}
	    {(0.0241d , 0.7577d , -2.7037d)}
	    {(0.0241d , 0.9147d , -2.963d)}
	    {(0.0172d , 0.9262d , -2.8883d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3332d , 0.3786d , -1.957d)}
	    {(-0.1311d , 0.7588d , -1.957d)}
	    {(-0.1547d , 0.6858d , -2.4669d)}
	    {(-0.2284d , 0.2601d , -2.4959d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3708d , -0.4451d , -0.9428d)}
	    {(0.1982d , -0.8335d , -0.9357d)}
	    {(0.1974d , -0.8339d , -1.9164d)}
	    {(0.3047d , -0.4028d , -1.9545d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1547d , 0.6858d , -2.4669d)}
	    {(-0.0956d , 0.6968d , -2.5298d)}
	    {(-0.0351d , 0.5782d , -2.8095d)}
	    {(-0.058d , 0.5212d , -2.8095d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0193d , 0.6813d , -2.97d)}
	    {(0.0193d , 0.8383d , -3.2293d)}
	    {(0.0241d , 0.9147d , -2.963d)}
	    {(0.0241d , 0.7577d , -2.7037d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1974d , -0.8339d , -1.9164d)}
	    {(0.1982d , -0.8335d , -0.9357d)}
	    {(0.0661d , -0.9103d , -0.9357d)}
	    {(0.0658d , -0.9108d , -1.6299d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2284d , 0.2601d , -2.4959d)}
	    {(-0.1547d , 0.6858d , -2.4669d)}
	    {(-0.058d , 0.5212d , -2.8095d)}
	    {(-0.1646d , 0.1734d , -2.8857d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2284d , 0.2601d , -2.4959d)}
	    {(0.2284d , -0.3529d , -2.4959d)}
	    {(0.1886d , -0.2416d , -2.8799d)}
	    {(0.1646d , 0.1734d , -2.8857d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0661d , -0.9103d , -0.9357d)}
	    {(-0.1982d , -0.8335d , -0.9357d)}
	    {(-0.1974d , -0.8339d , -1.9164d)}
	    {(-0.0658d , -0.9108d , -1.6299d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3047d , -0.4028d , -1.9545d)}
	    {(0.1974d , -0.8339d , -1.9164d)}
	    {(0.2083d , -0.733d , -2.4534d)}
	    {(0.2284d , -0.3529d , -2.4959d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3708d , -0.4451d , -0.9428d)}
	    {(-0.3048d , -0.4028d , -1.9545d)}
	    {(-0.1974d , -0.8339d , -1.9164d)}
	    {(-0.1982d , -0.8335d , -0.9357d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1646d , 0.1734d , -2.8857d)}
	    {(0.1274d , 0.1166d , -3.0754d)}
	    {(0.0384d , 0.2849d , -3.1882d)}
	    {(0.058d , 0.5212d , -2.8095d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2284d , 0.2601d , -2.4959d)}
	    {(-0.2284d , -0.3529d , -2.4959d)}
	    {(-0.3048d , -0.4028d , -1.9545d)}
	    {(-0.3332d , 0.3786d , -1.957d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0351d , 0.5782d , -2.8095d)}
	    {(0.058d , 0.5212d , -2.8095d)}
	    {(0.0384d , 0.2849d , -3.1882d)}
	    {(0.0128d , 0.3393d , -3.2333d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0128d , 0.3393d , -3.2333d)}
	    {(-0.0128d , 0.3393d , -3.2333d)}
	    {(-0.0128d , 0.3979d , -3.3231d)}
	    {(0.0128d , 0.3979d , -3.3231d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0128d , 0.3979d , -3.3231d)}
	    {(-0.0128d , 0.3979d , -3.3231d)}
	    {(-0.0128d , 0.4852d , -3.4604d)}
	    {(0.0128d , 0.4852d , -3.4604d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1646d , 0.1734d , -2.8857d)}
	    {(0.1886d , -0.2416d , -2.8799d)}
	    {(0.1274d , -0.1695d , -3.0872d)}
	    {(0.1274d , 0.1166d , -3.0754d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0384d , 0.2849d , -3.1882d)}
	    {(0.0384d , 0.2849d , -3.1882d)}
	    {(0.026d , 0.2274d , -3.2822d)}
	    {(-0.026d , 0.2274d , -3.2822d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1886d , -0.2416d , -2.8799d)}
	    {(0.2284d , -0.3529d , -2.4959d)}
	    {(0.2083d , -0.733d , -2.4534d)}
	    {(0.1564d , -0.5989d , -2.7656d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0384d , 0.2849d , -3.1882d)}
	    {(-0.026d , 0.2274d , -3.2822d)}
	    {(-0.0776d , 0.0699d , -3.2843d)}
	    {(-0.1274d , 0.1166d , -3.0754d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2284d , 0.2601d , -2.4959d)}
	    {(-0.1646d , 0.1734d , -2.8857d)}
	    {(-0.1886d , -0.2416d , -2.8799d)}
	    {(-0.2284d , -0.3529d , -2.4959d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0776d , 0.0699d , -3.2843d)}
	    {(0.1274d , 0.1166d , -3.0754d)}
	    {(0.1274d , -0.1695d , -3.0872d)}
	    {(0.0776d , -0.0877d , -3.2843d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3048d , -0.4028d , -1.9545d)}
	    {(-0.2284d , -0.3529d , -2.4959d)}
	    {(-0.2083d , -0.7605d , -2.4534d)}
	    {(-0.1974d , -0.8339d , -1.9164d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0776d , 0.0699d , -3.2843d)}
	    {(0.0776d , 0.1069d , -3.5825d)}
	    {(0.026d , 0.4306d , -3.4723d)}
	    {(0.026d , 0.2274d , -3.2822d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1564d , -0.5989d , -2.7656d)}
	    {(0.2083d , -0.733d , -2.4534d)}
	    {(0.1608d , -0.9278d , -2.404d)}
	    {(0.0716d , -0.8228d , -2.6739d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1274d , -0.1695d , -3.0872d)}
	    {(0.1886d , -0.2416d , -2.8799d)}
	    {(0.1564d , -0.5989d , -2.7656d)}
	    {(0.0384d , -0.3142d , -3.1648d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1274d , 0.1166d , -3.0754d)}
	    {(-0.0776d , 0.0699d , -3.2843d)}
	    {(-0.0776d , -0.0877d , -3.2843d)}
	    {(-0.1274d , -0.1695d , -3.0872d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2083d , -0.7605d , -2.4534d)}
	    {(-0.2284d , -0.3529d , -2.4959d)}
	    {(-0.1886d , -0.2416d , -2.8799d)}
	    {(-0.1357d , -0.5971d , -2.766d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1886d , -0.2416d , -2.8799d)}
	    {(-0.1274d , -0.1695d , -3.0872d)}
	    {(-0.0384d , -0.3142d , -3.1648d)}
	    {(-0.1357d , -0.5971d , -2.766d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0128d , -0.3465d , -3.2296d)}
	    {(0.0716d , -0.8228d , -2.6739d)}
	    {(0.0193d , -0.9638d , -2.7691d)}
	    {(0.0128d , -0.3411d , -3.3135d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0241d , -1.0447d , -2.3795d)}
	    {(0.0241d , -1.3393d , -2.5278d)}
	    {(0.0193d , -1.2416d , -3.0459d)}
	    {(0.0193d , -0.9638d , -2.7691d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0193d , -1.2416d , -3.0459d)}
	    {(0.0241d , -1.3393d , -2.5278d)}
	    {(-0.0241d , -1.3393d , -2.5278d)}
	    {(-0.0193d , -1.2416d , -3.0459d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0128d , -0.3411d , -3.3135d)}
	    {(0.0193d , -0.9638d , -2.7691d)}
	    {(0.0193d , -1.2416d , -3.0459d)}
	    {(0.0128d , -0.6764d , -3.7179d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0193d , -0.9753d , -2.7691d)}
	    {(-0.0128d , -0.3411d , -3.3135d)}
	    {(-0.0128d , -0.6764d , -3.7179d)}
	    {(-0.0193d , -1.2416d , -3.0459d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0193d , -1.2416d , -3.0459d)}
	    {(-0.0193d , -1.2416d , -3.0459d)}
	    {(-0.0128d , -0.6764d , -3.7179d)}
	    {(0.0128d , -0.6764d , -3.7179d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.026d , 0.5416d , -3.7059d)}
	    {(-0.026d , 0.6634d , -4.0775d)}
	    {(-0.0396d , 0.2154d , -4.0727d)}
	    {(-0.0412d , 0.1523d , -3.7012d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0776d , 0.1069d , -3.5825d)}
	    {(0.0776d , -0.1247d , -3.5825d)}
	    {(0.0396d , -0.1974d , -3.7012d)}
	    {(0.0412d , 0.1523d , -3.7012d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0776d , -0.1247d , -3.5825d)}
	    {(0.0776d , -0.0877d , -3.2843d)}
	    {(0.026d , -0.2452d , -3.2822d)}
	    {(0.026d , -0.4473d , -3.4825d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0412d , 0.1523d , -3.7012d)}
	    {(-0.0396d , -0.1974d , -3.7012d)}
	    {(-0.0776d , -0.1247d , -3.5825d)}
	    {(-0.0776d , 0.1069d , -3.5825d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.026d , 0.6634d , -4.0775d)}
	    {(0.026d , 0.3856d , -4.3405d)}
	    {(-0.026d , 0.3856d , -4.3405d)}
	    {(-0.026d , 0.6634d , -4.0775d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0412d , 0.1523d , -3.7012d)}
	    {(-0.0396d , 0.2154d , -4.0727d)}
	    {(-0.0396d , -0.1406d , -4.0727d)}
	    {(-0.0396d , -0.1974d , -3.7012d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0396d , 0.2154d , -4.0727d)}
	    {(-0.026d , 0.6634d , -4.0775d)}
	    {(-0.026d , 0.3856d , -4.3405d)}
	    {(-0.0396d , 0.0926d , -4.3358d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.026d , -0.4473d , -3.4825d)}
	    {(-0.0776d , -0.1247d , -3.5825d)}
	    {(-0.0396d , -0.1974d , -3.7012d)}
	    {(-0.026d , -0.6436d , -3.7508d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0396d , 0.2154d , -4.0727d)}
	    {(0.0396d , -0.1406d , -4.0727d)}
	    {(0.0396d , -0.1085d , -4.3358d)}
	    {(0.0396d , 0.0926d , -4.3358d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0396d , 0.2154d , -4.0727d)}
	    {(-0.0396d , 0.0926d , -4.3358d)}
	    {(-0.0396d , -0.1085d , -4.3358d)}
	    {(-0.0396d , -0.1406d , -4.0727d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.026d , -0.6436d , -3.7508d)}
	    {(0.026d , -0.4473d , -3.4825d)}
	    {(-0.026d , -0.4473d , -3.4825d)}
	    {(-0.026d , -0.6436d , -3.7508d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0396d , -0.1406d , -4.0727d)}
	    {(0.0396d , -0.1974d , -3.7012d)}
	    {(0.026d , -0.6436d , -3.7508d)}
	    {(0.026d , -0.536d , -4.1223d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0396d , -0.1974d , -3.7012d)}
	    {(-0.0396d , -0.1406d , -4.0727d)}
	    {(-0.026d , -0.536d , -4.1223d)}
	    {(-0.026d , -0.6436d , -3.7508d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0396d , -0.1085d , -4.3358d)}
	    {(0.0396d , -0.1406d , -4.0727d)}
	    {(0.026d , -0.536d , -4.1223d)}
	    {(0.026d , -0.304d , -4.3508d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.026d , -0.304d , -4.3508d)}
	    {(0.026d , -0.304d , -4.3508d)}
	    {(0.026d , -0.536d , -4.1223d)}
	    {(-0.026d , -0.536d , -4.1223d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.026d , -0.2452d , -3.2822d)}
	    {(0.0384d , -0.3142d , -3.1648d)}
	    {(-0.0384d , -0.3142d , -3.1648d)}
	    {(-0.026d , -0.2452d , -3.2822d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0351d , 0.5782d , -2.8095d)}
	    {(-0.0128d , 0.3393d , -3.2333d)}
	    {(-0.0384d , 0.2849d , -3.1882d)}
	    {(-0.058d , 0.5212d , -2.8095d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1063d , -0.8961d , -0.8894d)}
	    {(-0.185d , -0.8586d , -0.8875d)}
	    {(-0.1982d , -0.8335d , -0.9357d)}
	    {(-0.0661d , -0.9103d , -0.9357d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1741d , -1.0494d , -0.8902d)}
	    {(-0.2587d , -1.1813d , -1.1723d)}
	    {(-0.1577d , -0.8596d , -1.1327d)}
	    {(-0.1315d , -0.8891d , -0.9275d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2051d , -0.8603d , -0.9283d)}
	    {(-0.2378d , -0.847d , -1.1281d)}
	    {(-0.3441d , -1.1664d , -1.1536d)}
	    {(-0.2501d , -1.0211d , -0.8909d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2378d , -0.847d , -1.1281d)}
	    {(-0.2551d , -0.8315d , -1.219d)}
	    {(-0.341d , -1.1626d , -1.2888d)}
	    {(-0.3441d , -1.1664d , -1.1536d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2587d , -1.1813d , -1.1723d)}
	    {(-0.3441d , -1.1664d , -1.1536d)}
	    {(-0.341d , -1.1626d , -1.2888d)}
	    {(-0.2567d , -1.1744d , -1.3133d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2551d , -0.8315d , -1.219d)}
	    {(-0.3456d , -1.1505d , -1.4855d)}
	    {(-0.341d , -1.1626d , -1.2888d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1758d , -0.8503d , -1.2282d)}
	    {(-0.2692d , -1.1613d , -1.5101d)}
	    {(-0.3456d , -1.1505d , -1.4855d)}
	    {(-0.2551d , -0.8315d , -1.219d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0837d , -0.8882d , -0.7171d)}
	    {(0.0695d , -0.829d , -0.6031d)}
	    {(0.0661d , -0.9103d , -0.9357d)}
	    {(0.1063d , -0.8961d , -0.8894d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3243d , -0.644d , 0.9287d)}
	    {(-0.2646d , -0.6729d , 0.9213d)}
	    {(-0.2748d , -0.6529d , 0.6754d)}
	    {(-0.3761d , -0.6331d , 0.6247d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3243d , -0.644d , 0.9287d)}
	    {(-0.5731d , -0.8714d , 0.617d)}
	    {(-0.6291d , -0.9214d , 0.6497d)}
	    {(-0.3802d , -0.694d , 0.9614d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3802d , -0.694d , 0.9614d)}
	    {(-0.6291d , -0.9214d , 0.6497d)}
	    {(-0.545d , -0.9986d , 0.6544d)}
	    {(-0.292d , -0.7899d , 0.9615d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.355d , -0.6339d , 0.193d)}
	    {(-0.3306d , -0.6995d , 0.5571d)}
	    {(-0.5191d , -0.9264d , 0.6247d)}
	    {(-0.7437d , -1.0903d , 0.1242d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.7437d , -1.0903d , 0.1242d)}
	    {(-0.5191d , -0.9264d , 0.6247d)}
	    {(-0.545d , -0.9986d , 0.6544d)}
	    {(-0.7696d , -1.1625d , 0.1538d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.6291d , -0.9214d , 0.6497d)}
	    {(-0.5731d , -0.8714d , 0.617d)}
	    {(-0.8218d , -1.0515d , 0.1509d)}
	    {(-0.8778d , -1.1014d , 0.1836d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.8218d , -1.0515d , 0.1509d)}
	    {(-0.456d , -0.58d , 0.1978d)}
	    {(-0.4746d , -0.5433d , 0.0365d)}
	    {(-0.8143d , -1.0472d , -0.089d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.7696d , -1.1625d , 0.1538d)}
	    {(-0.8778d , -1.1014d , 0.1836d)}
	    {(-0.8702d , -1.0971d , -0.0563d)}
	    {(-0.7619d , -1.1524d , -0.0964d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.379d , -0.6069d , 0.0236d)}
	    {(-0.736d , -1.0802d , -0.126d)}
	    {(-0.7483d , -1.0505d , -0.4752d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.7619d , -1.1524d , -0.0964d)}
	    {(-0.8702d , -1.0971d , -0.0563d)}
	    {(-0.8701d , -1.0742d , -0.4053d)}
	    {(-0.7741d , -1.1227d , -0.4456d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.8691d , -1.0255d , -0.5508d)}
	    {(-0.8333d , -1.0398d , -0.571d)}
	    {(-0.8474d , -1.0791d , -0.5549d)}
	    {(-0.8996d , -1.0527d , -0.533d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2253d , -0.7309d , 0.9202d)}
	    {(0.1102d , -0.8167d , 1.0017d)}
	    {(0.1935d , -0.8194d , 0.5815d)}
	    {(0.2367d , -0.7359d , 0.6717d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2253d , -0.7309d , 0.9202d)}
	    {(0.2367d , -0.7359d , 0.6717d)}
	    {(0.2975d , -0.738d , 0.5849d)}
	    {(0.2538d , -0.7392d , 0.8999d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3832d , -0.705d , 0.9306d)}
	    {(0.2916d , -0.8026d , 0.9306d)}
	    {(0.5418d , -1.0242d , 0.613d)}
	    {(0.629d , -0.9458d , 0.6083d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2538d , -0.7392d , 0.8999d)}
	    {(0.5197d , -0.9506d , 0.5841d)}
	    {(0.5418d , -1.0242d , 0.613d)}
	    {(0.2916d , -0.8026d , 0.9306d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.4839d , -0.5789d , 0.1479d)}
	    {(0.3768d , -0.6269d , 0.1406d)}
	    {(0.3361d , -0.7097d , 0.5152d)}
	    {(0.4188d , -0.6319d , 0.5103d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.5756d , -0.8926d , 0.5759d)}
	    {(0.629d , -0.9458d , 0.6083d)}
	    {(0.8785d , -1.1448d , 0.1294d)}
	    {(0.8251d , -1.0916d , 0.097d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.5197d , -0.9506d , 0.5841d)}
	    {(0.3361d , -0.7097d , 0.5152d)}
	    {(0.3768d , -0.6269d , 0.1406d)}
	    {(0.7417d , -1.1256d , 0.0672d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.8785d , -1.1448d , 0.1294d)}
	    {(0.629d , -0.9458d , 0.6083d)}
	    {(0.5418d , -1.0242d , 0.613d)}
	    {(0.7638d , -1.1992d , 0.0961d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.3768d , -0.6269d , 0.1406d)}
	    {(0.3998d , -0.5979d , -0.0276d)}
	    {(0.7528d , -1.1055d , -0.1867d)}
	    {(0.7417d , -1.1256d , 0.0672d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.8913d , -1.1317d , -0.1192d)}
	    {(0.7749d , -1.1791d , -0.1578d)}
	    {(0.7778d , -1.1526d , -0.5202d)}
	    {(0.8808d , -1.1103d , -0.4814d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.8755d , -1.0632d , -0.6278d)}
	    {(0.8274d , -1.0571d , -0.5138d)}
	    {(0.8808d , -1.1103d , -0.4814d)}
	    {(0.9046d , -1.0921d , -0.6102d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.7749d , -1.1791d , -0.1578d)}
	    {(0.7528d , -1.1055d , -0.1867d)}
	    {(0.7557d , -1.079d , -0.5491d)}
	    {(0.7778d , -1.1526d , -0.5202d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.9046d , -1.0921d , -0.6102d)}
	    {(0.8486d , -1.1151d , -0.6314d)}
	    {(0.8366d , -1.0751d , -0.6471d)}
	    {(0.8755d , -1.0632d , -0.6278d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.9046d , -1.0921d , -0.6102d)}
	    {(0.8808d , -1.1103d , -0.4814d)}
	    {(0.7778d , -1.1526d , -0.5202d)}
	    {(0.8486d , -1.1151d , -0.6314d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.4188d , -0.6319d , 0.5103d)}
	    {(0.3361d , -0.7097d , 0.5152d)}
	    {(0.2975d , -0.738d , 0.5849d)}
	    {(0.3834d , -0.6421d , 0.5849d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1203d , 0.6039d , 1.0442d)}
	    {(0.1203d , 0.6039d , 1.0442d)}
	    {(0.1878d , 0.6552d , 0.5801d)}
	    {(-0.1878d , 0.6552d , 0.5801d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3835d , 0.4214d , 0.6004d)}
	    {(0.2456d , 0.3511d , 1.0537d)}
	    {(0.2903d , -0.5923d , 1.0064d)}
	    {(0.468d , -0.4735d , 0.5979d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2646d , -0.6729d , 0.9213d)}
	    {(0.2903d , -0.5923d , 1.0064d)}
	    {(0.1102d , -0.8167d , 1.0017d)}
	    {(0.2253d , -0.7309d , 0.9202d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.3454d , -0.6415d , 0.8999d)}
	    {(0.5756d , -0.8926d , 0.5759d)}
	    {(0.4188d , -0.6319d , 0.5103d)}
	    {(0.3834d , -0.6421d , 0.5849d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2975d , -0.738d , 0.5849d)}
	    {(0.3361d , -0.7097d , 0.5152d)}
	    {(0.5197d , -0.9506d , 0.5841d)}
	    {(0.2538d , -0.7392d , 0.8999d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.4188d , -0.6319d , 0.5103d)}
	    {(0.5756d , -0.8926d , 0.5759d)}
	    {(0.8251d , -1.0916d , 0.097d)}
	    {(0.4839d , -0.5789d , 0.1479d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.4839d , -0.5789d , 0.1479d)}
	    {(0.5029d , -0.5408d , -0.0166d)}
	    {(0.3998d , -0.5979d , -0.0276d)}
	    {(0.3768d , -0.6269d , 0.1406d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.4839d , -0.5789d , 0.1479d)}
	    {(0.8251d , -1.0916d , 0.097d)}
	    {(0.8379d , -1.0785d , -0.1516d)}
	    {(0.5029d , -0.5408d , -0.0166d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.5418d , -1.0242d , 0.613d)}
	    {(0.5197d , -0.9506d , 0.5841d)}
	    {(0.7417d , -1.1256d , 0.0672d)}
	    {(0.7638d , -1.1992d , 0.0961d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.8251d , -1.0916d , 0.097d)}
	    {(0.8785d , -1.1448d , 0.1294d)}
	    {(0.8913d , -1.1317d , -0.1192d)}
	    {(0.8379d , -1.0785d , -0.1516d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.8913d , -1.1317d , -0.1192d)}
	    {(0.8785d , -1.1448d , 0.1294d)}
	    {(0.7638d , -1.1992d , 0.0961d)}
	    {(0.7749d , -1.1791d , -0.1578d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.7417d , -1.1256d , 0.0672d)}
	    {(0.7528d , -1.1055d , -0.1867d)}
	    {(0.7749d , -1.1791d , -0.1578d)}
	    {(0.7638d , -1.1992d , 0.0961d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.8274d , -1.0571d , -0.5138d)}
	    {(0.5029d , -0.5408d , -0.0166d)}
	    {(0.8379d , -1.0785d , -0.1516d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.3998d , -0.5979d , -0.0276d)}
	    {(0.7557d , -1.079d , -0.5491d)}
	    {(0.7528d , -1.1055d , -0.1867d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.8808d , -1.1103d , -0.4814d)}
	    {(0.8274d , -1.0571d , -0.5138d)}
	    {(0.8379d , -1.0785d , -0.1516d)}
	    {(0.8913d , -1.1317d , -0.1192d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.3998d , -0.5979d , -0.0276d)}
	    {(0.5029d , -0.5408d , -0.0166d)}
	    {(0.8274d , -1.0571d , -0.5138d)}
	    {(0.7557d , -1.079d , -0.5491d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.7557d , -1.079d , -0.5491d)}
	    {(0.8274d , -1.0571d , -0.5138d)}
	    {(0.8755d , -1.0632d , -0.6278d)}
	    {(0.8366d , -1.0751d , -0.6471d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.7778d , -1.1526d , -0.5202d)}
	    {(0.7557d , -1.079d , -0.5491d)}
	    {(0.8366d , -1.0751d , -0.6471d)}
	    {(0.8486d , -1.1151d , -0.6314d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2748d , -0.6529d , 0.6754d)}
	    {(0.3834d , -0.6421d , 0.5849d)}
	    {(0.2975d , -0.738d , 0.5849d)}
	    {(0.2367d , -0.7359d , 0.6717d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1935d , -0.8194d , 0.5815d)}
	    {(0.468d , -0.4735d , 0.5979d)}
	    {(0.2748d , -0.6529d , 0.6754d)}
	    {(0.2367d , -0.7359d , 0.6717d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2253d , -0.7309d , 0.9202d)}
	    {(-0.2646d , -0.6729d , 0.9213d)}
	    {(-0.3243d , -0.644d , 0.9287d)}
	    {(-0.251d , -0.7287d , 0.9304d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3989d , 0.4207d , -0.9389d)}
	    {(0.1316d , 0.7702d , -0.9359d)}
	    {(0.1384d , 0.764d , -0.605d)}
	    {(0.4121d , 0.432d , -0.6073d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3835d , 0.4214d , 0.6004d)}
	    {(-0.468d , -0.4735d , 0.5979d)}
	    {(-0.2903d , -0.5923d , 1.0064d)}
	    {(-0.2456d , 0.3511d , 1.0537d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.251d , -0.7287d , 0.9304d)}
	    {(-0.3243d , -0.644d , 0.9287d)}
	    {(-0.3802d , -0.694d , 0.9614d)}
	    {(-0.292d , -0.7899d , 0.9615d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1384d , 0.764d , -0.605d)}
	    {(0.1384d , 0.764d , -0.605d)}
	    {(0.1316d , 0.7702d , -0.9359d)}
	    {(-0.1316d , 0.7702d , -0.9359d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2253d , -0.7309d , 0.9202d)}
	    {(-0.251d , -0.7287d , 0.9304d)}
	    {(-0.2934d , -0.7273d , 0.6247d)}
	    {(-0.2367d , -0.7359d , 0.6717d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2367d , -0.7359d , 0.6717d)}
	    {(-0.2934d , -0.7273d , 0.6247d)}
	    {(-0.3761d , -0.6331d , 0.6247d)}
	    {(-0.2748d , -0.6529d , 0.6754d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.4104d , -0.623d , 0.5523d)}
	    {(-0.3761d , -0.6331d , 0.6247d)}
	    {(-0.2934d , -0.7273d , 0.6247d)}
	    {(-0.3306d , -0.6995d , 0.5571d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2934d , -0.7273d , 0.6247d)}
	    {(-0.251d , -0.7287d , 0.9304d)}
	    {(-0.5191d , -0.9264d , 0.6247d)}
	    {(-0.3306d , -0.6995d , 0.5571d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.3243d , -0.644d , 0.9287d)}
	    {(-0.3761d , -0.6331d , 0.6247d)}
	    {(-0.4104d , -0.623d , 0.5523d)}
	    {(-0.5731d , -0.8714d , 0.617d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.355d , -0.6339d , 0.193d)}
	    {(-0.456d , -0.58d , 0.1978d)}
	    {(-0.4104d , -0.623d , 0.5523d)}
	    {(-0.3306d , -0.6995d , 0.5571d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.5191d , -0.9264d , 0.6247d)}
	    {(-0.251d , -0.7287d , 0.9304d)}
	    {(-0.292d , -0.7899d , 0.9615d)}
	    {(-0.545d , -0.9986d , 0.6544d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.4746d , -0.5433d , 0.0365d)}
	    {(-0.456d , -0.58d , 0.1978d)}
	    {(-0.355d , -0.6339d , 0.193d)}
	    {(-0.379d , -0.6069d , 0.0236d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.4104d , -0.623d , 0.5523d)}
	    {(-0.456d , -0.58d , 0.1978d)}
	    {(-0.8218d , -1.0515d , 0.1509d)}
	    {(-0.5731d , -0.8714d , 0.617d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.7696d , -1.1625d , 0.1538d)}
	    {(-0.545d , -0.9986d , 0.6544d)}
	    {(-0.6291d , -0.9214d , 0.6497d)}
	    {(-0.8778d , -1.1014d , 0.1836d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.379d , -0.6069d , 0.0236d)}
	    {(-0.355d , -0.6339d , 0.193d)}
	    {(-0.7437d , -1.0903d , 0.1242d)}
	    {(-0.736d , -1.0802d , -0.126d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.7437d , -1.0903d , 0.1242d)}
	    {(-0.7696d , -1.1625d , 0.1538d)}
	    {(-0.7619d , -1.1524d , -0.0964d)}
	    {(-0.736d , -1.0802d , -0.126d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.8218d , -1.0515d , 0.1509d)}
	    {(-0.8143d , -1.0472d , -0.089d)}
	    {(-0.8702d , -1.0971d , -0.0563d)}
	    {(-0.8778d , -1.1014d , 0.1836d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.8143d , -1.0472d , -0.089d)}
	    {(-0.4746d , -0.5433d , 0.0365d)}
	    {(-0.8141d , -1.0242d , -0.438d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.4746d , -0.5433d , 0.0365d)}
	    {(-0.379d , -0.6069d , 0.0236d)}
	    {(-0.7483d , -1.0505d , -0.4752d)}
	    {(-0.8141d , -1.0242d , -0.438d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.736d , -1.0802d , -0.126d)}
	    {(-0.7619d , -1.1524d , -0.0964d)}
	    {(-0.7741d , -1.1227d , -0.4456d)}
	    {(-0.7483d , -1.0505d , -0.4752d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.8143d , -1.0472d , -0.089d)}
	    {(-0.8141d , -1.0242d , -0.438d)}
	    {(-0.8701d , -1.0742d , -0.4053d)}
	    {(-0.8702d , -1.0971d , -0.0563d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.8691d , -1.0255d , -0.5508d)}
	    {(-0.8141d , -1.0242d , -0.438d)}
	    {(-0.7483d , -1.0505d , -0.4752d)}
	    {(-0.8333d , -1.0398d , -0.571d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.8333d , -1.0398d , -0.571d)}
	    {(-0.7483d , -1.0505d , -0.4752d)}
	    {(-0.7741d , -1.1227d , -0.4456d)}
	    {(-0.8474d , -1.0791d , -0.5549d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.8996d , -1.0527d , -0.533d)}
	    {(-0.8701d , -1.0742d , -0.4053d)}
	    {(-0.8141d , -1.0242d , -0.438d)}
	    {(-0.8691d , -1.0255d , -0.5508d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.7741d , -1.1227d , -0.4456d)}
	    {(-0.8701d , -1.0742d , -0.4053d)}
	    {(-0.8996d , -1.0527d , -0.533d)}
	    {(-0.8474d , -1.0791d , -0.5549d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2253d , -0.7309d , 0.9202d)}
	    {(-0.2367d , -0.7359d , 0.6717d)}
	    {(-0.1935d , -0.8194d , 0.5815d)}
	    {(-0.1102d , -0.8167d , 1.0017d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2367d , -0.7359d , 0.6717d)}
	    {(-0.2748d , -0.6529d , 0.6754d)}
	    {(-0.468d , -0.4735d , 0.5979d)}
	    {(-0.1935d , -0.8194d , 0.5815d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3842d , -0.4563d , -0.6112d)}
	    {(0.2084d , -0.829d , -0.6031d)}
	    {(0.1982d , -0.8335d , -0.9357d)}
	    {(0.3708d , -0.4451d , -0.9428d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2084d , -0.829d , -0.6031d)}
	    {(0.0695d , -0.829d , -0.6031d)}
	    {(0.0837d , -0.8882d , -0.7171d)}
	    {(0.1659d , -0.8519d , -0.7148d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2084d , -0.829d , -0.6031d)}
	    {(-0.1935d , -0.8194d , 0.5815d)}
	    {(-0.468d , -0.4735d , 0.5979d)}
	    {(-0.3842d , -0.4563d , -0.6112d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3332d , 0.3786d , -1.957d)}
	    {(-0.3989d , 0.452d , -0.9389d)}
	    {(-0.1316d , 0.7702d , -0.9359d)}
	    {(-0.1311d , 0.7588d , -1.957d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.3989d , 0.4207d , -0.9389d)}
	    {(0.3708d , -0.4451d , -0.9428d)}
	    {(0.3047d , -0.4028d , -1.9545d)}
	    {(0.3332d , 0.3786d , -1.957d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0661d , -0.9103d , -0.9357d)}
	    {(0.1982d , -0.8335d , -0.9357d)}
	    {(0.1852d , -0.8596d , -0.8871d)}
	    {(0.1063d , -0.8961d , -0.8894d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0437d , 0.7588d , -1.957d)}
	    {(0.1311d , 0.7588d , -1.957d)}
	    {(0.1547d , 0.6858d , -2.4669d)}
	    {(0.0956d , 0.6968d , -2.5298d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2084d , -0.829d , -0.6031d)}
	    {(-0.1657d , -0.8509d , -0.7152d)}
	    {(-0.0837d , -0.8882d , -0.7171d)}
	    {(-0.0695d , -0.829d , -0.6031d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0316d , 0.7967d , -2.3462d)}
	    {(0.0437d , 0.7588d , -1.957d)}
	    {(0.0956d , 0.6968d , -2.5298d)}
	    {(0.0241d , 0.7577d , -2.7037d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1063d , -0.8961d , -0.8894d)}
	    {(-0.1315d , -0.8891d , -0.9275d)}
	    {(-0.2051d , -0.8603d , -0.9283d)}
	    {(-0.185d , -0.8586d , -0.8875d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1063d , -0.8961d , -0.8894d)}
	    {(-0.0837d , -0.8882d , -0.7171d)}
	    {(-0.1741d , -1.0494d , -0.8902d)}
	    {(-0.1315d , -0.8891d , -0.9275d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.185d , -0.8586d , -0.8875d)}
	    {(-0.2051d , -0.8603d , -0.9283d)}
	    {(-0.2501d , -1.0211d , -0.8909d)}
	    {(-0.1657d , -0.8509d , -0.7152d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1657d , -0.8509d , -0.7152d)}
	    {(-0.2501d , -1.0211d , -0.8909d)}
	    {(-0.1741d , -1.0494d , -0.8902d)}
	    {(-0.0837d , -0.8882d , -0.7171d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2051d , -0.8603d , -0.9283d)}
	    {(-0.1315d , -0.8891d , -0.9275d)}
	    {(-0.1577d , -0.8596d , -1.1327d)}
	    {(-0.2378d , -0.847d , -1.1281d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1758d , -0.8503d , -1.2282d)}
	    {(-0.2551d , -0.8315d , -1.219d)}
	    {(-0.2378d , -0.847d , -1.1281d)}
	    {(-0.1577d , -0.8596d , -1.1327d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1741d , -1.0494d , -0.8902d)}
	    {(-0.2501d , -1.0211d , -0.8909d)}
	    {(-0.3441d , -1.1664d , -1.1536d)}
	    {(-0.2587d , -1.1813d , -1.1723d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1758d , -0.8503d , -1.2282d)}
	    {(-0.1577d , -0.8596d , -1.1327d)}
	    {(-0.2587d , -1.1813d , -1.1723d)}
	    {(-0.2567d , -1.1744d , -1.3133d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.1758d , -0.8503d , -1.2282d)}
	    {(-0.2567d , -1.1744d , -1.3133d)}
	    {(-0.2692d , -1.1613d , -1.5101d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(-0.2692d , -1.1613d , -1.5101d)}
	    {(-0.2567d , -1.1744d , -1.3133d)}
	    {(-0.341d , -1.1626d , -1.2888d)}
	    {(-0.3456d , -1.1505d , -1.4855d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.185d , -0.8586d , -0.8875d)}
	    {(-0.1657d , -0.8509d , -0.7152d)}
	    {(-0.2084d , -0.829d , -0.6031d)}
	    {(-0.1982d , -0.8335d , -0.9357d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0316d , 0.7967d , -2.3462d)}
	    {(0.0316d , 0.7967d , -2.3462d)}
	    {(0.0172d , 0.9262d , -2.8883d)}
	    {(-0.0172d , 0.9262d , -2.8883d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0172d , 0.9262d , -2.8883d)}
	    {(-0.0241d , 0.9147d , -2.963d)}
	    {(-0.0241d , 0.7577d , -2.7037d)}
	    {(-0.0316d , 0.7967d , -2.3462d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0172d , 0.9262d , -2.8883d)}
	    {(0.0172d , 0.9262d , -2.8883d)}
	    {(0.0241d , 0.9147d , -2.963d)}
	    {(-0.0241d , 0.9147d , -2.963d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1547d , 0.6858d , -2.4669d)}
	    {(0.058d , 0.5212d , -2.8095d)}
	    {(0.0351d , 0.5782d , -2.8095d)}
	    {(0.0956d , 0.6968d , -2.5298d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0241d , 0.7577d , -2.7037d)}
	    {(0.0956d , 0.6968d , -2.5298d)}
	    {(0.0351d , 0.5782d , -2.8095d)}
	    {(0.0193d , 0.6813d , -2.97d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.3708d , -0.4451d , -0.9428d)}
	    {(-0.3989d , 0.452d , -0.9389d)}
	    {(-0.3332d , 0.3786d , -1.957d)}
	    {(-0.3048d , -0.4028d , -1.9545d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0956d , 0.6968d , -2.5298d)}
	    {(-0.0241d , 0.7577d , -2.7037d)}
	    {(-0.0193d , 0.6813d , -2.97d)}
	    {(-0.0351d , 0.5782d , -2.8095d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.2284d , 0.2601d , -2.4959d)}
	    {(0.3332d , 0.3786d , -1.957d)}
	    {(0.3047d , -0.4028d , -1.9545d)}
	    {(0.2284d , -0.3529d , -2.4959d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0241d , 0.7577d , -2.7037d)}
	    {(-0.0241d , 0.9147d , -2.963d)}
	    {(-0.0193d , 0.8383d , -3.2293d)}
	    {(-0.0193d , 0.6813d , -2.97d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1547d , 0.6858d , -2.4669d)}
	    {(0.2284d , 0.2601d , -2.4959d)}
	    {(0.1646d , 0.1734d , -2.8857d)}
	    {(0.058d , 0.5212d , -2.8095d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0241d , 0.9147d , -2.963d)}
	    {(0.0193d , 0.8383d , -3.2293d)}
	    {(-0.0193d , 0.8383d , -3.2293d)}
	    {(-0.0241d , 0.9147d , -2.963d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0661d , -0.9103d , -0.9357d)}
	    {(-0.0661d , -0.9103d , -0.9357d)}
	    {(-0.0658d , -0.9108d , -1.6299d)}
	    {(0.0658d , -0.9108d , -1.6299d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1974d , -0.8339d , -1.9164d)}
	    {(0.0658d , -0.9108d , -1.6299d)}
	    {(0.0334d , -0.9086d , -1.8393d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0658d , -0.9108d , -1.6299d)}
	    {(-0.0658d , -0.9108d , -1.6299d)}
	    {(-0.0334d , -0.9086d , -1.8393d)}
	    {(0.0334d , -0.9086d , -1.8393d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0334d , -0.9086d , -1.8393d)}
	    {(-0.0658d , -0.9108d , -1.6299d)}
	    {(-0.1974d , -0.8339d , -1.9164d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0128d , 0.3393d , -3.2333d)}
	    {(0.0384d , 0.2849d , -3.1882d)}
	    {(-0.0384d , 0.2849d , -3.1882d)}
	    {(-0.0128d , 0.3393d , -3.2333d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1646d , 0.1734d , -2.8857d)}
	    {(-0.058d , 0.5212d , -2.8095d)}
	    {(-0.0384d , 0.2849d , -3.1882d)}
	    {(-0.1274d , 0.1166d , -3.0754d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.026d , 0.2274d , -3.2822d)}
	    {(0.026d , 0.4306d , -3.4723d)}
	    {(-0.026d , 0.4306d , -3.4723d)}
	    {(-0.026d , 0.2274d , -3.2822d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1608d , -0.9278d , -2.404d)}
	    {(0.2083d , -0.733d , -2.4534d)}
	    {(0.1974d , -0.8339d , -1.9164d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0776d , 0.0699d , -3.2843d)}
	    {(0.026d , 0.2274d , -3.2822d)}
	    {(0.0384d , 0.2849d , -3.1882d)}
	    {(0.1274d , 0.1166d , -3.0754d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.026d , 0.4306d , -3.4723d)}
	    {(0.026d , 0.5416d , -3.7059d)}
	    {(-0.026d , 0.5416d , -3.7059d)}
	    {(-0.026d , 0.4306d , -3.4723d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0334d , -0.9086d , -1.8393d)}
	    {(-0.0334d , -0.9086d , -1.8393d)}
	    {(-0.0149d , -1.1642d , -2.0773d)}
	    {(0.0149d , -1.1642d , -2.0773d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1608d , -0.9278d , -2.404d)}
	    {(0.1974d , -0.8339d , -1.9164d)}
	    {(0.0334d , -0.9086d , -1.8393d)}
	    {(0.0241d , -1.0447d , -2.3795d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1646d , 0.1734d , -2.8857d)}
	    {(-0.1274d , 0.1166d , -3.0754d)}
	    {(-0.1274d , -0.1695d , -3.0872d)}
	    {(-0.1886d , -0.2416d , -2.8799d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.026d , 0.5416d , -3.7059d)}
	    {(0.026d , 0.5416d , -3.7059d)}
	    {(0.026d , 0.6634d , -4.0775d)}
	    {(-0.026d , 0.6634d , -4.0775d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.026d , 0.2274d , -3.2822d)}
	    {(-0.026d , 0.4306d , -3.4723d)}
	    {(-0.0776d , 0.1069d , -3.5825d)}
	    {(-0.0776d , 0.0699d , -3.2843d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.026d , 0.4306d , -3.4723d)}
	    {(0.0776d , 0.1069d , -3.5825d)}
	    {(0.0412d , 0.1523d , -3.7012d)}
	    {(0.026d , 0.5416d , -3.7059d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2083d , -0.7605d , -2.4534d)}
	    {(-0.1608d , -0.9278d , -2.404d)}
	    {(-0.1974d , -0.8339d , -1.9164d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0776d , -0.0877d , -3.2843d)}
	    {(0.1274d , -0.1695d , -3.0872d)}
	    {(0.0384d , -0.3142d , -3.1648d)}
	    {(0.026d , -0.2452d , -3.2822d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0334d , -0.9086d , -1.8393d)}
	    {(-0.1974d , -0.8339d , -1.9164d)}
	    {(-0.1608d , -0.9278d , -2.404d)}
	    {(-0.0241d , -1.0562d , -2.3795d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0776d , 0.0699d , -3.2843d)}
	    {(0.0776d , -0.0877d , -3.2843d)}
	    {(0.0776d , -0.1247d , -3.5825d)}
	    {(0.0776d , 0.1069d , -3.5825d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1274d , -0.1695d , -3.0872d)}
	    {(-0.0776d , -0.0877d , -3.2843d)}
	    {(-0.026d , -0.2452d , -3.2822d)}
	    {(-0.0384d , -0.3142d , -3.1648d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.026d , 0.5416d , -3.7059d)}
	    {(-0.0412d , 0.1523d , -3.7012d)}
	    {(-0.0776d , 0.1069d , -3.5825d)}
	    {(-0.026d , 0.4306d , -3.4723d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.026d , 0.5416d , -3.7059d)}
	    {(0.0412d , 0.1523d , -3.7012d)}
	    {(0.0396d , 0.2154d , -4.0727d)}
	    {(0.026d , 0.6634d , -4.0775d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0776d , 0.0699d , -3.2843d)}
	    {(-0.0776d , 0.1069d , -3.5825d)}
	    {(-0.0776d , -0.1247d , -3.5825d)}
	    {(-0.0776d , -0.0877d , -3.2843d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.026d , -0.2452d , -3.2822d)}
	    {(-0.0776d , -0.0877d , -3.2843d)}
	    {(-0.0776d , -0.1247d , -3.5825d)}
	    {(-0.026d , -0.4473d , -3.4825d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.026d , -0.2452d , -3.2822d)}
	    {(-0.026d , -0.4473d , -3.4825d)}
	    {(0.026d , -0.4473d , -3.4825d)}
	    {(0.026d , -0.2452d , -3.2822d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0412d , 0.1523d , -3.7012d)}
	    {(0.0396d , -0.1974d , -3.7012d)}
	    {(0.0396d , -0.1406d , -4.0727d)}
	    {(0.0396d , 0.2154d , -4.0727d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.026d , 0.6634d , -4.0775d)}
	    {(0.0396d , 0.2154d , -4.0727d)}
	    {(0.0396d , 0.0926d , -4.3358d)}
	    {(0.026d , 0.3856d , -4.3405d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0396d , -0.1974d , -3.7012d)}
	    {(0.0776d , -0.1247d , -3.5825d)}
	    {(0.026d , -0.4473d , -3.4825d)}
	    {(0.026d , -0.6436d , -3.7508d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.026d , 0.3856d , -4.3405d)}
	    {(0.026d , 0.3856d , -4.3405d)}
	    {(0.0396d , 0.0926d , -4.3358d)}
	    {(0.0396d , -0.1085d , -4.3358d)}
	    {(0.026d , -0.304d , -4.3508d)}
	    {(-0.026d , -0.304d , -4.3508d)}
	    {(-0.0396d , -0.1085d , -4.3358d)}
	    {(-0.0396d , 0.0926d , -4.3358d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.026d , -0.536d , -4.1223d)}
	    {(0.026d , -0.536d , -4.1223d)}
	    {(0.026d , -0.6436d , -3.7508d)}
	    {(-0.026d , -0.6436d , -3.7508d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.026d , -0.304d , -4.3508d)}
	    {(-0.026d , -0.536d , -4.1223d)}
	    {(-0.0396d , -0.1406d , -4.0727d)}
	    {(-0.0396d , -0.1085d , -4.3358d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1564d , -0.5989d , -2.7656d)}
	    {(0.0716d , -0.8228d , -2.6739d)}
	    {(0.0128d , -0.3465d , -3.2296d)}
	    {(0.0384d , -0.3142d , -3.1648d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.2083d , -0.7605d , -2.4534d)}
	    {(-0.1357d , -0.5971d , -2.766d)}
	    {(-0.0465d , -0.8228d , -2.674d)}
	    {(-0.1608d , -0.9278d , -2.404d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1357d , -0.5971d , -2.766d)}
	    {(-0.0384d , -0.3142d , -3.1648d)}
	    {(-0.0128d , -0.3465d , -3.2296d)}
	    {(-0.0465d , -0.8228d , -2.674d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.1608d , -0.9278d , -2.404d)}
	    {(0.0241d , -1.0447d , -2.3795d)}
	    {(0.0193d , -0.9638d , -2.7691d)}
	    {(0.0716d , -0.8228d , -2.6739d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(0.0128d , -0.3465d , -3.2296d)}
	    {(-0.0128d , -0.3465d , -3.2296d)}
	    {(-0.0384d , -0.3142d , -3.1648d)}
	    {(0.0384d , -0.3142d , -3.1648d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0334d , -0.9086d , -1.8393d)}
	    {(0.0149d , -1.1642d , -2.0773d)}
	    {(0.0241d , -1.3393d , -2.5278d)}
	    {(0.0241d , -1.0447d , -2.3795d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.1608d , -0.9278d , -2.404d)}
	    {(-0.0465d , -0.8228d , -2.674d)}
	    {(-0.0193d , -0.9753d , -2.7691d)}
	    {(-0.0241d , -1.0562d , -2.3795d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0128d , -0.3411d , -3.3135d)}
	    {(-0.0128d , -0.3465d , -3.2296d)}
	    {(0.0128d , -0.3465d , -3.2296d)}
	    {(0.0128d , -0.3411d , -3.3135d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0149d , -1.1642d , -2.0773d)}
	    {(-0.0334d , -0.9086d , -1.8393d)}
	    {(-0.0241d , -1.0562d , -2.3795d)}
	    {(-0.0241d , -1.3393d , -2.5278d)}))
        (Polygon (color 1.0
	    0.956904
	    0.784275)
	  (points {(-0.0128d , -0.3465d , -3.2296d)}
	    {(-0.0128d , -0.3411d , -3.3135d)}
	    {(-0.0193d , -0.9753d , -2.7691d)}
	    {(-0.0465d , -0.8228d , -2.674d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0149d , -1.1642d , -2.0773d)}
	    {(-0.0149d , -1.1642d , -2.0773d)}
	    {(-0.0241d , -1.3393d , -2.5278d)}
	    {(0.0241d , -1.3393d , -2.5278d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0241d , -1.0562d , -2.3795d)}
	    {(-0.0193d , -0.9753d , -2.7691d)}
	    {(-0.0193d , -1.2416d , -3.0459d)}
	    {(-0.0241d , -1.3393d , -2.5278d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0128d , -0.3411d , -3.3135d)}
	    {(0.0128d , -0.6764d , -3.7179d)}
	    {(-0.0128d , -0.6764d , -3.7179d)}
	    {(-0.0128d , -0.3411d , -3.3135d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0128d , 0.3979d , -3.3231d)}
	    {(0.0193d , 0.6813d , -2.97d)}
	    {(0.0351d , 0.5782d , -2.8095d)}
	    {(0.0128d , 0.3393d , -3.2333d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0128d , 0.3979d , -3.3231d)}
	    {(-0.0128d , 0.3393d , -3.2333d)}
	    {(-0.0351d , 0.5782d , -2.8095d)}
	    {(-0.0193d , 0.6813d , -2.97d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0128d , 0.4852d , -3.4604d)}
	    {(0.0193d , 0.8383d , -3.2293d)}
	    {(0.0193d , 0.6813d , -2.97d)}
	    {(0.0128d , 0.3979d , -3.3231d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(-0.0128d , 0.3979d , -3.3231d)}
	    {(-0.0193d , 0.6813d , -2.97d)}
	    {(-0.0193d , 0.8383d , -3.2293d)}
	    {(-0.0128d , 0.4852d , -3.4604d)}))
        (Polygon (color 1.0
	    0.901965
	    0.502014)
	  (points {(0.0128d , 0.4852d , -3.4604d)}
	    {(-0.0128d , 0.4852d , -3.4604d)}
	    {(-0.0193d , 0.8383d , -3.2293d)}
	    {(0.0193d , 0.8383d , -3.2293d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2053d , -0.8613d , -0.9279d)}
	    {(0.1852d , -0.8596d , -0.8871d)}
	    {(0.1659d , -0.8519d , -0.7148d)}
	    {(0.2448d , -1.0228d , -0.8911d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.1063d , -0.8961d , -0.8894d)}
	    {(0.1852d , -0.8596d , -0.8871d)}
	    {(0.2053d , -0.8613d , -0.9279d)}
	    {(0.1315d , -0.8891d , -0.9275d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2448d , -1.0228d , -0.8911d)}
	    {(0.1659d , -0.8519d , -0.7148d)}
	    {(0.0837d , -0.8882d , -0.7171d)}
	    {(0.1686d , -1.0501d , -0.8908d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.1315d , -0.8891d , -0.9275d)}
	    {(0.1686d , -1.0501d , -0.8908d)}
	    {(0.0837d , -0.8882d , -0.7171d)}
	    {(0.1063d , -0.8961d , -0.8894d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2489d , -0.8468d , -1.1261d)}
	    {(0.266d , -0.831d , -1.2161d)}
	    {(0.1858d , -0.8443d , -1.2244d)}
	    {(0.1684d , -0.8547d , -1.1324d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.3337d , -1.173d , -1.153d)}
	    {(0.2489d , -0.8468d , -1.1261d)}
	    {(0.2053d , -0.8613d , -0.9279d)}
	    {(0.2448d , -1.0228d , -0.8911d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2481d , -1.1827d , -1.1735d)}
	    {(0.1686d , -1.0501d , -0.8908d)}
	    {(0.1315d , -0.8891d , -0.9275d)}
	    {(0.1684d , -0.8547d , -1.1324d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.3337d , -1.173d , -1.153d)}
	    {(0.2448d , -1.0228d , -0.8911d)}
	    {(0.1686d , -1.0501d , -0.8908d)}
	    {(0.2481d , -1.1827d , -1.1735d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.3428d , -1.1688d , -1.289d)}
	    {(0.266d , -0.831d , -1.2161d)}
	    {(0.2489d , -0.8468d , -1.1261d)}
	    {(0.3337d , -1.173d , -1.153d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.1684d , -0.8547d , -1.1324d)}
	    {(0.1858d , -0.8443d , -1.2244d)}
	    {(0.2577d , -1.1746d , -1.3124d)}
	    {(0.2481d , -1.1827d , -1.1735d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2577d , -1.1746d , -1.3124d)}
	    {(0.3428d , -1.1688d , -1.289d)}
	    {(0.3337d , -1.173d , -1.153d)}
	    {(0.2481d , -1.1827d , -1.1735d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.2577d , -1.1746d , -1.3124d)}
	    {(0.1858d , -0.8443d , -1.2244d)}
	    {(0.2643d , -1.1616d , -1.5106d)}))
        (Polygon (color 1.0
	    0.917592
	    0.576486)
	  (points {(0.266d , -0.831d , -1.2161d)}
	    {(0.3416d , -1.1558d , -1.4871d)}
	    {(0.2643d , -1.1616d , -1.5106d)}
	    {(0.1858d , -0.8443d , -1.2244d)}))))))
'
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> arrowFrom: fromPoint to: toPoint [ 
	"((JunOpenGL3dObject arrowFrom: 0.5 , -0.5 , 0 to: -0.5 , 0.5 , 0)
		objectsDo: [:each | each paint: ColorValue cyan];
		asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	^self 
		arrowFrom: fromPoint
		to: toPoint
		color: self defaultPaint
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> arrowFrom: fromPoint to: toPoint color: colorValue [ 
	"((JunOpenGL3dObject 
		arrowFrom: 0.5 , -0.5 , 0
		to: -0.5 , 0.5 , 0
		color: ColorValue magenta) asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	^self 
		arrowFrom: fromPoint
		to: toPoint
		color: colorValue
		lineWidth: 1
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> arrowFrom: fromPoint to: toPoint color: colorValue lineWidth: lineWidth [ 
	"((JunOpenGL3dObject 
		arrowFrom: 0.5 , -0.5 , 0
		to: -0.5 , 0.5 , 0
		color: ColorValue cyan
		lineWidth: 3) asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	| arrowBody |
	arrowBody := (self 
				from: fromPoint
				to: toPoint
				height: (fromPoint distance: toPoint)
				depth: (fromPoint distance: toPoint)
				with: self xUnitArrow)
				objectsDo: [:each | each paint: colorValue];
				name: 'arrow';
				yourself.
	arrowBody components first lineWidth: lineWidth.
	^arrowBody
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> arrowLine: aLine [ 
	"((JunOpenGL3dObject arrowLine: (0.5 , -0.5 , 0 to: -0.5 , 0.5 , 0))
		objectsDo: [:each | each paint: ColorValue cyan];
		asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	^self arrowFrom: aLine first to: aLine last
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> arrowLine: aLine color: colorValue [ 
	"((JunOpenGL3dObject arrowLine: (0.5 , -0.5 , 0 to: -0.5 , 0.5 , 0)
		color: ColorValue yellow) asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	^self 
		arrowFrom: aLine first
		to: aLine last
		color: colorValue
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> arrowLine: aLine color: colorValue lineWidth: lineWidth [ 
	"((JunOpenGL3dObject 
		arrowLine: (0.5 , -0.5 , 0 to: -0.5 , 0.5 , 0)
		color: ColorValue yellow
		lineWidth: 3) asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	^self 
		arrowFrom: aLine first
		to: aLine last
		color: colorValue
		lineWidth: lineWidth
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> axes [
	"(JunOpenGL3dObject axes) show."

	| xAxis yAxis zAxis axes |
	xAxis := JunOpenGL3dCompoundObject new.
	xAxis name: 'x axis'.
	xAxis add: (JunOpenGL3dPolyline vertexes: (Array with: -1.0 , 0 , 0 with: 1.0 , 0 , 0)
			paint: ColorValue red).
	xAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 1.0 , 0 , 0
				with: 0.9 , 0.05 , 0
				with: 0.9 , 0 , 0
				with: 1.0 , 0 , 0)
			paint: ColorValue red).
	xAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 1.0 , 0 , 0
				with: 0.9 , 0 , 0
				with: 0.9 , -0.05 , 0
				with: 1.0 , 0 , 0)
			paint: ColorValue red).
	xAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 1.0 , 0 , 0
				with: 0.9 , 0 , 0.05
				with: 0.9 , 0 , 0
				with: 1.0 , 0 , 0)
			paint: ColorValue red).
	xAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 1.0 , 0 , 0
				with: 0.9 , 0 , 0
				with: 0.9 , 0 , -0.05
				with: 1.0 , 0 , 0)
			paint: ColorValue red).
	yAxis := JunOpenGL3dCompoundObject new.
	yAxis name: 'y axis'.
	yAxis add: (JunOpenGL3dPolyline vertexes: (Array with: 0 , -1.0 , 0 with: 0 , 1.0 , 0)
			paint: ColorValue green).
	yAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 1.0 , 0
				with: 0.05 , 0.9 , 0
				with: 0 , 0.9 , 0
				with: 0 , 1.0 , 0)
			paint: ColorValue green).
	yAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 1.0 , 0
				with: 0 , 0.9 , 0
				with: -0.05 , 0.9 , 0
				with: 0 , 1.0 , 0)
			paint: ColorValue green).
	yAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 1.0 , 0
				with: 0 , 0.9 , 0.05
				with: 0 , 0.9 , 0
				with: 0 , 1.0 , 0)
			paint: ColorValue green).
	yAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 1.0 , 0
				with: 0 , 0.9 , 0
				with: 0 , 0.9 , -0.05
				with: 0 , 1.0 , 0)
			paint: ColorValue green).
	zAxis := JunOpenGL3dCompoundObject new.
	zAxis name: 'z axis'.
	zAxis add: (JunOpenGL3dPolyline vertexes: (Array with: 0 , 0 , -1.0 with: 0 , 0 , 1.0)
			paint: ColorValue blue).
	zAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 0 , 1.0
				with: 0.05 , 0 , 0.9
				with: 0 , 0 , 0.9
				with: 0 , 0 , 1.0)
			paint: ColorValue blue).
	zAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 0 , 1.0
				with: 0 , 0 , 0.9
				with: -0.05 , 0 , 0.9
				with: 0 , 0 , 1.0)
			paint: ColorValue blue).
	zAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 0 , 1.0
				with: 0 , 0.05 , 0.9
				with: 0 , 0 , 0.9
				with: 0 , 0 , 1.0)
			paint: ColorValue blue).
	zAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 0 , 1.0
				with: 0 , 0 , 0.9
				with: 0 , -0.05 , 0.9
				with: 0 , 0 , 1.0)
			paint: ColorValue blue).
	axes := JunOpenGL3dCompoundObject
				with: xAxis
				with: yAxis
				with: zAxis.
	axes name: 'axes'.
	^axes
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> axes2 [
	"(JunOpenGL3dObject axes2) show."

	| xAxis yAxis zAxis axes |
	xAxis := JunOpenGL3dCompoundObject new.
	xAxis name: 'x axis'.
	xAxis add: (JunOpenGL3dPolyline vertexes: (Array with: 0 , 0 , 0 with: 1.0 , 0 , 0)
			paint: ColorValue red).
	xAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 1.0 , 0 , 0
				with: 0.9 , 0.05 , 0
				with: 0.9 , 0 , 0
				with: 1.0 , 0 , 0)
			paint: ColorValue red).
	xAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 1.0 , 0 , 0
				with: 0.9 , 0 , 0.05
				with: 0.9 , 0 , 0
				with: 1.0 , 0 , 0)
			paint: ColorValue red).
	yAxis := JunOpenGL3dCompoundObject new.
	yAxis name: 'y axis'.
	yAxis add: (JunOpenGL3dPolyline vertexes: (Array with: 0 , 0 , 0 with: 0 , 1.0 , 0)
			paint: ColorValue green).
	yAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 1.0 , 0
				with: 0.05 , 0.9 , 0
				with: 0 , 0.9 , 0
				with: 0 , 1.0 , 0)
			paint: ColorValue green).
	yAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 1.0 , 0
				with: 0 , 0.9 , 0.05
				with: 0 , 0.9 , 0
				with: 0 , 1.0 , 0)
			paint: ColorValue green).
	zAxis := JunOpenGL3dCompoundObject new.
	zAxis name: 'z axis'.
	zAxis add: (JunOpenGL3dPolyline vertexes: (Array with: 0 , 0 , 0 with: 0 , 0 , 1.0)
			paint: ColorValue blue).
	zAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 0 , 1.0
				with: 0.05 , 0 , 0.9
				with: 0 , 0 , 0.9
				with: 0 , 0 , 1.0)
			paint: ColorValue blue).
	zAxis add: (JunOpenGL3dPolygon vertexes: (Array
				with: 0 , 0 , 1.0
				with: 0 , 0.05 , 0.9
				with: 0 , 0 , 0.9
				with: 0 , 0 , 1.0)
			paint: ColorValue blue).
	axes := JunOpenGL3dCompoundObject
				with: xAxis
				with: yAxis
				with: zAxis.
	axes name: 'axes'.
	^axes
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> baby [
	"(JunOpenGL3dObject baby) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:15:59

(CompoundBody (name . "baby")
  (bodies (CompoundBody (bodies (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.17219d , 2.44289d , 2.29118d)}
	    {(-8.29754d-7 , 2.84403d , 2.45305d)}
	    {(-5.4623d-7 , 1.37398d , 2.9602d)}
	    {(0.629214d , 1.31642d , 2.92981d)}
	    {(1.28485d , 1.30641d , 2.34616d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.482387d , 0.864325d , 2.31449d)}
	    {(0.262589d , 0.681904d , 2.28362d)}
	    {(0.478208d , 0.491354d , 2.2035d)}
	    {(0.796482d , 0.606764d , 2.10128d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.0681724d , 0.552885d , 2.7764d)}
	    {(-9.95007d-7 , 0.588964d , 2.8039d)}
	    {(-1.00924d-6 , 0.432985d , 2.83408d)}
	    {(0.116794d , 0.428445d , 2.78537d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.606958d , 0.385834d , 2.52388d)}
	    {(0.175406d , 0.632644d , 2.5356d)}
	    {(0.364773d , 0.0484343d , 2.5777d)}
	    {(0.733154d , 0.0438443d , 2.51147d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.15432d , 0.551194d , 2.67786d)}
	    {(-1.42786d-6 , 0.632874d , 2.73828d)}
	    {(-1.45214d-6 , 0.794485d , 2.69585d)}
	    {(-0.175408d , 0.632644d , 2.5356d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.01822d-6 , 0.354814d , 2.74982d)}
	    {(-1.00924d-6 , 0.432985d , 2.83408d)}
	    {(-0.116796d , 0.428445d , 2.78537d)}
	    {(-0.211839d , 0.346584d , 2.66147d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.15432d , 0.551194d , 2.67786d)}
	    {(-0.211839d , 0.346584d , 2.66147d)}
	    {(-0.116796d , 0.428445d , 2.78537d)}
	    {(-0.0681744d , 0.552885d , 2.7764d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.02575d , 0.504795d , 2.22536d)}
	    {(1.14469d , 0.368634d , 2.36803d)}
	    {(1.02873d , -0.104586d , 1.44712d)}
	    {(1.21963d , 0.464425d , 1.36149d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.175408d , 0.632644d , 2.5356d)}
	    {(-0.528925d , 1.05528d , 2.53629d)}
	    {(-0.482392d , 0.864325d , 2.31449d)}
	    {(-0.262593d , 0.681904d , 2.28362d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.14469d , 0.368634d , 2.36803d)}
	    {(0.733154d , 0.0438443d , 2.51147d)}
	    {(0.364773d , 0.0484343d , 2.5777d)}
	    {(0.516627d , -0.526316d , 2.36874d)}
	    {(1.03325d , -0.408976d , 2.29152d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.33466d , -0.115856d , 1.36224d)}
	    {(1.32798d , -0.0197357d , 1.05624d)}
	    {(1.45448d , 0.243514d , 1.30256d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.33466d , -0.115856d , 1.36224d)}
	    {(1.45448d , 0.243514d , 1.30256d)}
	    {(1.36703d , 0.478234d , 1.31424d)}
	    {(1.13764d , -0.194756d , 1.38855d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.36703d , 0.478234d , 1.31424d)}
	    {(1.22438d , 0.360364d , 1.33329d)}
	    {(1.08572d , -0.0529558d , 1.39549d)}
	    {(1.13764d , -0.194756d , 1.38855d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.364773d , 0.0484343d , 2.5777d)}
	    {(-1.03127d-6 , 0.0697344d , 2.80639d)}
	    {(-8.66068d-7 , -0.318036d , 2.6912d)}
	    {(0.516627d , -0.526316d , 2.36874d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.32798d , -0.0197357d , 1.05624d)}
	    {(1.33466d , -0.115856d , 1.36224d)}
	    {(1.13764d , -0.194756d , 1.38855d)}
	    {(1.16026d , -0.0147556d , 1.07863d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.08407d , 0.0575944d , 1.08881d)}
	    {(1.22438d , 0.360364d , 1.33329d)}
	    {(1.36703d , 0.478234d , 1.31424d)}
	    {(1.16026d , -0.0147556d , 1.07863d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.606963d , 0.385834d , 2.52389d)}
	    {(-0.733158d , 0.0438443d , 2.51147d)}
	    {(-0.364775d , 0.0484343d , 2.5777d)}
	    {(-0.175408d , 0.632644d , 2.5356d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.02576d , 0.504795d , 2.22536d)}
	    {(-0.528925d , 1.05528d , 2.53629d)}
	    {(-0.629216d , 1.31642d , 2.92981d)}
	    {(-1.28485d , 1.30641d , 2.34615d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-8.66068d-7 , -0.318036d , 2.6912d)}
	    {(-0.516629d , -0.526316d , 2.36874d)}
	    {(0.516627d , -0.526316d , 2.36874d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.03127d-6 , 0.0697344d , 2.80639d)}
	    {(-0.364775d , 0.0484343d , 2.5777d)}
	    {(-0.516629d , -0.526316d , 2.36874d)}
	    {(-8.66068d-7 , -0.318036d , 2.6912d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.733158d , 0.0438443d , 2.51147d)}
	    {(-0.606963d , 0.385834d , 2.52389d)}
	    {(-1.02576d , 0.504795d , 2.22536d)}
	    {(-1.14471d , 0.368634d , 2.36803d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.364775d , 0.0484343d , 2.5777d)}
	    {(-0.733158d , 0.0438443d , 2.51147d)}
	    {(-1.14471d , 0.368634d , 2.36803d)}
	    {(-1.03326d , -0.408976d , 2.29152d)}
	    {(-0.516629d , -0.526316d , 2.36874d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.410201d , -0.144486d , 0.71023d)}
	    {(0.399044d , -0.720619d , 1.18916d)}
	    {(1.16783d , -1.28995d , 1.03359d)}
	    {(0.79313d , 0.0207742d , 0.38857d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.03325d , -0.408976d , 2.29152d)}
	    {(0.516627d , -0.526316d , 2.36874d)}
	    {(-0.516629d , -0.526316d , 2.36874d)}
	    {(-1.03326d , -0.408976d , 2.29152d)}
	    {(-0.399044d , -0.436526d , 1.48784d)}
	    {(0.399044d , -0.436526d , 1.48784d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.22439d , 0.360364d , 1.33329d)}
	    {(-1.21963d , 0.464425d , 1.36149d)}
	    {(-1.02647d , 0.0476044d , 1.02491d)}
	    {(-1.08407d , 0.0575944d , 1.0888d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.17243d , -2.37243d , 1.55169d)}
	    {(1.20214d , -2.14874d , 1.57216d)}
	    {(1.00863d , -2.12795d , 1.62584d)}
	    {(0.978918d , -2.35164d , 1.60537d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.00863d , -2.12795d , 1.62584d)}
	    {(1.20214d , -2.14874d , 1.57216d)}
	    {(1.13318d , -2.11823d , 1.30805d)}
	    {(0.935439d , -2.09929d , 1.38803d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.410201d , -0.118376d , 0.80955d)}
	    {(0.410201d , -0.144486d , 0.71023d)}
	    {(-0.4102d , -0.144486d , 0.71023d)}
	    {(-0.4102d , -0.118376d , 0.80955d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.978918d , -2.35164d , 1.60537d)}
	    {(1.00863d , -2.12795d , 1.62584d)}
	    {(0.935439d , -2.09929d , 1.38803d)}
	    {(0.913754d , -2.31392d , 1.31875d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.257626d , -1.05547d , 1.28294d)}
	    {(0.399044d , -0.720619d , 1.18916d)}
	    {(-0.399044d , -0.720619d , 1.18916d)}
	    {(-0.257626d , -1.05547d , 1.28294d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.39226d , -2.40872d , 1.35058d)}
	    {(1.24231d , -2.37573d , 1.47889d)}
	    {(1.06447d , -2.32846d , 1.25884d)}
	    {(1.1567d , -2.34608d , 1.11543d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.17243d , -2.37243d , 1.55169d)}
	    {(0.978918d , -2.35164d , 1.60537d)}
	    {(0.913754d , -2.31392d , 1.31875d)}
	    {(1.06447d , -2.32846d , 1.25884d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.2602d , -2.14719d , 1.14809d)}
	    {(1.32806d , -2.1628d , 0.96273d)}
	    {(1.19657d , -2.18612d , 0.67384d)}
	    {(1.1326d , -2.03764d , 0.9941d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.13318d , -2.11823d , 1.30805d)}
	    {(1.2602d , -2.14719d , 1.14809d)}
	    {(1.1326d , -2.03764d , 0.9941d)}
	    {(0.679859d , -2.01271d , 1.13109d)}
	    {(0.724567d , -2.08735d , 1.33778d)}
	    {(0.935439d , -2.09929d , 1.38803d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.16783d , -1.28995d , 1.03359d)}
	    {(1.1326d , -2.03764d , 0.9941d)}
	    {(1.19657d , -2.18612d , 0.67384d)}
	    {(0.872154d , -1.3814d , 0.30344d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.724567d , -2.08735d , 1.33778d)}
	    {(0.609074d , -2.1091d , 1.24743d)}
	    {(0.636966d , -2.29979d , 1.24893d)}
	    {(0.720351d , -2.3127d , 1.31459d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.636966d , -2.29979d , 1.24893d)}
	    {(0.609074d , -2.1091d , 1.24743d)}
	    {(0.409631d , -2.13736d , 1.36331d)}
	    {(0.437522d , -2.32805d , 1.36481d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.409631d , -2.13736d , 1.36331d)}
	    {(0.609074d , -2.1091d , 1.24743d)}
	    {(0.508239d , -2.12524d , 1.06994d)}
	    {(0.308796d , -2.15351d , 1.18582d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.1567d , -2.34608d , 1.11543d)}
	    {(1.06447d , -2.32846d , 1.25884d)}
	    {(0.913754d , -2.31392d , 1.31875d)}
	    {(0.720351d , -2.3127d , 1.31459d)}
	    {(0.636966d , -2.29979d , 1.24893d)}
	    {(0.536132d , -2.31593d , 1.07144d)}
	    {(0.61036d , -2.37824d , 0.74024d)}
	    {(1.18567d , -2.41086d , 0.70047d)}
	    {(1.26109d , -2.37924d , 0.95985d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.536132d , -2.31593d , 1.07144d)}
	    {(0.508239d , -2.12524d , 1.06994d)}
	    {(0.621262d , -2.1535d , 0.71361d)}
	    {(0.61036d , -2.37824d , 0.74024d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.336688d , -2.34419d , 1.18732d)}
	    {(0.437522d , -2.32805d , 1.36481d)}
	    {(0.409631d , -2.13736d , 1.36331d)}
	    {(0.308796d , -2.15351d , 1.18582d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.308796d , -2.15351d , 1.18582d)}
	    {(0.508239d , -2.12524d , 1.06994d)}
	    {(0.536132d , -2.31593d , 1.07144d)}
	    {(0.336688d , -2.34419d , 1.18732d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.679859d , -2.01271d , 1.13109d)}
	    {(0.561704d , -1.50942d , 1.16799d)}
	    {(0.26603d , -1.60087d , 0.58009d)}
	    {(0.621262d , -2.1535d , 0.71361d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.802037d , 0.161034d , -1.36658d)}
	    {(1.0d , -0.306916d , -0.654674d)}
	    {(0.826935d , -1.31273d , -1.09615d)}
	    {(1.298d , -0.620669d , -1.23283d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.668743d , -2.33921d , 1.58157d)}
	    {(-0.672959d , -2.11387d , 1.60476d)}
	    {(-0.879221d , -2.12175d , 1.64385d)}
	    {(-0.875006d , -2.34709d , 1.62065d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.724567d , -2.08735d , 1.33778d)}
	    {(-0.609074d , -2.1091d , 1.24743d)}
	    {(-0.679859d , -2.01271d , 1.13109d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.79313d , -0.311516d , -0.0541995d)}
	    {(1.0d , -0.306916d , -0.654674d)}
	    {(-1.0d , -0.306916d , -0.654674d)}
	    {(-0.79313d , -0.311506d , -0.0541995d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.0d , -0.306916d , -0.654674d)}
	    {(0.802037d , 0.161034d , -1.36658d)}
	    {(-0.802037d , 0.161034d , -1.36658d)}
	    {(-1.0d , -0.306916d , -0.654674d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.388d , -1.72769d , -1.1852d)}
	    {(1.00625d , -1.30934d , -1.74838d)}
	    {(0.890777d , -1.31637d , -1.96343d)}
	    {(0.826935d , -1.31273d , -1.09615d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.58268d , -1.87519d , -1.58718d)}
	    {(1.44765d , -1.69498d , -2.21264d)}
	    {(0.912907d , -1.2004d , -2.03489d)}
	    {(0.98225d , -1.25663d , -1.74857d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.802037d , 0.161034d , -1.36658d)}
	    {(1.298d , -0.620669d , -1.23283d)}
	    {(0.653218d , -1.33473d , -2.47747d)}
	    {(0.581599d , -0.209726d , -2.46413d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.802037d , 0.161034d , -1.36658d)}
	    {(0.802037d , 0.161034d , -1.36658d)}
	    {(0.581599d , -0.209726d , -2.46413d)}
	    {(-0.581599d , -0.209726d , -2.46413d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.298d , -0.620669d , -1.23283d)}
	    {(0.826935d , -1.31273d , -1.09615d)}
	    {(0.890777d , -1.31637d , -1.96343d)}
	    {(0.653218d , -1.33473d , -2.47747d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.58268d , -1.87519d , -1.58718d)}
	    {(1.388d , -1.72769d , -1.1852d)}
	    {(0.897024d , -2.31026d , -1.23096d)}
	    {(1.06427d , -2.42622d , -1.60132d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.06427d , -2.42622d , -1.60132d)}
	    {(0.897024d , -2.31026d , -1.23096d)}
	    {(0.483176d , -1.93732d , -1.82912d)}
	    {(0.455123d , -1.78634d , -1.74083d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.57656d , -1.98758d , -2.76055d)}
	    {(1.24232d , -1.59424d , -2.61678d)}
	    {(1.44765d , -1.69498d , -2.21264d)}
	    {(1.71305d , -2.07555d , -2.3043d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.44765d , -1.69498d , -2.21264d)}
	    {(1.58268d , -1.87519d , -1.58718d)}
	    {(1.06427d , -2.42622d , -1.60132d)}
	    {(0.853325d , -2.28347d , -2.15304d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.06427d , -2.42622d , -1.60132d)}
	    {(0.455123d , -1.78634d , -1.74083d)}
	    {(0.380694d , -1.72529d , -1.98465d)}
	    {(0.853325d , -2.28347d , -2.15304d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.380694d , -1.72529d , -1.98465d)}
	    {(0.912907d , -1.2004d , -2.03489d)}
	    {(0.810228d , -1.17817d , -2.37521d)}
	    {(0.323972d , -1.66327d , -2.32327d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.71305d , -2.07555d , -2.3043d)}
	    {(1.44765d , -1.69498d , -2.21264d)}
	    {(0.853325d , -2.28347d , -2.15304d)}
	    {(1.2268d , -2.56065d , -2.25236d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.7134d , -2.12191d , -2.56028d)}
	    {(0.853325d , -2.28347d , -2.15304d)}
	    {(0.380694d , -1.72529d , -1.98465d)}
	    {(0.323972d , -1.66327d , -2.32327d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.57656d , -1.98758d , -2.76055d)}
	    {(1.71305d , -2.07555d , -2.3043d)}
	    {(1.2268d , -2.56065d , -2.25236d)}
	    {(1.0903d , -2.47268d , -2.7086d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.7134d , -2.12191d , -2.56028d)}
	    {(1.0903d , -2.47268d , -2.7086d)}
	    {(1.2268d , -2.56065d , -2.25236d)}
	    {(0.853325d , -2.28347d , -2.15304d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.0d , -0.306916d , -0.654674d)}
	    {(-0.802037d , 0.161034d , -1.36658d)}
	    {(-1.298d , -0.620669d , -1.23283d)}
	    {(-0.826934d , -1.31273d , -1.09615d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.826934d , -1.31273d , -1.09615d)}
	    {(-0.890776d , -1.31638d , -1.96343d)}
	    {(-1.00625d , -1.30934d , -1.74838d)}
	    {(-1.388d , -1.72769d , -1.1852d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.810228d , -1.17817d , -2.37521d)}
	    {(-0.912907d , -1.2004d , -2.03489d)}
	    {(-0.380694d , -1.72529d , -1.98465d)}
	    {(-0.323972d , -1.66327d , -2.32327d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.388d , -1.72769d , -1.1852d)}
	    {(-1.00625d , -1.30934d , -1.74838d)}
	    {(-0.98225d , -1.25663d , -1.74857d)}
	    {(-1.58268d , -1.87519d , -1.58718d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.483176d , -1.93732d , -1.82912d)}
	    {(-0.897024d , -2.31026d , -1.23096d)}
	    {(-1.06427d , -2.42622d , -1.60132d)}
	    {(-0.455123d , -1.78634d , -1.74083d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.388d , -1.72769d , -1.1852d)}
	    {(-1.58268d , -1.87519d , -1.58718d)}
	    {(-1.06427d , -2.42622d , -1.60132d)}
	    {(-0.897024d , -2.31026d , -1.23096d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.380694d , -1.72529d , -1.98465d)}
	    {(-0.455123d , -1.78634d , -1.74083d)}
	    {(-1.06427d , -2.42622d , -1.60132d)}
	    {(-0.853325d , -2.28347d , -2.15304d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.98225d , -1.25663d , -1.74857d)}
	    {(-0.912907d , -1.2004d , -2.03489d)}
	    {(-1.44765d , -1.69498d , -2.21264d)}
	    {(-1.58268d , -1.87519d , -1.58718d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.0903d , -2.47268d , -2.7086d)}
	    {(-1.2268d , -2.56065d , -2.25236d)}
	    {(-1.71305d , -2.07555d , -2.3043d)}
	    {(-1.57656d , -1.98758d , -2.76055d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.455123d , -1.78634d , -1.74083d)}
	    {(-0.98225d , -1.25663d , -1.74857d)}
	    {(-1.00625d , -1.30934d , -1.74838d)}
	    {(-0.483176d , -1.93732d , -1.82912d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.00625d , -1.30934d , -1.74838d)}
	    {(-0.890776d , -1.31638d , -1.96343d)}
	    {(-0.291044d , -1.72848d , -1.88021d)}
	    {(-0.483176d , -1.93732d , -1.82912d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.826934d , -1.31273d , -1.09615d)}
	    {(-1.298d , -0.620669d , -1.23283d)}
	    {(-0.653218d , -1.33473d , -2.47747d)}
	    {(-0.890776d , -1.31638d , -1.96343d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.298d , -0.620669d , -1.23283d)}
	    {(-0.802037d , 0.161034d , -1.36658d)}
	    {(-0.581599d , -0.209726d , -2.46413d)}
	    {(-0.653218d , -1.33473d , -2.47747d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.890777d , -1.31637d , -1.96343d)}
	    {(1.00625d , -1.30934d , -1.74838d)}
	    {(0.483176d , -1.93732d , -1.82912d)}
	    {(0.291044d , -1.72848d , -1.88021d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.336689d , -2.34419d , 1.18732d)}
	    {(-0.536132d , -2.31593d , 1.07144d)}
	    {(-0.50824d , -2.12524d , 1.06994d)}
	    {(-0.308796d , -2.15351d , 1.18582d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.79313d , 0.0207742d , 0.38857d)}
	    {(-0.79313d , -0.311506d , -0.0541995d)}
	    {(-0.872153d , -1.3814d , 0.30344d)}
	    {(-1.16783d , -1.28994d , 1.03359d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.720351d , -2.3127d , 1.31458d)}
	    {(-0.636966d , -2.29979d , 1.24893d)}
	    {(-0.609074d , -2.1091d , 1.24743d)}
	    {(-0.724567d , -2.08735d , 1.33778d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.668743d , -2.33921d , 1.58157d)}
	    {(-0.875006d , -2.34709d , 1.62065d)}
	    {(-0.913754d , -2.31392d , 1.31875d)}
	    {(-0.720351d , -2.3127d , 1.31458d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.20214d , -2.14874d , 1.57216d)}
	    {(-1.00863d , -2.12795d , 1.62584d)}
	    {(-0.935439d , -2.09929d , 1.38803d)}
	    {(-1.13318d , -2.11823d , 1.30805d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.679859d , -2.01271d , 1.13109d)}
	    {(-0.561704d , -1.50942d , 1.16799d)}
	    {(-1.16783d , -1.28994d , 1.03359d)}
	    {(-1.1326d , -2.03764d , 0.9941d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.20214d , -2.14874d , 1.57216d)}
	    {(-1.17243d , -2.37243d , 1.55169d)}
	    {(-0.978918d , -2.35164d , 1.60537d)}
	    {(-1.00863d , -2.12795d , 1.62584d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.913754d , -2.31392d , 1.31875d)}
	    {(-0.978918d , -2.35164d , 1.60537d)}
	    {(-1.17243d , -2.37243d , 1.55169d)}
	    {(-1.06447d , -2.32846d , 1.25884d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.621262d , -2.1535d , 0.71361d)}
	    {(-0.50824d , -2.12524d , 1.06994d)}
	    {(-0.536132d , -2.31593d , 1.07144d)}
	    {(-0.61036d , -2.37824d , 0.74024d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.06447d , -2.32846d , 1.25884d)}
	    {(-1.24231d , -2.37573d , 1.47889d)}
	    {(-1.39226d , -2.40872d , 1.35058d)}
	    {(-1.15669d , -2.34608d , 1.11543d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.872153d , -1.3814d , 0.30344d)}
	    {(-0.266031d , -1.60087d , 0.58009d)}
	    {(-0.621262d , -2.1535d , 0.71361d)}
	    {(-1.19657d , -2.18612d , 0.67384d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.1326d , -2.03764d , 0.9941d)}
	    {(-1.16783d , -1.28994d , 1.03359d)}
	    {(-0.872153d , -1.3814d , 0.30344d)}
	    {(-1.19657d , -2.18612d , 0.67384d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.54335d , -2.23147d , 1.11629d)}
	    {(-1.44722d , -2.20369d , 1.26351d)}
	    {(-1.2602d , -2.14719d , 1.14809d)}
	    {(-1.32806d , -2.1628d , 0.96273d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.2602d , -2.14719d , 1.14809d)}
	    {(-1.1326d , -2.03764d , 0.9941d)}
	    {(-1.19657d , -2.18612d , 0.67384d)}
	    {(-1.32806d , -2.1628d , 0.96273d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.26109d , -2.37924d , 0.95985d)}
	    {(-1.32806d , -2.1628d , 0.96273d)}
	    {(-1.19657d , -2.18612d , 0.67384d)}
	    {(-1.18567d , -2.41086d , 0.70047d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.38024d , -2.42012d , 1.26062d)}
	    {(-1.44722d , -2.20369d , 1.26351d)}
	    {(-1.54335d , -2.23147d , 1.11629d)}
	    {(-1.47638d , -2.44791d , 1.1134d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.47638d , -2.44791d , 1.1134d)}
	    {(-1.26109d , -2.37924d , 0.95985d)}
	    {(-1.15669d , -2.34608d , 1.11543d)}
	    {(-1.38024d , -2.42012d , 1.26062d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.879221d , -2.12175d , 1.64385d)}
	    {(-0.672959d , -2.11387d , 1.60476d)}
	    {(-0.724567d , -2.08735d , 1.33778d)}
	    {(-0.935439d , -2.09929d , 1.38803d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.720351d , -2.3127d , 1.31459d)}
	    {(0.913754d , -2.31392d , 1.31875d)}
	    {(0.875006d , -2.34709d , 1.62065d)}
	    {(0.668743d , -2.33921d , 1.58157d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.24231d , -2.37573d , 1.47889d)}
	    {(1.29354d , -2.15505d , 1.48202d)}
	    {(1.13318d , -2.11823d , 1.30805d)}
	    {(1.06447d , -2.32846d , 1.25884d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.13318d , -2.11823d , 1.30805d)}
	    {(1.20214d , -2.14874d , 1.57216d)}
	    {(1.17243d , -2.37243d , 1.55169d)}
	    {(1.06447d , -2.32846d , 1.25884d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.03326d , -0.408976d , 2.29152d)}
	    {(-1.14471d , 0.368634d , 2.36803d)}
	    {(-1.02873d , -0.104586d , 1.44711d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.44348d , -2.18803d , 1.35371d)}
	    {(1.29354d , -2.15505d , 1.48202d)}
	    {(1.24231d , -2.37573d , 1.47889d)}
	    {(1.39226d , -2.40872d , 1.35058d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.44348d , -2.18803d , 1.35371d)}
	    {(1.2602d , -2.14719d , 1.14809d)}
	    {(1.13318d , -2.11823d , 1.30805d)}
	    {(1.29354d , -2.15505d , 1.48202d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.54335d , -2.23147d , 1.11629d)}
	    {(1.32806d , -2.1628d , 0.96273d)}
	    {(1.2602d , -2.14719d , 1.14809d)}
	    {(1.44722d , -2.20369d , 1.26351d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.399044d , -0.720619d , 1.18916d)}
	    {(0.410201d , -0.144486d , 0.71023d)}
	    {(0.410201d , -0.118376d , 0.80955d)}
	    {(0.399044d , -0.436526d , 1.48784d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.606963d , 0.385834d , 2.52389d)}
	    {(-0.478213d , 0.491354d , 2.2035d)}
	    {(-0.79649d , 0.606764d , 2.10128d)}
	    {(-1.02576d , 0.504795d , 2.22536d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.08572d , -0.0529558d , 1.39549d)}
	    {(1.02873d , -0.104586d , 1.44712d)}
	    {(1.02647d , 0.0476044d , 1.02491d)}
	    {(1.08407d , 0.0575944d , 1.08881d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.03127d-6 , 0.0697344d , 2.80639d)}
	    {(-1.01822d-6 , 0.354814d , 2.74982d)}
	    {(-0.211839d , 0.346584d , 2.66147d)}
	    {(-0.364775d , 0.0484343d , 2.5777d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.42786d-6 , 0.632874d , 2.73828d)}
	    {(-9.95007d-7 , 0.588964d , 2.8039d)}
	    {(0.0681724d , 0.552885d , 2.7764d)}
	    {(0.154317d , 0.551194d , 2.67786d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.28485d , 1.30641d , 2.34616d)}
	    {(0.629214d , 1.31642d , 2.92981d)}
	    {(0.52892d , 1.05528d , 2.53629d)}
	    {(1.02575d , 0.504795d , 2.22536d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.02575d , 0.504795d , 2.22536d)}
	    {(0.52892d , 1.05528d , 2.53629d)}
	    {(0.482387d , 0.864325d , 2.31449d)}
	    {(0.796482d , 0.606764d , 2.10128d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.629214d , 1.31642d , 2.92981d)}
	    {(-5.4623d-7 , 1.37398d , 2.9602d)}
	    {(-1.45214d-6 , 0.794485d , 2.69585d)}
	    {(0.175406d , 0.632644d , 2.5356d)}
	    {(0.52892d , 1.05528d , 2.53629d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.606958d , 0.385834d , 2.52388d)}
	    {(0.733154d , 0.0438443d , 2.51147d)}
	    {(1.14469d , 0.368634d , 2.36803d)}
	    {(1.02575d , 0.504795d , 2.22536d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.28485d , 1.30641d , 2.34616d)}
	    {(1.02575d , 0.504795d , 2.22536d)}
	    {(1.21963d , 0.464425d , 1.36149d)}
	    {(1.41054d , 1.03343d , 1.27587d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.45214d-6 , 0.794485d , 2.69585d)}
	    {(-1.42786d-6 , 0.632874d , 2.73828d)}
	    {(0.154317d , 0.551194d , 2.67786d)}
	    {(0.175406d , 0.632644d , 2.5356d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.154317d , 0.551194d , 2.67786d)}
	    {(0.0681724d , 0.552885d , 2.7764d)}
	    {(0.116794d , 0.428445d , 2.78537d)}
	    {(0.211837d , 0.346584d , 2.66147d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.00924d-6 , 0.432985d , 2.83408d)}
	    {(-9.95007d-7 , 0.588964d , 2.8039d)}
	    {(-0.0681744d , 0.552885d , 2.7764d)}
	    {(-0.116796d , 0.428445d , 2.78537d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.15432d , 0.551194d , 2.67786d)}
	    {(-0.0681744d , 0.552885d , 2.7764d)}
	    {(-9.95007d-7 , 0.588964d , 2.8039d)}
	    {(-1.42786d-6 , 0.632874d , 2.73828d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.116794d , 0.428445d , 2.78537d)}
	    {(-1.00924d-6 , 0.432985d , 2.83408d)}
	    {(-1.01822d-6 , 0.354814d , 2.74982d)}
	    {(0.211837d , 0.346584d , 2.66147d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.175406d , 0.632644d , 2.5356d)}
	    {(0.154317d , 0.551194d , 2.67786d)}
	    {(0.211837d , 0.346584d , 2.66147d)}
	    {(0.364773d , 0.0484343d , 2.5777d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.364773d , 0.0484343d , 2.5777d)}
	    {(0.211837d , 0.346584d , 2.66147d)}
	    {(-1.01822d-6 , 0.354814d , 2.74982d)}
	    {(-1.03127d-6 , 0.0697344d , 2.80639d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.17219d , 2.44289d , 2.29118d)}
	    {(1.28485d , 1.30641d , 2.34616d)}
	    {(1.41054d , 1.03343d , 1.27587d)}
	    {(1.39227d , 0.782314d , 0.120709d)}
	    {(1.23589d , 2.02922d , 0.0422956d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.38948d-7 , 2.37107d , -0.201295d)}
	    {(-8.29754d-7 , 2.84403d , 2.45305d)}
	    {(1.17219d , 2.44289d , 2.29118d)}
	    {(1.23589d , 2.02922d , 0.0422956d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.02873d , -0.104586d , 1.44712d)}
	    {(1.14469d , 0.368634d , 2.36803d)}
	    {(1.03325d , -0.408976d , 2.29152d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.15432d , 0.551194d , 2.67786d)}
	    {(-0.175408d , 0.632644d , 2.5356d)}
	    {(-0.364775d , 0.0484343d , 2.5777d)}
	    {(-0.211839d , 0.346584d , 2.66147d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.22438d , 0.360364d , 1.33329d)}
	    {(1.21963d , 0.464425d , 1.36149d)}
	    {(1.02873d , -0.104586d , 1.44712d)}
	    {(1.08572d , -0.0529558d , 1.39549d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.175408d , 0.632644d , 2.5356d)}
	    {(-0.262593d , 0.681904d , 2.28362d)}
	    {(-0.478213d , 0.491354d , 2.2035d)}
	    {(-0.606963d , 0.385834d , 2.52389d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.02647d , 0.0476044d , 1.02491d)}
	    {(1.21963d , 0.464425d , 1.36149d)}
	    {(1.22438d , 0.360364d , 1.33329d)}
	    {(1.08407d , 0.0575944d , 1.08881d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.478213d , 0.491354d , 2.2035d)}
	    {(-0.262593d , 0.681904d , 2.28362d)}
	    {(-0.482392d , 0.864325d , 2.31449d)}
	    {(-0.79649d , 0.606764d , 2.10128d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.79649d , 0.606764d , 2.10128d)}
	    {(-0.482392d , 0.864325d , 2.31449d)}
	    {(-0.528925d , 1.05528d , 2.53629d)}
	    {(-1.02576d , 0.504795d , 2.22536d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.02647d , 0.0476044d , 1.02491d)}
	    {(1.02421d , 0.199794d , 0.60271d)}
	    {(1.39227d , 0.782314d , 0.120709d)}
	    {(1.41054d , 1.03343d , 1.27587d)}
	    {(1.21963d , 0.464425d , 1.36149d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.23589d , 2.02923d , 0.0422935d)}
	    {(-1.17219d , 2.44289d , 2.29118d)}
	    {(-8.29754d-7 , 2.84403d , 2.45305d)}
	    {(1.38948d-7 , 2.37107d , -0.201295d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.02873d , -0.104586d , 1.44712d)}
	    {(1.03325d , -0.408976d , 2.29152d)}
	    {(0.399044d , -0.436526d , 1.48784d)}
	    {(0.410201d , -0.118376d , 0.80955d)}
	    {(1.02421d , 0.199794d , 0.60271d)}
	    {(1.02647d , 0.0476044d , 1.02491d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.38948d-7 , 2.37107d , -0.201295d)}
	    {(1.23589d , 2.02922d , 0.0422956d)}
	    {(1.39227d , 0.782314d , 0.120709d)}
	    {(3.19324d-7 , 0.653835d , -0.652758d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.21963d , 0.464425d , 1.36149d)}
	    {(-1.02576d , 0.504795d , 2.22536d)}
	    {(-1.28485d , 1.30641d , 2.34615d)}
	    {(-1.41054d , 1.03343d , 1.27587d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.399044d , -0.720619d , 1.18916d)}
	    {(0.399044d , -0.436526d , 1.48784d)}
	    {(-0.399044d , -0.436526d , 1.48784d)}
	    {(-0.399044d , -0.720619d , 1.18916d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.54335d , -2.23147d , 1.11629d)}
	    {(1.44722d , -2.20369d , 1.26351d)}
	    {(1.38024d , -2.42012d , 1.26062d)}
	    {(1.47638d , -2.44791d , 1.1134d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.399044d , -0.720619d , 1.18916d)}
	    {(-0.399044d , -0.436526d , 1.48784d)}
	    {(-0.4102d , -0.118376d , 0.80955d)}
	    {(-0.4102d , -0.144486d , 0.71023d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.79313d , 0.0207742d , 0.38857d)}
	    {(1.16783d , -1.28995d , 1.03359d)}
	    {(0.872154d , -1.3814d , 0.30344d)}
	    {(0.79313d , -0.311516d , -0.0541995d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.39226d , -2.40872d , 1.35058d)}
	    {(1.1567d , -2.34608d , 1.11543d)}
	    {(1.2602d , -2.14719d , 1.14809d)}
	    {(1.44348d , -2.18803d , 1.35371d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.44722d , -2.20369d , 1.26351d)}
	    {(1.2602d , -2.14719d , 1.14809d)}
	    {(1.1567d , -2.34608d , 1.11543d)}
	    {(1.38024d , -2.42012d , 1.26062d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.879221d , -2.12175d , 1.64385d)}
	    {(0.935439d , -2.09929d , 1.38803d)}
	    {(0.724567d , -2.08735d , 1.33778d)}
	    {(0.672959d , -2.11387d , 1.60476d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.879221d , -2.12175d , 1.64385d)}
	    {(0.875006d , -2.34709d , 1.62065d)}
	    {(0.913754d , -2.31392d , 1.31875d)}
	    {(0.935439d , -2.09929d , 1.38803d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.879221d , -2.12175d , 1.64385d)}
	    {(0.672959d , -2.11387d , 1.60476d)}
	    {(0.668743d , -2.33921d , 1.58157d)}
	    {(0.875006d , -2.34709d , 1.62065d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.54335d , -2.23147d , 1.11629d)}
	    {(1.47638d , -2.44791d , 1.1134d)}
	    {(1.26109d , -2.37924d , 0.95985d)}
	    {(1.32806d , -2.1628d , 0.96273d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.16783d , -1.28995d , 1.03359d)}
	    {(0.561704d , -1.50942d , 1.16799d)}
	    {(0.679859d , -2.01271d , 1.13109d)}
	    {(1.1326d , -2.03764d , 0.9941d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.26109d , -2.37924d , 0.95985d)}
	    {(1.47638d , -2.44791d , 1.1134d)}
	    {(1.38024d , -2.42012d , 1.26062d)}
	    {(1.1567d , -2.34608d , 1.11543d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.672959d , -2.11387d , 1.60476d)}
	    {(0.724567d , -2.08735d , 1.33778d)}
	    {(0.720351d , -2.3127d , 1.31459d)}
	    {(0.668743d , -2.33921d , 1.58157d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.679859d , -2.01271d , 1.13109d)}
	    {(0.609074d , -2.1091d , 1.24743d)}
	    {(0.724567d , -2.08735d , 1.33778d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.32806d , -2.1628d , 0.96273d)}
	    {(1.26109d , -2.37924d , 0.95985d)}
	    {(1.18567d , -2.41086d , 0.70047d)}
	    {(1.19657d , -2.18612d , 0.67384d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.410201d , -0.144486d , 0.71023d)}
	    {(0.79313d , 0.0207742d , 0.38857d)}
	    {(0.79313d , -0.311516d , -0.0541995d)}
	    {(-0.79313d , -0.311506d , -0.0541995d)}
	    {(-0.79313d , 0.0207742d , 0.38857d)}
	    {(-0.4102d , -0.144486d , 0.71023d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.4102d , -0.144486d , 0.71023d)}
	    {(-0.79313d , 0.0207742d , 0.38857d)}
	    {(-1.16783d , -1.28994d , 1.03359d)}
	    {(-0.399044d , -0.720619d , 1.18916d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.561704d , -1.50942d , 1.16799d)}
	    {(0.257626d , -1.05547d , 1.28294d)}
	    {(-0.257626d , -1.05547d , 1.28294d)}
	    {(-0.561704d , -1.50942d , 1.16799d)}
	    {(-0.266031d , -1.60087d , 0.58009d)}
	    {(0.26603d , -1.60087d , 0.58009d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.257626d , -1.05547d , 1.28294d)}
	    {(-0.399044d , -0.720619d , 1.18916d)}
	    {(-1.16783d , -1.28994d , 1.03359d)}
	    {(-0.561704d , -1.50942d , 1.16799d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.308796d , -2.15351d , 1.18582d)}
	    {(-0.409631d , -2.13736d , 1.36331d)}
	    {(-0.437522d , -2.32805d , 1.36481d)}
	    {(-0.336689d , -2.34419d , 1.18732d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.409631d , -2.13736d , 1.36331d)}
	    {(-0.609074d , -2.1091d , 1.24743d)}
	    {(-0.636966d , -2.29979d , 1.24893d)}
	    {(-0.437522d , -2.32805d , 1.36481d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.724567d , -2.08735d , 1.33778d)}
	    {(-0.672959d , -2.11387d , 1.60476d)}
	    {(-0.668743d , -2.33921d , 1.58157d)}
	    {(-0.720351d , -2.3127d , 1.31458d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.336689d , -2.34419d , 1.18732d)}
	    {(-0.437522d , -2.32805d , 1.36481d)}
	    {(-0.636966d , -2.29979d , 1.24893d)}
	    {(-0.536132d , -2.31593d , 1.07144d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.875006d , -2.34709d , 1.62065d)}
	    {(-0.879221d , -2.12175d , 1.64385d)}
	    {(-0.935439d , -2.09929d , 1.38803d)}
	    {(-0.913754d , -2.31392d , 1.31875d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.266031d , -1.60087d , 0.58009d)}
	    {(-0.561704d , -1.50942d , 1.16799d)}
	    {(-0.679859d , -2.01271d , 1.13109d)}
	    {(-0.621262d , -2.1535d , 0.71361d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.50824d , -2.12524d , 1.06994d)}
	    {(-0.621262d , -2.1535d , 0.71361d)}
	    {(-0.679859d , -2.01271d , 1.13109d)}
	    {(-0.609074d , -2.1091d , 1.24743d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.935439d , -2.09929d , 1.38803d)}
	    {(-1.00863d , -2.12795d , 1.62584d)}
	    {(-0.978918d , -2.35164d , 1.60537d)}
	    {(-0.913754d , -2.31392d , 1.31875d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.13318d , -2.11823d , 1.30805d)}
	    {(-1.29354d , -2.15505d , 1.48202d)}
	    {(-1.24231d , -2.37573d , 1.47889d)}
	    {(-1.06447d , -2.32846d , 1.25884d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.935439d , -2.09929d , 1.38803d)}
	    {(-0.724567d , -2.08735d , 1.33778d)}
	    {(-0.679859d , -2.01271d , 1.13109d)}
	    {(-1.1326d , -2.03764d , 0.9941d)}
	    {(-1.2602d , -2.14719d , 1.14809d)}
	    {(-1.13318d , -2.11823d , 1.30805d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.2602d , -2.14719d , 1.14809d)}
	    {(-1.44348d , -2.18803d , 1.35371d)}
	    {(-1.29354d , -2.15505d , 1.48202d)}
	    {(-1.13318d , -2.11823d , 1.30805d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.15669d , -2.34608d , 1.11543d)}
	    {(-1.2602d , -2.14719d , 1.14809d)}
	    {(-1.44722d , -2.20369d , 1.26351d)}
	    {(-1.38024d , -2.42012d , 1.26062d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.54335d , -2.23147d , 1.11629d)}
	    {(-1.32806d , -2.1628d , 0.96273d)}
	    {(-1.26109d , -2.37924d , 0.95985d)}
	    {(-1.47638d , -2.44791d , 1.1134d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.536132d , -2.31593d , 1.07144d)}
	    {(-0.636966d , -2.29979d , 1.24893d)}
	    {(-0.720351d , -2.3127d , 1.31458d)}
	    {(-0.913754d , -2.31392d , 1.31875d)}
	    {(-1.06447d , -2.32846d , 1.25884d)}
	    {(-1.15669d , -2.34608d , 1.11543d)}
	    {(-1.26109d , -2.37924d , 0.95985d)}
	    {(-1.18567d , -2.41086d , 0.70047d)}
	    {(-0.61036d , -2.37824d , 0.74024d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.621262d , -2.1535d , 0.71361d)}
	    {(-0.61036d , -2.37824d , 0.74024d)}
	    {(-1.18567d , -2.41086d , 0.70047d)}
	    {(-1.19657d , -2.18612d , 0.67384d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.24231d , -2.37573d , 1.47889d)}
	    {(-1.29354d , -2.15505d , 1.48202d)}
	    {(-1.44348d , -2.18803d , 1.35371d)}
	    {(-1.39226d , -2.40872d , 1.35058d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.15669d , -2.34608d , 1.11543d)}
	    {(-1.39226d , -2.40872d , 1.35058d)}
	    {(-1.44348d , -2.18803d , 1.35371d)}
	    {(-1.2602d , -2.14719d , 1.14809d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.20214d , -2.14874d , 1.57216d)}
	    {(-1.13318d , -2.11823d , 1.30805d)}
	    {(-1.06447d , -2.32846d , 1.25884d)}
	    {(-1.17243d , -2.37243d , 1.55169d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.58268d , -1.87519d , -1.58718d)}
	    {(0.98225d , -1.25663d , -1.74857d)}
	    {(1.00625d , -1.30934d , -1.74838d)}
	    {(1.388d , -1.72769d , -1.1852d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.826935d , -1.31273d , -1.09615d)}
	    {(1.0d , -0.306916d , -0.654674d)}
	    {(0.79313d , -0.311516d , -0.0541995d)}
	    {(0.872154d , -1.3814d , 0.30344d)}
	    {(0.26603d , -1.60087d , 0.58009d)}
	    {(0.363767d , -1.83974d , -1.15126d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.388d , -1.72769d , -1.1852d)}
	    {(0.826935d , -1.31273d , -1.09615d)}
	    {(0.363767d , -1.83974d , -1.15126d)}
	    {(0.897024d , -2.31026d , -1.23096d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.810228d , -1.17817d , -2.37521d)}
	    {(0.912907d , -1.2004d , -2.03489d)}
	    {(1.44765d , -1.69498d , -2.21264d)}
	    {(1.24232d , -1.59424d , -2.61678d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.897024d , -2.31026d , -1.23096d)}
	    {(0.363767d , -1.83974d , -1.15126d)}
	    {(0.291044d , -1.72848d , -1.88021d)}
	    {(0.483176d , -1.93732d , -1.82912d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.363767d , -1.83974d , -1.15126d)}
	    {(0.26603d , -1.60087d , 0.58009d)}
	    {(-0.266031d , -1.60087d , 0.58009d)}
	    {(-0.363767d , -1.83974d , -1.15126d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.872153d , -1.3814d , 0.30344d)}
	    {(-0.79313d , -0.311506d , -0.0541995d)}
	    {(-1.0d , -0.306916d , -0.654674d)}
	    {(-0.826934d , -1.31273d , -1.09615d)}
	    {(-0.363767d , -1.83974d , -1.15126d)}
	    {(-0.266031d , -1.60087d , 0.58009d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.291044d , -1.72848d , -1.88021d)}
	    {(0.363767d , -1.83974d , -1.15126d)}
	    {(-0.363767d , -1.83974d , -1.15126d)}
	    {(-0.291044d , -1.72848d , -1.88021d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.581599d , -0.209726d , -2.46413d)}
	    {(0.581599d , -0.209726d , -2.46413d)}
	    {(0.653218d , -1.33473d , -2.47747d)}
	    {(-0.653218d , -1.33473d , -2.47747d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.291044d , -1.72848d , -1.88021d)}
	    {(-0.890776d , -1.31638d , -1.96343d)}
	    {(-0.653218d , -1.33473d , -2.47747d)}
	    {(0.653218d , -1.33473d , -2.47747d)}
	    {(0.890777d , -1.31637d , -1.96343d)}
	    {(0.291044d , -1.72848d , -1.88021d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.380694d , -1.72529d , -1.98465d)}
	    {(-0.912907d , -1.2004d , -2.03489d)}
	    {(-0.98225d , -1.25663d , -1.74857d)}
	    {(-0.455123d , -1.78634d , -1.74083d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.483176d , -1.93732d , -1.82912d)}
	    {(-0.291044d , -1.72848d , -1.88021d)}
	    {(-0.363767d , -1.83974d , -1.15126d)}
	    {(-0.897024d , -2.31026d , -1.23096d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.363767d , -1.83974d , -1.15126d)}
	    {(-0.826934d , -1.31273d , -1.09615d)}
	    {(-1.388d , -1.72769d , -1.1852d)}
	    {(-0.897024d , -2.31026d , -1.23096d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.06427d , -2.42622d , -1.60132d)}
	    {(-1.58268d , -1.87519d , -1.58718d)}
	    {(-1.44765d , -1.69498d , -2.21264d)}
	    {(-0.853325d , -2.28347d , -2.15304d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.323972d , -1.66327d , -2.32327d)}
	    {(-0.380694d , -1.72529d , -1.98465d)}
	    {(-0.853325d , -2.28347d , -2.15304d)}
	    {(-0.7134d , -2.12191d , -2.56028d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.44765d , -1.69498d , -2.21264d)}
	    {(-0.912907d , -1.2004d , -2.03489d)}
	    {(-0.810228d , -1.17817d , -2.37521d)}
	    {(-1.24232d , -1.59424d , -2.61678d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.323972d , -1.66327d , -2.32327d)}
	    {(-0.7134d , -2.12191d , -2.56028d)}
	    {(-1.24232d , -1.59424d , -2.61678d)}
	    {(-0.810228d , -1.17817d , -2.37521d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.853325d , -2.28347d , -2.15304d)}
	    {(-1.44765d , -1.69498d , -2.21264d)}
	    {(-1.71305d , -2.07555d , -2.3043d)}
	    {(-1.2268d , -2.56065d , -2.25236d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-0.853325d , -2.28347d , -2.15304d)}
	    {(-1.2268d , -2.56065d , -2.25236d)}
	    {(-1.0903d , -2.47268d , -2.7086d)}
	    {(-0.7134d , -2.12191d , -2.56028d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.71305d , -2.07555d , -2.3043d)}
	    {(-1.44765d , -1.69498d , -2.21264d)}
	    {(-1.24232d , -1.59424d , -2.61678d)}
	    {(-1.57656d , -1.98758d , -2.76055d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(-1.57656d , -1.98758d , -2.76055d)}
	    {(-1.24232d , -1.59424d , -2.61678d)}
	    {(-0.7134d , -2.12191d , -2.56028d)}
	    {(-1.0903d , -2.47268d , -2.7086d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.98225d , -1.25663d , -1.74857d)}
	    {(0.912907d , -1.2004d , -2.03489d)}
	    {(0.380694d , -1.72529d , -1.98465d)}
	    {(0.455123d , -1.78634d , -1.74083d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.7134d , -2.12191d , -2.56028d)}
	    {(1.24232d , -1.59424d , -2.61678d)}
	    {(1.57656d , -1.98758d , -2.76055d)}
	    {(1.0903d , -2.47268d , -2.7086d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.810228d , -1.17817d , -2.37521d)}
	    {(1.24232d , -1.59424d , -2.61678d)}
	    {(0.7134d , -2.12191d , -2.56028d)}
	    {(0.323972d , -1.66327d , -2.32327d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.00625d , -1.30934d , -1.74838d)}
	    {(0.98225d , -1.25663d , -1.74857d)}
	    {(0.455123d , -1.78634d , -1.74083d)}
	    {(0.483176d , -1.93732d , -1.82912d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.308796d , -2.15351d , 1.18582d)}
	    {(-0.50824d , -2.12524d , 1.06994d)}
	    {(-0.609074d , -2.1091d , 1.24743d)}
	    {(-0.409631d , -2.13736d , 1.36331d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(0.872154d , -1.3814d , 0.30344d)}
	    {(1.19657d , -2.18612d , 0.67384d)}
	    {(0.621262d , -2.1535d , 0.71361d)}
	    {(0.26603d , -1.60087d , 0.58009d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.636966d , -2.29979d , 1.24893d)}
	    {(0.437522d , -2.32805d , 1.36481d)}
	    {(0.336688d , -2.34419d , 1.18732d)}
	    {(0.536132d , -2.31593d , 1.07144d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.679859d , -2.01271d , 1.13109d)}
	    {(0.621262d , -2.1535d , 0.71361d)}
	    {(0.508239d , -2.12524d , 1.06994d)}
	    {(0.609074d , -2.1091d , 1.24743d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.19657d , -2.18612d , 0.67384d)}
	    {(1.18567d , -2.41086d , 0.70047d)}
	    {(0.61036d , -2.37824d , 0.74024d)}
	    {(0.621262d , -2.1535d , 0.71361d)}))
        (Polygon (color 0.0588451
	    0.854841
	    0.941155)
	  (points {(1.16783d , -1.28995d , 1.03359d)}
	    {(0.399044d , -0.720619d , 1.18916d)}
	    {(0.257626d , -1.05547d , 1.28294d)}
	    {(0.561704d , -1.50942d , 1.16799d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.02873d , -0.104586d , 1.44711d)}
	    {(-1.14471d , 0.368634d , 2.36803d)}
	    {(-1.02576d , 0.504795d , 2.22536d)}
	    {(-1.21963d , 0.464425d , 1.36149d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.22439d , 0.360364d , 1.33329d)}
	    {(-1.08572d , -0.0529558d , 1.39548d)}
	    {(-1.02873d , -0.104586d , 1.44711d)}
	    {(-1.21963d , 0.464425d , 1.36149d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.02647d , 0.0476044d , 1.02491d)}
	    {(-1.02873d , -0.104586d , 1.44711d)}
	    {(-1.08572d , -0.0529558d , 1.39548d)}
	    {(-1.08407d , 0.0575944d , 1.0888d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.36703d , 0.478234d , 1.31424d)}
	    {(-1.45448d , 0.243514d , 1.30256d)}
	    {(-1.33466d , -0.115856d , 1.36224d)}
	    {(-1.13764d , -0.194756d , 1.38855d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.08407d , 0.0575944d , 1.0888d)}
	    {(-1.08572d , -0.0529558d , 1.39548d)}
	    {(-1.13764d , -0.194756d , 1.38855d)}
	    {(-1.16026d , -0.0147556d , 1.07863d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.33466d , -0.115856d , 1.36224d)}
	    {(-1.45448d , 0.243514d , 1.30256d)}
	    {(-1.32798d , -0.0197357d , 1.05623d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.13764d , -0.194756d , 1.38855d)}
	    {(-1.33466d , -0.115856d , 1.36224d)}
	    {(-1.32798d , -0.0197357d , 1.05623d)}
	    {(-1.16026d , -0.0147556d , 1.07863d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-0.399044d , -0.436526d , 1.48784d)}
	    {(-1.03326d , -0.408976d , 2.29152d)}
	    {(-1.02873d , -0.104586d , 1.44711d)}
	    {(-1.02647d , 0.0476044d , 1.02491d)}
	    {(-1.02421d , 0.199794d , 0.60271d)}
	    {(-0.717205d , -0.0234758d , 0.67833d)}
	    {(-0.4102d , -0.118376d , 0.80955d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.21963d , 0.464425d , 1.36149d)}
	    {(-1.41054d , 1.03343d , 1.27587d)}
	    {(-1.39227d , 0.782314d , 0.120707d)}
	    {(-1.02421d , 0.199794d , 0.60271d)}
	    {(-1.02647d , 0.0476044d , 1.02491d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.41054d , 1.03343d , 1.27587d)}
	    {(-1.28485d , 1.30641d , 2.34615d)}
	    {(-1.17219d , 2.44289d , 2.29118d)}
	    {(-1.23589d , 2.02923d , 0.0422935d)}
	    {(-1.39227d , 0.782314d , 0.120707d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.39227d , 0.782314d , 0.120709d)}
	    {(1.02421d , 0.199794d , 0.60271d)}
	    {(-2.34598d-8 , -0.141146d , 0.36207d)}
	    {(3.19324d-7 , 0.653835d , -0.652758d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.23589d , 2.02923d , 0.0422935d)}
	    {(1.38948d-7 , 2.37107d , -0.201295d)}
	    {(3.19324d-7 , 0.653835d , -0.652758d)}
	    {(-1.39227d , 0.782314d , 0.120707d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.39227d , 0.782314d , 0.120707d)}
	    {(3.19324d-7 , 0.653835d , -0.652758d)}
	    {(-2.34598d-8 , -0.141146d , 0.36207d)}
	    {(-1.02421d , 0.199794d , 0.60271d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.02421d , 0.199794d , 0.60271d)}
	    {(-2.34598d-8 , -0.141146d , 0.36207d)}
	    {(1.02421d , 0.199794d , 0.60271d)}
	    {(0.410201d , -0.118376d , 0.80955d)}
	    {(-0.4102d , -0.118376d , 0.80955d)}
	    {(-0.717205d , -0.0234758d , 0.67833d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.22439d , 0.360364d , 1.33329d)}
	    {(-1.36703d , 0.478234d , 1.31424d)}
	    {(-1.13764d , -0.194756d , 1.38855d)}
	    {(-1.08572d , -0.0529558d , 1.39548d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.22439d , 0.360364d , 1.33329d)}
	    {(-1.08407d , 0.0575944d , 1.0888d)}
	    {(-1.16026d , -0.0147556d , 1.07863d)}
	    {(-1.36703d , 0.478234d , 1.31424d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-1.45448d , 0.243514d , 1.30256d)}
	    {(-1.36703d , 0.478234d , 1.31424d)}
	    {(-1.16026d , -0.0147556d , 1.07863d)}
	    {(-1.32798d , -0.0197357d , 1.05623d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.36703d , 0.478234d , 1.31424d)}
	    {(1.45448d , 0.243514d , 1.30256d)}
	    {(1.32798d , -0.0197357d , 1.05624d)}
	    {(1.16026d , -0.0147556d , 1.07863d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(1.13764d , -0.194756d , 1.38855d)}
	    {(1.08572d , -0.0529558d , 1.39549d)}
	    {(1.08407d , 0.0575944d , 1.08881d)}
	    {(1.16026d , -0.0147556d , 1.07863d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-8.29754d-7 , 2.84403d , 2.45305d)}
	    {(-1.17219d , 2.44289d , 2.29118d)}
	    {(-1.28485d , 1.30641d , 2.34615d)}
	    {(-0.629216d , 1.31642d , 2.92981d)}
	    {(-5.4623d-7 , 1.37398d , 2.9602d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(-5.4623d-7 , 1.37398d , 2.9602d)}
	    {(-0.629216d , 1.31642d , 2.92981d)}
	    {(-0.528925d , 1.05528d , 2.53629d)}
	    {(-0.175408d , 0.632644d , 2.5356d)}
	    {(-1.45214d-6 , 0.794485d , 2.69585d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.606958d , 0.385834d , 2.52388d)}
	    {(1.02575d , 0.504795d , 2.22536d)}
	    {(0.796482d , 0.606764d , 2.10128d)}
	    {(0.478208d , 0.491354d , 2.2035d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.482387d , 0.864325d , 2.31449d)}
	    {(0.52892d , 1.05528d , 2.53629d)}
	    {(0.175406d , 0.632644d , 2.5356d)}
	    {(0.262589d , 0.681904d , 2.28362d)}))
        (Polygon (color 0.956904
	    0.760835
	    0.643145)
	  (points {(0.478208d , 0.491354d , 2.2035d)}
	    {(0.262589d , 0.681904d , 2.28362d)}
	    {(0.175406d , 0.632644d , 2.5356d)}
	    {(0.606958d , 0.385834d , 2.52388d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.534093d , 0.639564d , 2.58911d)}
	    {(-0.394187d , 0.779494d , 2.46409d)}
	    {(-0.673762d , 0.779494d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.394187d , 0.779494d , 2.46409d)}
	    {(-0.394187d , 0.499885d , 2.46409d)}
	    {(-0.151544d , 0.257254d , 2.31312d)}
	    {(-0.151544d , 1.02212d , 2.31312d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.534093d , 0.639564d , 2.58911d)}
	    {(-0.673762d , 0.779494d , 2.46409d)}
	    {(-0.673762d , 0.499885d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.151544d , 1.02212d , 1.69907d)}
	    {(-0.151544d , 1.02212d , 2.31312d)}
	    {(-0.151544d , 0.257254d , 2.31312d)}
	    {(-0.151544d , 0.257254d , 1.69907d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.151544d , 0.257254d , 2.31312d)}
	    {(-0.394187d , 0.499885d , 2.46409d)}
	    {(-0.673762d , 0.499885d , 2.46409d)}
	    {(-0.91658d , 0.257254d , 2.31312d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.151544d , 1.02212d , 1.69907d)}
	    {(-0.151544d , 0.257254d , 1.69907d)}
	    {(-0.91658d , 0.257254d , 1.69907d)}
	    {(-0.91658d , 1.02212d , 1.69907d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.91658d , 1.02212d , 2.31312d)}
	    {(-0.91658d , 1.02212d , 1.69907d)}
	    {(-0.91658d , 0.257254d , 1.69907d)}
	    {(-0.91658d , 0.257254d , 2.31312d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.394187d , 0.779494d , 2.46409d)}
	    {(-0.534093d , 0.639564d , 2.58911d)}
	    {(-0.394187d , 0.499885d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.394187d , 0.779494d , 2.46409d)}
	    {(-0.151544d , 1.02212d , 2.31312d)}
	    {(-0.91658d , 1.02212d , 2.31312d)}
	    {(-0.673762d , 0.779494d , 2.46409d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.394187d , 0.499885d , 2.46409d)}
	    {(-0.534093d , 0.639564d , 2.58911d)}
	    {(-0.673762d , 0.499885d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.151544d , 1.02212d , 2.31312d)}
	    {(-0.151544d , 1.02212d , 1.69907d)}
	    {(-0.91658d , 1.02212d , 1.69907d)}
	    {(-0.91658d , 1.02212d , 2.31312d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.151544d , 0.257254d , 1.69907d)}
	    {(-0.151544d , 0.257254d , 2.31312d)}
	    {(-0.91658d , 0.257254d , 2.31312d)}
	    {(-0.91658d , 0.257254d , 1.69907d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.673762d , 0.779494d , 2.46409d)}
	    {(-0.91658d , 1.02212d , 2.31312d)}
	    {(-0.91658d , 0.257254d , 2.31312d)}
	    {(-0.673762d , 0.499885d , 2.46409d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.394187d , 0.779494d , 2.46409d)}
	    {(0.534093d , 0.639564d , 2.58911d)}
	    {(0.673762d , 0.779494d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.91658d , 1.02212d , 2.31312d)}
	    {(0.151544d , 1.02212d , 2.31312d)}
	    {(0.394187d , 0.779494d , 2.46409d)}
	    {(0.673762d , 0.779494d , 2.46409d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.673762d , 0.499885d , 2.46409d)}
	    {(0.534093d , 0.639564d , 2.58911d)}
	    {(0.394187d , 0.499885d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.91658d , 1.02212d , 1.69907d)}
	    {(0.91658d , 1.02212d , 2.31312d)}
	    {(0.91658d , 0.257254d , 2.31312d)}
	    {(0.91658d , 0.257254d , 1.69907d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.151544d , 1.02212d , 2.31312d)}
	    {(0.151544d , 1.02212d , 1.69907d)}
	    {(0.151544d , 0.257254d , 1.69907d)}
	    {(0.151544d , 0.257254d , 2.31312d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.673762d , 0.499885d , 2.46409d)}
	    {(0.394187d , 0.499885d , 2.46409d)}
	    {(0.151544d , 0.257254d , 2.31312d)}
	    {(0.91658d , 0.257254d , 2.31312d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.673762d , 0.779494d , 2.46409d)}
	    {(0.534093d , 0.639564d , 2.58911d)}
	    {(0.673762d , 0.499885d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.91658d , 1.02212d , 2.31312d)}
	    {(0.673762d , 0.779494d , 2.46409d)}
	    {(0.673762d , 0.499885d , 2.46409d)}
	    {(0.91658d , 0.257254d , 2.31312d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.534093d , 0.639564d , 2.58911d)}
	    {(0.394187d , 0.779494d , 2.46409d)}
	    {(0.394187d , 0.499885d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.91658d , 1.02212d , 1.69907d)}
	    {(0.151544d , 1.02212d , 1.69907d)}
	    {(0.151544d , 1.02212d , 2.31312d)}
	    {(0.91658d , 1.02212d , 2.31312d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.394187d , 0.779494d , 2.46409d)}
	    {(0.151544d , 1.02212d , 2.31312d)}
	    {(0.151544d , 0.257254d , 2.31312d)}
	    {(0.394187d , 0.499885d , 2.46409d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.91658d , 0.257254d , 1.69907d)}
	    {(0.151544d , 0.257254d , 1.69907d)}
	    {(0.151544d , 1.02212d , 1.69907d)}
	    {(0.91658d , 1.02212d , 1.69907d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.91658d , 0.257254d , 2.31312d)}
	    {(0.151544d , 0.257254d , 2.31312d)}
	    {(0.151544d , 0.257254d , 1.69907d)}
	    {(0.91658d , 0.257254d , 1.69907d)}))))
    (CompoundBody (bodies (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.197429d , 0.228974d , 3.1374d)}
	    {(0.197429d , 0.228974d , 3.1374d)}
	    {(0.197429d , 0.228974d , 2.9174d)}
	    {(-0.197429d , 0.228974d , 2.9174d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.197429d , 0.228974d , 2.9174d)}
	    {(0.197429d , 0.228974d , 3.1374d)}
	    {(0.197429d , -0.165886d , 3.1374d)}
	    {(0.197429d , -0.165886d , 2.9174d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.197429d , 0.228974d , 3.1374d)}
	    {(-0.197429d , 0.228974d , 3.1374d)}
	    {(-0.197429d , -0.165886d , 3.1374d)}
	    {(0.197429d , -0.165886d , 3.1374d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.197429d , 0.228974d , 2.9174d)}
	    {(0.333237d , 0.364784d , 2.90631d)}
	    {(-0.333237d , 0.364784d , 2.90631d)}
	    {(-0.197429d , 0.228974d , 2.9174d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.333237d , -0.301696d , 2.90631d)}
	    {(0.333237d , 0.364784d , 2.90631d)}
	    {(0.197429d , 0.228974d , 2.9174d)}
	    {(0.197429d , -0.165886d , 2.9174d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.333237d , 0.364784d , 2.90631d)}
	    {(0.333237d , 0.364784d , 2.90631d)}
	    {(0.333237d , 0.364784d , 2.75223d)}
	    {(-0.333237d , 0.364784d , 2.75223d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.333237d , 0.364784d , 2.75223d)}
	    {(0.333237d , 0.364784d , 2.90631d)}
	    {(0.333237d , -0.301696d , 2.90631d)}
	    {(0.333237d , -0.301696d , 2.75223d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.189695d , 0.221244d , 2.74114d)}
	    {(0.113288d , 0.144834d , 2.61797d)}
	    {(-0.113288d , 0.144834d , 2.61797d)}
	    {(-0.189695d , 0.221244d , 2.74114d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.197429d , -0.165886d , 2.9174d)}
	    {(-0.197429d , 0.228974d , 2.9174d)}
	    {(-0.333237d , 0.364784d , 2.90631d)}
	    {(-0.333237d , -0.301696d , 2.90631d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.333237d , -0.301696d , 2.90631d)}
	    {(-0.333237d , -0.301696d , 2.90631d)}
	    {(-0.333237d , -0.301696d , 2.75223d)}
	    {(0.333237d , -0.301696d , 2.75223d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.333237d , 0.364784d , 2.75223d)}
	    {(-0.189695d , 0.221244d , 2.74114d)}
	    {(-0.189695d , -0.158146d , 2.74114d)}
	    {(-0.333237d , -0.301696d , 2.75223d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.113288d , -0.0817458d , 2.61797d)}
	    {(-0.113288d , -0.0817458d , 2.61797d)}
	    {(-0.261151d , -0.229606d , 2.17814d)}
	    {(0.261151d , -0.229606d , 2.17814d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.261151d , 0.292695d , 2.17814d)}
	    {(0.261151d , 0.292695d , 2.17814d)}
	    {(0.261151d , -0.229606d , 2.17814d)}
	    {(-0.261151d , -0.229606d , 2.17814d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.189695d , 0.221244d , 2.74114d)}
	    {(-0.113288d , 0.144834d , 2.61797d)}
	    {(-0.113288d , -0.0817458d , 2.61797d)}
	    {(-0.189695d , -0.158146d , 2.74114d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.197429d , -0.165886d , 2.9174d)}
	    {(0.197429d , -0.165886d , 2.9174d)}
	    {(0.197429d , -0.165886d , 3.1374d)}
	    {(-0.197429d , -0.165886d , 3.1374d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.333237d , 0.364784d , 2.75223d)}
	    {(0.189695d , 0.221244d , 2.74114d)}
	    {(-0.189695d , 0.221244d , 2.74114d)}
	    {(-0.333237d , 0.364784d , 2.75223d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.333237d , 0.364784d , 2.75223d)}
	    {(0.333237d , -0.301696d , 2.75223d)}
	    {(0.189695d , -0.158146d , 2.74114d)}
	    {(0.189695d , 0.221244d , 2.74114d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.197429d , 0.228974d , 3.1374d)}
	    {(-0.197429d , 0.228974d , 2.9174d)}
	    {(-0.197429d , -0.165886d , 2.9174d)}
	    {(-0.197429d , -0.165886d , 3.1374d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.189695d , 0.221244d , 2.74114d)}
	    {(0.189695d , -0.158146d , 2.74114d)}
	    {(0.113288d , -0.0817458d , 2.61797d)}
	    {(0.113288d , 0.144834d , 2.61797d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.113288d , -0.0817458d , 2.61797d)}
	    {(0.189695d , -0.158146d , 2.74114d)}
	    {(-0.189695d , -0.158146d , 2.74114d)}
	    {(-0.113288d , -0.0817458d , 2.61797d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.113288d , 0.144834d , 2.61797d)}
	    {(0.261151d , 0.292695d , 2.17814d)}
	    {(-0.261151d , 0.292695d , 2.17814d)}
	    {(-0.113288d , 0.144834d , 2.61797d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.113288d , 0.144834d , 2.61797d)}
	    {(0.113288d , -0.0817458d , 2.61797d)}
	    {(0.261151d , -0.229606d , 2.17814d)}
	    {(0.261151d , 0.292695d , 2.17814d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.113288d , -0.0817458d , 2.61797d)}
	    {(-0.113288d , 0.144834d , 2.61797d)}
	    {(-0.261151d , 0.292695d , 2.17814d)}
	    {(-0.261151d , -0.229606d , 2.17814d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(0.333237d , -0.301696d , 2.75223d)}
	    {(-0.333237d , -0.301696d , 2.75223d)}
	    {(-0.189695d , -0.158146d , 2.74114d)}
	    {(0.189695d , -0.158146d , 2.74114d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.333237d , -0.301696d , 2.90631d)}
	    {(-0.333237d , 0.364784d , 2.90631d)}
	    {(-0.333237d , 0.364784d , 2.75223d)}
	    {(-0.333237d , -0.301696d , 2.75223d)}))
        (Polygon (color 0.952875
	    0.917592
	    0.87059)
	  (points {(-0.197429d , -0.165886d , 2.9174d)}
	    {(-0.333237d , -0.301696d , 2.90631d)}
	    {(0.333237d , -0.301696d , 2.90631d)}
	    {(0.197429d , -0.165886d , 2.9174d)}))))))
'
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> ball [
	"(JunOpenGL3dObject ball) show."

	^self ball: 2
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> ball: smoothInteger [ 
	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject ball: 0)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject ball: 1)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject ball: 2)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject ball: 3)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject ball: 4)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject ball: 5)."

	| aHedron aBoolean accuracyValue aBall |
	aHedron := self ballHedron.
	smoothInteger < 1 ifTrue: [^aHedron].
	aBoolean := false.
	aHedron 
		primitivesDo: [:polygon | polygon vertexes size > 3 ifTrue: [aBoolean := true]].
	aBoolean 
		ifTrue: 
			[aHedron := self ball: (self nAkisHedron: aHedron) smooth: smoothInteger - 1]
		ifFalse: [aHedron := self ball: aHedron smooth: smoothInteger].
	accuracyValue := 1.0d-14.
	aBall := JunOpenGL3dCompoundObject new.
	aHedron polygonsDo: 
			[:polygon | 
			| aPolygon |
			aPolygon := JunOpenGL3dPolygon 
						vertexes: (polygon vertexes collect: [:p | p roundTo: accuracyValue]).
			aPolygon normalVectors: (aPolygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector]).
			aBall add: aPolygon].
	aBall flushAllPaints.
	aBall paint: self defaultPaint.
	aBall name: 'ball ' , smoothInteger printString.
	^aBall
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> ball: smoothInteger radius: radius [ 
	"(((JunOpenGL3dObject ball: 3 radius: 5) asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	^(self ball: smoothInteger) scaledBy: radius
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> ball: smoothInteger radius: radius center: center [ 
	"(((JunOpenGL3dObject ball: 2 radius: 5 center: 1, 1, 1) asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	^(Jun3dTransformation align: 0 , 0 , 0 with: center) 
		applyTo: (self ball: smoothInteger radius: radius)
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> ball: aBall smooth: anInteger [ 
	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject ball: JunOpenGL3dObject ballHedron smooth: 3)."

	^self
		ball: aBall
		smooth: anInteger
		interim: [:compoundObject :originalObject :smoothInteger | nil]
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> ball: aBall smooth: anInteger interim: aBlock [ 
	"
	| aModel | 
	aModel := JunOpenGLDisplayModel displayObject: JunOpenGL3dObject ballHedron. 
	aModel defaultSightPoint: 0 , 0 , 0. 
	aModel defaultEyePoint: 10 , 10 , 10. 
	aModel defaultProjection: #perspectiveProjection. 
	aModel defaultPresentation: #hiddenlinePresentation. 
	aModel open. 
	JunOpenGL3dObject 
		ball: aModel displayObject
		smooth: 3 
		interim: [:object :original | 
				| anOriginal anObject | 
				anOriginal := JunOpenGL3dTransformedObject object: original transformation: (Jun3dTransformation scale: 0.999).
				anOriginal paint: ColorValue veryLightGray. 
				anObject := JunOpenGL3dTransformedObject object: object transformation: Jun3dTransformation unity.
				anObject paint: ColorValue veryDarkGray. 
				aModel displayObject: (JunOpenGL3dCompoundObject with: anOriginal with: anObject). 
				aModel changed: #object] 
	"

	| originPoint smoothBall |
	anInteger < 1 ifTrue: [^aBall].
	originPoint := 0 , 0 , 0.
	smoothBall := JunOpenGL3dCompoundObject new.
	aBall
		primitivesDo: 
			[:polygon | 
			| pointArray aPoint aLine aTriangle |
			pointArray := Array new: 6.
			pointArray at: 1 put: (polygon vertexes at: 1).
			pointArray at: 2 put: (polygon vertexes at: 2).
			pointArray at: 3 put: (polygon vertexes at: 3).
			aPoint := (pointArray at: 1)
						center: (pointArray at: 2).
			aLine := (Jun3dLine from: originPoint to: aPoint) normalizedLine.
			aPoint := aLine atT: 1.
			pointArray at: 4 put: aPoint.
			aPoint := (pointArray at: 2)
						center: (pointArray at: 3).
			aLine := (Jun3dLine from: originPoint to: aPoint) normalizedLine.
			aPoint := aLine atT: 1.
			pointArray at: 5 put: aPoint.
			aPoint := (pointArray at: 3)
						center: (pointArray at: 1).
			aLine := (Jun3dLine from: originPoint to: aPoint) normalizedLine.
			aPoint := aLine atT: 1.
			pointArray at: 6 put: aPoint.
			aTriangle := JunOpenGL3dPolygon vertexes: (Array
							with: (pointArray at: 1)
							with: (pointArray at: 4)
							with: (pointArray at: 6)).
			smoothBall add: aTriangle.
			aTriangle := JunOpenGL3dPolygon vertexes: (Array
							with: (pointArray at: 4)
							with: (pointArray at: 2)
							with: (pointArray at: 5)).
			smoothBall add: aTriangle.
			aTriangle := JunOpenGL3dPolygon vertexes: (Array
							with: (pointArray at: 5)
							with: (pointArray at: 3)
							with: (pointArray at: 6)).
			smoothBall add: aTriangle.
			aTriangle := JunOpenGL3dPolygon vertexes: (Array
							with: (pointArray at: 4)
							with: (pointArray at: 5)
							with: (pointArray at: 6)).
			smoothBall add: aTriangle.
			aBlock notNil
				ifTrue: 
					[aBlock numArgs = 1 ifTrue: [aBlock value: smoothBall].
					aBlock numArgs = 2 ifTrue: [aBlock value: smoothBall value: aBall].
					aBlock numArgs = 3 ifTrue: [aBlock
							value: smoothBall
							value: aBall
							value: anInteger]]].
	smoothBall paint: self defaultPaint.
	smoothBall name: 'ball ' , anInteger printString.
	^self
		ball: smoothBall
		smooth: anInteger - 1
		interim: aBlock
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> ballFrom: fromPoint to: toPoint width: widthFactor [ 
	"((JunOpenGL3dObject ballFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	"((JunOpenGL3dObject ballFrom: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	"((JunOpenGL3dObject ballFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self 
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: self xUnitBall
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> ballHedron [
	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject ballHedron)."

	^self regularIcosahedron
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> bell [
	"(JunOpenGL3dObject bell) show."

	| baseSphere bellSphere bellRing transformation bellHole bellHoleLine bell box maximum |
	baseSphere := (JunOpenGL3dObject ball: 3)
				flushAllPaints;
				yourself.
	bellSphere := baseSphere.
	bellRing := JunOpenGL3dObject torus: 1 radius: 0.2.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	bellRing := bellRing transform: transformation.
	bellRing := bellRing translatedBy: 0 , 0 , 0.2.
	bellHole := baseSphere scaledBy: 0.2.
	bellHole := bellHole translatedBy: 0.88 , 0 , -0.4.
	bellHoleLine := JunOpenGL3dObject 
				slicedPieFrom: 20
				to: 160
				by: 10
				radius: 1
				thickness: 0.1.
	transformation := Jun3dTransformation rotateX: (JunAngle fromDeg: -90).
	bellHoleLine := bellHoleLine transform: transformation.
	bellHoleLine := bellHoleLine translatedBy: 0 , 0 , -0.04.
	bell := JunOpenGL3dCompoundObject new.
	bell add: (bellSphere
				paint: ColorValue yellow;
				yourself).
	bell add: (bellRing
				paint: ColorValue yellow;
				yourself).
	bell add: (bellHole
				paint: ColorValue black;
				yourself).
	bell 
		add: (JunOpenGL3dTransformedObject object: (bellHole
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorX).
	bell add: (bellHoleLine
				paint: ColorValue black;
				yourself).
	box := bell boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	bell := JunOpenGL3dTransformedObject object: bell
				transformation: transformation.
	bell name: 'bell'.
	^bell
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> benzene [
	"(JunOpenGL3dObject benzene) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
   -1.1604   -0.6711   -0.0756 C
   -1.1621    0.6709   -0.0461 C
   -0.0019    1.3422    0.0296 C
    1.1596    0.6708    0.0756 C
    1.1615   -0.6712    0.0461 C
    0.0012   -1.3423   -0.0296 C
   -2.1144   -1.2230   -0.1378 H
   -2.1172    1.2228   -0.0839 H
   -0.0032    2.4459    0.0539 H
    2.1138    1.2225    0.1378 H
    2.1172   -1.2230    0.0840 H
    0.0024   -2.4459   -0.0539 H
	'.
	compoundObject name: 'benzene'.
	^compoundObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> bird [
	"(JunOpenGL3dObject bird) show."

	| aStream formTransporter anObject |
	aStream := JunFormTransporter exampleForm7 readStream.
	formTransporter := JunFormTransporter new.
	formTransporter loadFrom: aStream.
	formTransporter formObject isNil ifTrue: [^nil].
	anObject := formTransporter formObject.
	anObject name: 'bird'.
	anObject paint: ColorValue orange.
	^anObject
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> box [
	"(JunOpenGL3dObject box) show."

	^self box: 1 , 1 , 1
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> box: a3dPoint [ 
	"(JunOpenGL3dObject box: 1 , 1 , 1) show."

	| floorPoints ceilPoints leftPoints rightPoints nearPoints farPoints box |
	floorPoints := (Array
				with: 0 , 0 , 1
				with: 1 , 0 , 1
				with: 1 , 1 , 1
				with: 0 , 1 , 1)
				collect: [:p | p * a3dPoint].
	ceilPoints := (Array
				with: 0 , 1 , 0
				with: 1 , 1 , 0
				with: 1 , 0 , 0
				with: 0 , 0 , 0)
				collect: [:p | p * a3dPoint].
	leftPoints := (Array
				with: 1 , 0 , 0
				with: 1 , 1 , 0
				with: 1 , 1 , 1
				with: 1 , 0 , 1)
				collect: [:p | p * a3dPoint].
	rightPoints := (Array
				with: 0 , 0 , 1
				with: 0 , 1 , 1
				with: 0 , 1 , 0
				with: 0 , 0 , 0)
				collect: [:p | p * a3dPoint].
	nearPoints := (Array
				with: 0 , 1 , 1
				with: 1 , 1 , 1
				with: 1 , 1 , 0
				with: 0 , 1 , 0)
				collect: [:p | p * a3dPoint].
	farPoints := (Array
				with: 0 , 0 , 0
				with: 1 , 0 , 0
				with: 1 , 0 , 1
				with: 0 , 0 , 1)
				collect: [:p | p * a3dPoint].
	box := JunOpenGL3dCompoundObject new.
	box name: 'box'.
	box add: (JunOpenGL3dPolygon vertexes: floorPoints).
	box add: (JunOpenGL3dPolygon vertexes: ceilPoints).
	box add: (JunOpenGL3dPolygon vertexes: leftPoints).
	box add: (JunOpenGL3dPolygon vertexes: rightPoints).
	box add: (JunOpenGL3dPolygon vertexes: nearPoints).
	box add: (JunOpenGL3dPolygon vertexes: farPoints).
	box objectsDo: [:each | each paint: nil].
	box paint: self defaultPaint.
	^box
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> boxFrom: fromPoint to: toPoint width: widthFactor [ 
	"((JunOpenGL3dObject boxFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject boxFrom: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject boxFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: self xUnitBox
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> bunny [
	"(JunOpenGL3dObject bunny) show."

	| aStream formTransporter anObject |
	aStream := JunFormTransporter exampleForm6 readStream.
	formTransporter := JunFormTransporter new.
	formTransporter loadFrom: aStream.
	formTransporter formObject isNil ifTrue: [^nil].
	anObject := formTransporter formObject.
	anObject name: 'bunny'.
	anObject paint: (ColorValue pink blendWith: ColorValue gray).
	^anObject
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> capsaicin [
	"(JunOpenGL3dObject capsaicin) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
   -5.6100    2.6214    1.7323 C
   -6.0580    1.7836    2.7766 C
   -5.1541    1.3576    3.7594 C
   -3.8246    1.7533    3.6951 C
   -3.3771    2.5746    2.6602 C
   -4.2709    3.0142    1.6828 C
   -1.9410    2.9917    2.5982 C
   -1.1742    2.0360    1.7638 N
    0.2052    2.2097    1.5174 C
    0.8258    1.2653    0.5058 C
    2.3178    1.4867    0.3251 C
    2.8906    0.5151   -0.6952 C
    4.3862    0.7309   -0.8771 C
    4.9367   -0.1986   -1.9012 C
    6.0025   -0.9663   -1.6749 C
    6.6158   -1.9215   -2.6485 C
    8.1077   -1.6352   -2.7630 C
   -6.4360    2.9800    0.6720 O
   -7.3772    1.4300    2.7876 O
    0.8049    3.0643    2.1559 O
    5.9800   -1.9162   -4.0281 C
   -7.2800    4.0747    0.9547 C
   -5.4876    0.7100    4.5792 H
   -3.1220    1.4167    4.4667 H
   -3.9253    3.6679    0.8719 H
   -1.4844    3.0118    3.6092 H
   -1.8482    4.0219    2.1932 H
   -1.6945    1.4708    1.1295 H
    0.3085    1.3848   -0.4685 H
    0.6376    0.2185    0.8226 H
    2.8391    1.3717    1.2966 H
    2.5118    2.5310    0.0078 H
    2.3695    0.6318   -1.6669 H
    2.6980   -0.5292   -0.3782 H
    4.9063    0.6169    0.0959 H
    4.5860    1.7722   -1.2030 H
    4.4109   -0.2093   -2.8649 H
    6.5079   -0.9313   -0.6992 H
    6.4804   -2.9417   -2.2086 H
    8.6046   -2.3706   -3.4092 H
    8.6021   -1.6698   -1.7833 H
    8.2948   -0.6416   -3.1912 H
   -7.5152    0.8518    3.5282 H
    6.4697   -2.6459   -4.6868 H
    6.0609   -0.9336   -4.5125 H
    4.9144   -2.1783   -3.9858 H
   -7.8300    4.1997    0.0186 H
   -6.7080    4.9812    1.1820 H
   -7.9744    3.8645    1.7757 H
	'.
	compoundObject name: 'capsaicin'.
	^compoundObject
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> catechin [
	"(JunOpenGL3dObject catechin) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
-0007.0207 00001.8582 00001.407  C
-0008.1286 00002.1358 00000.587  C
-0008.0365 00003.0804 -0000.448  C
-0006.8251 00003.7607 -0000.656  C
-0005.7151 00003.4933 00000.162  C
-0005.7952 00002.5212 00001.181  C
-0004.5804 00002.2655 00002.051  C
-0003.2675 00002.7127 00001.354  C
-0003.4573 00004.1469 00000.783  C
-0004.5591 00004.1653 -0000.078  O
-0007.1991 00000.9468 00002.398  O
-0009.0378 00001.6328 00000.752  H
-0009.1212 00003.3233 -0001.222  O
-0006.7470 00004.4738 -0001.425  H
-0004.4986 00001.1999 00002.274  H
-0004.7009 00002.8143 00002.988  H
-0003.0542 00002.0165 00000.538  H
-0002.2024 00002.6538 00002.317  O
-0002.2299 00004.6255 00000.035  C
-0003.6662 00004.8301 00001.612  H
-0001.3545 00005.5529 00000.630  C
-0000.1934 00005.9671 -0000.042  C
00000.1121 00005.4550 -0001.314  C
-0000.7540 00004.5208 -0001.914  C
-0001.9162 00004.1088 -0001.236  C
-0001.3665 00002.7804 00001.821  H
-0001.5611 00005.9381 00001.586  H
00000.4520 00006.6603 00000.413  H
00001.2458 00005.8775 -0001.927  O
-0000.4615 00004.0187 -0003.140  O
-0002.5546 00003.4042 -0001.686  H
-0006.5278 00000.7322 00003.017  H
-0009.0960 00003.9534 -0001.920  H
00001.4990 00005.5620 -0002.776  H
-0001.0241 00003.3954 -0003.564  H
	'.
	compoundObject name: 'catechin'.
	^compoundObject
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> characterN [
	"JunOpenGL3dObject characterN show."
	"
	| characterN xyzAxes anAngle aTransformation compoundObject | 
	characterN := JunOpenGL3dObject characterN. 
	characterN paint: ColorValue magenta. 
	characterN := characterN translatedBy: characterN boundingBox corner. 
	xyzAxes := JunOpenGL3dObject axes. 
	xyzAxes := xyzAxes scaledBy: 2.5. 
	anAngle := JunAngle fromDeg: 30. 
	aTransformation := Jun3dTransformation rotateY: anAngle. 
	characterN := characterN transform: aTransformation. 
	compoundObject := JunOpenGL3dCompoundObject new. 
	compoundObject add: characterN. 
	compoundObject add: xyzAxes. 
	compoundObject show. 
	"

	| aCube characterN |
	characterN := JunOpenGL3dCompoundObject new.
	aCube := (self cube scaledBy: 0.5 , 0.25 , 1)
				translatedBy: 0 , -0.75 , 0.
	characterN add: aCube.
	aCube := (self cube scaledBy: 0.5 , 0.25 , 1)
				translatedBy: 0 , 0.75 , 0.
	characterN add: aCube.
	aCube := (self cube scaledBy: 0.5 , 0.25 , 1)
				transform: (Jun3dTransformation rotateX: (JunAngle fromDeg: 45)).
	characterN add: aCube.
	characterN name: 'character N'.
	characterN do: [:each | each paint: nil].
	characterN paint: self defaultPaint.
	^characterN
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> chloroform [
	"(JunOpenGL3dObject chloroform) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
-0000.8761 00000.0739 -0000.398  C
-0000.8728 00001.8325 -0000.757  Cl
00000.7559 -0000.5151 00000.060  Cl
-0002.1089 -0000.3518 00000.834  Cl
-0001.1599 -0000.4503 -0001.338  H
	'.
	compoundObject name: 'chloroform'.
	^compoundObject
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> chunkOfPieFrom: fromDegree to: toDegree by: byDegree [ 
	"(JunOpenGL3dObject chunkOfPieFrom: 0 to: 10 by: 10) asCompoundObject add: JunOpenGL3dObject axes2; show"
	"(JunOpenGL3dObject chunkOfPieFrom: 90 to: 120 by: 10) asCompoundObject add: JunOpenGL3dObject axes2; show"
	"(JunOpenGL3dObject chunkOfPieFrom: 0 to: -120 by: -10) asCompoundObject add: JunOpenGL3dObject axes2; show"

	^self
		chunkOfPieFrom: fromDegree
		to: toDegree
		by: byDegree
		radius: 1
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> chunkOfPieFrom: fromDegree to: toDegree by: byDegree radius: radius [ 
	"(JunOpenGL3dObject chunkOfPieFrom: 0 to: 90 by: 10 radius: 1) asCompoundObject add: JunOpenGL3dObject axes2; show"
	"(JunOpenGL3dObject chunkOfPieFrom: 90 to: 120 by: 10 radius: 1) asCompoundObject add: JunOpenGL3dObject axes2; show"
	"(JunOpenGL3dObject chunkOfPieFrom: 0 to: -120 by: -10 radius: 1) asCompoundObject add: JunOpenGL3dObject axes2; show"

	| rotationBlock standardPoint points extraFlag aPie |
	rotationBlock := 
			[:p :t | 
			| x y a |
			x := p x * t cos - (p y * t sin).
			y := p x * t sin + (p y * t cos).
			a := JunGeometry accuracy.
			x abs < a ifTrue: [x := 0].
			y abs < a ifTrue: [y := 0].
			x , y , 0.0d].
	standardPoint := radius asDouble , 0.0d , 0.0d.
	points := OrderedCollection new.
	fromDegree
		to: toDegree
		by: byDegree
		do: 
			[:theta | 
			points add: (rotationBlock value: standardPoint value: theta asDouble degreesToRadians).
			extraFlag := theta = toDegree].
	extraFlag ifFalse: [points add: (rotationBlock value: standardPoint value: toDegree asDouble degreesToRadians)].
	points add: 0.0d , 0.0d , 0.0d.
	aPie := JunOpenGL3dPolygon vertexes: points.
	aPie flushAllPaints.
	aPie paint: self defaultPaint.
	^aPie
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> chunkOfPieFrom: fromDegree to: toDegree by: byDegree radius: radius thickness: thickness [ 
	"(JunOpenGL3dObject 
		chunkOfPieFrom: 0
		to: 90
		by: 10
		radius: 0.8
		thickness: 0.2)
		paint: ColorValue red;
		add: JunOpenGL3dObject xyzArrows;
		show."

	| pie1 pie2 thickPie firstPoints points polygon |
	pie1 := self 
				chunkOfPieFrom: fromDegree
				to: toDegree
				by: byDegree
				radius: radius.
	pie2 := (Jun3dTransformation align: 0 , 0 , 0 with: 0 , 0 , thickness) 
				applyTo: pie1.
	thickPie := JunOpenGL3dCompoundObject with: pie2.
	firstPoints := nil.
	pie1 vertexes with: pie2 vertexes
		do: 
			[:p1 :p2 | 
			firstPoints isNil 
				ifTrue: [firstPoints := points := Array with: p1 with: p2]
				ifFalse: 
					[polygon := JunOpenGL3dPolygon vertexes: (Array 
										with: p1
										with: p2
										with: points last
										with: points first).
					((p1 equal: pie1 vertexes last) and: [p2 equal: pie2 vertexes last]) 
						ifFalse: 
							[polygon normalVectors: (polygon vertexes 
										collect: [:p | (0 , 0 , p z to: p) normalUnitVector])].
					thickPie add: polygon.
					points := Array with: p1 with: p2]].
	polygon := JunOpenGL3dPolygon vertexes: (Array 
						with: (firstPoints at: 1)
						with: (firstPoints at: 2)
						with: points last
						with: points first).
	thickPie add: polygon.
	pie1 vertexes: pie1 vertexes reverse.
	thickPie add: pie1.
	thickPie flushAllPaints.
	thickPie paint: self defaultPaint.
	^thickPie
]

{ #category : #'typical objects circle' }
JunOpenGL3dObject class >> circle [
	"(JunOpenGL3dObject circle) showWithUnitAxes."

	^self circleBy: 10
]

{ #category : #'typical objects circle' }
JunOpenGL3dObject class >> circleBy: degrees [ 
	"(JunOpenGL3dObject circleBy: 10) showWithUnitAxes."

	^self circleBy: degrees radius: 1
]

{ #category : #'typical objects circle' }
JunOpenGL3dObject class >> circleBy: degrees radius: radius [ 
	"(JunOpenGL3dObject circleBy: 10 radius: 1) showWithUnitAxes."

	| aCircle |
	aCircle := JunOpenGL3dObject 
				pieFrom: 0
				to: 360
				by: degrees
				radius: radius.
	aCircle paint: self defaultPaint.
	aCircle name: 'circle'.
	^aCircle
]

{ #category : #'typical objects circle' }
JunOpenGL3dObject class >> circleBy: byDegrees radius: radiusValue upVector: upVector [ 
	"(JunOpenGL3dObject circleBy: 30 radius: 0.5 upVector: 0 , 1 , 1) showWithUnitAxes."

	| aCircle |
	aCircle := self 
				from: 0 , 0 , 0
				to: upVector
				height: radiusValue
				depth: radiusValue
				with: ((self circleBy: byDegrees) 
						transform: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90))).
	^aCircle
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun [
	"(JunOpenGL3dObject cityOfJun)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun005 [
	"(JunOpenGL3dObject cityOfJun005)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun005'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun050 [
	"(JunOpenGL3dObject cityOfJun050)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun050'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun100 [
	"(JunOpenGL3dObject cityOfJun100)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun100'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun150 [
	"(JunOpenGL3dObject cityOfJun150)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun150'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun200 [
	"(JunOpenGL3dObject cityOfJun200)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun200'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun234 [
	"(JunOpenGL3dObject cityOfJun234)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun234'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun300 [
	"(JunOpenGL3dObject cityOfJun300)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun300'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun350 [
	"(JunOpenGL3dObject cityOfJun350)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun350'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun400 [
	"(JunOpenGL3dObject cityOfJun400)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun400'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun450 [
	"(JunOpenGL3dObject cityOfJun450)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun450'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun500 [
	"(JunOpenGL3dObject cityOfJun500)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun500'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun550 [
	"(JunOpenGL3dObject cityOfJun550)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun550'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun600 [
	"(JunOpenGL3dObject cityOfJun600)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun600'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun650 [
	"(JunOpenGL3dObject cityOfJun650)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun650'
]

{ #category : #'typical objects jun' }
JunOpenGL3dObject class >> cityOfJun700 [
	"(JunOpenGL3dObject cityOfJun700)
		showProjectionTable: JunHistoryUtility defaultProjectionTable
		in: JunHistoryUtility defaultDisplayBox;
		yourself."

	^JunHistoryUtility cityOf: 'Jun700'
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> colorBall [
	"
	| aBall aViewer |
	aBall := JunOpenGL3dObject colorBall.
	aViewer := JunOpenGLDisplayModel displayObject: aBall.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aBall
	"

	^self colorBall: 2
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> colorBall: smoothInteger [ 
	"
	| aBall aViewer |
	aBall := JunOpenGL3dObject colorBall: 4.
	aViewer := JunOpenGLDisplayModel displayObject: aBall.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aBall
	"

	| colorBall sphereBody |
	colorBall := JunOpenGL3dCompoundObject new.
	sphereBody := JunOpenGL3dObject ball: smoothInteger.
	sphereBody flushAllPaints.
	sphereBody polygonsDo: 
			[:polygon | 
			polygon 
				colors: (polygon vertexes collect: 
							[:p | 
							ColorValue 
								hue: 
									[(p x , p y distance: 0 , 0) < 0.0001 
										ifTrue: [1]
										ifFalse: [(p x , p y) theta degrees / 360]] 
											value
								saturation: [p z >= 0 ifTrue: [1 - p z abs] ifFalse: [1]] value
								brightness: [p z >= 0 ifTrue: [1] ifFalse: [1 - p z abs]] value]).
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector]).
			colorBall add: polygon].
	colorBall name: 'color ball ' , smoothInteger printString.
	^colorBall
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> colorBall: smoothInteger radius: radius [ 
	"((JunOpenGL3dObject colorBall: 2 radius: 0.5) asCompoundObject) add: JunOpenGL3dObject xyzArrows; show."

	^(self colorBall: smoothInteger) scaledBy: radius
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> colorBall: smoothInteger radius: radius center: center [ 
	"((JunOpenGL3dObject colorBall: 2 radius: 0.5 center: 0.25 , 0 , 0) asCompoundObject) add: JunOpenGL3dObject xyzArrows; show."

	^(Jun3dTransformation align: 0 , 0 , 0 with: center) 
		applyTo: (self colorBall: smoothInteger radius: radius)
]

{ #category : #'typical objects cone' }
JunOpenGL3dObject class >> colorBevel [
	"
	| aCone aViewer |
	aCone := JunOpenGL3dObject colorBevel.
	aViewer := JunOpenGLDisplayModel displayObject: aCone.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aCone
	"

	| aBevel |
	aBevel := self 
				from: 0 , 0 , 1
				to: 0 , 0 , 0
				height: 2
				depth: 2
				with: self xUnitCone.
	aBevel polygonsDo: 
			[:aPolygon | 
			| aCollection |
			aCollection := OrderedCollection new: aPolygon vertexes size.
			aPolygon vertexes do: 
					[:aPoint | 
					| aLine aValue anAngle hueValue aColor |
					(aPoint x , aPoint y) r abs < JunGeometry accuracy 
						ifTrue: [hueValue := 0]
						ifFalse: 
							[aLine := (0 , 0 , 0 to: aPoint x , aPoint y , 0) normalized.
							aValue := aLine last x.
							anAngle := JunAngle radians: aValue arcCos.
							aLine last y < 0 ifTrue: [anAngle := JunAngle doublePi - anAngle].
							hueValue := anAngle degrees / 360].
					aColor := ColorValue 
								hue: hueValue
								saturation: (aPoint x , aPoint y) r
								brightness: aPoint z.
					aCollection add: aColor].
			aPolygon colors: aCollection].
	aBevel name: 'color bevel'.
	^aBevel
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> colorBox [
	"
	| aBox aViewer |
	aBox := JunOpenGL3dObject colorBox.
	aViewer := JunOpenGLDisplayModel displayObject: aBox.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aBox
	"

	| aBox |
	aBox := self box.
	aBox polygonsDo: 
			[:aPolygon | 
			| aCollection |
			aCollection := OrderedCollection new: aPolygon vertexes size.
			aPolygon vertexes do: 
					[:aPoint | 
					| aColor |
					aColor := ColorValue 
								red: aPoint x
								green: aPoint y
								blue: aPoint z.
					aCollection add: aColor].
			aPolygon colors: aCollection].
	aBox name: 'color box'.
	^aBox
]

{ #category : #'typical objects cone' }
JunOpenGL3dObject class >> colorCone [
	"
	| aCone aViewer |
	aCone := JunOpenGL3dObject colorCone.
	aViewer := JunOpenGLDisplayModel displayObject: aCone.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aCone
	"

	| aCompoundObject anImage aTexture sideCollection baseCollection |
	aCompoundObject := self 
				from: 0 , 0 , 1
				to: 0 , 0 , 0
				height: 2
				depth: 2
				with: self xUnitCone.
	aCompoundObject objectsDo: [:each | each paint: ColorValue white].
	sideCollection := OrderedCollection new.
	baseCollection := OrderedCollection new.
	1 to: aCompoundObject components size
		do: 
			[:index | 
			index odd 
				ifTrue: [sideCollection add: (aCompoundObject components at: index)]
				ifFalse: [baseCollection add: (aCompoundObject components at: index)]].
	anImage := self imageRBBR.
	sideCollection do: 
			[:aPatch | 
			| p1 p2 p3 |
			aTexture := JunOpenGLTexture image: anImage.
			aTexture
				linear: false;
				repeat: false;
				modulate: false.
			p1 := aPatch asPointArray at: 3.
			p1 := p1 x , p1 y.
			p2 := aPatch asPointArray at: 2.
			p2 := p2 x , p2 y.
			p3 := p1 + ((p2 - p1) / 2).
			p1 := p1 theta radiansToDegrees / 360.
			p2 := p2 theta radiansToDegrees / 360.
			p2 = 0 ifTrue: [p2 := 1].
			p3 := p3 theta radiansToDegrees / 360.
			p1 := 1 - p1.
			p2 := 1 - p2.
			p3 := 1 - p3.
			aTexture coordinates: (Array 
						with: p3 , 0
						with: p2 , 1
						with: p1 , 1).
			aPatch texture: aTexture].
	anImage := self imageRGBR.
	baseCollection do: 
			[:aPatch | 
			| p1 p2 p3 |
			aTexture := JunOpenGLTexture image: anImage.
			aTexture
				linear: false;
				repeat: false;
				modulate: false.
			p1 := (0 , 0) + (0.5 , 0.5).
			p2 := aPatch asPointArray at: 2.
			p2 := (p2 x , p2 y) / (2 , 2) + (0.5 , 0.5).
			p3 := aPatch asPointArray at: 3.
			p3 := (p3 x , p3 y) / (2 , 2) + (0.5 , 0.5).
			aTexture coordinates: (Array 
						with: p1
						with: p2
						with: p3).
			aPatch texture: aTexture].
	aCompoundObject name: 'color cone'.
	^aCompoundObject
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> colorCube [
	"
	| aCube aViewer |
	aCube := JunOpenGL3dObject colorCube.
	aViewer := JunOpenGLDisplayModel displayObject: aCube.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aCube
	"

	| aCompoundObject |
	aCompoundObject := JunOpenGL3dCompoundObject new.
	aCompoundObject add: self plateBMWC.
	aCompoundObject add: self plateGCWY.
	aCompoundObject add: self plateKBCG.
	aCompoundObject add: self plateKGYR.
	aCompoundObject add: self plateKRMB.
	aCompoundObject add: self plateRYWM.
	aCompoundObject name: 'color cube'.
	^aCompoundObject
]

{ #category : #'lisp support' }
JunOpenGL3dObject class >> colorFromLispList: aList for: a3dObject [ 
	| list red green blue alpha |
	list := aList detect: [:car | (car isKindOf: self defaultLispConsClass)
					and: [car head = #color]]
				ifNone: [nil].
	list isNil ifTrue: [^a3dObject].
	list := list tail.
	red := list nth: 1.
	green := list nth: 2.
	blue := list nth: 3.
	red isInteger ifTrue: [red := 0 max: (red / 255 min: 1)].
	green isInteger ifTrue: [green := 0 max: (green / 255 min: 1)].
	blue isInteger ifTrue: [blue := 0 max: (blue / 255 min: 1)].
	alpha := nil.
	list length >= 4
		ifTrue: 
			[alpha := list nth: 4.
			alpha isInteger ifTrue: [alpha := 0 max: (alpha / 255 min: 1)]].
	a3dObject paint: (ColorValue
			red: red
			green: green
			blue: blue).
	alpha isNil ifFalse: [a3dObject alpha: alpha].
	^a3dObject
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> colorMobius [
	"
	| aMobius aViewer |
	aMobius := JunOpenGL3dObject colorMobius.
	aViewer := JunOpenGLDisplayModel displayObject: aMobius.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aMobius
	"

	^self colorMobiusRadius: 1 stripRadius: 1 / 3
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> colorMobiusRadius: mobiusRadius divisions: mobiusDivision stripRadius: stripRadius divisions: stripDivision [ 
	"
	| aMobius aViewer |
	aMobius := JunOpenGL3dObject 
				colorMobiusRadius: 1
				divisions: 72
				stripRadius: 1 / 2
				divisions: 6.
	aViewer := JunOpenGLDisplayModel displayObject: aMobius.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aMobius
	"

	| aMobius total count |
	aMobius := self 
				mobiusStripRadius: mobiusRadius
				divisions: mobiusDivision
				stripRadius: stripRadius
				divisions: stripDivision.
	total := 0.
	aMobius polygonsDo: [:aPolygon | total := total + 1].
	count := 0.
	aMobius polygonsDo: 
			[:aPolygon | 
			| aBoolean aCollection |
			count < (total / 2) ifTrue: [aBoolean := true] ifFalse: [aBoolean := false].
			count := count + 1.
			aCollection := OrderedCollection new: aPolygon vertexes size.
			aPolygon vertexes do: 
					[:aPoint | 
					| aLine aValue anAngle hueValue aCenter saturationValue brightnessValue aColor |
					aLine := (0 , 0 , 0 to: aPoint x , aPoint y , 0) normalized.
					aValue := aLine last x.
					anAngle := JunAngle radians: aValue arcCos.
					aLine last y < 0 ifTrue: [anAngle := JunAngle doublePi - anAngle].
					hueValue := anAngle degrees / 360.
					aCenter := (0 , 0 , 0 to: aPoint x , aPoint y , 0) normalized 
								atT: mobiusRadius.
					aValue := aPoint distance: aCenter.
					aBoolean 
						ifTrue: [saturationValue := 1 - (-1 max: (aValue / stripRadius min: 1))]
						ifFalse: [saturationValue := 1].
					aBoolean 
						ifTrue: [brightnessValue := 1]
						ifFalse: [brightnessValue := 1 - (-1 max: (aValue / stripRadius min: 1))].
					aColor := ColorValue 
								hue: hueValue
								saturation: saturationValue
								brightness: brightnessValue.
					aCollection add: aColor].
			aPolygon colors: aCollection].
	aMobius name: 'color mobius'.
	^aMobius
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> colorMobiusRadius: mobiusRadius stripRadius: stripRadius [ 
	"
	| aMobius aViewer |
	aMobius := JunOpenGL3dObject colorMobiusRadius: 1 stripRadius: 1 / 4.
	aViewer := JunOpenGLDisplayModel displayObject: aMobius.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aMobius
	"

	^self 
		colorMobiusRadius: mobiusRadius
		divisions: 72
		stripRadius: stripRadius
		divisions: 6
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> colorMobiusStrip [
	"
	| aMobius aViewer |
	aMobius := JunOpenGL3dObject colorMobiusStrip.
	aViewer := JunOpenGLDisplayModel displayObject: aMobius.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aMobius
	"

	^self colorMobiusStripRadius: 1 stripRadius: 1 / 3
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> colorMobiusStripRadius: mobiusRadius divisions: mobiusDivision stripRadius: stripRadius divisions: stripDivision [ 
	"
	| aMobius aViewer |
	aMobius := JunOpenGL3dObject 
				colorMobiusStripRadius: 1
				divisions: 72
				stripRadius: 1 / 2
				divisions: 6.
	aViewer := JunOpenGLDisplayModel displayObject: aMobius.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aMobius
	"

	| aMobius |
	aMobius := self 
				mobiusStripRadius: mobiusRadius
				divisions: mobiusDivision
				stripRadius: stripRadius
				divisions: stripDivision.
	aMobius polygonsDo: 
			[:aPolygon | 
			| aCollection |
			aCollection := OrderedCollection new: aPolygon vertexes size.
			aPolygon vertexes do: 
					[:aPoint | 
					| aLine aValue anAngle hueValue aCenter saturationValue brightnessValue aColor |
					aLine := (0 , 0 , 0 to: aPoint x , aPoint y , 0) normalized.
					aValue := aLine last x.
					anAngle := JunAngle radians: aValue arcCos.
					aLine last y < 0 ifTrue: [anAngle := JunAngle doublePi - anAngle].
					hueValue := anAngle degrees / 360.
					aCenter := (0 , 0 , 0 to: aPoint x , aPoint y , 0) normalized 
								atT: mobiusRadius.
					aValue := aPoint distance: aCenter.
					saturationValue := 1 - (-1 max: (aValue / stripRadius min: 1)).
					brightnessValue := 1.
					aColor := ColorValue 
								hue: hueValue
								saturation: saturationValue
								brightness: brightnessValue.
					aCollection add: aColor].
			aPolygon colors: aCollection].
	aMobius name: 'color mobius strip'.
	^aMobius
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> colorMobiusStripRadius: mobiusRadius stripRadius: stripRadius [ 
	"
	| aMobius aViewer |
	aMobius := JunOpenGL3dObject colorMobiusStripRadius: 1 stripRadius: 1 / 4.
	aViewer := JunOpenGLDisplayModel displayObject: aMobius.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aMobius
	"

	^self 
		colorMobiusStripRadius: mobiusRadius
		divisions: 72
		stripRadius: stripRadius
		divisions: 6
]

{ #category : #'typical objects torus' }
JunOpenGL3dObject class >> colorTorus [
	"
	| aTorus aViewer |
	aTorus := JunOpenGL3dObject colorTorus.
	aViewer := JunOpenGLDisplayModel displayObject: aTorus.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aTorus
	"

	^self colorTorusRadius: 1 tubeRadius: 1 / 3
]

{ #category : #'typical objects torus' }
JunOpenGL3dObject class >> colorTorusRadius: torusRadius divisions: torusDivision tubeRadius: tubeRadius divisions: tubeDivision [ 
	"
	| aTorus aViewer |
	aTorus := JunOpenGL3dObject 
				colorTorusRadius: 1
				divisions: 72
				tubeRadius: 1 / 2
				divisions: 36.
	aViewer := JunOpenGLDisplayModel displayObject: aTorus.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aTorus
	"

	| aTorus |
	aTorus := JunOpenGL3dObject 
				torusRadius: torusRadius
				divisions: torusDivision
				tubeRadius: tubeRadius
				divisions: tubeDivision.
	aTorus polygonsDo: 
			[:aPolygon | 
			| aCollection |
			aCollection := OrderedCollection new: aPolygon vertexes size.
			aPolygon vertexes do: 
					[:aPoint | 
					| aLine aValue anAngle hueValue saturationValue brightnessValue aColor |
					aLine := (0 , 0 , 0 to: aPoint x , aPoint y , 0) normalized.
					aValue := aLine last x.
					anAngle := JunAngle radians: aValue arcCos.
					aLine last y < 0 ifTrue: [anAngle := JunAngle doublePi - anAngle].
					hueValue := anAngle degrees / 360.
					aValue := aPoint z abs / tubeRadius.
					anAngle := JunAngle radians: aValue arcCos.
					aPoint z >= 0 
						ifTrue: [saturationValue := anAngle degrees / 90]
						ifFalse: [saturationValue := 1].
					aPoint z >= 0 
						ifTrue: [brightnessValue := 1]
						ifFalse: [brightnessValue := anAngle degrees / 90].
					aColor := ColorValue 
								hue: hueValue
								saturation: saturationValue
								brightness: brightnessValue.
					aCollection add: aColor].
			aPolygon colors: aCollection].
	aTorus name: 'color torus'.
	^aTorus
]

{ #category : #'typical objects torus' }
JunOpenGL3dObject class >> colorTorusRadius: torusRadius tubeRadius: tubeRadius [ 
	"
	| aTorus aViewer |
	aTorus := JunOpenGL3dObject colorTorusRadius: 1 tubeRadius: 1 / 4.
	aViewer := JunOpenGLDisplayModel displayObject: aTorus.
	aViewer displayLightsAllOff.
	aViewer openIn: (200 @ 200 extent: 400 @ 400).
	^aTorus
	"

	^self 
		colorTorusRadius: torusRadius
		divisions: 72
		tubeRadius: tubeRadius
		divisions: 36
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> composedText: composedText [ 
	"(JunOpenGL3dObject string: 'Jun + VisualWorks' asComposedText) showWithUnitAxes."

	^self 
		composedText: composedText
		textColor: ColorValue black
		backColor: ColorValue white
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> composedText: composedText textColor: textColor backColor: backColor [ 
	"(JunOpenGL3dObject
		composedText: JunSystem copyleftString asText allBold asComposedText
		textColor: (ColorValue blue blendWith: ColorValue black)
		backColor: (ColorValue cyan blendWith: ColorValue white)) showWithUnitAxes."

	| aBox aPixmap graphicsContext anImage aTexture aPolygon |
	aBox := composedText bounds.
	JunControlUtility 
		assert: [aPixmap := Pixmap extent: aBox extent]
		do: 
			[graphicsContext := aPixmap graphicsContext.
			graphicsContext paint: backColor.
			graphicsContext displayRectangle: aPixmap bounds.
			graphicsContext paint: textColor.
			composedText displayOn: graphicsContext.
			anImage := aPixmap asImage]
		ensure: [aPixmap close].
	aTexture := JunOpenGLTexture image: anImage.
	aTexture coordinates: (Array 
				with: 0 , 0
				with: 1 , 0
				with: 1 , 1
				with: 0 , 1).
	aPolygon := JunOpenGL3dPolygon vertexes: (Array 
						with: 0 , 0 , 0
						with: 1 , 0 , 0
						with: 1 , 1 , 0
						with: 0 , 1 , 0).
	aPolygon paint: ColorValue white.
	aPolygon texture: aTexture.
	aPolygon := aPolygon scaledBy: 1 , (aBox height / aBox width) , 1.
	^aPolygon
]

{ #category : #'instance creation' }
JunOpenGL3dObject class >> compound [
	^JunOpenGL3dCompoundObject new
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> compoundFromString: aString [ 
	"(JunOpenGL3dObject compoundFromString: '
   -1.1604   -0.6711   -0.0756 C
   -1.1621    0.6709   -0.0461 C
   -0.0019    1.3422    0.0296 C
    1.1596    0.6708    0.0756 C
    1.1615   -0.6712    0.0461 C
    0.0012   -1.3423   -0.0296 C
   -2.1144   -1.2230   -0.1378 H
   -2.1172    1.2228   -0.0839 H
   -0.0032    2.4459    0.0539 H
    2.1138    1.2225    0.1378 H
    2.1172   -1.2230    0.0840 H
    0.0024   -2.4459   -0.0539 H
	') show."

	| aCollection compoundObject |
	aCollection := OrderedCollection new.
	(JunStringUtility getTokensFromString: aString) do: 
			[:anArray | 
			anArray isEmpty 
				ifFalse: 
					[| aName aCenter aRadius aColor aBall anAtom |
					aName := anArray at: 4.
					aCenter := Jun3dPoint 
								fromArray: ((anArray copyFrom: 1 to: 3) collect: [:it | it asNumber]).
					aRadius := nil.
					aColor := nil.
					aName = 'C' 
						ifTrue: 
							[aRadius := 1.7.
							aColor := ColorValue blue blendWith: ColorValue white].
					aName = 'H' 
						ifTrue: 
							[aRadius := 1.2.
							aColor := ColorValue green blendWith: ColorValue white].
					aName = 'O' 
						ifTrue: 
							[aRadius := 1.52.
							aColor := ColorValue red blendWith: ColorValue white].
					aName = 'N' 
						ifTrue: 
							[aRadius := 1.55.
							aColor := ColorValue cyan blendWith: ColorValue white].
					aName = 'P' 
						ifTrue: 
							[aRadius := 1.8.
							aColor := ColorValue magenta blendWith: ColorValue white].
					aName = 'S' 
						ifTrue: 
							[aRadius := 1.8.
							aColor := ColorValue yellow blendWith: ColorValue white].
					aName = 'Cl' 
						ifTrue: 
							[aRadius := 1.75.
							aColor := ColorValue darkGreen blendWith: ColorValue white].
					(aRadius isNil or: [aColor isNil]) 
						ifTrue: 
							[aRadius := 1.0.
							aColor := ColorValue gray blendWith: ColorValue white].
					aBall := Jun3dBoundingBall center: aCenter radius: aRadius.
					anAtom := JunOpenGL3dObject 
								ball: 2
								radius: aRadius
								center: aCenter.
					anAtom objectsDo: [:each | each paint: aColor].
					anAtom polygonsDo: 
							[:each | 
							each normalVectors: (each vertexes 
										collect: [:p | (aCenter to: p) normalUnitVector])].
					anAtom name: aName.
					aCollection add: aBall -> anAtom]].
	compoundObject := JunOpenGL3dCompoundObject new.
	aCollection do: 
			[:anAssociation | 
			| ballCollection atomBody |
			ballCollection := (aCollection 
						reject: [:each | each key = anAssociation key]) collect: [:each | each key].
			atomBody := JunOpenGL3dCompoundObject new.
			atomBody name: anAssociation value name.
			anAssociation value polygonsDo: 
					[:polygon | 
					(ballCollection select: 
							[:ball | 
							| points |
							points := polygon vertexes.
							(points select: [:point | ball containsPoint: point]) size = points size]) 
						isEmpty ifTrue: [atomBody add: polygon]].
			compoundObject add: atomBody].
	compoundObject name: 'compound'.
	^compoundObject
]

{ #category : #'typical objects cone' }
JunOpenGL3dObject class >> cone [
	"(JunOpenGL3dObject cone) show."

	^self cone: 10
]

{ #category : #'typical objects cone' }
JunOpenGL3dObject class >> cone: degrees [ 
	"(JunOpenGL3dObject cone: 30) show."

	^self 
		cone: degrees
		radius: 1
		height: 2
]

{ #category : #'typical objects cone' }
JunOpenGL3dObject class >> cone: degrees radius: radius height: height [ 
	| cone rotationBlock apex base base1 base2 polygon |
	cone := JunOpenGL3dCompoundObject new.
	rotationBlock := 
			[:p :t | 
			| x y a |
			x := p x * t cos - (p y * t sin).
			y := p x * t sin + (p y * t cos).
			a := JunGeometry accuracy.
			x abs < a ifTrue: [x := 0].
			y abs < a ifTrue: [y := 0].
			x , y , 0].
	apex := 0 , 0 , height.
	base := radius , 0 , 0.
	base1 := base.
	degrees to: 360
		by: degrees
		do: 
			[:d | 
			base2 := rotationBlock value: base value: d asDouble degreesToRadians.
			polygon := JunOpenGL3dPolygon vertexes: (Array 
								with: apex
								with: base1
								with: base2).
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector]).
			cone add: polygon.
			polygon := JunOpenGL3dPolygon vertexes: (Array 
								with: 0 , 0 , 0
								with: base2
								with: base1).
			cone add: polygon.
			base1 := base2].
	cone flushAllPaints.
	cone paint: self defaultPaint.
	^cone
]

{ #category : #'typical objects cone' }
JunOpenGL3dObject class >> coneFrom: fromPoint to: toPoint radius: aRadius by: divisionNumber [ 
	"(JunOpenGL3dObject coneFrom: -1,-1,0 to: 1,1,0 radius: 1 by: 45) showWithAxes."

	| aCone fromCircle fromPoints aPolygon |
	aCone := JunOpenGL3dCompoundObject new.
	fromCircle := Jun3dCircle 
				center: fromPoint
				radius: aRadius
				upVector: (toPoint to: fromPoint) normalUnitVector.
	fromPoints := fromCircle trackPointsBy: (360 / divisionNumber) rounded.
	aPolygon := JunOpenGL3dPolygon vertexes: fromPoints.
	aCone add: aPolygon.
	(1 to: fromPoints size - 1) do: 
			[:i | 
			| p1 p2 points vectors |
			p1 := fromPoints at: i.
			p2 := fromPoints at: i + 1.
			points := Array 
						with: p1
						with: toPoint
						with: p2.
			vectors := Array 
						with: (fromPoint to: p1) normalUnitVector
						with: (fromPoint to: toPoint) normalUnitVector
						with: (fromPoint to: p2) normalUnitVector.
			aPolygon := JunOpenGL3dPolygon vertexes: points.
			aPolygon normalVectors: vectors.
			aCone add: aPolygon].
	aCone flushAllPaints.
	aCone paint: self defaultPaint.
	^aCone
]

{ #category : #'typical objects cone' }
JunOpenGL3dObject class >> coneFrom: fromPoint to: toPoint width: widthFactor [ 
	"((JunOpenGL3dObject 
		coneFrom: 0 , 0 , 0
		to: 3 , 4 , 5
		width: 0.1)
		paint: ColorValue cyan;
		asCompoundObject)
		add: JunOpenGL3dObject axes2;
		show."

	"((JunOpenGL3dObject 
		coneFrom: 0 , 0 , 0
		to: -1 , -1 , 0
		width: 0.1)
		paint: ColorValue magenta;
		asCompoundObject)
		add: JunOpenGL3dObject axes2;
		show."

	"((JunOpenGL3dObject 
		coneFrom: -1 , -1 , -1
		to: 1 , 1 , 1
		width: 0.1)
		paint: ColorValue yellow;
		asCompoundObject)
		add: JunOpenGL3dObject axes2;
		show."

	^self 
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: self xUnitCone
]

{ #category : #copyright }
JunOpenGL3dObject class >> copyright [
	^'Jun799 (2015/09/19) Copyleft 1996-2015 AOKI Atsushi, ODA Tomohiro, HOSHI Takanori, NISHINAKA Yoshiyuki, YAMADA Ryousuke, WATANABE Katsuhiro, Ankur J. Chavda, NISHIHARA Satoshi, MATSUDA Ryouichi, MATSUO Minoru, Brent N. Reeves, ASAOKA Hiroko, TANAKA Shinichi, ASADA Mitsuhiro, Paul Guyot (LIP6), Albert Kerssies, MATSUBARA Nobuto, SAWAMOTO Eri, HAYASHI Koichiro, NAKAO Tatsuya, and NISHIMURA Yuuri.'
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> cube [
	"(JunOpenGL3dObject cube) show."

	^(self box scaledBy: 2)
		translatedBy: -1
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> cuboctahedron [
	"(JunOpenGL3dObject cuboctahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject cuboctahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject cuboctahedron)."

	| p01 p02 p03 p04 p05 p06 p07 p08 p09 p10 p11 p12 compoundObject aSet totalDistance originPoint aRadius scaleFactor cuboctahedron |
	p01 := 1 , 0 , 1.
	p02 := 0 , 1 , 1.
	p03 := -1 , 0 , 1.
	p04 := 0 , -1 , 1.
	p05 := 1 , -1 , 0.
	p06 := 1 , 1 , 0.
	p07 := -1 , 1 , 0.
	p08 := -1 , -1 , 0.
	p09 := 1 , 0 , -1.
	p10 := 0 , 1 , -1.
	p11 := -1 , 0 , -1.
	p12 := 0 , -1 , -1.
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p01
						with: p02
						with: p03
						with: p04)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p05
						with: p01
						with: p04)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p06
						with: p02
						with: p01)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p07
						with: p03
						with: p02)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p08
						with: p04
						with: p03)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p12
						with: p11
						with: p10
						with: p09)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p05
						with: p12
						with: p09)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p06
						with: p09
						with: p10)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p07
						with: p10
						with: p11)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p08
						with: p11
						with: p12)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p01
						with: p05
						with: p09
						with: p06)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p02
						with: p06
						with: p10
						with: p07)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p03
						with: p07
						with: p11
						with: p08)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p04
						with: p08
						with: p12
						with: p05)).
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	cuboctahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	cuboctahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	cuboctahedron flushAllPaints.
	cuboctahedron paint: self defaultPaint.
	cuboctahedron name: 'cuboctahedron'.
	^cuboctahedron
]

{ #category : #'typical objects cylinder' }
JunOpenGL3dObject class >> cylinder [
	"((JunOpenGL3dObject cylinder) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		pieFrom: 0
		to: 360
		by: 10
		radius: 0.5
		thickness: 1
]

{ #category : #'typical objects cylinder' }
JunOpenGL3dObject class >> cylinderBy: degree [
	"((JunOpenGL3dObject cylinderBy: 20) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		pieFrom: 0
		to: 360
		by: degree
		radius: 0.5
		thickness: 1
]

{ #category : #'typical objects cylinder' }
JunOpenGL3dObject class >> cylinderBy: degree radius: radius [
	"((JunOpenGL3dObject cylinderBy: 45 radius: 0.25) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		pieFrom: 0
		to: 360
		by: degree
		radius: radius
		thickness: 1
]

{ #category : #'typical objects cylinder' }
JunOpenGL3dObject class >> cylinderBy: degree radius: radius height: height [ 
	"((JunOpenGL3dObject cylinderBy: 10 radius: 0.5 height: 0.5) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject cylinderBy: 30 radius: 0.5 height: 0.5) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject cylinderBy: 45 radius: 1 height: 1) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		pieFrom: 0
		to: 360
		by: degree
		radius: radius
		thickness: height
]

{ #category : #'typical objects cylinder' }
JunOpenGL3dObject class >> cylinderFrom: fromPoint to: toPoint radius: aRadius by: divisionNumber [ 
	"(JunOpenGL3dObject cylinderFrom: -1,-1,0 to: 1,1,0 radius: 1 by: 45) showWithAxes."

	| aCylinder fromCircle fromPoints aPolygon toPoints |
	aCylinder := JunOpenGL3dCompoundObject new.
	fromCircle := Jun3dCircle 
				center: fromPoint
				radius: aRadius
				upVector: (toPoint to: fromPoint) normalUnitVector.
	fromPoints := fromCircle trackPointsBy: (360 / divisionNumber) rounded.
	aPolygon := JunOpenGL3dPolygon vertexes: fromPoints.
	aCylinder add: aPolygon.
	toPoints := fromPoints collect: [:p | p translatedBy: toPoint - fromPoint].
	aPolygon := JunOpenGL3dPolygon vertexes: toPoints reverse.
	aPolygon paint: ColorValue red.
	aCylinder add: aPolygon.
	(1 to: fromPoints size - 1) with: (1 to: toPoints size - 1)
		do: 
			[:i :j | 
			| p1 p2 p3 p4 points vectors |
			p1 := fromPoints at: i.
			p2 := fromPoints at: i + 1.
			p3 := toPoints at: j.
			p4 := toPoints at: j + 1.
			points := Array 
						with: p1
						with: p3
						with: p4
						with: p2.
			vectors := Array 
						with: (fromPoint to: p1) normalUnitVector
						with: (toPoint to: p3) normalUnitVector
						with: (toPoint to: p4) normalUnitVector
						with: (fromPoint to: p2) normalUnitVector.
			aPolygon := JunOpenGL3dPolygon vertexes: points.
			aPolygon normalVectors: vectors.
			aCylinder add: aPolygon].
	aCylinder flushAllPaints.
	aCylinder paint: self defaultPaint.
	^aCylinder
]

{ #category : #'typical objects cylinder' }
JunOpenGL3dObject class >> cylinderFrom: fromPoint to: toPoint width: widthFactor [ 
	"((JunOpenGL3dObject cylinderFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject cylinderFrom: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject cylinderFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: self xUnitCylinder
]

{ #category : #'typical objects cylinder' }
JunOpenGL3dObject class >> cylinderFrom: fromPoint to: toPoint width: widthFactor by: byDegree [ 
	"((JunOpenGL3dObject cylinderFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.5 by: 45) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject cylinderFrom: 0 , 0 , 0 to: -1 , -1 , -1 width: 0.5 by: 45) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject cylinderFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.5 by: 45) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject cylinderFrom: 0 , 0 , 0 to: 0 , 0 , -0.8 width: 0.5 by: 45) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	| aCylinder |
	aCylinder := self
				pieFrom: 0
				to: 360
				by: byDegree
				radius: 0.5
				thickness: 1.
	aCylinder := aCylinder transform: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)).
	aCylinder := self
				from: fromPoint
				to: toPoint
				height: widthFactor
				depth: widthFactor
				with: aCylinder.
	^aCylinder
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> cystine [
	"(JunOpenGL3dObject cystine) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
-0002.6026 00001.5856 00001.799  N
-0002.9073 00001.9233 00002.712  H
-0001.2575 00002.0210 00001.519  C
-0000.9636 00001.5371 00000.557  H
-0000.3197 00001.4877 00002.585  C
00000.2185 00000.4075 00002.581  O
-0001.2589 00003.5485 00001.333  C
-0001.9803 00003.8243 00000.529  H
-0001.6008 00004.0552 00002.265  H
00000.4195 00004.1076 00000.872  S
00000.1444 00005.4184 00000.743  H
-0000.1912 00002.3390 00003.601  O
-0002.6334 00000.5687 00001.877  H
00000.3982 00001.9103 00004.244  H
	'.
	compoundObject name: 'cystine'.
	^compoundObject
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultAlpha [
	^1.0
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultImageSize [
	^128
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultLineWidth [
	^1.0
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultLispConsClass [
	^JunLispCons
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultLispNilClass [
	^JunLispNil
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultLispParserClass [
	^JunLispParser
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultName [
	^self uniqueId
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultPaint [
	^ColorValue white
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultPoint [
	^0 , 0 , 0
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultSize [
	^1
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultSmoothingAngle [
	^JunAngle fromDeg: 45
]

{ #category : #defaults }
JunOpenGL3dObject class >> defaultTransformation [
	^Jun3dTransformation unity
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> dice [
	"(JunOpenGL3dObject dice 
		showIn: (400 , 400) alignedRectangleWithScreenCenter)
		grab: (JunAngle degrees: 6) sin , 0;
		yourself."

	| fore back block face1 face2 face3 face4 face5 face6 dice |
	fore := ColorValue brightness: 0.45.
	back := ColorValue brightness: 0.95.
	block := 
			[:aString | 
			| aText anImage aTexture aPolygon |
			aPolygon := JunOpenGL3dPolygon 
						with: -1 , -1 , 0
						with: 1 , -1 , 0
						with: 1 , 1 , 0
						with: -1 , 1 , 0.
			aText := ComposedText withText: aString asText
						style: (JunFontModel textStyleHeight: 128).
			self 
				assert: [Pixmap extent: 128 @ 128]
				do: 
					[:aPixmap | 
					| graphicsContext |
					graphicsContext := aPixmap graphicsContext.
					graphicsContext paint: ColorValue white.
					graphicsContext displayRectangle: aPixmap bounds.
					graphicsContext paint: fore.
					aText displayOn: graphicsContext
						at: aPixmap bounds center - aText bounds center.
					anImage := aPixmap asImage]
				ensure: [:aPixmap | aPixmap close].
			aTexture := JunOpenGLTexture image: anImage.
			aTexture coordinates: (Array 
						with: 0 , 0
						with: 1 , 0
						with: 1 , 1
						with: 0 , 1).
			aPolygon paint: back.
			aPolygon texture: aTexture.
			aPolygon name: 'face' , aString.
			aPolygon yourself].
	face1 := block value: '1'.
	face2 := block value: '2'.
	face3 := block value: '3'.
	face4 := block value: '4'.
	face5 := block value: '5'.
	face6 := block value: '6'.
	dice := JunOpenGL3dCompoundObject new.
	dice
		add: (face1 translatedBy: 0 , 0 , 1);
		add: ((face6 transform: (JunAngle degrees: 180) transformationToRotateX) 
					translatedBy: 0 , 0 , -1);
		add: ((face5 transform: (JunAngle degrees: 90) transformationToRotateY) 
					translatedBy: 1 , 0 , 0);
		add: ((face2 transform: (JunAngle degrees: 270) transformationToRotateY) 
					translatedBy: -1 , 0 , 0);
		add: ((face3 transform: (JunAngle degrees: 90) transformationToRotateX) 
					translatedBy: 0 , -1 , 0);
		add: ((face4 transform: (JunAngle degrees: 270) transformationToRotateX) 
					translatedBy: 0 , 1 , 0).
	dice name: 'dice'.
	^dice
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> dolphin [
	"(JunOpenGL3dObject dolphin) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:20:09

(CompoundBody (name . "dolphin")
  (bodies (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1649d , 0.0786d , 4.3318d)}
        {(0.0662d , 0.1305d , 4.3318d)}
        {(-0.0325d , 0.1305d , 4.3318d)}
        {(-0.1312d , 0.0786d , 4.3318d)}
        {(-0.1572d , -0.0391d , 4.3318d)}
        {(0.1908d , -0.0391d , 4.3318d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1649d , 0.0786d , 4.3318d)}
        {(0.1908d , -0.0391d , 4.3318d)}
        {(0.3847d , -0.0476d , 3.7161d)}
        {(0.3499d , 0.2111d , 3.6086d)}
        {(0.2969d , 0.2375d , 3.6814d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1762d , -0.066d , 4.2541d)}
        {(0.1908d , -0.0391d , 4.3318d)}
        {(-0.1572d , -0.0391d , 4.3318d)}
        {(-0.1365d , -0.0768d , 4.2524d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4664d , 0.1732d , 3.431d)}
        {(0.3499d , 0.2111d , 3.6086d)}
        {(0.3847d , -0.0476d , 3.7161d)}
        {(0.5054d , -0.0058d , 3.4413d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1046d , 0.2926d , 3.7161d)}
        {(-0.0809d , 0.2926d , 3.7161d)}
        {(-0.0617d , 0.2716d , 3.784d)}
        {(0.0804d , 0.2716d , 3.784d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1762d , -0.066d , 4.2541d)}
        {(0.1813d , -0.0998d , 4.3793d)}
        {(0.3581d , -0.1431d , 3.7161d)}
        {(0.3546d , -0.086d , 3.6837d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.101d , 0.3449d , 3.7098d)}
        {(-0.0809d , 0.2926d , 3.7161d)}
        {(0.1046d , 0.2926d , 3.7161d)}
        {(0.126d , 0.3459d , 3.7094d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1489d , 0.6232d , 3.446d)}
        {(0.3926d , 0.4454d , 3.3324d)}
        {(0.5397d , 0.5169d , 2.8336d)}
        {(0.2023d , 0.7864d , 2.8445d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4959d , -0.0562d , 3.4064d)}
        {(0.3546d , -0.086d , 3.6837d)}
        {(0.3581d , -0.1431d , 3.7161d)}
        {(0.4973d , -0.1155d , 3.445d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1312d , 0.0786d , 4.3318d)}
        {(-0.0325d , 0.1305d , 4.3318d)}
        {(-0.0617d , 0.2716d , 3.784d)}
        {(-0.2648d , 0.2359d , 3.6811d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4959d , -0.0562d , 3.4064d)}
        {(0.6348d , -0.0258d , 3.1268d)}
        {(0.5054d , -0.0058d , 3.4413d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1489d , 0.6232d , 3.446d)}
        {(0.2023d , 0.7864d , 2.8445d)}
        {(-0.1952d , 0.7864d , 2.8444d)}
        {(-0.1413d , 0.6234d , 3.4457d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.0809d , 0.2926d , 3.7161d)}
        {(-0.249d , 0.2448d , 3.5653d)}
        {(-0.2648d , 0.2359d , 3.6811d)}
        {(-0.0617d , 0.2716d , 3.784d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5568d , 0.1837d , 2.9088d)}
        {(0.383d , 0.2095d , 3.3984d)}
        {(0.4664d , 0.1732d , 3.431d)}
        {(0.6945d , 0.0713d , 2.8366d)}
        {(0.6342d , 0.1255d , 2.8255d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.571d , 0.1774d , 2.8111d)}
        {(0.5568d , 0.1837d , 2.9088d)}
        {(0.6342d , 0.1255d , 2.8255d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6342d , 0.1255d , 2.8255d)}
        {(0.6172d , 0.1895d , 2.7476d)}
        {(0.571d , 0.1774d , 2.8111d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5054d , -0.0058d , 3.4413d)}
        {(0.6348d , -0.0258d , 3.1268d)}
        {(0.7088d , -0.0187d , 2.8298d)}
        {(0.6945d , 0.0713d , 2.8366d)}
        {(0.4664d , 0.1732d , 3.431d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3205d , 0.2111d , 3.6086d)}
        {(-0.2648d , 0.2359d , 3.6811d)}
        {(-0.249d , 0.2448d , 3.5653d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6099d , 0.3391d , 2.8385d)}
        {(0.5919d , 0.2594d , 2.8264d)}
        {(0.6172d , 0.1895d , 2.7476d)}
        {(0.699d , 0.1908d , 2.5499d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.325d , -0.4017d , 3.7161d)}
        {(0.1649d , -0.2175d , 4.3793d)}
        {(0.0168d , -0.2693d , 4.3793d)}
        {(0.0168d , -0.4467d , 3.6994d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1572d , -0.0391d , 4.3318d)}
        {(-0.1312d , 0.0786d , 4.3318d)}
        {(-0.2648d , 0.2359d , 3.6811d)}
        {(-0.3205d , 0.2111d , 3.6086d)}
        {(-0.3396d , -0.0476d , 3.7161d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.249d , 0.2448d , 3.5653d)}
        {(-0.2886d , 0.308d , 3.5515d)}
        {(-0.4227d , 0.3086d , 3.3897d)}
        {(-0.3777d , 0.2082d , 3.3918d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.4577d , 0.1738d , 3.4286d)}
        {(-0.3205d , 0.2111d , 3.6086d)}
        {(-0.249d , 0.2448d , 3.5653d)}
        {(-0.3777d , 0.2082d , 3.3918d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.2914d , -0.4017d , 3.7161d)}
        {(-0.1312d , -0.2175d , 4.3793d)}
        {(-0.1667d , -0.0998d , 4.3793d)}
        {(-0.3662d , -0.1431d , 3.7161d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.412d , -0.452d , 3.44d)}
        {(0.325d , -0.4017d , 3.7161d)}
        {(0.0168d , -0.4467d , 3.6994d)}
        {(0.0037d , -0.5d , 3.4393d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5397d , 0.5169d , 2.8336d)}
        {(0.6099d , 0.3391d , 2.8385d)}
        {(0.699d , 0.1908d , 2.5499d)}
        {(0.7697d , 0.1942d , 1.9897d)}
        {(0.5965d , 0.5986d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6945d , 0.0713d , 2.8366d)}
        {(0.7088d , -0.0187d , 2.8298d)}
        {(0.8018d , 0.0121d , 1.9846d)}
        {(0.7697d , 0.1942d , 1.9897d)}
        {(0.699d , 0.1908d , 2.5499d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3662d , -0.1431d , 3.7161d)}
        {(-0.3088d , -0.1043d , 3.676d)}
        {(-0.4608d , -0.0675d , 3.3951d)}
        {(-0.5061d , -0.1157d , 3.443d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1952d , 0.7864d , 2.8444d)}
        {(0.2023d , 0.7864d , 2.8445d)}
        {(0.2055d , 0.8039d , 1.9846d)}
        {(-0.1855d , 0.8039d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.4227d , 0.3086d , 3.3897d)}
        {(-0.3859d , 0.4478d , 3.3302d)}
        {(-0.5326d , 0.5169d , 2.8336d)}
        {(-0.5979d , 0.339d , 2.8385d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.4953d , -0.0056d , 3.4396d)}
        {(-0.6193d , -0.0272d , 3.1263d)}
        {(-0.4608d , -0.0675d , 3.3951d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.6193d , -0.0272d , 3.1263d)}
        {(-0.5061d , -0.1157d , 3.443d)}
        {(-0.4608d , -0.0675d , 3.3951d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5718d , 0.1827d , 2.9404d)}
        {(-0.5776d , 0.2546d , 2.8536d)}
        {(-0.5627d , 0.1837d , 2.8556d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.6199d , 0.1206d , 2.8527d)}
        {(-0.5718d , 0.1827d , 2.9404d)}
        {(-0.5627d , 0.1837d , 2.8556d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5965d , 0.5986d , 1.9846d)}
        {(0.6581d , 0.6509d , 0.9802d)}
        {(0.226d , 0.8777d , 0.9802d)}
        {(0.2055d , 0.8039d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.4953d , -0.0056d , 3.4396d)}
        {(-0.4577d , 0.1738d , 3.4286d)}
        {(-0.6824d , 0.071d , 2.8367d)}
        {(-0.7017d , -0.0191d , 2.83d)}
        {(-0.6193d , -0.0272d , 3.1263d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.6795d , 0.1816d , 2.5447d)}
        {(-0.6824d , 0.071d , 2.8367d)}
        {(-0.6199d , 0.1206d , 2.8527d)}
        {(-0.6002d , 0.1754d , 2.7696d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5979d , 0.339d , 2.8385d)}
        {(-0.5326d , 0.5169d , 2.8336d)}
        {(-0.5765d , 0.5986d , 1.9846d)}
        {(-0.7394d , 0.1947d , 1.9891d)}
        {(-0.6795d , 0.1816d , 2.5447d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.226d , 0.8777d , 0.9802d)}
        {(0.6581d , 0.6509d , 0.9802d)}
        {(0.6581d , 0.6509d , -0.3159d)}
        {(0.2427d , 0.9898d , -0.0584d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5965d , -0.5744d , 1.9846d)}
        {(0.5635d , -0.6571d , 1.8667d)}
        {(0.6103d , -0.7109d , 1.1032d)}
        {(0.6581d , -0.6452d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2427d , 0.9898d , -0.0584d)}
        {(-0.1998d , 0.9898d , -0.0584d)}
        {(-0.206d , 0.8777d , 0.9802d)}
        {(0.226d , 0.8777d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6703d , -1.2842d , 1.6855d)}
        {(0.3572d , -0.7735d , 1.8685d)}
        {(0.3572d , -0.8409d , 1.1349d)}
        {(0.693d , -1.3316d , 1.0502d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.3572d , -0.8409d , 1.1349d)}
        {(0.6103d , -0.7109d , 1.1032d)}
        {(0.8385d , -1.2549d , 1.0625d)}
        {(0.693d , -1.3316d , 1.0502d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.925d , -1.7747d , 1.1172d)}
        {(0.9882d , -1.7461d , 1.1184d)}
        {(0.8217d , -1.2008d , 1.6844d)}
        {(0.6703d , -1.2842d , 1.6855d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6703d , -1.2842d , 1.6855d)}
        {(0.693d , -1.3316d , 1.0502d)}
        {(0.8748d , -1.6537d , 0.8973d)}
        {(0.925d , -1.7747d , 1.1172d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.9366d , -1.6303d , 0.9021d)}
        {(0.9882d , -1.7461d , 1.1184d)}
        {(0.925d , -1.7747d , 1.1172d)}
        {(0.8748d , -1.6537d , 0.8973d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6581d , 0.6509d , 0.9802d)}
        {(0.8849d , 0.0029d , 0.9802d)}
        {(0.8849d , 0.0029d , -0.3159d)}
        {(0.6581d , 0.6509d , -0.3159d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2427d , 0.9898d , -0.0584d)}
        {(0.138d , 1.0858d , -0.2545d)}
        {(-0.0952d , 1.0858d , -0.2545d)}
        {(-0.1998d , 0.9898d , -0.0584d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5765d , -0.5744d , 1.9846d)}
        {(-0.5473d , -0.6571d , 1.8667d)}
        {(-0.3752d , -0.7735d , 1.8685d)}
        {(0.01d , -0.7797d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.7394d , 0.1947d , 1.9891d)}
        {(-0.5765d , 0.5986d , 1.9846d)}
        {(-0.638d , 0.6509d , 0.9802d)}
        {(-0.8648d , 0.0029d , 0.9802d)}
        {(-0.7818d , 0.0121d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.01d , -0.7797d , 1.9846d)}
        {(0.01d , -0.872d , 0.9802d)}
        {(0.3572d , -0.8409d , 1.1349d)}
        {(0.3572d , -0.7735d , 1.8685d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0117d , 1.7886d , -1.4927d)}
        {(0.0501d , 1.7886d , -1.4927d)}
        {(0.0478d , 1.7271d , -1.5335d)}
        {(0.014d , 1.7271d , -1.5335d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.206d , 0.8777d , 0.9802d)}
        {(-0.1998d , 0.9898d , -0.0584d)}
        {(-0.638d , 0.6509d , -0.3159d)}
        {(-0.638d , 0.6509d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.008d , 1.3386d , -1.3326d)}
        {(-0.047d , 1.7539d , -1.0567d)}
        {(0.0117d , 1.7886d , -1.4927d)}
        {(0.014d , 1.7271d , -1.5335d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.014d , 1.7271d , -1.5335d)}
        {(0.0478d , 1.7271d , -1.5335d)}
        {(0.0538d , 1.3386d , -1.3326d)}
        {(0.008d , 1.3386d , -1.3326d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5765d , -0.5744d , 1.9846d)}
        {(-0.7818d , 0.0121d , 1.9846d)}
        {(-0.8648d , 0.0029d , 0.9802d)}
        {(-0.638d , -0.6452d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.0952d , 1.0858d , -0.2545d)}
        {(-0.047d , 1.7539d , -1.0567d)}
        {(0.008d , 1.3386d , -1.3326d)}
        {(-0.0097d , 1.0018d , -1.398d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0538d , 1.3386d , -1.3326d)}
        {(0.0526d , 1.0018d , -1.398d)}
        {(-0.0097d , 1.0018d , -1.398d)}
        {(0.008d , 1.3386d , -1.3326d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2427d , 0.9898d , -0.0584d)}
        {(0.6581d , 0.6509d , -0.3159d)}
        {(0.5965d , 0.5986d , -1.3204d)}
        {(0.0692d , 0.8781d , -1.5779d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.0952d , 1.0858d , -0.2545d)}
        {(-0.0097d , 1.0018d , -1.398d)}
        {(-0.0264d , 0.8781d , -1.5779d)}
        {(-0.1998d , 0.9898d , -0.0584d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.0097d , 1.0018d , -1.398d)}
        {(0.0526d , 1.0018d , -1.398d)}
        {(0.0692d , 0.8781d , -1.5779d)}
        {(-0.0264d , 0.8781d , -1.5779d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.8849d , 0.0029d , -0.3159d)}
        {(0.6581d , -0.6452d , -0.3159d)}
        {(0.5965d , -0.5744d , -1.3204d)}
        {(0.8018d , 0.0121d , -1.3204d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.638d , -0.6452d , 0.9802d)}
        {(-0.8648d , 0.0029d , 0.9802d)}
        {(-0.8648d , 0.0029d , -0.3159d)}
        {(-0.638d , -0.6452d , -0.3159d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.638d , 0.6509d , -0.3159d)}
        {(-0.5765d , 0.5986d , -1.3204d)}
        {(-0.7818d , 0.0121d , -1.3204d)}
        {(-0.8648d , 0.0029d , -0.3159d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0692d , 0.8781d , -1.5779d)}
        {(0.5965d , 0.5986d , -1.3204d)}
        {(0.4151d , 0.419d , -2.7054d)}
        {(0.0889d , 0.6172d , -2.7185d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5965d , 0.5986d , -1.3204d)}
        {(0.8018d , 0.0121d , -1.3204d)}
        {(0.618d , 0.0531d , -2.7185d)}
        {(0.4151d , 0.419d , -2.7054d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5765d , 0.5986d , -1.3204d)}
        {(-0.0264d , 0.8781d , -1.5779d)}
        {(0.019d , 0.6172d , -2.7185d)}
        {(-0.3076d , 0.4191d , -2.7035d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.7818d , 0.0121d , -1.3204d)}
        {(-0.5765d , 0.5986d , -1.3204d)}
        {(-0.3076d , 0.4191d , -2.7035d)}
        {(-0.5101d , 0.0531d , -2.7185d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5965d , -0.5744d , -1.3204d)}
        {(0.01d , -0.7797d , -1.3204d)}
        {(0.0539d , -0.511d , -2.7185d)}
        {(0.4718d , -0.3647d , -2.7185d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.7818d , 0.0121d , -1.3204d)}
        {(-0.5101d , 0.0531d , -2.7185d)}
        {(-0.3639d , -0.3647d , -2.7185d)}
        {(-0.5765d , -0.5744d , -1.3204d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4151d , 0.419d , -2.7054d)}
        {(0.618d , 0.0531d , -2.7185d)}
        {(0.353d , 0.1007d , -4.0087d)}
        {(0.2351d , 0.2659d , -4.0505d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(1.5995d , -0.1221d , -5.0371d)}
        {(0.9887d , 0.0827d , -4.3193d)}
        {(0.9054d , -0.1551d , -4.3193d)}
        {(1.5808d , -0.1754d , -5.0371d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(1.5685d , -0.1187d , -5.2383d)}
        {(1.5995d , -0.1221d , -5.0371d)}
        {(1.5808d , -0.1754d , -5.0371d)}
        {(1.5579d , -0.149d , -5.2383d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(1.5808d , -0.1754d , -5.0371d)}
        {(0.9054d , -0.1551d , -4.3193d)}
        {(0.8533d , -0.0549d , -5.0255d)}
        {(1.5579d , -0.149d , -5.2383d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(1.5685d , -0.1187d , -5.2383d)}
        {(1.5579d , -0.149d , -5.2383d)}
        {(0.8533d , -0.0549d , -5.0255d)}
        {(0.9007d , 0.0805d , -5.0255d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0539d , -0.511d , -2.7185d)}
        {(-0.3639d , -0.3647d , -2.7185d)}
        {(-0.1565d , -0.1371d , -4.0087d)}
        {(0.0566d , -0.1937d , -4.0602d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0743d , 0.3759d , -4.0602d)}
        {(0.2351d , 0.2659d , -4.0505d)}
        {(0.1285d , 0.1832d , -4.8132d)}
        {(0.0808d , 0.2023d , -4.8133d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2351d , 0.2659d , -4.0505d)}
        {(0.353d , 0.1007d , -4.0087d)}
        {(0.2136d , 0.1173d , -4.9216d)}
        {(0.1285d , 0.1832d , -4.8132d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1003d , 0.1173d , -4.9216d)}
        {(-0.2397d , 0.1007d , -4.0087d)}
        {(-0.1218d , 0.2659d , -4.0504d)}
        {(-0.0152d , 0.1832d , -4.8132d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1003d , 0.1173d , -4.9216d)}
        {(-0.7874d , 0.0805d , -5.0255d)}
        {(-0.8754d , 0.0827d , -4.3193d)}
        {(-0.2397d , 0.1007d , -4.0087d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.74d , -0.0549d , -5.0255d)}
        {(-0.0529d , -0.0181d , -4.9216d)}
        {(-0.1565d , -0.1371d , -4.0087d)}
        {(-0.7921d , -0.1551d , -4.3193d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.74d , -0.0549d , -5.0255d)}
        {(-0.7874d , 0.0805d , -5.0255d)}
        {(-0.1003d , 0.1173d , -4.9216d)}
        {(-0.0529d , -0.0181d , -4.9216d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-1.3985d , -0.1221d , -5.0371d)}
        {(-1.3799d , -0.1754d , -5.0371d)}
        {(-0.7921d , -0.1551d , -4.3193d)}
        {(-0.8754d , 0.0827d , -4.3193d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.8754d , 0.0827d , -4.3193d)}
        {(-0.7874d , 0.0805d , -5.0255d)}
        {(-1.3676d , -0.1187d , -5.2383d)}
        {(-1.3985d , -0.1221d , -5.0371d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-1.3569d , -0.149d , -5.2383d)}
        {(-1.3799d , -0.1754d , -5.0371d)}
        {(-1.3985d , -0.1221d , -5.0371d)}
        {(-1.3676d , -0.1187d , -5.2383d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3752d , -0.7735d , 1.8685d)}
        {(-0.5473d , -0.6571d , 1.8667d)}
        {(-0.8464d , -1.1795d , 1.6838d)}
        {(-0.7197d , -1.2629d , 1.6849d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.74d , -1.3103d , 1.0496d)}
        {(-0.7197d , -1.2629d , 1.6849d)}
        {(-0.9782d , -1.6715d , 1.1052d)}
        {(-0.8941d , -1.5702d , 0.8857d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.8941d , -1.5702d , 0.8857d)}
        {(-0.9782d , -1.6715d , 1.1052d)}
        {(-1.0261d , -1.6339d , 1.1046d)}
        {(-0.9435d , -1.5376d , 0.8884d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.01d , -0.872d , 0.9802d)}
        {(-0.3752d , -0.8409d , 1.1349d)}
        {(-0.5941d , -0.7109d , 1.1032d)}
        {(-0.638d , -0.6452d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1046d , 0.2926d , 3.7161d)}
        {(0.0804d , 0.2716d , 3.784d)}
        {(0.2969d , 0.2375d , 3.6814d)}
        {(0.2807d , 0.2471d , 3.5688d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2969d , 0.2375d , 3.6814d)}
        {(0.3499d , 0.2111d , 3.6086d)}
        {(0.2807d , 0.2471d , 3.5688d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0662d , 0.1305d , 4.3318d)}
        {(0.1649d , 0.0786d , 4.3318d)}
        {(0.2969d , 0.2375d , 3.6814d)}
        {(0.0804d , 0.2716d , 3.784d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.126d , 0.3459d , 3.7094d)}
        {(0.3183d , 0.3063d , 3.5548d)}
        {(0.3926d , 0.4454d , 3.3324d)}
        {(0.1489d , 0.6232d , 3.446d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4398d , 0.3079d , 3.3918d)}
        {(0.3926d , 0.4454d , 3.3324d)}
        {(0.3183d , 0.3063d , 3.5548d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.126d , 0.3459d , 3.7094d)}
        {(0.1046d , 0.2926d , 3.7161d)}
        {(0.2807d , 0.2471d , 3.5688d)}
        {(0.3183d , 0.3063d , 3.5548d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1667d , -0.0998d , 4.3793d)}
        {(0.1813d , -0.0998d , 4.3793d)}
        {(0.1762d , -0.066d , 4.2541d)}
        {(-0.1365d , -0.0768d , 4.2524d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.1649d , -0.2175d , 4.3793d)}
        {(0.1813d , -0.0998d , 4.3793d)}
        {(-0.1667d , -0.0998d , 4.3793d)}
        {(-0.1312d , -0.2175d , 4.3793d)}
        {(0.0168d , -0.2693d , 4.3793d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.0325d , 0.1305d , 4.3318d)}
        {(0.0662d , 0.1305d , 4.3318d)}
        {(0.0804d , 0.2716d , 3.784d)}
        {(-0.0617d , 0.2716d , 3.784d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4398d , 0.3079d , 3.3918d)}
        {(0.3183d , 0.3063d , 3.5548d)}
        {(0.2807d , 0.2471d , 3.5688d)}
        {(0.383d , 0.2095d , 3.3984d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4664d , 0.1732d , 3.431d)}
        {(0.383d , 0.2095d , 3.3984d)}
        {(0.2807d , 0.2471d , 3.5688d)}
        {(0.3499d , 0.2111d , 3.6086d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.3847d , -0.0476d , 3.7161d)}
        {(0.1908d , -0.0391d , 4.3318d)}
        {(0.1762d , -0.066d , 4.2541d)}
        {(0.3546d , -0.086d , 3.6837d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.126d , 0.3459d , 3.7094d)}
        {(0.1489d , 0.6232d , 3.446d)}
        {(-0.1413d , 0.6234d , 3.4457d)}
        {(-0.101d , 0.3449d , 3.7098d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5054d , -0.0058d , 3.4413d)}
        {(0.3847d , -0.0476d , 3.7161d)}
        {(0.3546d , -0.086d , 3.6837d)}
        {(0.4959d , -0.0562d , 3.4064d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4398d , 0.3079d , 3.3918d)}
        {(0.6099d , 0.3391d , 2.8385d)}
        {(0.5397d , 0.5169d , 2.8336d)}
        {(0.3926d , 0.4454d , 3.3324d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.3581d , -0.1431d , 3.7161d)}
        {(0.1813d , -0.0998d , 4.3793d)}
        {(0.1649d , -0.2175d , 4.3793d)}
        {(0.325d , -0.4017d , 3.7161d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4959d , -0.0562d , 3.4064d)}
        {(0.4973d , -0.1155d , 3.445d)}
        {(0.6348d , -0.0258d , 3.1268d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5568d , 0.1837d , 2.9088d)}
        {(0.5919d , 0.2594d , 2.8264d)}
        {(0.6099d , 0.3391d , 2.8385d)}
        {(0.4398d , 0.3079d , 3.3918d)}
        {(0.383d , 0.2095d , 3.3984d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5919d , 0.2594d , 2.8264d)}
        {(0.5568d , 0.1837d , 2.9088d)}
        {(0.571d , 0.1774d , 2.8111d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.101d , 0.3449d , 3.7098d)}
        {(-0.2886d , 0.308d , 3.5515d)}
        {(-0.249d , 0.2448d , 3.5653d)}
        {(-0.0809d , 0.2926d , 3.7161d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.3581d , -0.1431d , 3.7161d)}
        {(0.325d , -0.4017d , 3.7161d)}
        {(0.412d , -0.452d , 3.44d)}
        {(0.4973d , -0.1155d , 3.445d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.101d , 0.3449d , 3.7098d)}
        {(-0.1413d , 0.6234d , 3.4457d)}
        {(-0.3859d , 0.4478d , 3.3302d)}
        {(-0.2886d , 0.308d , 3.5515d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3859d , 0.4478d , 3.3302d)}
        {(-0.4227d , 0.3086d , 3.3897d)}
        {(-0.2886d , 0.308d , 3.5515d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3396d , -0.0476d , 3.7161d)}
        {(-0.3088d , -0.1043d , 3.676d)}
        {(-0.1365d , -0.0768d , 4.2524d)}
        {(-0.1572d , -0.0391d , 4.3318d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1667d , -0.0998d , 4.3793d)}
        {(-0.1365d , -0.0768d , 4.2524d)}
        {(-0.3088d , -0.1043d , 3.676d)}
        {(-0.3662d , -0.1431d , 3.7161d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0168d , -0.2693d , 4.3793d)}
        {(-0.1312d , -0.2175d , 4.3793d)}
        {(-0.2914d , -0.4017d , 3.7161d)}
        {(0.0168d , -0.4467d , 3.6994d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.412d , -0.452d , 3.44d)}
        {(0.5297d , -0.5054d , 2.8336d)}
        {(0.7088d , -0.0187d , 2.8298d)}
        {(0.6348d , -0.0258d , 3.1268d)}
        {(0.4973d , -0.1155d , 3.445d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1413d , 0.6234d , 3.4457d)}
        {(-0.1952d , 0.7864d , 2.8444d)}
        {(-0.5326d , 0.5169d , 2.8336d)}
        {(-0.3859d , 0.4478d , 3.3302d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2023d , 0.7864d , 2.8445d)}
        {(0.5397d , 0.5169d , 2.8336d)}
        {(0.5965d , 0.5986d , 1.9846d)}
        {(0.2055d , 0.8039d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.4953d , -0.0056d , 3.4396d)}
        {(-0.3396d , -0.0476d , 3.7161d)}
        {(-0.3205d , 0.2111d , 3.6086d)}
        {(-0.4577d , 0.1738d , 3.4286d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.4953d , -0.0056d , 3.4396d)}
        {(-0.4608d , -0.0675d , 3.3951d)}
        {(-0.3088d , -0.1043d , 3.676d)}
        {(-0.3396d , -0.0476d , 3.7161d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0168d , -0.4467d , 3.6994d)}
        {(-0.2914d , -0.4017d , 3.7161d)}
        {(-0.4054d , -0.4514d , 3.4376d)}
        {(0.0037d , -0.5d , 3.4393d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.2914d , -0.4017d , 3.7161d)}
        {(-0.3662d , -0.1431d , 3.7161d)}
        {(-0.5061d , -0.1157d , 3.443d)}
        {(-0.4054d , -0.4514d , 3.4376d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3777d , 0.2082d , 3.3918d)}
        {(-0.4227d , 0.3086d , 3.3897d)}
        {(-0.5979d , 0.339d , 2.8385d)}
        {(-0.5776d , 0.2546d , 2.8536d)}
        {(-0.5718d , 0.1827d , 2.9404d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.412d , -0.452d , 3.44d)}
        {(0.0037d , -0.5d , 3.4393d)}
        {(0.0035d , -0.6517d , 2.8214d)}
        {(0.5297d , -0.5054d , 2.8336d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5627d , 0.1837d , 2.8556d)}
        {(-0.5776d , 0.2546d , 2.8536d)}
        {(-0.6002d , 0.1754d , 2.7696d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.7088d , -0.0187d , 2.8298d)}
        {(0.5297d , -0.5054d , 2.8336d)}
        {(0.5965d , -0.5744d , 1.9846d)}
        {(0.8018d , 0.0121d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5627d , 0.1837d , 2.8556d)}
        {(-0.6002d , 0.1754d , 2.7696d)}
        {(-0.6199d , 0.1206d , 2.8527d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5765d , 0.5986d , 1.9846d)}
        {(-0.5326d , 0.5169d , 2.8336d)}
        {(-0.1952d , 0.7864d , 2.8444d)}
        {(-0.1855d , 0.8039d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.4577d , 0.1738d , 3.4286d)}
        {(-0.3777d , 0.2082d , 3.3918d)}
        {(-0.5718d , 0.1827d , 2.9404d)}
        {(-0.6199d , 0.1206d , 2.8527d)}
        {(-0.6824d , 0.071d , 2.8367d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.6002d , 0.1754d , 2.7696d)}
        {(-0.5776d , 0.2546d , 2.8536d)}
        {(-0.5979d , 0.339d , 2.8385d)}
        {(-0.6795d , 0.1816d , 2.5447d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5965d , 0.5986d , 1.9846d)}
        {(0.7697d , 0.1942d , 1.9897d)}
        {(0.8018d , 0.0121d , 1.9846d)}
        {(0.8849d , 0.0029d , 0.9802d)}
        {(0.6581d , 0.6509d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0037d , -0.5d , 3.4393d)}
        {(-0.4054d , -0.4514d , 3.4376d)}
        {(-0.5426d , -0.5054d , 2.8336d)}
        {(0.0035d , -0.6517d , 2.8214d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.7017d , -0.0191d , 2.83d)}
        {(-0.5426d , -0.5054d , 2.8336d)}
        {(-0.4054d , -0.4514d , 3.4376d)}
        {(-0.5061d , -0.1157d , 3.443d)}
        {(-0.6193d , -0.0272d , 3.1263d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2055d , 0.8039d , 1.9846d)}
        {(0.226d , 0.8777d , 0.9802d)}
        {(-0.206d , 0.8777d , 0.9802d)}
        {(-0.1855d , 0.8039d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0035d , -0.6517d , 2.8214d)}
        {(0.01d , -0.7797d , 1.9846d)}
        {(0.5965d , -0.5744d , 1.9846d)}
        {(0.5297d , -0.5054d , 2.8336d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5965d , -0.5744d , 1.9846d)}
        {(0.6581d , -0.6452d , 0.9802d)}
        {(0.8849d , 0.0029d , 0.9802d)}
        {(0.8018d , 0.0121d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.3572d , -0.7735d , 1.8685d)}
        {(0.5635d , -0.6571d , 1.8667d)}
        {(0.5965d , -0.5744d , 1.9846d)}
        {(0.01d , -0.7797d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.7818d , 0.0121d , 1.9846d)}
        {(-0.7017d , -0.0191d , 2.83d)}
        {(-0.6824d , 0.071d , 2.8367d)}
        {(-0.6795d , 0.1816d , 2.5447d)}
        {(-0.7394d , 0.1947d , 1.9891d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1855d , 0.8039d , 1.9846d)}
        {(-0.206d , 0.8777d , 0.9802d)}
        {(-0.638d , 0.6509d , 0.9802d)}
        {(-0.5765d , 0.5986d , 1.9846d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.8217d , -1.2008d , 1.6844d)}
        {(0.5635d , -0.6571d , 1.8667d)}
        {(0.3572d , -0.7735d , 1.8685d)}
        {(0.6703d , -1.2842d , 1.6855d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.7017d , -0.0191d , 2.83d)}
        {(-0.7818d , 0.0121d , 1.9846d)}
        {(-0.5765d , -0.5744d , 1.9846d)}
        {(-0.5426d , -0.5054d , 2.8336d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5426d , -0.5054d , 2.8336d)}
        {(-0.5765d , -0.5744d , 1.9846d)}
        {(0.01d , -0.7797d , 1.9846d)}
        {(0.0035d , -0.6517d , 2.8214d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.138d , 1.0858d , -0.2545d)}
        {(0.1088d , 1.7539d , -1.0567d)}
        {(-0.047d , 1.7539d , -1.0567d)}
        {(-0.0952d , 1.0858d , -0.2545d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0117d , 1.7886d , -1.4927d)}
        {(-0.047d , 1.7539d , -1.0567d)}
        {(0.1088d , 1.7539d , -1.0567d)}
        {(0.0501d , 1.7886d , -1.4927d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0501d , 1.7886d , -1.4927d)}
        {(0.1088d , 1.7539d , -1.0567d)}
        {(0.0538d , 1.3386d , -1.3326d)}
        {(0.0478d , 1.7271d , -1.5335d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6581d , -0.6452d , 0.9802d)}
        {(0.6581d , -0.6452d , -0.3159d)}
        {(0.8849d , 0.0029d , -0.3159d)}
        {(0.8849d , 0.0029d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.01d , -0.7797d , 1.9846d)}
        {(-0.3752d , -0.7735d , 1.8685d)}
        {(-0.3752d , -0.8409d , 1.1349d)}
        {(0.01d , -0.872d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5765d , -0.5744d , 1.9846d)}
        {(-0.638d , -0.6452d , 0.9802d)}
        {(-0.5941d , -0.7109d , 1.1032d)}
        {(-0.5473d , -0.6571d , 1.8667d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3752d , -0.8409d , 1.1349d)}
        {(-0.3752d , -0.7735d , 1.8685d)}
        {(-0.7197d , -1.2629d , 1.6849d)}
        {(-0.74d , -1.3103d , 1.0496d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.8464d , -1.1795d , 1.6838d)}
        {(-0.5473d , -0.6571d , 1.8667d)}
        {(-0.5941d , -0.7109d , 1.1032d)}
        {(-0.8654d , -1.2336d , 1.0619d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5941d , -0.7109d , 1.1032d)}
        {(-0.3752d , -0.8409d , 1.1349d)}
        {(-0.74d , -1.3103d , 1.0496d)}
        {(-0.8654d , -1.2336d , 1.0619d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.7197d , -1.2629d , 1.6849d)}
        {(-0.8464d , -1.1795d , 1.6838d)}
        {(-1.0261d , -1.6339d , 1.1046d)}
        {(-0.9782d , -1.6715d , 1.1052d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.8654d , -1.2336d , 1.0619d)}
        {(-0.9435d , -1.5376d , 0.8884d)}
        {(-1.0261d , -1.6339d , 1.1046d)}
        {(-0.8464d , -1.1795d , 1.6838d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.74d , -1.3103d , 1.0496d)}
        {(-0.8941d , -1.5702d , 0.8857d)}
        {(-0.9435d , -1.5376d , 0.8884d)}
        {(-0.8654d , -1.2336d , 1.0619d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.138d , 1.0858d , -0.2545d)}
        {(0.0526d , 1.0018d , -1.398d)}
        {(0.0538d , 1.3386d , -1.3326d)}
        {(0.1088d , 1.7539d , -1.0567d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5965d , 0.5986d , -1.3204d)}
        {(0.6581d , 0.6509d , -0.3159d)}
        {(0.8849d , 0.0029d , -0.3159d)}
        {(0.8018d , 0.0121d , -1.3204d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2427d , 0.9898d , -0.0584d)}
        {(0.0692d , 0.8781d , -1.5779d)}
        {(0.0526d , 1.0018d , -1.398d)}
        {(0.138d , 1.0858d , -0.2545d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.01d , -0.872d , 0.9802d)}
        {(0.01d , -0.872d , -0.3159d)}
        {(0.6581d , -0.6452d , -0.3159d)}
        {(0.6581d , -0.6452d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.638d , 0.6509d , 0.9802d)}
        {(-0.638d , 0.6509d , -0.3159d)}
        {(-0.8648d , 0.0029d , -0.3159d)}
        {(-0.8648d , 0.0029d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5765d , 0.5986d , -1.3204d)}
        {(-0.638d , 0.6509d , -0.3159d)}
        {(-0.1998d , 0.9898d , -0.0584d)}
        {(-0.0264d , 0.8781d , -1.5779d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.01d , -0.872d , 0.9802d)}
        {(-0.638d , -0.6452d , 0.9802d)}
        {(-0.638d , -0.6452d , -0.3159d)}
        {(0.01d , -0.872d , -0.3159d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6581d , -0.6452d , -0.3159d)}
        {(0.01d , -0.872d , -0.3159d)}
        {(0.01d , -0.7797d , -1.3204d)}
        {(0.5965d , -0.5744d , -1.3204d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0692d , 0.8781d , -1.5779d)}
        {(0.0889d , 0.6172d , -2.7185d)}
        {(0.019d , 0.6172d , -2.7185d)}
        {(-0.0264d , 0.8781d , -1.5779d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.638d , -0.6452d , -0.3159d)}
        {(-0.8648d , 0.0029d , -0.3159d)}
        {(-0.7818d , 0.0121d , -1.3204d)}
        {(-0.5765d , -0.5744d , -1.3204d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.01d , -0.872d , -0.3159d)}
        {(-0.638d , -0.6452d , -0.3159d)}
        {(-0.5765d , -0.5744d , -1.3204d)}
        {(0.01d , -0.7797d , -1.3204d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.8018d , 0.0121d , -1.3204d)}
        {(0.5965d , -0.5744d , -1.3204d)}
        {(0.4718d , -0.3647d , -2.7185d)}
        {(0.618d , 0.0531d , -2.7185d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.5765d , -0.5744d , -1.3204d)}
        {(-0.3639d , -0.3647d , -2.7185d)}
        {(0.0539d , -0.511d , -2.7185d)}
        {(0.01d , -0.7797d , -1.3204d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0889d , 0.6172d , -2.7185d)}
        {(0.4151d , 0.419d , -2.7054d)}
        {(0.2351d , 0.2659d , -4.0505d)}
        {(0.0743d , 0.3759d , -4.0602d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.019d , 0.6172d , -2.7185d)}
        {(0.0889d , 0.6172d , -2.7185d)}
        {(0.0743d , 0.3759d , -4.0602d)}
        {(0.039d , 0.3759d , -4.0602d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.353d , 0.1007d , -4.0087d)}
        {(0.618d , 0.0531d , -2.7185d)}
        {(0.4718d , -0.3647d , -2.7185d)}
        {(0.2698d , -0.1371d , -4.0087d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.9054d , -0.1551d , -4.3193d)}
        {(0.9887d , 0.0827d , -4.3193d)}
        {(0.353d , 0.1007d , -4.0087d)}
        {(0.2698d , -0.1371d , -4.0087d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3076d , 0.4191d , -2.7035d)}
        {(0.019d , 0.6172d , -2.7185d)}
        {(0.039d , 0.3759d , -4.0602d)}
        {(-0.1218d , 0.2659d , -4.0504d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.9007d , 0.0805d , -5.0255d)}
        {(0.9887d , 0.0827d , -4.3193d)}
        {(1.5995d , -0.1221d , -5.0371d)}
        {(1.5685d , -0.1187d , -5.2383d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3076d , 0.4191d , -2.7035d)}
        {(-0.1218d , 0.2659d , -4.0504d)}
        {(-0.2397d , 0.1007d , -4.0087d)}
        {(-0.5101d , 0.0531d , -2.7185d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.4718d , -0.3647d , -2.7185d)}
        {(0.0539d , -0.511d , -2.7185d)}
        {(0.0566d , -0.1937d , -4.0602d)}
        {(0.2698d , -0.1371d , -4.0087d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.3639d , -0.3647d , -2.7185d)}
        {(-0.5101d , 0.0531d , -2.7185d)}
        {(-0.2397d , 0.1007d , -4.0087d)}
        {(-0.1565d , -0.1371d , -4.0087d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.353d , 0.1007d , -4.0087d)}
        {(0.9887d , 0.0827d , -4.3193d)}
        {(0.9007d , 0.0805d , -5.0255d)}
        {(0.2136d , 0.1173d , -4.9216d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.8533d , -0.0549d , -5.0255d)}
        {(0.9054d , -0.1551d , -4.3193d)}
        {(0.2698d , -0.1371d , -4.0087d)}
        {(0.1662d , -0.0181d , -4.9216d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.039d , 0.3759d , -4.0602d)}
        {(0.0743d , 0.3759d , -4.0602d)}
        {(0.0808d , 0.2023d , -4.8133d)}
        {(0.0325d , 0.2023d , -4.8133d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.0152d , 0.1832d , -4.8132d)}
        {(-0.1218d , 0.2659d , -4.0504d)}
        {(0.039d , 0.3759d , -4.0602d)}
        {(0.0325d , 0.2023d , -4.8133d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.9007d , 0.0805d , -5.0255d)}
        {(0.8533d , -0.0549d , -5.0255d)}
        {(0.1662d , -0.0181d , -4.9216d)}
        {(0.2136d , 0.1173d , -4.9216d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.2698d , -0.1371d , -4.0087d)}
        {(0.0566d , -0.1937d , -4.0602d)}
        {(0.0566d , -0.0135d , -4.8235d)}
        {(0.1662d , -0.0181d , -4.9216d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0566d , -0.1937d , -4.0602d)}
        {(-0.1565d , -0.1371d , -4.0087d)}
        {(-0.0529d , -0.0181d , -4.9216d)}
        {(0.0566d , -0.0135d , -4.8235d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.0808d , 0.2023d , -4.8133d)}
        {(0.1285d , 0.1832d , -4.8132d)}
        {(0.2136d , 0.1173d , -4.9216d)}
        {(0.1662d , -0.0181d , -4.9216d)}
        {(0.0566d , -0.0135d , -4.8235d)}
        {(-0.0529d , -0.0181d , -4.9216d)}
        {(-0.1003d , 0.1173d , -4.9216d)}
        {(-0.0152d , 0.1832d , -4.8132d)}
        {(0.0325d , 0.2023d , -4.8133d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.1565d , -0.1371d , -4.0087d)}
        {(-0.2397d , 0.1007d , -4.0087d)}
        {(-0.8754d , 0.0827d , -4.3193d)}
        {(-0.7921d , -0.1551d , -4.3193d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-0.7921d , -0.1551d , -4.3193d)}
        {(-1.3799d , -0.1754d , -5.0371d)}
        {(-1.3569d , -0.149d , -5.2383d)}
        {(-0.74d , -0.0549d , -5.0255d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(-1.3569d , -0.149d , -5.2383d)}
        {(-1.3676d , -0.1187d , -5.2383d)}
        {(-0.7874d , 0.0805d , -5.0255d)}
        {(-0.74d , -0.0549d , -5.0255d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6581d , -0.6452d , 0.9802d)}
        {(0.6103d , -0.7109d , 1.1032d)}
        {(0.3572d , -0.8409d , 1.1349d)}
        {(0.01d , -0.872d , 0.9802d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.8217d , -1.2008d , 1.6844d)}
        {(0.8385d , -1.2549d , 1.0625d)}
        {(0.6103d , -0.7109d , 1.1032d)}
        {(0.5635d , -0.6571d , 1.8667d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.8217d , -1.2008d , 1.6844d)}
        {(0.9882d , -1.7461d , 1.1184d)}
        {(0.9366d , -1.6303d , 0.9021d)}
        {(0.8385d , -1.2549d , 1.0625d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.8385d , -1.2549d , 1.0625d)}
        {(0.9366d , -1.6303d , 0.9021d)}
        {(0.8748d , -1.6537d , 0.8973d)}
        {(0.693d , -1.3316d , 1.0502d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.6342d , 0.1255d , 2.8255d)}
        {(0.6945d , 0.0713d , 2.8366d)}
        {(0.699d , 0.1908d , 2.5499d)}
        {(0.6172d , 0.1895d , 2.7476d)}))
    (Polygon (color 0.284581
        0.284581
        0.284581)
      (points {(0.5919d , 0.2594d , 2.8264d)}
        {(0.571d , 0.1774d , 2.8111d)}
        {(0.6172d , 0.1895d , 2.7476d)}))))
'
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> dopamine [
	"(JunOpenGL3dObject dopamine) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
   -1.9351    0.0120    0.8693 C
   -1.4577   -1.0645    1.6274 C
   -0.0781   -1.2213    1.7854 C
    0.8214   -0.3223    1.2118 C
    0.3591    0.7576    0.4540 C
   -1.0227    0.9030    0.2954 C
    1.3290    1.7376   -0.1664 C
    2.1069    1.1083   -1.3293 C
    3.0281    2.0864   -1.9300 N
   -2.3304   -1.9421    2.1904 O
   -3.2767    0.1689    0.7093 O
    0.3049   -2.0686    2.3775 H
    1.9034   -0.4679    1.3602 H
   -1.4165    1.7442   -0.2978 H
    2.0375    2.0893    0.6200 H
    0.7880    2.6415   -0.5318 H
    1.4078    0.7468   -2.1192 H
    2.7124    0.2415   -0.9767 H
    3.6047    1.6485   -2.6482 H
    3.6803    2.4479   -1.2345 H
   -1.8125   -2.6281    2.6413 H
   -3.6964   -0.5592    1.1985 H
	'.
	compoundObject name: 'dopamine'.
	^compoundObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> doraemon [
	"(JunOpenGL3dObject doraemon) show."

	| baseSphere baseCircle head leftCheek transformation leftEyeRound leftEye nose noseLight whisker leftWhisker leftWhisker1 leftWhisker2 leftWhisker3 mouth centerLine x y width arrayOfPoints collar bell leftObjects dora box maximum |
	baseSphere := (JunOpenGL3dTransformedObject 
				object: (JunOpenGL3dObject ball: 3))
				flushAllPaints;
				yourself.
	baseCircle := (JunOpenGL3dTransformedObject 
				object: JunOpenGL3dNurbsCurve circle)
				flushAllPaints;
				yourself.
	head := baseSphere scaledBy: 4.5.
	leftCheek := baseSphere scaledBy: 3 * (0.65 , 1 , 1.1).
	transformation := Jun3dTransformation rotateZ: (JunAngle fromDeg: 25).
	transformation := transformation 
				product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 20)).
	leftCheek := leftCheek transform: transformation.
	leftCheek := leftCheek translatedBy: 2.25 , 1.1 , -0.9.
	leftEyeRound := baseSphere scaledBy: 0.6 , 1.2 , 1.2.
	transformation := Jun3dTransformation rotateZ: (JunAngle fromDeg: 15).
	transformation := transformation 
				product: (Jun3dTransformation rotateY: (JunAngle fromDeg: -30)).
	leftEyeRound := leftEyeRound transform: transformation.
	leftEyeRound := leftEyeRound translatedBy: 3.5 , 1 , 2.
	leftEye := baseSphere scaledBy: 0.3.
	leftEye := leftEye translatedBy: 4.1 , 0.7 , 2.2.
	nose := baseSphere scaledBy: 0.7.
	nose := nose translatedBy: 4.3 , 0 , 1.
	noseLight := baseSphere scaledBy: 0.2.
	noseLight := noseLight translatedBy: 4.8 , 0.2 , 1.2.
	whisker := baseCircle scaledBy: 0.3 , 1 , 1.
	transformation := Jun3dTransformation rotateZ: (JunAngle fromDeg: 25).
	leftWhisker := whisker transform: transformation.
	transformation := Jun3dTransformation rotateX: (JunAngle fromDeg: 30).
	leftWhisker1 := leftWhisker transform: transformation.
	leftWhisker1 := leftWhisker1 translatedBy: 3.95 , 2.0 , 0.0.
	transformation := Jun3dTransformation rotateX: (JunAngle fromDeg: 10).
	leftWhisker2 := leftWhisker transform: transformation.
	leftWhisker2 := leftWhisker2 translatedBy: 3.8 , 2.1 , -0.8.
	transformation := Jun3dTransformation rotateZ: (JunAngle fromDeg: 35).
	transformation := transformation 
				product: (Jun3dTransformation rotateX: (JunAngle fromDeg: -10)).
	leftWhisker3 := whisker transform: transformation.
	leftWhisker3 := leftWhisker3 translatedBy: 3.5 , 2.2 , -1.6.
	mouth := baseCircle scaledBy: 1 , 2.0 , 1.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	mouth := mouth transform: transformation.
	mouth := mouth translatedBy: 3.7 , 0 , -1.9.
	centerLine := baseCircle scaledBy: 0.9 , 2 , 2.
	transformation := Jun3dTransformation rotateX: (JunAngle fromDeg: 90).
	transformation := transformation 
				product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 20)).
	centerLine := centerLine transform: transformation.
	centerLine := centerLine translatedBy: 3.6 , 0 , -1.2.
	x := 0.3.
	y := 3.2.
	width := 0.7.
	arrayOfPoints := Array 
				with: x negated , (y - width)
				with: x negated , y
				with: x , y
				with: x , (y - width).
	collar := JunOpenGL3dObject rotate: arrayOfPoints divisions: 18.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	collar := collar transform: transformation.
	collar := collar translatedBy: 0 , 0 , -4.0.
	bell := JunOpenGL3dObject bell.
	bell := bell scaledBy: 1.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: -30).
	bell := bell transform: transformation.
	bell := bell translatedBy: 3.5 , 0 , -4.3.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftCheek
				paint: ColorValue white;
				yourself).
	leftObjects add: (leftEyeRound
				paint: ColorValue white;
				yourself).
	leftObjects add: (leftEye
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftWhisker1
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftWhisker2
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftWhisker3
				paint: ColorValue black;
				yourself).
	dora := JunOpenGL3dCompoundObject new.
	dora add: leftObjects.
	dora 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	dora add: bell.
	dora add: (head
				paint: ColorValue blue;
				yourself).
	dora add: (nose
				paint: ColorValue red;
				yourself).
	dora add: (noseLight
				paint: ColorValue white;
				yourself).
	dora add: (mouth
				paint: ColorValue red;
				yourself).
	dora add: (centerLine
				paint: ColorValue lightGray;
				yourself).
	dora add: (collar
				paint: ColorValue red;
				yourself).
	box := dora boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	dora := JunOpenGL3dTransformedObject object: dora
				transformation: transformation.
	dora name: 'doraemon'.
	^dora
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> dragon [
	"(JunOpenGL3dObject dragon) show."

	| aStream formTransporter anObject |
	aStream := JunFormTransporter exampleForm5 readStream.
	formTransporter := JunFormTransporter new.
	formTransporter loadFrom: aStream.
	formTransporter formObject isNil ifTrue: [^nil].
	anObject := formTransporter formObject.
	anObject name: 'dragon'.
	anObject paint: (ColorValue green blendWith: ColorValue gray).
	^anObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> earl [
	"(JunOpenGL3dObject earl) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:39:07

(CompoundBody (name . "earl")
  (bodies (CompoundBody (bodies (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.207722d , 3.60085d , 1.84483d)}
	    {(0.23965d , 3.60128d , 1.82344d)}
	    {(0.224353d , 3.63656d , 1.8013d)}
	    {(0.192425d , 3.63614d , 1.82268d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.224353d , 3.63656d , 1.8013d)}
	    {(0.23965d , 3.60128d , 1.82344d)}
	    {(0.098666d , 3.38947d , 1.57514d)}
	    {(0.093396d , 3.42815d , 1.57089d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.098666d , 3.38947d , 1.57514d)}
	    {(0.037275d , 3.3901d , 1.61824d)}
	    {(-0.068944d , 3.03209d , 1.51821d)}
	    {(0.098291d , 3.04241d , 1.41913d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.098291d , 3.04241d , 1.41913d)}
	    {(-0.068944d , 3.03209d , 1.51821d)}
	    {(-0.126124d , 3.09125d , 1.42786d)}
	    {(0.041111d , 3.10158d , 1.32878d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.192425d , 3.63614d , 1.82268d)}
	    {(0.224353d , 3.63656d , 1.8013d)}
	    {(0.093396d , 3.42815d , 1.57089d)}
	    {(0.033755d , 3.42862d , 1.61319d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.207722d , 3.60085d , 1.84483d)}
	    {(0.192425d , 3.63614d , 1.82268d)}
	    {(0.033755d , 3.42862d , 1.61319d)}
	    {(0.037275d , 3.3901d , 1.61824d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.23965d , 3.60128d , 1.82344d)}
	    {(0.207722d , 3.60085d , 1.84483d)}
	    {(0.037275d , 3.3901d , 1.61824d)}
	    {(0.098666d , 3.38947d , 1.57514d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.093396d , 3.42815d , 1.57089d)}
	    {(0.098666d , 3.38947d , 1.57514d)}
	    {(0.098291d , 3.04241d , 1.41913d)}
	    {(0.041111d , 3.10158d , 1.32878d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.037275d , 3.3901d , 1.61824d)}
	    {(0.033755d , 3.42862d , 1.61319d)}
	    {(-0.126124d , 3.09125d , 1.42786d)}
	    {(-0.068944d , 3.03209d , 1.51821d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.033755d , 3.42862d , 1.61319d)}
	    {(0.093396d , 3.42815d , 1.57089d)}
	    {(0.041111d , 3.10158d , 1.32878d)}
	    {(-0.126124d , 3.09125d , 1.42786d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.540869d , 1.76045d , 2.30082d)}
	    {(0.30637d , 1.77108d , 2.35563d)}
	    {(0.30637d , 1.4196d , 2.42381d)}
	    {(0.540869d , 1.40897d , 2.36901d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.540869d , 1.76045d , 2.30082d)}
	    {(0.540869d , 1.40897d , 2.36901d)}
	    {(0.48504d , 1.36431d , 2.1388d)}
	    {(0.48504d , 1.71579d , 2.07062d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.540869d , 1.40897d , 2.36901d)}
	    {(0.30637d , 1.4196d , 2.42381d)}
	    {(0.250541d , 1.37494d , 2.19361d)}
	    {(0.48504d , 1.36431d , 2.1388d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.30637d , 1.77108d , 2.35563d)}
	    {(0.540869d , 1.76045d , 2.30082d)}
	    {(0.48504d , 1.71579d , 2.07062d)}
	    {(0.250541d , 1.72642d , 2.12542d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.30637d , 1.4196d , 2.42381d)}
	    {(0.30637d , 1.77108d , 2.35563d)}
	    {(0.250541d , 1.72642d , 2.12542d)}
	    {(0.250541d , 1.37494d , 2.19361d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.250541d , 1.72642d , 2.12542d)}
	    {(0.48504d , 1.71579d , 2.07062d)}
	    {(0.48504d , 1.36431d , 2.1388d)}
	    {(0.250541d , 1.37494d , 2.19361d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.250541d , 1.72642d , 2.12542d)}
	    {(-0.30637d , 1.77108d , 2.35563d)}
	    {(-0.30637d , 1.4196d , 2.42381d)}
	    {(-0.250541d , 1.37494d , 2.19361d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.30637d , 1.4196d , 2.42381d)}
	    {(-0.30637d , 1.77108d , 2.35563d)}
	    {(-0.540869d , 1.76045d , 2.30082d)}
	    {(-0.540869d , 1.40897d , 2.36901d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.250541d , 1.37494d , 2.19361d)}
	    {(-0.30637d , 1.4196d , 2.42381d)}
	    {(-0.540869d , 1.40897d , 2.36901d)}
	    {(-0.48504d , 1.36431d , 2.1388d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.30637d , 1.77108d , 2.35563d)}
	    {(-0.250541d , 1.72642d , 2.12542d)}
	    {(-0.48504d , 1.71579d , 2.07062d)}
	    {(-0.540869d , 1.76045d , 2.30082d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.250541d , 1.72642d , 2.12542d)}
	    {(-0.250541d , 1.37494d , 2.19361d)}
	    {(-0.48504d , 1.36431d , 2.1388d)}
	    {(-0.48504d , 1.71579d , 2.07062d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.540869d , 1.76045d , 2.30082d)}
	    {(-0.48504d , 1.71579d , 2.07062d)}
	    {(-0.48504d , 1.36431d , 2.1388d)}
	    {(-0.540869d , 1.40897d , 2.36901d)}))))
    (CompoundBody (bodies (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(2.28692d , 2.05173d , 1.35714d)}
	    {(1.25054d , 3.17652d , 1.62753d)}
	    {(0.68491d , 2.52326d , 1.80153d)}
	    {(2.03873d , 1.7645d , 1.42371d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(2.28692d , 2.05173d , 1.35714d)}
	    {(2.03873d , 1.7645d , 1.42371d)}
	    {(2.1087d , 1.75573d , 0.98855d)}
	    {(2.34587d , 2.03233d , 0.959601d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(0.568786d , 2.81321d , 1.37186d)}
	    {(0.775423d , 3.27921d , 1.22487d)}
	    {(0.875468d , 3.24613d , 0.549851d)}
	    {(0.687516d , 2.79812d , 0.632962d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(0.687516d , 2.79812d , 0.632962d)}
	    {(0.875468d , 3.24613d , 0.549851d)}
	    {(1.45894d , 3.10794d , 0.22221d)}
	    {(0.932242d , 2.49225d , 0.263198d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(1.25054d , 3.17652d , 1.62753d)}
	    {(2.28692d , 2.05173d , 1.35714d)}
	    {(2.34587d , 2.03233d , 0.959601d)}
	    {(1.45894d , 3.10794d , 0.22221d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(0.68491d , 2.52326d , 1.80153d)}
	    {(1.25054d , 3.17652d , 1.62753d)}
	    {(0.775423d , 3.27921d , 1.22487d)}
	    {(0.568786d , 2.81321d , 1.37186d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(0.775423d , 3.27921d , 1.22487d)}
	    {(1.25054d , 3.17652d , 1.62753d)}
	    {(1.45894d , 3.10794d , 0.22221d)}
	    {(0.875468d , 3.24613d , 0.549851d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(2.03873d , 1.7645d , 1.42371d)}
	    {(0.68491d , 2.52326d , 1.80153d)}
	    {(0.932242d , 2.49225d , 0.263198d)}
	    {(2.1087d , 1.75573d , 0.98855d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(2.34587d , 2.03233d , 0.959601d)}
	    {(2.1087d , 1.75573d , 0.98855d)}
	    {(0.932242d , 2.49225d , 0.263198d)}
	    {(1.45894d , 3.10794d , 0.22221d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(0.68491d , 2.52326d , 1.80153d)}
	    {(0.568786d , 2.81321d , 1.37186d)}
	    {(0.687516d , 2.79812d , 0.632962d)}
	    {(0.932242d , 2.49225d , 0.263198d)}))))
    (CompoundBody (bodies (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-0.775423d , 3.27921d , 1.22487d)}
	    {(-1.25054d , 3.17652d , 1.62753d)}
	    {(-0.68491d , 2.52326d , 1.80153d)}
	    {(-0.568786d , 2.81321d , 1.37186d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-0.775423d , 3.27921d , 1.22487d)}
	    {(-0.568786d , 2.81321d , 1.37186d)}
	    {(-0.687516d , 2.79812d , 0.632962d)}
	    {(-0.875468d , 3.24613d , 0.549851d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-1.45894d , 3.10794d , 0.22221d)}
	    {(-0.875468d , 3.24613d , 0.549851d)}
	    {(-0.687516d , 2.79812d , 0.632962d)}
	    {(-0.932242d , 2.49225d , 0.263198d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-0.932242d , 2.49225d , 0.263198d)}
	    {(-0.68491d , 2.52326d , 1.80153d)}
	    {(-2.03873d , 1.7645d , 1.42371d)}
	    {(-2.1087d , 1.75573d , 0.98855d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-1.45894d , 3.10794d , 0.22221d)}
	    {(-0.932242d , 2.49225d , 0.263198d)}
	    {(-2.1087d , 1.75573d , 0.98855d)}
	    {(-2.34587d , 2.03233d , 0.959601d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-1.25054d , 3.17652d , 1.62753d)}
	    {(-0.775423d , 3.27921d , 1.22487d)}
	    {(-0.875468d , 3.24613d , 0.549851d)}
	    {(-1.45894d , 3.10794d , 0.22221d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-0.568786d , 2.81321d , 1.37186d)}
	    {(-0.68491d , 2.52326d , 1.80153d)}
	    {(-0.932242d , 2.49225d , 0.263198d)}
	    {(-0.687516d , 2.79812d , 0.632962d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-0.68491d , 2.52326d , 1.80153d)}
	    {(-1.25054d , 3.17652d , 1.62753d)}
	    {(-2.28692d , 2.05173d , 1.35714d)}
	    {(-2.03873d , 1.7645d , 1.42371d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-1.25054d , 3.17652d , 1.62753d)}
	    {(-1.45894d , 3.10794d , 0.22221d)}
	    {(-2.34587d , 2.03233d , 0.959601d)}
	    {(-2.28692d , 2.05173d , 1.35714d)}))
        (Polygon (color 0.0824075
	    0.0824075
	    0.0824075)
	  (points {(-2.03873d , 1.7645d , 1.42371d)}
	    {(-2.28692d , 2.05173d , 1.35714d)}
	    {(-2.34587d , 2.03233d , 0.959601d)}
	    {(-2.1087d , 1.75573d , 0.98855d)}))))
    (CompoundBody (bodies (Polygon (color 0.223538
	    0.133317
	    0.074472)
	  (points {(0.545859d , 1.40541d , 2.33151d)}
	    {(0.545859d , 1.40541d , 3.01689d)}
	    {(0.545859d , 0.720035d , 3.01689d)}
	    {(0.545859d , 0.720035d , 2.33151d)}))
        (Polygon (color 0.223538
	    0.133317
	    0.074472)
	  (points {(0.545859d , 1.40541d , 3.01689d)}
	    {(0.545859d , 1.40541d , 2.33151d)}
	    {(-0.545859d , 1.40541d , 2.33151d)}
	    {(-0.545859d , 1.40541d , 3.01689d)}))
        (Polygon (color 0.223538
	    0.133317
	    0.074472)
	  (points {(0.545859d , 1.40541d , 2.33151d)}
	    {(0.545859d , 0.720035d , 2.33151d)}
	    {(-0.545859d , 0.720035d , 2.33151d)}
	    {(-0.545859d , 1.40541d , 2.33151d)}))
        (Polygon (color 0.223538
	    0.133317
	    0.074472)
	  (points {(0.545859d , 0.720035d , 3.01689d)}
	    {(0.545859d , 1.40541d , 3.01689d)}
	    {(-0.545859d , 1.40541d , 3.01689d)}
	    {(-0.545859d , 0.720035d , 3.01689d)}))
        (Polygon (color 0.223538
	    0.133317
	    0.074472)
	  (points {(0.545859d , 0.720035d , 2.33151d)}
	    {(0.545859d , 0.720035d , 3.01689d)}
	    {(-0.545859d , 0.720035d , 3.01689d)}
	    {(-0.545859d , 0.720035d , 2.33151d)}))
        (Polygon (color 0.223538
	    0.133317
	    0.074472)
	  (points {(-0.545859d , 0.720035d , 3.01689d)}
	    {(-0.545859d , 1.40541d , 3.01689d)}
	    {(-0.545859d , 1.40541d , 2.33151d)}
	    {(-0.545859d , 0.720035d , 2.33151d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.297163d , 3.73438d , 1.68804d)}
	    {(-0.281912d , 3.7635d , 1.65823d)}
	    {(-0.313885d , 3.75894d , 1.6374d)}
	    {(-0.329136d , 3.72981d , 1.66721d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.313885d , 3.75894d , 1.6374d)}
	    {(-0.281912d , 3.7635d , 1.65823d)}
	    {(-0.123684d , 3.51271d , 1.50269d)}
	    {(-0.183414d , 3.50239d , 1.4618d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.329136d , 3.72981d , 1.66721d)}
	    {(-0.313885d , 3.75894d , 1.6374d)}
	    {(-0.183414d , 3.50239d , 1.4618d)}
	    {(-0.188675d , 3.46578d , 1.47499d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.035805d , 3.1413d , 1.401d)}
	    {(-0.021185d , 3.1049d , 1.50279d)}
	    {(-0.188628d , 3.09187d , 1.40438d)}
	    {(-0.131638d , 3.12827d , 1.30259d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.281912d , 3.7635d , 1.65823d)}
	    {(-0.297163d , 3.73438d , 1.68804d)}
	    {(-0.127193d , 3.47643d , 1.51662d)}
	    {(-0.123684d , 3.51271d , 1.50269d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.297163d , 3.73438d , 1.68804d)}
	    {(-0.329136d , 3.72981d , 1.66721d)}
	    {(-0.188675d , 3.46578d , 1.47499d)}
	    {(-0.127193d , 3.47643d , 1.51662d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.123684d , 3.51271d , 1.50269d)}
	    {(-0.127193d , 3.47643d , 1.51662d)}
	    {(-0.021185d , 3.1049d , 1.50279d)}
	    {(0.035805d , 3.1413d , 1.401d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.127193d , 3.47643d , 1.51662d)}
	    {(-0.188675d , 3.46578d , 1.47499d)}
	    {(-0.188628d , 3.09187d , 1.40438d)}
	    {(-0.021185d , 3.1049d , 1.50279d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.183414d , 3.50239d , 1.4618d)}
	    {(-0.123684d , 3.51271d , 1.50269d)}
	    {(0.035805d , 3.1413d , 1.401d)}
	    {(-0.131638d , 3.12827d , 1.30259d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.188675d , 3.46578d , 1.47499d)}
	    {(-0.183414d , 3.50239d , 1.4618d)}
	    {(-0.131638d , 3.12827d , 1.30259d)}
	    {(-0.188628d , 3.09187d , 1.40438d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.768248d , 2.77793d , 2.05242d)}
	    {(1.0254d , 2.58355d , 1.49491d)}
	    {(1.06913d , 2.65918d , 1.02677d)}
	    {(0.660613d , 3.14795d , 1.17217d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.06913d , 2.65918d , 1.02677d)}
	    {(1.0254d , 2.58355d , 1.49491d)}
	    {(1.12908d , 1.72575d , 1.39105d)}
	    {(1.2839d , 1.88665d , 0.504791d)}
	    {(1.06076d , 2.68594d , 0.566584d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(3.24909d-6 , 2.86531d , 2.35547d)}
	    {(3.24909d-6 , 3.35082d , 1.28064d)}
	    {(-0.660607d , 3.14795d , 1.17217d)}
	    {(-0.768242d , 2.77793d , 2.05242d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(3.24909d-6 , 3.35082d , 1.28064d)}
	    {(0.660613d , 3.14795d , 1.17217d)}
	    {(0.66874d , 2.98691d , 0.180067d)}
	    {(-1.04351d-5 , 3.18538d , 0.158168d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.04668d , 0.979735d , 2.456d)}
	    {(1.04483d , 0.644725d , 2.42932d)}
	    {(1.08234d , 0.569645d , 1.65067d)}
	    {(1.19175d , 0.835475d , 1.47258d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.2839d , 1.88665d , 0.504791d)}
	    {(1.12908d , 1.72575d , 1.39105d)}
	    {(1.19175d , 0.835475d , 1.47258d)}
	    {(1.03726d , 1.1064d , 0.577543d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.04483d , 0.644725d , 2.42932d)}
	    {(2.10971d-5 , 0.564185d , 2.79947d)}
	    {(1.69969d-5 , 0.392835d , 2.52722d)}
	    {(0.850286d , 0.248075d , 2.11958d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.630399d , 0.463695d , 2.02205d)}
	    {(0.850286d , 0.248075d , 2.11958d)}
	    {(1.69969d-5 , 0.392835d , 2.52722d)}
	    {(1.83212d-6 , 0.385965d , 2.3974d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.828998d , 0.490985d , 1.66723d)}
	    {(0.613095d , 0.627665d , 1.77292d)}
	    {(0.522858d , 0.600285d , 1.6224d)}
	    {(0.706945d , 0.413385d , 1.49543d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.613095d , 0.627665d , 1.77292d)}
	    {(0.630399d , 0.463695d , 2.02205d)}
	    {(1.83212d-6 , 0.385965d , 2.3974d)}
	    {(1.0d-6 , 0.617275d , 1.54123d)}
	    {(0.522858d , 0.600285d , 1.6224d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.835892d , 0.358965d , 1.27598d)}
	    {(0.706945d , 0.413385d , 1.49543d)}
	    {(0.501999d , 0.150285d , 1.96746d)}
	    {(0.774474d , -0.0497654d , 1.5746d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.860681d , 1.93569d , -0.0551801d)}
	    {(1.2839d , 1.88665d , 0.504791d)}
	    {(1.03726d , 1.1064d , 0.577543d)}
	    {(0.758648d , 1.19461d , 0.0691279d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.06913d , 2.65919d , 1.02677d)}
	    {(-0.660607d , 3.14795d , 1.17217d)}
	    {(-0.668734d , 2.98691d , 0.180067d)}
	    {(-1.06076d , 2.68594d , 0.566586d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.04351d-5 , 3.18538d , 0.158168d)}
	    {(0.66874d , 2.98691d , 0.180067d)}
	    {(0.860681d , 1.93569d , -0.0551801d)}
	    {(3.6623d-6 , 2.12178d , -0.30131d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(2.05614d , -0.733006d , 0.850859d)}
	    {(1.9346d , -0.752056d , 1.08184d)}
	    {(1.88204d , -0.943156d , 1.19346d)}
	    {(2.12983d , -0.903786d , 0.722558d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.522858d , 0.826705d , 1.1542d)}
	    {(0.522858d , 0.600285d , 1.6224d)}
	    {(1.0d-6 , 0.617275d , 1.54123d)}
	    {(1.0d-6 , 0.854815d , 1.0199d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(2.05614d , -0.733006d , 0.850859d)}
	    {(2.12983d , -0.903786d , 0.722558d)}
	    {(1.97279d , -0.884306d , 0.523613d)}
	    {(1.88017d , -0.638366d , 0.693342d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.332606d , 0.219175d , 1.77759d)}
	    {(0.452537d , 0.365775d , 1.54884d)}
	    {(1.42477d-5 , 0.225465d , 1.45028d)}
	    {(6.62312d-5 , 0.0284545d , 1.83805d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.0d-6 , 0.617275d , 1.54123d)}
	    {(1.83212d-6 , 0.385965d , 2.3974d)}
	    {(-0.630395d , 0.463695d , 2.02205d)}
	    {(-0.613094d , 0.627665d , 1.77292d)}
	    {(-0.522857d , 0.600285d , 1.6224d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.69927d , -0.666726d , 1.0371d)}
	    {(1.88017d , -0.638366d , 0.693342d)}
	    {(1.64245d , -0.681016d , 0.607036d)}
	    {(1.56906d , -0.644336d , 0.749893d)}
	    {(1.49609d , -0.703956d , 0.885185d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.91177d , -1.11388d , 1.12475d)}
	    {(1.67013d , -1.16105d , 1.07767d)}
	    {(1.92892d , -1.12045d , 0.585783d)}
	    {(2.1019d , -1.08405d , 0.763362d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.613094d , 0.627665d , 1.77292d)}
	    {(-0.630395d , 0.463695d , 2.02205d)}
	    {(-0.850267d , 0.248075d , 2.11956d)}
	    {(-0.828997d , 0.490985d , 1.66723d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.452537d , 0.365775d , 1.54884d)}
	    {(0.412999d , 0.454195d , 1.1479d)}
	    {(1.0d-6 , 0.265185d , 0.888111d)}
	    {(1.42477d-5 , 0.225465d , 1.45028d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.522857d , 0.600285d , 1.6224d)}
	    {(-0.613094d , 0.627665d , 1.77292d)}
	    {(-0.828997d , 0.490985d , 1.66723d)}
	    {(-0.70702d , 0.413015d , 1.49539d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.626541d , 0.623945d , 0.462015d)}
	    {(0.722793d , 0.444505d , 0.949151d)}
	    {(0.233828d , 0.420425d , 0.513511d)}
	    {(0.341739d , 0.561435d , 0.335958d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.48386d , 0.795735d , 0.126971d)}
	    {(0.626541d , 0.623945d , 0.462015d)}
	    {(0.341739d , 0.561435d , 0.335958d)}
	    {(0.257011d , 0.636925d , 0.0913679d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.29551d , -0.634346d , 0.606765d)}
	    {(1.36892d , -0.671026d , 0.463906d)}
	    {(1.16745d , -0.553146d , 0.358484d)}
	    {(1.10817d , -0.520706d , 0.508741d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.811566d , -0.168075d , 0.519014d)}
	    {(1.10817d , -0.520706d , 0.508741d)}
	    {(1.16745d , -0.553146d , 0.358484d)}
	    {(0.934042d , -0.152566d , 0.285655d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.758648d , 1.19461d , 0.0691279d)}
	    {(0.48386d , 0.795735d , 0.126971d)}
	    {(-6.02904d-8 , 0.967405d , -0.0904491d)}
	    {(-1.15697d-5 , 1.39303d , -0.29783d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.559504d , 0.177075d , 0.354422d)}
	    {(0.811566d , -0.168075d , 0.519014d)}
	    {(0.934042d , -0.152566d , 0.285655d)}
	    {(0.646413d , 0.134855d , 0.119238d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.70702d , 0.413015d , 1.49539d)}
	    {(-0.828997d , 0.490985d , 1.66723d)}
	    {(-1.08255d , 0.569795d , 1.65048d)}
	    {(-0.83686d , 0.359265d , 1.2758d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.341739d , 0.561435d , 0.335958d)}
	    {(0.233828d , 0.420425d , 0.513511d)}
	    {(0.297387d , -0.0164655d , 0.543469d)}
	    {(0.520531d , 0.268025d , 0.311422d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.559504d , 0.177075d , 0.354422d)}
	    {(0.520531d , 0.268025d , 0.311422d)}
	    {(0.297387d , -0.0164655d , 0.543469d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.17685d , -0.894436d , 0.815432d)}
	    {(1.22254d , -0.693966d , 0.742056d)}
	    {(1.01223d , -0.573445d , 0.632011d)}
	    {(0.889231d , -0.750785d , 0.664952d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.257011d , 0.636925d , 0.0913679d)}
	    {(0.341739d , 0.561435d , 0.335958d)}
	    {(0.520531d , 0.268025d , 0.311422d)}
	    {(0.45048d , 0.368945d , -0.0072701d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.19175d , 0.835475d , 1.49079d)}
	    {(-1.12896d , 1.72617d , 1.3912d)}
	    {(-1.284d , 1.88635d , 0.505168d)}
	    {(-1.03304d , 1.10785d , 0.602134d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.68917d , -0.866406d , 0.504857d)}
	    {(1.65553d , -1.08348d , 0.553993d)}
	    {(1.38199d , -1.07349d , 0.410865d)}
	    {(1.41563d , -0.856406d , 0.36173d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.501915d , 0.149985d , 1.96741d)}
	    {(-0.70702d , 0.413015d , 1.49539d)}
	    {(-0.83686d , 0.359265d , 1.2758d)}
	    {(-0.774313d , -0.0502356d , 1.57451d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(3.6623d-6 , 2.12178d , -0.30131d)}
	    {(-1.15697d-5 , 1.39303d , -0.29783d)}
	    {(-0.758365d , 1.1946d , 0.0687239d)}
	    {(-0.860367d , 1.93578d , -0.0555781d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0175184d , 0.364495d , 0.600665d)}
	    {(1.15002d-4 , -0.109176d , 1.04788d)}
	    {(-0.723787d , 0.444865d , 0.948979d)}
	    {(-0.188155d , 0.471095d , 0.537746d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.48386d , 0.795735d , 0.126971d)}
	    {(0.257011d , 0.636925d , 0.0913679d)}
	    {(0.0175184d , 0.657135d , -0.0965151d)}
	    {(-6.02904d-8 , 0.967405d , -0.0904491d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.38199d , -1.07349d , 0.410865d)}
	    {(1.65553d , -1.08348d , 0.553993d)}
	    {(1.57124d , -1.17402d , 0.70878d)}
	    {(1.29771d , -1.16403d , 0.565651d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.21264d , -1.10003d , 0.732697d)}
	    {(1.17685d , -0.894436d , 0.815432d)}
	    {(0.889231d , -0.750785d , 0.664952d)}
	    {(0.845768d , -0.932665d , 0.540739d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.284d , 1.88635d , 0.505168d)}
	    {(-0.860367d , 1.93578d , -0.0555781d)}
	    {(-0.758365d , 1.1946d , 0.0687239d)}
	    {(-1.03304d , 1.10785d , 0.602134d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.15697d-5 , 1.39303d , -0.29783d)}
	    {(-6.02904d-8 , 0.967405d , -0.0904491d)}
	    {(-0.483212d , 0.795865d , 0.12639d)}
	    {(-0.758365d , 1.1946d , 0.0687239d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.03304d , 1.10785d , 0.602134d)}
	    {(-0.758365d , 1.1946d , 0.0687239d)}
	    {(-0.483212d , 0.795865d , 0.12639d)}
	    {(-0.625843d , 0.625345d , 0.467704d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.257011d , 0.636925d , 0.0913679d)}
	    {(0.45048d , 0.368945d , -0.0072701d)}
	    {(0.0282031d , 0.526495d , -0.22596d)}
	    {(0.0175184d , 0.657135d , -0.0965151d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.639608d , -0.303095d , 0.667351d)}
	    {(0.297387d , -0.0164655d , 0.543469d)}
	    {(0.0282031d , -0.0258456d , 0.600556d)}
	    {(0.0282031d , -0.322666d , 0.56473d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.29771d , -1.16403d , 0.565651d)}
	    {(1.21264d , -1.10003d , 0.732697d)}
	    {(0.845768d , -0.932665d , 0.540739d)}
	    {(0.906172d , -0.989276d , 0.360784d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.188155d , 0.471095d , 0.537746d)}
	    {(-0.295943d , 0.611905d , 0.360159d)}
	    {(-0.464125d , 0.268025d , 0.311422d)}
	    {(-0.240982d , -0.0164655d , 0.543469d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.927247d , -0.344426d , -0.00383711d)}
	    {(1.14268d , -0.717146d , 0.218907d)}
	    {(1.02536d , -0.909176d , 0.22426d)}
	    {(0.789891d , -0.503345d , -0.120702d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , 0.526495d , -0.22596d)}
	    {(0.45048d , 0.368945d , -0.0072701d)}
	    {(0.765721d , -0.252396d , -0.30497d)}
	    {(0.0282031d , 0.124605d , -0.53979d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.590007d , 0.134855d , 0.119238d)}
	    {(-0.503098d , 0.177075d , 0.354422d)}
	    {(-0.464125d , 0.268025d , 0.311422d)}
	    {(-0.394074d , 0.368945d , -0.0072701d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.390202d , -0.590736d , 0.618311d)}
	    {(0.0282031d , -0.618415d , 0.578178d)}
	    {(0.0282031d , -0.322666d , 0.56473d)}
	    {(-0.583201d , -0.303095d , 0.667351d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.416561d , -0.698039d , 0.426726d)}
	    {(0.446609d , -0.590736d , 0.618311d)}
	    {(0.0282031d , -0.618415d , 0.578178d)}
	    {(0.0282031d , -1.03442d , 0.365365d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.06762d , -2.11689d , 0.36869d)}
	    {(1.44365d , -2.03292d , 0.121966d)}
	    {(1.21252d , -1.44195d , -0.24652d)}
	    {(0.913278d , -1.49527d , 0.157394d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.503098d , 0.177075d , 0.354422d)}
	    {(-0.590007d , 0.134855d , 0.119238d)}
	    {(-0.877635d , -0.152566d , 0.285655d)}
	    {(-0.755159d , -0.168075d , 0.519014d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.08255d , 0.569795d , 1.65048d)}
	    {(-1.19175d , 0.835475d , 1.49079d)}
	    {(-1.03304d , 1.10785d , 0.602134d)}
	    {(-0.625843d , 0.625345d , 0.467704d)}
	    {(-0.723787d , 0.444865d , 0.948979d)}
	    {(-0.83686d , 0.359265d , 1.2758d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.45257d , 0.365515d , 1.54884d)}
	    {(1.42477d-5 , 0.225465d , 1.45028d)}
	    {(1.0d-6 , 0.265185d , 0.888111d)}
	    {(-0.413085d , 0.454195d , 1.14798d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.706984d , 0.584615d , 0.891652d)}
	    {(0.522858d , 0.826705d , 1.1542d)}
	    {(1.0d-6 , 0.854815d , 1.0199d)}
	    {(-0.522857d , 0.826705d , 1.1542d)}
	    {(-0.706983d , 0.584615d , 0.891652d)}
	    {(-0.413085d , 0.454195d , 1.14798d)}
	    {(1.0d-6 , 0.265185d , 0.888111d)}
	    {(0.412999d , 0.454195d , 1.1479d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.88588d , 1.22156d , 2.11877d)}
	    {(1.04668d , 0.979735d , 2.456d)}
	    {(1.19175d , 0.835475d , 1.47258d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.768248d , 2.77793d , 2.05242d)}
	    {(0.660613d , 3.14795d , 1.17217d)}
	    {(3.24909d-6 , 3.35082d , 1.28064d)}
	    {(3.24909d-6 , 2.86531d , 2.35547d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.660613d , 3.14795d , 1.17217d)}
	    {(1.06913d , 2.65918d , 1.02677d)}
	    {(1.06076d , 2.68594d , 0.566584d)}
	    {(0.66874d , 2.98691d , 0.180067d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.768248d , 2.77793d , 2.05242d)}
	    {(3.24909d-6 , 2.86531d , 2.35547d)}
	    {(0.0d , 1.42075d , 2.34053d)}
	    {(0.88588d , 1.22156d , 2.11877d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.04668d , 0.979735d , 2.456d)}
	    {(0.88588d , 1.22156d , 2.11877d)}
	    {(0.0d , 1.42075d , 2.34053d)}
	    {(2.3573d-4 , 1.29965d , 2.83475d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.12908d , 1.72575d , 1.39105d)}
	    {(1.0254d , 2.58355d , 1.49491d)}
	    {(0.768248d , 2.77793d , 2.05242d)}
	    {(0.88588d , 1.22156d , 2.11877d)}
	    {(1.19175d , 0.835475d , 1.47258d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.04668d , 0.979735d , 2.456d)}
	    {(2.3573d-4 , 1.29965d , 2.83475d)}
	    {(2.10971d-5 , 0.564185d , 2.79947d)}
	    {(1.04483d , 0.644725d , 2.42932d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.06076d , 2.68594d , 0.566584d)}
	    {(1.2839d , 1.88665d , 0.504791d)}
	    {(0.860681d , 1.93569d , -0.0551801d)}
	    {(0.66874d , 2.98691d , 0.180067d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.885878d , 1.22156d , 2.11876d)}
	    {(0.0d , 1.42075d , 2.34053d)}
	    {(3.24909d-6 , 2.86531d , 2.35547d)}
	    {(-0.768242d , 2.77793d , 2.05242d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.08234d , 0.569645d , 1.65067d)}
	    {(1.04483d , 0.644725d , 2.42932d)}
	    {(0.850286d , 0.248075d , 2.11958d)}
	    {(0.828998d , 0.490985d , 1.66723d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.828998d , 0.490985d , 1.66723d)}
	    {(0.850286d , 0.248075d , 2.11958d)}
	    {(0.630399d , 0.463695d , 2.02205d)}
	    {(0.613095d , 0.627665d , 1.77292d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.660607d , 3.14795d , 1.17217d)}
	    {(3.24909d-6 , 3.35082d , 1.28064d)}
	    {(-1.04351d-5 , 3.18538d , 0.158168d)}
	    {(-0.668734d , 2.98691d , 0.180067d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.768242d , 2.77793d , 2.05242d)}
	    {(-0.660607d , 3.14795d , 1.17217d)}
	    {(-1.06913d , 2.65919d , 1.02677d)}
	    {(-1.02534d , 2.58366d , 1.49497d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.828998d , 0.490985d , 1.66723d)}
	    {(0.706945d , 0.413385d , 1.49543d)}
	    {(0.835892d , 0.358965d , 1.27598d)}
	    {(1.08234d , 0.569645d , 1.65067d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(2.3573d-4 , 1.29965d , 2.83475d)}
	    {(0.0d , 1.42075d , 2.34053d)}
	    {(-0.885878d , 1.22156d , 2.11876d)}
	    {(-1.04643d , 0.979915d , 2.4565d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.501999d , 0.150285d , 1.96746d)}
	    {(0.706945d , 0.413385d , 1.49543d)}
	    {(0.452537d , 0.365775d , 1.54884d)}
	    {(0.332606d , 0.219175d , 1.77759d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.706945d , 0.413385d , 1.49543d)}
	    {(0.522858d , 0.600285d , 1.6224d)}
	    {(0.522858d , 0.826705d , 1.1542d)}
	    {(0.706984d , 0.584615d , 0.891652d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(2.10971d-5 , 0.564185d , 2.79947d)}
	    {(2.3573d-4 , 1.29965d , 2.83475d)}
	    {(-1.04643d , 0.979915d , 2.4565d)}
	    {(-1.04475d , 0.644775d , 2.42943d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.03726d , 1.1064d , 0.577543d)}
	    {(1.19175d , 0.835475d , 1.47258d)}
	    {(1.08234d , 0.569645d , 1.65067d)}
	    {(0.835892d , 0.358965d , 1.27598d)}
	    {(0.722793d , 0.444505d , 0.949151d)}
	    {(0.626541d , 0.623945d , 0.462015d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.69969d-5 , 0.392835d , 2.52722d)}
	    {(2.10971d-5 , 0.564185d , 2.79947d)}
	    {(-1.04475d , 0.644775d , 2.42943d)}
	    {(-0.850267d , 0.248075d , 2.11956d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.04643d , 0.979915d , 2.4565d)}
	    {(-0.885878d , 1.22156d , 2.11876d)}
	    {(-1.19175d , 0.835475d , 1.49079d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.18448d-4 , -0.162956d , 2.12128d)}
	    {(6.62312d-5 , 0.0284545d , 1.83805d)}
	    {(-0.332583d , 0.219005d , 1.77757d)}
	    {(-0.501915d , 0.149985d , 1.96741d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.0d-6 , 0.617275d , 1.54123d)}
	    {(-0.522857d , 0.600285d , 1.6224d)}
	    {(-0.522857d , 0.826705d , 1.1542d)}
	    {(1.0d-6 , 0.854815d , 1.0199d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.885878d , 1.22156d , 2.11876d)}
	    {(-0.768242d , 2.77793d , 2.05242d)}
	    {(-1.02534d , 2.58366d , 1.49497d)}
	    {(-1.12896d , 1.72617d , 1.3912d)}
	    {(-1.19175d , 0.835475d , 1.49079d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.02534d , 2.58366d , 1.49497d)}
	    {(-1.06913d , 2.65919d , 1.02677d)}
	    {(-1.06076d , 2.68594d , 0.566586d)}
	    {(-1.284d , 1.88635d , 0.505168d)}
	    {(-1.12896d , 1.72617d , 1.3912d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(2.12983d , -0.903786d , 0.722558d)}
	    {(2.1019d , -1.08405d , 0.763362d)}
	    {(1.92892d , -1.12045d , 0.585783d)}
	    {(1.97279d , -0.884306d , 0.523613d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.88017d , -0.638366d , 0.693342d)}
	    {(1.97279d , -0.884306d , 0.523613d)}
	    {(1.68917d , -0.866406d , 0.504857d)}
	    {(1.64245d , -0.681016d , 0.607036d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.668734d , 2.98691d , 0.180067d)}
	    {(-1.04351d-5 , 3.18538d , 0.158168d)}
	    {(3.6623d-6 , 2.12178d , -0.30131d)}
	    {(-0.860367d , 1.93578d , -0.0555781d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.501915d , 0.149985d , 1.96741d)}
	    {(-0.332583d , 0.219005d , 1.77757d)}
	    {(-0.45257d , 0.365515d , 1.54884d)}
	    {(-0.70702d , 0.413015d , 1.49539d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.522857d , 0.826705d , 1.1542d)}
	    {(-0.522857d , 0.600285d , 1.6224d)}
	    {(-0.70702d , 0.413015d , 1.49539d)}
	    {(-0.706983d , 0.584615d , 0.891652d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.70702d , 0.413015d , 1.49539d)}
	    {(-0.45257d , 0.365515d , 1.54884d)}
	    {(-0.413085d , 0.454195d , 1.14798d)}
	    {(-0.706983d , 0.584615d , 0.891652d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.67013d , -1.16105d , 1.07767d)}
	    {(1.62818d , -0.939086d , 1.17847d)}
	    {(1.45038d , -0.904426d , 0.958562d)}
	    {(1.48618d , -1.11002d , 0.875826d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.97279d , -0.884306d , 0.523613d)}
	    {(1.92892d , -1.12045d , 0.585783d)}
	    {(1.65553d , -1.08348d , 0.553993d)}
	    {(1.68917d , -0.866406d , 0.504857d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.45038d , -0.904426d , 0.958562d)}
	    {(1.49609d , -0.703956d , 0.885185d)}
	    {(1.22254d , -0.693966d , 0.742056d)}
	    {(1.17685d , -0.894436d , 0.815432d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.835892d , 0.358965d , 1.27598d)}
	    {(0.774474d , -0.0497654d , 1.5746d)}
	    {(2.05374d-4 , -0.555836d , 1.84314d)}
	    {(1.15002d-4 , -0.109176d , 1.04788d)}
	    {(0.722793d , 0.444505d , 0.949151d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.06076d , 2.68594d , 0.566586d)}
	    {(-0.668734d , 2.98691d , 0.180067d)}
	    {(-0.860367d , 1.93578d , -0.0555781d)}
	    {(-1.284d , 1.88635d , 0.505168d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.64245d , -0.681016d , 0.607036d)}
	    {(1.68917d , -0.866406d , 0.504857d)}
	    {(1.41563d , -0.856406d , 0.36173d)}
	    {(1.36892d , -0.671026d , 0.463906d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.811566d , -0.168075d , 0.519014d)}
	    {(0.639608d , -0.303095d , 0.667351d)}
	    {(1.01223d , -0.573445d , 0.632011d)}
	    {(1.10817d , -0.520706d , 0.508741d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.18448d-4 , -0.162956d , 2.12128d)}
	    {(-0.501915d , 0.149985d , 1.96741d)}
	    {(-0.774313d , -0.0502356d , 1.57451d)}
	    {(2.05374d-4 , -0.555836d , 1.84314d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.45038d , -0.904426d , 0.958562d)}
	    {(1.17685d , -0.894436d , 0.815432d)}
	    {(1.21264d , -1.10003d , 0.732697d)}
	    {(1.48618d , -1.11002d , 0.875826d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.233828d , 0.420425d , 0.513511d)}
	    {(0.722793d , 0.444505d , 0.949151d)}
	    {(1.15002d-4 , -0.109176d , 1.04788d)}
	    {(0.0175184d , 0.364495d , 0.600665d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.559504d , 0.177075d , 0.354422d)}
	    {(0.297387d , -0.0164655d , 0.543469d)}
	    {(0.639608d , -0.303095d , 0.667351d)}
	    {(0.811566d , -0.168075d , 0.519014d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.520531d , 0.268025d , 0.311422d)}
	    {(0.559504d , 0.177075d , 0.354422d)}
	    {(0.646413d , 0.134855d , 0.119238d)}
	    {(0.45048d , 0.368945d , -0.0072701d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.36892d , -0.671026d , 0.463906d)}
	    {(1.41563d , -0.856406d , 0.36173d)}
	    {(1.14268d , -0.717146d , 0.218907d)}
	    {(1.16745d , -0.553146d , 0.358484d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.48618d , -1.11002d , 0.875826d)}
	    {(1.21264d , -1.10003d , 0.732697d)}
	    {(1.29771d , -1.16403d , 0.565651d)}
	    {(1.57124d , -1.17402d , 0.70878d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.15002d-4 , -0.109176d , 1.04788d)}
	    {(2.05374d-4 , -0.555836d , 1.84314d)}
	    {(-0.774313d , -0.0502356d , 1.57451d)}
	    {(-0.83686d , 0.359265d , 1.2758d)}
	    {(-0.723787d , 0.444865d , 0.948979d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.233828d , 0.420425d , 0.513511d)}
	    {(0.0175184d , 0.364495d , 0.600665d)}
	    {(0.0282031d , -0.0258456d , 0.600556d)}
	    {(0.297387d , -0.0164655d , 0.543469d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.889231d , -0.750785d , 0.664952d)}
	    {(1.01223d , -0.573445d , 0.632011d)}
	    {(0.639608d , -0.303095d , 0.667351d)}
	    {(0.446609d , -0.590736d , 0.618311d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.16745d , -0.553146d , 0.358484d)}
	    {(1.14268d , -0.717146d , 0.218907d)}
	    {(0.927247d , -0.344426d , -0.00383711d)}
	    {(0.934042d , -0.152566d , 0.285655d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.188155d , 0.471095d , 0.537746d)}
	    {(-0.723787d , 0.444865d , 0.948979d)}
	    {(-0.625843d , 0.625345d , 0.467704d)}
	    {(-0.295943d , 0.611905d , 0.360159d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.45048d , 0.368945d , -0.0072701d)}
	    {(0.646413d , 0.134855d , 0.119238d)}
	    {(0.765721d , -0.252396d , -0.30497d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.41563d , -0.856406d , 0.36173d)}
	    {(1.38199d , -1.07349d , 0.410865d)}
	    {(1.02536d , -0.909176d , 0.22426d)}
	    {(1.14268d , -0.717146d , 0.218907d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -0.0258456d , 0.600556d)}
	    {(0.0175184d , 0.364495d , 0.600665d)}
	    {(-0.188155d , 0.471095d , 0.537746d)}
	    {(-0.240982d , -0.0164655d , 0.543469d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.934042d , -0.152566d , 0.285655d)}
	    {(0.927247d , -0.344426d , -0.00383711d)}
	    {(0.765721d , -0.252396d , -0.30497d)}
	    {(0.646413d , 0.134855d , 0.119238d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.38199d , -1.07349d , 0.410865d)}
	    {(1.29771d , -1.16403d , 0.565651d)}
	    {(0.906172d , -0.989276d , 0.360784d)}
	    {(1.02536d , -0.909176d , 0.22426d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.889231d , -0.750785d , 0.664952d)}
	    {(0.446609d , -0.590736d , 0.618311d)}
	    {(0.416561d , -0.698039d , 0.426726d)}
	    {(0.845768d , -0.932665d , 0.540739d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.221999d , 0.636935d , 0.0914109d)}
	    {(0.0175184d , 0.657135d , -0.0965151d)}
	    {(0.0282031d , 0.526495d , -0.22596d)}
	    {(-0.394074d , 0.368945d , -0.0072701d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.446609d , -0.590736d , 0.618311d)}
	    {(0.639608d , -0.303095d , 0.667351d)}
	    {(0.0282031d , -0.322666d , 0.56473d)}
	    {(0.0282031d , -0.618415d , 0.578178d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.240982d , -0.0164655d , 0.543469d)}
	    {(-0.464125d , 0.268025d , 0.311422d)}
	    {(-0.503098d , 0.177075d , 0.354422d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.295943d , 0.611905d , 0.360159d)}
	    {(-0.221999d , 0.636935d , 0.0914109d)}
	    {(-0.394074d , 0.368945d , -0.0072701d)}
	    {(-0.464125d , 0.268025d , 0.311422d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -0.0258456d , 0.600556d)}
	    {(-0.240982d , -0.0164655d , 0.543469d)}
	    {(-0.583201d , -0.303095d , 0.667351d)}
	    {(0.0282031d , -0.322666d , 0.56473d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.02536d , -0.909176d , 0.22426d)}
	    {(0.906172d , -0.989276d , 0.360784d)}
	    {(0.775344d , -0.893948d , 0.108734d)}
	    {(0.789891d , -0.503345d , -0.120702d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.906172d , -0.989276d , 0.360784d)}
	    {(0.845768d , -0.932665d , 0.540739d)}
	    {(0.416561d , -0.698039d , 0.426726d)}
	    {(0.775344d , -0.893948d , 0.108734d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.765721d , -0.252396d , -0.30497d)}
	    {(0.927247d , -0.344426d , -0.00383711d)}
	    {(0.789891d , -0.503345d , -0.120702d)}
	    {(0.785598d , -0.613835d , -0.67788d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.240982d , -0.0164655d , 0.543469d)}
	    {(-0.503098d , 0.177075d , 0.354422d)}
	    {(-0.755159d , -0.168075d , 0.519014d)}
	    {(-0.583201d , -0.303095d , 0.667351d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.789891d , -0.503345d , -0.120702d)}
	    {(0.775344d , -0.893948d , 0.108734d)}
	    {(0.688504d , -1.18558d , -0.0271561d)}
	    {(0.785598d , -0.613835d , -0.67788d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -0.618415d , 0.578178d)}
	    {(-0.390202d , -0.590736d , 0.618311d)}
	    {(-0.360155d , -0.698029d , 0.426726d)}
	    {(0.0282031d , -1.03442d , 0.365365d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.390202d , -0.590736d , 0.618311d)}
	    {(-0.583201d , -0.303095d , 0.667351d)}
	    {(-0.955825d , -0.573445d , 0.632011d)}
	    {(-0.832824d , -0.750785d , 0.664952d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.416561d , -0.698039d , 0.426726d)}
	    {(0.0282031d , -1.03442d , 0.365365d)}
	    {(0.0282031d , -1.45956d , 0.354594d)}
	    {(0.32023d , -1.43096d , 0.246832d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.360155d , -0.698029d , 0.426726d)}
	    {(-0.390202d , -0.590736d , 0.618311d)}
	    {(-0.832824d , -0.750785d , 0.664952d)}
	    {(-0.789361d , -0.932665d , 0.540739d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.832824d , -0.750785d , 0.664952d)}
	    {(-0.955825d , -0.573445d , 0.632011d)}
	    {(-1.16614d , -0.693966d , 0.742054d)}
	    {(-1.12044d , -0.894436d , 0.815429d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.05177d , -0.520706d , 0.508741d)}
	    {(-0.755159d , -0.168075d , 0.519014d)}
	    {(-0.877635d , -0.152566d , 0.285655d)}
	    {(-1.11104d , -0.553146d , 0.358484d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.955825d , -0.573445d , 0.632011d)}
	    {(-1.05177d , -0.520706d , 0.508741d)}
	    {(-1.23911d , -0.634346d , 0.606765d)}
	    {(-1.16614d , -0.693966d , 0.742054d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -1.03442d , 0.365365d)}
	    {(-0.360155d , -0.698029d , 0.426726d)}
	    {(-0.263824d , -1.43096d , 0.246832d)}
	    {(0.0282031d , -1.45956d , 0.354594d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.43968d , -0.703956d , 0.88518d)}
	    {(-1.16614d , -0.693966d , 0.742054d)}
	    {(-1.23911d , -0.634346d , 0.606765d)}
	    {(-1.51265d , -0.644336d , 0.749889d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.21252d , -1.44195d , -0.24652d)}
	    {(1.44365d , -2.03292d , 0.121966d)}
	    {(1.19673d , -2.20482d , -0.43883d)}
	    {(1.0634d , -1.68139d , -0.88438d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.360155d , -0.698029d , 0.426726d)}
	    {(-0.789361d , -0.932665d , 0.540739d)}
	    {(-0.849766d , -0.989276d , 0.360784d)}
	    {(-0.718937d , -0.893948d , 0.108735d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.733485d , -0.503345d , -0.120702d)}
	    {(-0.718937d , -0.893948d , 0.108735d)}
	    {(-0.849766d , -0.989276d , 0.360784d)}
	    {(-0.968956d , -0.909176d , 0.22426d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.12044d , -0.894436d , 0.815429d)}
	    {(-1.39397d , -0.904426d , 0.958556d)}
	    {(-1.42977d , -1.11002d , 0.875821d)}
	    {(-1.15624d , -1.10003d , 0.732696d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.57177d , -0.939086d , 1.17847d)}
	    {(-1.61372d , -1.16105d , 1.07766d)}
	    {(-1.42977d , -1.11002d , 0.875821d)}
	    {(-1.39397d , -0.904426d , 0.958556d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.64285d , -0.666726d , 1.0371d)}
	    {(-1.43968d , -0.703956d , 0.88518d)}
	    {(-1.51265d , -0.644336d , 0.749889d)}
	    {(-1.58605d , -0.681016d , 0.607032d)}
	    {(-1.82376d , -0.638366d , 0.693338d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.57177d , -0.939086d , 1.17847d)}
	    {(-1.82564d , -0.943156d , 1.19345d)}
	    {(-1.85536d , -1.11389d , 1.12475d)}
	    {(-1.61372d , -1.16105d , 1.07766d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.87818d , -0.752066d , 1.08183d)}
	    {(-1.64285d , -0.666726d , 1.0371d)}
	    {(-1.82376d , -0.638366d , 0.693338d)}
	    {(-1.99973d , -0.733006d , 0.850852d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.15624d , -1.10003d , 0.732696d)}
	    {(-1.42977d , -1.11002d , 0.875821d)}
	    {(-1.51483d , -1.17402d , 0.708777d)}
	    {(-1.2413d , -1.16402d , 0.565651d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.968956d , -0.909176d , 0.22426d)}
	    {(-0.849766d , -0.989276d , 0.360784d)}
	    {(-1.2413d , -1.16402d , 0.565651d)}
	    {(-1.32559d , -1.07349d , 0.410867d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.51483d , -1.17402d , 0.708777d)}
	    {(-1.59912d , -1.08348d , 0.553991d)}
	    {(-1.32559d , -1.07349d , 0.410867d)}
	    {(-1.2413d , -1.16402d , 0.565651d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.99973d , -0.733006d , 0.850852d)}
	    {(-1.82376d , -0.638366d , 0.693338d)}
	    {(-1.91638d , -0.884306d , 0.523611d)}
	    {(-2.07341d , -0.903786d , 0.722553d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.63276d , -0.866406d , 0.504856d)}
	    {(-1.59912d , -1.08348d , 0.553991d)}
	    {(-1.87251d , -1.12045d , 0.585779d)}
	    {(-1.91638d , -0.884306d , 0.523611d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.61372d , -1.16105d , 1.07766d)}
	    {(-1.85536d , -1.11389d , 1.12475d)}
	    {(-2.04548d , -1.08405d , 0.763357d)}
	    {(-1.87251d , -1.12045d , 0.585779d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.12044d , -0.894436d , 0.815429d)}
	    {(-1.16614d , -0.693966d , 0.742054d)}
	    {(-1.43968d , -0.703956d , 0.88518d)}
	    {(-1.39397d , -0.904426d , 0.958556d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.39397d , -0.904426d , 0.958556d)}
	    {(-1.43968d , -0.703956d , 0.88518d)}
	    {(-1.64285d , -0.666726d , 1.0371d)}
	    {(-1.57177d , -0.939086d , 1.17847d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.789361d , -0.932665d , 0.540739d)}
	    {(-0.832824d , -0.750785d , 0.664952d)}
	    {(-1.12044d , -0.894436d , 0.815429d)}
	    {(-1.15624d , -1.10003d , 0.732696d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.23911d , -0.634346d , 0.606765d)}
	    {(-1.05177d , -0.520706d , 0.508741d)}
	    {(-1.11104d , -0.553146d , 0.358484d)}
	    {(-1.31251d , -0.671026d , 0.463906d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.877635d , -0.152566d , 0.285655d)}
	    {(-0.87084d , -0.344426d , -0.00383711d)}
	    {(-1.08627d , -0.717146d , 0.218907d)}
	    {(-1.11104d , -0.553146d , 0.358484d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.54139d , -3.12437d , 0.332671d)}
	    {(1.50477d , -2.8934d , 0.139239d)}
	    {(1.14438d , -2.92935d , 0.243456d)}
	    {(1.29924d , -3.14852d , 0.402703d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.42068d , -2.8483d , 0.0191439d)}
	    {(1.28188d , -2.62644d , -0.3033d)}
	    {(1.09276d , -2.73683d , -0.0263481d)}
	    {(1.13313d , -2.87699d , 0.102301d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.42068d , -2.8483d , 0.0191439d)}
	    {(1.50477d , -2.8934d , 0.139239d)}
	    {(1.69554d , -3.19907d , -0.11967d)}
	    {(1.53006d , -3.07801d , -0.18171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.263824d , -1.43096d , 0.246832d)}
	    {(-0.360155d , -0.698029d , 0.426726d)}
	    {(-0.718937d , -0.893948d , 0.108735d)}
	    {(-0.632099d , -1.18558d , -0.0271561d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.913278d , -1.49527d , 0.157394d)}
	    {(0.705812d , -1.50821d , -0.313334d)}
	    {(0.399179d , -2.14703d , -0.390246d)}
	    {(0.627914d , -2.08358d , -0.31462d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.632099d , -1.18558d , -0.0271561d)}
	    {(-0.718937d , -0.893948d , 0.108735d)}
	    {(-0.733485d , -0.503345d , -0.120702d)}
	    {(-0.729192d , -0.613835d , -0.67788d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -1.45956d , 0.354594d)}
	    {(-0.263824d , -1.43096d , 0.246832d)}
	    {(-0.486463d , -1.89154d , 0.020162d)}
	    {(-6.51049d-4 , -1.9447d , 0.266913d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0277449d , -0.429376d , -0.98465d)}
	    {(0.785598d , -0.613835d , -0.67788d)}
	    {(0.922274d , -1.35024d , -0.98242d)}
	    {(0.0282031d , -1.25181d , -1.62815d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.485078d , -1.89154d , 0.0203477d)}
	    {(-6.51049d-4 , -1.9447d , 0.266913d)}
	    {(0.196124d , -2.25137d , -0.320121d)}
	    {(0.399179d , -2.14703d , -0.390246d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.263824d , -1.43096d , 0.246832d)}
	    {(-0.632099d , -1.18558d , -0.0271561d)}
	    {(-0.707309d , -1.50821d , -0.313604d)}
	    {(-0.486463d , -1.89154d , 0.020162d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.922274d , -1.35024d , -0.98242d)}
	    {(1.21252d , -1.44195d , -0.24652d)}
	    {(1.0634d , -1.68139d , -0.88438d)}
	    {(0.872762d , -2.27063d , -0.81078d)}
	    {(0.352105d , -1.83559d , -1.72222d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.627914d , -2.08358d , -0.31462d)}
	    {(-0.403112d , -2.14757d , -0.389841d)}
	    {(-0.707309d , -1.50821d , -0.313604d)}
	    {(-0.913278d , -1.49527d , 0.157394d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.627914d , -2.08358d , -0.31462d)}
	    {(0.399179d , -2.14703d , -0.390246d)}
	    {(-0.0413215d , -2.27822d , -1.13654d)}
	    {(0.575796d , -2.34954d , -0.6431d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -1.25181d , -1.62815d)}
	    {(0.922274d , -1.35024d , -0.98242d)}
	    {(0.352105d , -1.83559d , -1.72222d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.729192d , -0.613835d , -0.67788d)}
	    {(0.0277449d , -0.429376d , -0.98465d)}
	    {(0.0282031d , -1.25181d , -1.62815d)}
	    {(-0.922274d , -1.35024d , -0.98242d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.913278d , -1.49527d , 0.157394d)}
	    {(-0.707309d , -1.50821d , -0.313604d)}
	    {(-0.922274d , -1.35024d , -0.98242d)}
	    {(-1.21252d , -1.44195d , -0.24652d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.197623d , -2.25137d , -0.320197d)}
	    {(-0.403112d , -2.14757d , -0.389841d)}
	    {(-0.0413215d , -2.27822d , -1.13654d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.872762d , -2.27063d , -0.81078d)}
	    {(0.575796d , -2.34954d , -0.6431d)}
	    {(-0.0413215d , -2.27822d , -1.13654d)}
	    {(0.352105d , -1.83559d , -1.72222d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.575796d , -2.34954d , -0.6431d)}
	    {(-0.627914d , -2.08358d , -0.31462d)}
	    {(-0.845536d , -2.32825d , -0.10083d)}
	    {(-0.845332d , -2.27877d , -0.34403d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -1.17402d , -2.20851d)}
	    {(0.262325d , -1.6289d , -2.37131d)}
	    {(0.152138d , -1.01497d , -3.51132d)}
	    {(0.0282031d , -0.773516d , -3.42489d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -1.17402d , -2.20851d)}
	    {(0.0282031d , -0.773516d , -3.42489d)}
	    {(-0.152138d , -1.01497d , -3.51132d)}
	    {(-0.262325d , -1.6289d , -2.37131d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -0.773516d , -3.42489d)}
	    {(0.152138d , -1.01497d , -3.51132d)}
	    {(-0.152138d , -1.01497d , -3.51132d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.262325d , -1.6289d , -2.37131d)}
	    {(0.352105d , -1.83559d , -1.72222d)}
	    {(-0.352105d , -1.83559d , -1.72222d)}
	    {(-0.262325d , -1.6289d , -2.37131d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.845536d , -2.32825d , -0.10083d)}
	    {(-1.06762d , -2.11689d , 0.36869d)}
	    {(-1.09276d , -2.73683d , -0.0263481d)}
	    {(-0.925516d , -2.89719d , -0.31919d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.09276d , -2.73683d , -0.0263481d)}
	    {(-1.13313d , -2.87699d , 0.102301d)}
	    {(-1.06432d , -3.11905d , 0.0032559d)}
	    {(-0.925516d , -2.89719d , -0.31919d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.13313d , -2.87699d , 0.102301d)}
	    {(-1.09276d , -2.73683d , -0.0263481d)}
	    {(-1.28188d , -2.62644d , -0.3033d)}
	    {(-1.42068d , -2.8483d , 0.0191439d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.14438d , -2.92935d , 0.243456d)}
	    {(-1.50477d , -2.8934d , 0.139239d)}
	    {(-1.54139d , -3.12437d , 0.332671d)}
	    {(-1.29924d , -3.14852d , 0.402703d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.44365d , -2.03292d , 0.121966d)}
	    {(-1.19673d , -2.20482d , -0.43883d)}
	    {(-1.20188d , -2.56154d , -0.6729d)}
	    {(-1.28188d , -2.62644d , -0.3033d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.877862d , -2.6906d , -0.63786d)}
	    {(-0.925516d , -2.89719d , -0.31919d)}
	    {(-1.0011d , -2.88009d , -0.60054d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.28188d , -2.62644d , -0.3033d)}
	    {(-1.20188d , -2.56154d , -0.6729d)}
	    {(-1.29773d , -2.69591d , -0.57583d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.925516d , -2.89719d , -0.31919d)}
	    {(-1.06432d , -3.11905d , 0.0032559d)}
	    {(-1.23342d , -3.2622d , -0.20641d)}
	    {(-1.0011d , -2.88009d , -0.60054d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.06432d , -3.11905d , 0.0032559d)}
	    {(-1.01429d , -3.26056d , 0.142842d)}
	    {(-1.3499d , -3.28151d , -0.0119321d)}
	    {(-1.23342d , -3.2622d , -0.20641d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.23342d , -3.2622d , -0.20641d)}
	    {(-1.3499d , -3.28151d , -0.0119321d)}
	    {(-1.69554d , -3.19907d , -0.11967d)}
	    {(-1.53006d , -3.07801d , -0.18171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.54139d , -3.12437d , 0.332671d)}
	    {(-1.50477d , -2.8934d , 0.139239d)}
	    {(-1.69554d , -3.19907d , -0.11967d)}
	    {(-1.68719d , -3.33558d , 0.156355d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.922274d , -1.35024d , -0.98242d)}
	    {(-0.352105d , -1.83559d , -1.72222d)}
	    {(-0.872762d , -2.27063d , -0.81078d)}
	    {(-1.0634d , -1.68139d , -0.88438d)}
	    {(-1.21252d , -1.44195d , -0.24652d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.575796d , -2.34954d , -0.6431d)}
	    {(-0.845332d , -2.27877d , -0.34403d)}
	    {(-1.19673d , -2.20482d , -0.43883d)}
	    {(-0.872762d , -2.27063d , -0.81078d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.19673d , -2.20482d , -0.43883d)}
	    {(1.44365d , -2.03292d , 0.121966d)}
	    {(1.28188d , -2.62644d , -0.3033d)}
	    {(1.20188d , -2.56154d , -0.6729d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.14438d , -2.92935d , 0.243456d)}
	    {(1.01429d , -3.26056d , 0.142842d)}
	    {(1.19744d , -3.38019d , 0.342807d)}
	    {(1.29924d , -3.14852d , 0.402703d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.28188d , -2.62644d , -0.3033d)}
	    {(1.29773d , -2.69591d , -0.57583d)}
	    {(1.20188d , -2.56154d , -0.6729d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.01429d , -3.26056d , 0.142842d)}
	    {(1.14438d , -2.92935d , 0.243456d)}
	    {(1.13313d , -2.87699d , 0.102301d)}
	    {(1.06432d , -3.11905d , 0.0032559d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.3499d , -3.28151d , -0.0119321d)}
	    {(1.01429d , -3.26056d , 0.142842d)}
	    {(1.06432d , -3.11905d , 0.0032559d)}
	    {(1.23342d , -3.2622d , -0.20641d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.877862d , -2.6906d , -0.63786d)}
	    {(0.845332d , -2.27877d , -0.34403d)}
	    {(1.19673d , -2.20482d , -0.43883d)}
	    {(1.20188d , -2.56154d , -0.6729d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.845536d , -2.32825d , -0.10083d)}
	    {(0.845332d , -2.27877d , -0.34403d)}
	    {(0.877862d , -2.6906d , -0.63786d)}
	    {(0.925516d , -2.89719d , -0.31919d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.20188d , -2.56154d , -0.6729d)}
	    {(1.29773d , -2.69591d , -0.57583d)}
	    {(1.0011d , -2.88009d , -0.60054d)}
	    {(0.877862d , -2.6906d , -0.63786d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.785598d , -0.613835d , -0.67788d)}
	    {(0.688504d , -1.18558d , -0.0271561d)}
	    {(0.705812d , -1.50821d , -0.313334d)}
	    {(0.922274d , -1.35024d , -0.98242d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.775344d , -0.893948d , 0.108734d)}
	    {(0.416561d , -0.698039d , 0.426726d)}
	    {(0.32023d , -1.43096d , 0.246832d)}
	    {(0.688504d , -1.18558d , -0.0271561d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.394074d , 0.368945d , -0.0072701d)}
	    {(0.0282031d , 0.526495d , -0.22596d)}
	    {(0.0282031d , 0.124605d , -0.53979d)}
	    {(-0.709315d , -0.252396d , -0.30497d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , 0.124605d , -0.53979d)}
	    {(0.765721d , -0.252396d , -0.30497d)}
	    {(0.785598d , -0.613835d , -0.67788d)}
	    {(0.0277449d , -0.429376d , -0.98465d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.913278d , -1.49527d , 0.157394d)}
	    {(1.21252d , -1.44195d , -0.24652d)}
	    {(0.922274d , -1.35024d , -0.98242d)}
	    {(0.705812d , -1.50821d , -0.313334d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.583201d , -0.303095d , 0.667351d)}
	    {(-0.755159d , -0.168075d , 0.519014d)}
	    {(-1.05177d , -0.520706d , 0.508741d)}
	    {(-0.955825d , -0.573445d , 0.632011d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.688504d , -1.18558d , -0.0271561d)}
	    {(0.32023d , -1.43096d , 0.246832d)}
	    {(0.485078d , -1.89154d , 0.0203477d)}
	    {(0.705812d , -1.50821d , -0.313334d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.877635d , -0.152566d , 0.285655d)}
	    {(-0.590007d , 0.134855d , 0.119238d)}
	    {(-0.709315d , -0.252396d , -0.30497d)}
	    {(-0.87084d , -0.344426d , -0.00383711d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.50477d , -2.8934d , 0.139239d)}
	    {(1.54139d , -3.12437d , 0.332671d)}
	    {(1.68719d , -3.33558d , 0.156355d)}
	    {(1.69554d , -3.19907d , -0.11967d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.14438d , -2.92935d , 0.243456d)}
	    {(1.50477d , -2.8934d , 0.139239d)}
	    {(1.42068d , -2.8483d , 0.0191439d)}
	    {(1.13313d , -2.87699d , 0.102301d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.54139d , -3.12437d , 0.332671d)}
	    {(1.29924d , -3.14852d , 0.402703d)}
	    {(1.19744d , -3.38019d , 0.342807d)}
	    {(1.68719d , -3.33558d , 0.156355d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.06762d , -2.11689d , 0.36869d)}
	    {(0.913278d , -1.49527d , 0.157394d)}
	    {(0.627914d , -2.08358d , -0.31462d)}
	    {(0.845536d , -2.32825d , -0.10083d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.42068d , -2.8483d , 0.0191439d)}
	    {(1.53006d , -3.07801d , -0.18171d)}
	    {(1.29773d , -2.69591d , -0.57583d)}
	    {(1.28188d , -2.62644d , -0.3033d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.845536d , -2.32825d , -0.10083d)}
	    {(0.925516d , -2.89719d , -0.31919d)}
	    {(1.09276d , -2.73683d , -0.0263481d)}
	    {(1.06762d , -2.11689d , 0.36869d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.69554d , -3.19907d , -0.11967d)}
	    {(1.68719d , -3.33558d , 0.156355d)}
	    {(1.19744d , -3.38019d , 0.342807d)}
	    {(1.01429d , -3.26056d , 0.142842d)}
	    {(1.3499d , -3.28151d , -0.0119321d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.53006d , -3.07801d , -0.18171d)}
	    {(1.69554d , -3.19907d , -0.11967d)}
	    {(1.3499d , -3.28151d , -0.0119321d)}
	    {(1.23342d , -3.2622d , -0.20641d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.06432d , -3.11905d , 0.0032559d)}
	    {(1.13313d , -2.87699d , 0.102301d)}
	    {(1.09276d , -2.73683d , -0.0263481d)}
	    {(0.925516d , -2.89719d , -0.31919d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.29773d , -2.69591d , -0.57583d)}
	    {(1.53006d , -3.07801d , -0.18171d)}
	    {(1.23342d , -3.2622d , -0.20641d)}
	    {(1.0011d , -2.88009d , -0.60054d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.23342d , -3.2622d , -0.20641d)}
	    {(1.06432d , -3.11905d , 0.0032559d)}
	    {(0.925516d , -2.89719d , -0.31919d)}
	    {(1.0011d , -2.88009d , -0.60054d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.925516d , -2.89719d , -0.31919d)}
	    {(0.877862d , -2.6906d , -0.63786d)}
	    {(1.0011d , -2.88009d , -0.60054d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.709315d , -0.252396d , -0.30497d)}
	    {(0.0282031d , 0.124605d , -0.53979d)}
	    {(0.0277449d , -0.429376d , -0.98465d)}
	    {(-0.729192d , -0.613835d , -0.67788d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.87084d , -0.344426d , -0.00383711d)}
	    {(-0.709315d , -0.252396d , -0.30497d)}
	    {(-0.729192d , -0.613835d , -0.67788d)}
	    {(-0.733485d , -0.503345d , -0.120702d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.0634d , -1.68139d , -0.88438d)}
	    {(1.19673d , -2.20482d , -0.43883d)}
	    {(0.872762d , -2.27063d , -0.81078d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.845536d , -2.32825d , -0.10083d)}
	    {(0.627914d , -2.08358d , -0.31462d)}
	    {(0.575796d , -2.34954d , -0.6431d)}
	    {(0.845332d , -2.27877d , -0.34403d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.19673d , -2.20482d , -0.43883d)}
	    {(0.845332d , -2.27877d , -0.34403d)}
	    {(0.575796d , -2.34954d , -0.6431d)}
	    {(0.872762d , -2.27063d , -0.81078d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.196124d , -2.25137d , -0.320121d)}
	    {(-6.51049d-4 , -1.9447d , 0.266913d)}
	    {(-0.197623d , -2.25137d , -0.320197d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.486463d , -1.89154d , 0.020162d)}
	    {(-0.707309d , -1.50821d , -0.313604d)}
	    {(-0.403112d , -2.14757d , -0.389841d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-6.51049d-4 , -1.9447d , 0.266913d)}
	    {(-0.486463d , -1.89154d , 0.020162d)}
	    {(-0.403112d , -2.14757d , -0.389841d)}
	    {(-0.197623d , -2.25137d , -0.320197d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.0413215d , -2.27822d , -1.13654d)}
	    {(0.399179d , -2.14703d , -0.390246d)}
	    {(0.196124d , -2.25137d , -0.320121d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.632099d , -1.18558d , -0.0271561d)}
	    {(-0.729192d , -0.613835d , -0.67788d)}
	    {(-0.922274d , -1.35024d , -0.98242d)}
	    {(-0.707309d , -1.50821d , -0.313604d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.913278d , -1.49527d , 0.157394d)}
	    {(-1.21252d , -1.44195d , -0.24652d)}
	    {(-1.44365d , -2.03292d , 0.121966d)}
	    {(-1.06762d , -2.11689d , 0.36869d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.913278d , -1.49527d , 0.157394d)}
	    {(-1.06762d , -2.11689d , 0.36869d)}
	    {(-0.845536d , -2.32825d , -0.10083d)}
	    {(-0.627914d , -2.08358d , -0.31462d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.403112d , -2.14757d , -0.389841d)}
	    {(-0.627914d , -2.08358d , -0.31462d)}
	    {(-0.575796d , -2.34954d , -0.6431d)}
	    {(-0.0413215d , -2.27822d , -1.13654d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -1.25181d , -1.62815d)}
	    {(0.352105d , -1.83559d , -1.72222d)}
	    {(0.262325d , -1.6289d , -2.37131d)}
	    {(0.0282031d , -1.17402d , -2.20851d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.0282031d , -1.25181d , -1.62815d)}
	    {(-0.352105d , -1.83559d , -1.72222d)}
	    {(-0.922274d , -1.35024d , -0.98242d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.352105d , -1.83559d , -1.72222d)}
	    {(-0.0413215d , -2.27822d , -1.13654d)}
	    {(-0.352105d , -1.83559d , -1.72222d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.44365d , -2.03292d , 0.121966d)}
	    {(-1.21252d , -1.44195d , -0.24652d)}
	    {(-1.0634d , -1.68139d , -0.88438d)}
	    {(-1.19673d , -2.20482d , -0.43883d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.0634d , -1.68139d , -0.88438d)}
	    {(-0.872762d , -2.27063d , -0.81078d)}
	    {(-1.19673d , -2.20482d , -0.43883d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.0413215d , -2.27822d , -1.13654d)}
	    {(-0.575796d , -2.34954d , -0.6431d)}
	    {(-0.872762d , -2.27063d , -0.81078d)}
	    {(-0.352105d , -1.83559d , -1.72222d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.44365d , -2.03292d , 0.121966d)}
	    {(-1.28188d , -2.62644d , -0.3033d)}
	    {(-1.09276d , -2.73683d , -0.0263481d)}
	    {(-1.06762d , -2.11689d , 0.36869d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.06432d , -3.11905d , 0.0032559d)}
	    {(-1.13313d , -2.87699d , 0.102301d)}
	    {(-1.14438d , -2.92935d , 0.243456d)}
	    {(-1.01429d , -3.26056d , 0.142842d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.845332d , -2.27877d , -0.34403d)}
	    {(-0.845536d , -2.32825d , -0.10083d)}
	    {(-0.925516d , -2.89719d , -0.31919d)}
	    {(-0.877862d , -2.6906d , -0.63786d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.14438d , -2.92935d , 0.243456d)}
	    {(-1.29924d , -3.14852d , 0.402703d)}
	    {(-1.19744d , -3.38019d , 0.342807d)}
	    {(-1.01429d , -3.26056d , 0.142842d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.14438d , -2.92935d , 0.243456d)}
	    {(-1.13313d , -2.87699d , 0.102301d)}
	    {(-1.42068d , -2.8483d , 0.0191439d)}
	    {(-1.50477d , -2.8934d , 0.139239d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.19673d , -2.20482d , -0.43883d)}
	    {(-0.845332d , -2.27877d , -0.34403d)}
	    {(-0.877862d , -2.6906d , -0.63786d)}
	    {(-1.20188d , -2.56154d , -0.6729d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.20188d , -2.56154d , -0.6729d)}
	    {(-0.877862d , -2.6906d , -0.63786d)}
	    {(-1.0011d , -2.88009d , -0.60054d)}
	    {(-1.29773d , -2.69591d , -0.57583d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.29924d , -3.14852d , 0.402703d)}
	    {(-1.54139d , -3.12437d , 0.332671d)}
	    {(-1.68719d , -3.33558d , 0.156355d)}
	    {(-1.19744d , -3.38019d , 0.342807d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.42068d , -2.8483d , 0.0191439d)}
	    {(-1.28188d , -2.62644d , -0.3033d)}
	    {(-1.29773d , -2.69591d , -0.57583d)}
	    {(-1.53006d , -3.07801d , -0.18171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.29773d , -2.69591d , -0.57583d)}
	    {(-1.0011d , -2.88009d , -0.60054d)}
	    {(-1.23342d , -3.2622d , -0.20641d)}
	    {(-1.53006d , -3.07801d , -0.18171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.3499d , -3.28151d , -0.0119321d)}
	    {(-1.01429d , -3.26056d , 0.142842d)}
	    {(-1.19744d , -3.38019d , 0.342807d)}
	    {(-1.68719d , -3.33558d , 0.156355d)}
	    {(-1.69554d , -3.19907d , -0.11967d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.50477d , -2.8934d , 0.139239d)}
	    {(-1.42068d , -2.8483d , 0.0191439d)}
	    {(-1.53006d , -3.07801d , -0.18171d)}
	    {(-1.69554d , -3.19907d , -0.11967d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.352105d , -1.83559d , -1.72222d)}
	    {(0.0282031d , -1.25181d , -1.62815d)}
	    {(0.0282031d , -1.17402d , -2.20851d)}
	    {(-0.262325d , -1.6289d , -2.37131d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.262325d , -1.6289d , -2.37131d)}
	    {(-0.262325d , -1.6289d , -2.37131d)}
	    {(-0.152138d , -1.01497d , -3.51132d)}
	    {(0.152138d , -1.01497d , -3.51132d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.196124d , -2.25137d , -0.320121d)}
	    {(-0.197623d , -2.25137d , -0.320197d)}
	    {(-0.0413215d , -2.27822d , -1.13654d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.44365d , -2.03292d , 0.121966d)}
	    {(1.06762d , -2.11689d , 0.36869d)}
	    {(1.09276d , -2.73683d , -0.0263481d)}
	    {(1.28188d , -2.62644d , -0.3033d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.705812d , -1.50821d , -0.313334d)}
	    {(0.485078d , -1.89154d , 0.0203477d)}
	    {(0.399179d , -2.14703d , -0.390246d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.32023d , -1.43096d , 0.246832d)}
	    {(0.0282031d , -1.45956d , 0.354594d)}
	    {(-6.51049d-4 , -1.9447d , 0.266913d)}
	    {(0.485078d , -1.89154d , 0.0203477d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.64285d , -0.666726d , 1.0371d)}
	    {(-1.87818d , -0.752066d , 1.08183d)}
	    {(-1.82564d , -0.943156d , 1.19345d)}
	    {(-1.57177d , -0.939086d , 1.17847d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.51265d , -0.644336d , 0.749889d)}
	    {(-1.23911d , -0.634346d , 0.606765d)}
	    {(-1.31251d , -0.671026d , 0.463906d)}
	    {(-1.58605d , -0.681016d , 0.607032d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.733485d , -0.503345d , -0.120702d)}
	    {(-0.968956d , -0.909176d , 0.22426d)}
	    {(-1.08627d , -0.717146d , 0.218907d)}
	    {(-0.87084d , -0.344426d , -0.00383711d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.849766d , -0.989276d , 0.360784d)}
	    {(-0.789361d , -0.932665d , 0.540739d)}
	    {(-1.15624d , -1.10003d , 0.732696d)}
	    {(-1.2413d , -1.16402d , 0.565651d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.31251d , -0.671026d , 0.463906d)}
	    {(-1.11104d , -0.553146d , 0.358484d)}
	    {(-1.08627d , -0.717146d , 0.218907d)}
	    {(-1.35923d , -0.856406d , 0.361731d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.08627d , -0.717146d , 0.218907d)}
	    {(-0.968956d , -0.909176d , 0.22426d)}
	    {(-1.32559d , -1.07349d , 0.410867d)}
	    {(-1.35923d , -0.856406d , 0.361731d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.58605d , -0.681016d , 0.607032d)}
	    {(-1.31251d , -0.671026d , 0.463906d)}
	    {(-1.35923d , -0.856406d , 0.361731d)}
	    {(-1.63276d , -0.866406d , 0.504856d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.35923d , -0.856406d , 0.361731d)}
	    {(-1.32559d , -1.07349d , 0.410867d)}
	    {(-1.59912d , -1.08348d , 0.553991d)}
	    {(-1.63276d , -0.866406d , 0.504856d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.82564d , -0.943156d , 1.19345d)}
	    {(-1.87818d , -0.752066d , 1.08183d)}
	    {(-1.99973d , -0.733006d , 0.850852d)}
	    {(-2.07341d , -0.903786d , 0.722553d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.82376d , -0.638366d , 0.693338d)}
	    {(-1.58605d , -0.681016d , 0.607032d)}
	    {(-1.63276d , -0.866406d , 0.504856d)}
	    {(-1.91638d , -0.884306d , 0.523611d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.42977d , -1.11002d , 0.875821d)}
	    {(-1.61372d , -1.16105d , 1.07766d)}
	    {(-1.87251d , -1.12045d , 0.585779d)}
	    {(-1.59912d , -1.08348d , 0.553991d)}
	    {(-1.51483d , -1.17402d , 0.708777d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.85536d , -1.11389d , 1.12475d)}
	    {(-1.82564d , -0.943156d , 1.19345d)}
	    {(-2.07341d , -0.903786d , 0.722553d)}
	    {(-2.04548d , -1.08405d , 0.763357d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-2.07341d , -0.903786d , 0.722553d)}
	    {(-1.91638d , -0.884306d , 0.523611d)}
	    {(-1.87251d , -1.12045d , 0.585779d)}
	    {(-2.04548d , -1.08405d , 0.763357d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.590007d , 0.134855d , 0.119238d)}
	    {(-0.394074d , 0.368945d , -0.0072701d)}
	    {(-0.709315d , -0.252396d , -0.30497d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-6.02904d-8 , 0.967405d , -0.0904491d)}
	    {(0.0175184d , 0.657135d , -0.0965151d)}
	    {(-0.221999d , 0.636935d , 0.0914109d)}
	    {(-0.483212d , 0.795865d , 0.12639d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.295943d , 0.611905d , 0.360159d)}
	    {(-0.625843d , 0.625345d , 0.467704d)}
	    {(-0.483212d , 0.795865d , 0.12639d)}
	    {(-0.221999d , 0.636935d , 0.0914109d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.22254d , -0.693966d , 0.742056d)}
	    {(1.29551d , -0.634346d , 0.606765d)}
	    {(1.10817d , -0.520706d , 0.508741d)}
	    {(1.01223d , -0.573445d , 0.632011d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.452537d , 0.365775d , 1.54884d)}
	    {(0.706945d , 0.413385d , 1.49543d)}
	    {(0.706984d , 0.584615d , 0.891652d)}
	    {(0.412999d , 0.454195d , 1.1479d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.9346d , -0.752056d , 1.08184d)}
	    {(2.05614d , -0.733006d , 0.850859d)}
	    {(1.88017d , -0.638366d , 0.693342d)}
	    {(1.69927d , -0.666726d , 1.0371d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.88204d , -0.943156d , 1.19346d)}
	    {(1.9346d , -0.752056d , 1.08184d)}
	    {(1.69927d , -0.666726d , 1.0371d)}
	    {(1.62818d , -0.939086d , 1.17847d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.501999d , 0.150285d , 1.96746d)}
	    {(0.332606d , 0.219175d , 1.77759d)}
	    {(6.62312d-5 , 0.0284545d , 1.83805d)}
	    {(1.18448d-4 , -0.162956d , 2.12128d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(2.12983d , -0.903786d , 0.722558d)}
	    {(1.88204d , -0.943156d , 1.19346d)}
	    {(1.91177d , -1.11388d , 1.12475d)}
	    {(2.1019d , -1.08405d , 0.763362d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.88204d , -0.943156d , 1.19346d)}
	    {(1.62818d , -0.939086d , 1.17847d)}
	    {(1.67013d , -1.16105d , 1.07767d)}
	    {(1.91177d , -1.11388d , 1.12475d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.83212d-6 , 0.385965d , 2.3974d)}
	    {(1.69969d-5 , 0.392835d , 2.52722d)}
	    {(-0.850267d , 0.248075d , 2.11956d)}
	    {(-0.630395d , 0.463695d , 2.02205d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.774474d , -0.0497654d , 1.5746d)}
	    {(0.501999d , 0.150285d , 1.96746d)}
	    {(1.18448d-4 , -0.162956d , 2.12128d)}
	    {(2.05374d-4 , -0.555836d , 1.84314d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.62818d , -0.939086d , 1.17847d)}
	    {(1.69927d , -0.666726d , 1.0371d)}
	    {(1.49609d , -0.703956d , 0.885185d)}
	    {(1.45038d , -0.904426d , 0.958562d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(6.62312d-5 , 0.0284545d , 1.83805d)}
	    {(1.42477d-5 , 0.225465d , 1.45028d)}
	    {(-0.45257d , 0.365515d , 1.54884d)}
	    {(-0.332583d , 0.219005d , 1.77757d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.03726d , 1.1064d , 0.577543d)}
	    {(0.626541d , 0.623945d , 0.462015d)}
	    {(0.48386d , 0.795735d , 0.126971d)}
	    {(0.758648d , 1.19461d , 0.0691279d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.860681d , 1.93569d , -0.0551801d)}
	    {(0.758648d , 1.19461d , 0.0691279d)}
	    {(-1.15697d-5 , 1.39303d , -0.29783d)}
	    {(3.6623d-6 , 2.12178d , -0.30131d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.22254d , -0.693966d , 0.742056d)}
	    {(1.49609d , -0.703956d , 0.885185d)}
	    {(1.56906d , -0.644336d , 0.749893d)}
	    {(1.29551d , -0.634346d , 0.606765d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.850267d , 0.248075d , 2.11956d)}
	    {(-1.04475d , 0.644775d , 2.42943d)}
	    {(-1.08255d , 0.569795d , 1.65048d)}
	    {(-0.828997d , 0.490985d , 1.66723d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.56906d , -0.644336d , 0.749893d)}
	    {(1.64245d , -0.681016d , 0.607036d)}
	    {(1.36892d , -0.671026d , 0.463906d)}
	    {(1.29551d , -0.634346d , 0.606765d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.04475d , 0.644775d , 2.42943d)}
	    {(-1.04643d , 0.979915d , 2.4565d)}
	    {(-1.19175d , 0.835475d , 1.49079d)}
	    {(-1.08255d , 0.569795d , 1.65048d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.92892d , -1.12045d , 0.585783d)}
	    {(1.67013d , -1.16105d , 1.07767d)}
	    {(1.48618d , -1.11002d , 0.875826d)}
	    {(1.57124d , -1.17402d , 0.70878d)}
	    {(1.65553d , -1.08348d , 0.553993d)}))))))
'
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> earth [
	"(JunOpenGL3dObject earth)
		showEyePoint: 10 , 0 , 0
		sightPoint: 0 , 0 , 0
		upVector: 0 , 0 , 1."

	| xyPointsAndSphere xyPoints aCompoundObject aTexture |
	xyPointsAndSphere := JunOpenGL3dObject 
				xyPointsAndSphere: 12
				radius: 1
				longitude: 360
				latitude: 180.
	xyPoints := xyPointsAndSphere first 
				collect: [:aPoint | aPoint x , (1 - aPoint y)].
	aCompoundObject := xyPointsAndSphere last.
	aCompoundObject paint: ColorValue white.
	aTexture := JunOpenGLTexture image: self imageEarth.
	aTexture
		linear: true;
		repeat: true.
	aTexture coordinates: xyPoints.
	aCompoundObject texture: aTexture.
	aCompoundObject name: 'earth'.
	^aCompoundObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> eddy [
	"(JunOpenGL3dObject eddy) show."

	| collection triangle translationT1 yRotationT1 triangle1 color eddy body |
	collection := OrderedCollection new.
	triangle := Array
				with: 1 , 1 , 0
				with: -1 , 1 , 0
				with: -1 , -1 , 0.
	translationT1 := Jun3dTransformation translate: 0.5 , 0.1 , 0.
	yRotationT1 := Jun3dTransformation rotateY: (JunAngle fromDeg: 10).
	triangle1 := triangle.
	100
		timesRepeat: 
			[color := JunOpenGL3dObject sampleColor.
			collection add: color -> triangle1.
			triangle1 := triangle1 collect: [:point | (point transform: translationT1)
							transform: yRotationT1]].
	eddy := JunOpenGL3dCompoundObject new.
	eddy name: 'eddy'.
	collection
		collect: 
			[:assoc | 
			body := JunOpenGL3dCompoundObject new.
			body add: (JunOpenGL3dPolygon vertexes: assoc value paint: assoc key).
			body add: (JunOpenGL3dPolyline vertexes: assoc value , (Array with: assoc value first) paint: ColorValue black).
			eddy add: body].
	^eddy
]

{ #category : #examples }
JunOpenGL3dObject class >> example1 [
	"JunOpenGL3dObject example1."

	| file axes stream model |
	file := JunUniFileModel requestNewFileName: 'axes.lst'.
	file isNil ifTrue: [^self].
	axes := JunOpenGL3dObject axes.
	stream := file writeStream.
	[Cursor write showWhile: [axes saveOn: stream]]
		ensure: [stream close].
	stream := file readStream.
	[Cursor read showWhile: [axes := axes class loadFrom: stream]]
		ensure: [stream close].
	model := JunOpenGLDisplayModel new.
	model displayObject: axes.
	model open.
	^axes
]

{ #category : #examples }
JunOpenGL3dObject class >> example2 [
	"JunOpenGL3dObject example2."

	| file box stream model |
	file := JunUniFileModel requestNewFileName: 'box.lst'.
	file isNil ifTrue: [^self].
	box := JunOpenGL3dObject box.
	stream := file writeStream.
	[Cursor write showWhile: [box saveOn: stream]]
		ensure: [stream close].
	stream := file readStream.
	[Cursor read showWhile: [box := box class loadFrom: stream]]
		ensure: [stream close].
	model := JunOpenGLDisplayModel new.
	model displayObject: box.
	model open.
	^box
]

{ #category : #examples }
JunOpenGL3dObject class >> example3 [
	"JunOpenGL3dObject example3."

	| file cube stream model |
	file := JunUniFileModel requestNewFileName: 'cube.lst'.
	file isNil ifTrue: [^self].
	cube := JunOpenGL3dObject cube.
	stream := file writeStream.
	[Cursor write showWhile: [cube saveOn: stream]]
		ensure: [stream close].
	stream := file readStream.
	[Cursor read showWhile: [cube := cube class loadFrom: stream]]
		ensure: [stream close].
	model := JunOpenGLDisplayModel new.
	model displayObject: cube.
	model open.
	^cube
]

{ #category : #examples }
JunOpenGL3dObject class >> example4 [
	"JunOpenGL3dObject example4."

	| file stack stream model |
	file := JunUniFileModel requestNewFileName: 'stack.lst'.
	file isNil ifTrue: [^self].
	stack := JunOpenGL3dObject stack.
	stream := file writeStream.
	[Cursor write showWhile: [stack saveOn: stream]]
		ensure: [stream close].
	stream := file readStream.
	[Cursor read showWhile: [stack := stack class loadFrom: stream]]
		ensure: [stream close].
	model := JunOpenGLDisplayModel new.
	model displayObject: stack.
	model open.
	^stack
]

{ #category : #examples }
JunOpenGL3dObject class >> example5 [
	"JunOpenGL3dObject example5."

	| file eddy stream model |
	file := JunUniFileModel requestNewFileName: 'eddy.lst'.
	file isNil ifTrue: [^self].
	eddy := JunOpenGL3dObject eddy.
	stream := file writeStream.
	[Cursor write showWhile: [eddy saveOn: stream]]
		ensure: [stream close].
	stream := file readStream.
	[Cursor read showWhile: [eddy := eddy class loadFrom: stream]]
		ensure: [stream close].
	model := JunOpenGLDisplayModel new.
	model displayObject: eddy.
	model open.
	^eddy
]

{ #category : #examples }
JunOpenGL3dObject class >> example6 [
	"JunOpenGL3dObject example6."

	| file globe stream model |
	file := JunUniFileModel requestNewFileName: 'globe.lst'.
	file isNil ifTrue: [^self].
	globe := JunOpenGL3dObject globe.
	stream := file writeStream.
	[Cursor write showWhile: [globe saveOn: stream]]
		ensure: [stream close].
	stream := file readStream.
	[Cursor read showWhile: [globe := globe class loadFrom: stream]]
		ensure: [stream close].
	model := JunOpenGLDisplayModel new.
	model displayObject: globe.
	model open.
	^globe
]

{ #category : #examples }
JunOpenGL3dObject class >> example7 [
	"JunOpenGL3dObject example7."

	| aCube aLine anObject aStack aGlobe |
	aCube := JunOpenGL3dObject cube.
	aCube paint: ColorValue green.
	aLine := JunOpenGL3dPolyline vertexes: (Array with: 0 , 0 , 0 with: 3 , 0 , 0).
	aLine paint: ColorValue blue.
	aCube touch: aLine do: [:aPolygon | aPolygon paint: ColorValue red].
	anObject := JunOpenGL3dCompoundObject new.
	anObject add: aCube.
	anObject add: aLine.
	anObject showAt: 100 @ 200.
	aStack := JunOpenGL3dObject stack.
	aStack primitivesDo: [:each | each paint: ColorValue green].
	aLine := JunOpenGL3dPolyline vertexes: (Array with: 0 , 0 , 0 with: 0 , 0 , 10).
	aLine paint: ColorValue blue.
	aStack touch: aLine do: [:aPolygon | aPolygon paint: ColorValue red].
	anObject := JunOpenGL3dCompoundObject new.
	anObject add: aStack.
	anObject add: aLine.
	anObject showAt: 250 @ 250.
	aGlobe := JunOpenGL3dObject globe: 15.
	aGlobe paint: ColorValue green.
	aLine := JunOpenGL3dPolyline vertexes: (Array with: 0 , 0 , 0 with: 3 , 0 , 0).
	aLine paint: ColorValue blue.
	aGlobe touch: aLine do: [:aPolygon | aPolygon paint: ColorValue red].
	anObject := JunOpenGL3dCompoundObject new.
	anObject add: aGlobe.
	anObject add: aLine.
	anObject showAt: 400 @ 300
]

{ #category : #examples }
JunOpenGL3dObject class >> example8 [
	"JunOpenGL3dObject example8."

	| aCube1 aCube2 anObject aModel aController |
	aCube1 := JunOpenGL3dObject cube.
	aCube1 paint: ColorValue green.
	aCube2 := aCube1 translatedBy: 1 , -1 , 1.
	aCube2 paint: ColorValue blue.
	aCube1 touch: aCube2 do: [:aPolygon | aPolygon paint: ColorValue red].
	anObject := JunOpenGL3dCompoundObject new.
	anObject add: aCube1.
	anObject add: aCube2.
	aModel := anObject showAt: 200 @ 200.
	aModel grabButton value: true.
	aController := aModel getController.
	aController movementVector: 0.02 @ 0.
	aController createMovementProcess
]

{ #category : #examples }
JunOpenGL3dObject class >> example9 [
	"JunOpenGL3dObject example9."

	| aGlobe1 aGlobe2 anObject aModel aController |
	aGlobe1 := JunOpenGL3dObject globe: 30.
	aGlobe1 paint: ColorValue green.
	aGlobe2 := aGlobe1 translatedBy: 0.8 , 0 , 0.
	aGlobe2 paint: ColorValue blue.
	aGlobe1 touch: aGlobe2 do: [:aPolygon | aPolygon paint: ColorValue red].
	anObject := JunOpenGL3dCompoundObject new.
	anObject add: aGlobe1.
	anObject add: aGlobe2.
	aModel := anObject showAt: 200 @ 200.
	aModel grabButton value: true.
	aController := aModel getController.
	aController movementVector: 0.02 @ 0.
	aController createMovementProcess
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleA [
	"JunOpenGL3dObject exampleA."

	| aGlobe aCube anObject aModel aController |
	aGlobe := (JunOpenGL3dObject ball: 2)
				scaledBy: 2.
	aGlobe paint: ColorValue green.
	aCube := JunOpenGL3dObject
				cylinderFrom: 0 , 0 , 0
				to: 1 , 2 , 3
				width: 1.5
				by: 10.
	aCube paint: ColorValue blue.
	aGlobe touch: aCube do: [:aPolygon | aPolygon paint: ColorValue red].
	anObject := JunOpenGL3dCompoundObject new.
	anObject add: aGlobe.
	anObject add: aCube.
	aModel := anObject showAt: 200 @ 200.
	aModel grabButton value: true.
	aController := aModel getController.
	aController movementVector: 0.02 @ 0.
	aController createMovementProcess
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleB [
	"JunOpenGL3dObject exampleB."

	| anObject aModel aController |
	anObject := JunOpenGL3dCompoundObject new.
	anObject add: ((JunOpenGL3dObject
			boxFrom: 0 , 0 , 0
			to: 0 , 0 , 1
			width: 0.25)
			paint: ColorValue red; yourself).
	anObject add: ((JunOpenGL3dObject
			coneFrom: 0 , 0 , 0
			to: 0 , 1 , 0
			width: 0.25)
			paint: ColorValue green; yourself).
	anObject add: ((JunOpenGL3dObject
			cylinderFrom: 0 , 0 , 0
			to: 1 , 0 , 0
			width: 0.25)
			paint: ColorValue blue; yourself).
	anObject add: ((JunOpenGL3dObject
			sphereFrom: 1 , 1 , 1
			to: 0 , 0 , 1
			width: 0.25)
			paint: ColorValue cyan; yourself).
	anObject add: ((JunOpenGL3dObject
			hemisphereFrom: 1 , 1 , 1
			to: 0 , 1 , 0
			width: 0.25)
			paint: ColorValue magenta; yourself).
	anObject add: ((JunOpenGL3dObject
			text3d: 'Jun' from: 1 , 1 , 1
			to: 1 , 0 , 0
			width: 1)
			paint: ColorValue yellow; yourself).
	aModel := anObject showAt: 200 @ 200.
	aModel grabButton value: true.
	aController := aModel getController.
	aController movementVector: 0 @ 0.01.
	aController createMovementProcess
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleBall [
	"(JunOpenGL3dObject exampleBall) show."

	| baseHedron colorCollection displayModel |
	baseHedron := JunOpenGL3dObject ballHedron.
	colorCollection := Array 
				with: ColorValue red
				with: ColorValue green
				with: ColorValue blue
				with: ColorValue gray.
	baseHedron
		flushAllPaints;
		paint: colorCollection last.
	displayModel := JunOpenGLDisplayModel displayObject: baseHedron.
	displayModel defaultSightPoint: 0 , 0 , 0.
	displayModel defaultEyePoint: 10 , 10 , 10.
	displayModel defaultProjection: #perspectiveProjection.
	displayModel defaultPresentation: #hiddenlinePresentation.
	displayModel open.
	^JunOpenGL3dObject 
		ball: baseHedron
		smooth: colorCollection size - 1
		interim: 
			[:object :original :n | 
			| anOriginal anObject |
			anOriginal := JunOpenGL3dTransformedObject object: original
						transformation: (Jun3dTransformation scale: 0.9999).
			anOriginal
				flushAllPaints;
				paint: (colorCollection at: n + 1).
			anObject := JunOpenGL3dTransformedObject object: object
						transformation: Jun3dTransformation unity.
			anObject
				flushAllPaints;
				paint: (colorCollection at: n).
			displayModel 
				displayObject: (JunOpenGL3dCompoundObject with: anOriginal with: anObject).
			displayModel changed: #object.
			Processor yield]
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleBalls [
	"JunOpenGL3dObject exampleBalls."

	| aPoint aBall aBody aTable |
	aPoint := 100 @ 100.
	-1 to: 5
		do: 
			[:n | 
			n < 0 
				ifTrue: [aBall := JunOpenGL3dObject sphere]
				ifFalse: [aBall := JunOpenGL3dObject ball: n].
			aBall primitivesDo: [:each | each paint: ColorValue white].
			aBody := JunOpenGL3dCompoundObject new.
			aBody add: aBall.
			aBall polygonsDo: 
					[:aPolygon | 
					| vertexes polyline |
					vertexes := aPolygon vertexes collect: [:p | (0 , 0 , 0 to: p) atT: 1.005].
					(vertexes first equal: vertexes last) 
						ifFalse: [vertexes := vertexes , (Array with: vertexes first)].
					polyline := (JunOpenGL3dPolyline vertexes: vertexes)
								paint: ColorValue black;
								lineWidth: 1;
								yourself.
					aBody add: polyline].
			aBody add: (JunOpenGL3dObject xyzArrows scaledBy: 1.6).
			aTable := (Dictionary new)
						add: #eyePoint -> (50 , 50 , 50);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #upVector -> (0 , 0 , 1);
						add: #sightPoint -> (0 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 2.8;
						yourself.
			aBody showProjectionTable: aTable in: (aPoint extent: 400 @ 400).
			aPoint := aPoint + (25 @ 25)]
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleBoth [
	"(JunOpenGL3dObject exampleBoth) show."

	| object |
	object := JunOpenGL3dCompoundObject new.
	object add: JunOpenGL3dObject exampleDodecahedron.
	object add: ((JunOpenGL3dObject exampleIcosahedron) paint: ColorValue red; yourself).
	^object
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleColorBodies [
	"JunOpenGL3dObject exampleColorBodies."

	| colorBodies aCollection aRectangle anAngle aWindow aString columnSize rowSize aFilename aStream |
	colorBodies := OrderedCollection new.
	colorBodies add: JunOpenGL3dObject colorBox.
	colorBodies add: JunOpenGL3dObject colorBevel.
	colorBodies add: (JunOpenGL3dObject colorBall: 4).
	colorBodies add: JunOpenGL3dObject colorTorus.
	colorBodies add: JunOpenGL3dObject colorMobius.
	colorBodies add: JunOpenGL3dObject colorMobiusStrip.
	aCollection := OrderedCollection new: colorBodies size.
	aRectangle := 50 @ 100 extent: 300 @ 300.
	colorBodies do: 
			[:colorBody | 
			| aViewer |
			aViewer := JunOpenGLDisplayModel displayObject: colorBody.
			aViewer displayLightsAllOff.
			aViewer openIn: aRectangle interface: #windowSpecWithoutWidgets.
			aViewer getWindow label: colorBody name.
			aRectangle := aRectangle translatedBy: (300 + 8) @ 0.
			aRectangle right > JunSystem screenBoundingBox right 
				ifTrue: [aRectangle := 50 @ (aRectangle bottom + 28) extent: 300 @ 300].
			aCollection add: aViewer].
	anAngle := JunAngle degrees: 10.
	aCollection do: 
			[:aViewer | 
			aViewer movementVector: anAngle sin , 0.
			aViewer closeTogether: aCollection].
	aCollection := OrderedCollection new: colorBodies size.
	colorBodies do: 
			[:aBody | 
			| aViewer anExtent |
			aViewer := JunOpenGLDisplayModel displayObject: aBody.
			aViewer displayLightsAllOff.
			aViewer resetView.
			anExtent := 128 @ 128.
			JunControlUtility 
				assert: 
					[aWindow := ScheduledWindow new.
					aWindow openIn: (100 @ 300 extent: anExtent)]
				do: 
					[aCollection 
						add: ((0 to: 360 by: anAngle degrees) collect: 
									[:angle | 
									| anImage |
									anImage := JunImageAdjuster adjust: aViewer asImage extent: anExtent.
									anImage displayOn: aWindow graphicsContext.
									aString := JunStringUtility f: '5.1' value: angle.
									aWindow label: aString.
									aViewer grab: anAngle sin , 0.
									anImage yourself])]
				ensure: 
					[(Delay forSeconds: 1) wait.
					aWindow controller closeAndUnschedule]].
	columnSize := 3.
	rowSize := aCollection size // columnSize.
	aCollection size \\ columnSize = 0 ifFalse: [rowSize := rowSize + 1].
	JunControlUtility 
		assert: 
			[aWindow := ScheduledWindow new.
			aWindow openIn: (100 @ 300 
						extent: aCollection first first extent * (columnSize @ rowSize)).
			aFilename := Filename defaultDirectory construct: 'ColorBodies.gif'.
			aStream := JunGifAnimationStream on: aFilename writeStream.
			aStream tick: 100.
			aStream loop: 0]
		do: 
			[(1 to: aCollection first size) with: (0 to: 360 by: anAngle degrees)
				do: 
					[:index :angle | 
					| imageCollection aPixmap anImage |
					imageCollection := aCollection collect: [:each | each at: index].
					JunControlUtility 
						assert: 
							[aPixmap := Pixmap 
										extent: imageCollection first extent * (columnSize @ rowSize)]
						do: 
							[| graphicsContext |
							graphicsContext := aPixmap graphicsContext.
							graphicsContext paint: ColorValue white.
							graphicsContext displayRectangle: aPixmap bounds.
							imageCollection with: (0 to: imageCollection size - 1)
								do: 
									[:image :n | 
									| p |
									p := (n \\ columnSize) @ (n // columnSize) * image extent.
									image displayOn: graphicsContext at: p].
							anImage := aPixmap asImage.
							aStream nextPutImage: anImage]
						ensure: [aPixmap close].
					anImage displayOn: aWindow graphicsContext.
					aString := JunStringUtility f: '5.1' value: angle.
					aWindow label: aString]]
		ensure: 
			[aStream close.
			(Delay forSeconds: 1) wait.
			aWindow controller closeAndUnschedule].
	JunCartoonMovie showFile: aFilename.
	^colorBodies
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleDodecahedron [
	"(JunOpenGL3dObject exampleDodecahedron) show."

	| object points |
	object := JunOpenGL3dCompoundObject new.
	points := Array new: 10.
	1 to: 5
		do: 
			[:each | 
			points at: each put: (Jun3dPoint
					x: (Double pi * (each * 2 + 1) / 5) cos * 2
					y: (Double pi * (each * 2 + 1) / 5) sin * 2
					z: 1.0d + 5.0d sqrt / 2 + 1.0d).
			points at: each + 5 put: (Jun3dPoint
					x: (Double pi * (each * 2 + 1) / 5) cos * (1.0d + 5.0d sqrt)
					y: (Double pi * (each * 2 + 1) / 5) sin * (1.0d + 5.0d sqrt)
					z: 1.0d + 5.0d sqrt / 2 - 1.0d)].
	1 to: 10 do: [:each | points at: each put: (points at: each)
				/ (points at: each) rho * (0.81573786516665d / 0.79465447229177d)].
	object add: (JunOpenGL3dPolygon vertexes: (Array
				with: (points at: 1)
				with: (points at: 2)
				with: (points at: 3)
				with: (points at: 4))
				, (Array with: (points at: 5))).
	object add: (JunOpenGL3dPolygon vertexes: (Array
				with: (points at: 5) negated
				with: (points at: 4) negated
				with: (points at: 3) negated
				with: (points at: 2) negated)
				, (Array with: (points at: 1) negated)).
	1 to: 5
		do: 
			[:each | 
			object add: (JunOpenGL3dPolygon vertexes: (Array
						with: (points at: each)
						with: (points at: each + 5)
						with: (points at: each + 2 \\ 5 + 1 + 5) negated
						with: (points at: each \\ 5 + 1 + 5))
						, (Array with: (points at: each \\ 5 + 1))).
			object add: (JunOpenGL3dPolygon vertexes: (Array
						with: (points at: each \\ 5 + 1) negated
						with: (points at: each \\ 5 + 1 + 5) negated
						with: (points at: each + 2 \\ 5 + 1 + 5)
						with: (points at: each + 5) negated)
						, (Array with: (points at: each) negated))].
	object paint: ColorValue blue.
	^object
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleExpandHedrons [
	"JunOpenGL3dObject exampleExpandHedrons."

	| aBoolean toDoList |
	aBoolean := JunSensorUtility shiftDown.
	toDoList := OrderedCollection new.
	toDoList add: #regularTetrahedron 
				-> (Array with: [:hedron | hedron components first] with: [1.0]).
	toDoList add: #regularHexahedron 
				-> (Array with: [:hedron | hedron components first] with: [1.0]).
	toDoList add: #regularOctahedron 
				-> (Array with: [:hedron | hedron components last] with: [2.0]).
	toDoList add: #regularDodecahedron 
				-> (Array with: [:hedron | hedron components first] with: [1.0]).
	toDoList add: #regularIcosahedron 
				-> (Array with: [:hedron | hedron components first] with: [4.0]).
	toDoList add: #cuboctahedron 
				-> (Array with: [:hedron | hedron components first] with: [2.0]).
	toDoList add: #icosidodecahedron 
				-> (Array with: [:hedron | hedron components first] with: [6.0]).
	toDoList add: #tetrakisHexahedron 
				-> (Array with: [:hedron | hedron components last] with: [25.0]).
	toDoList add: #pentakisDodecahedron 
				-> (Array with: [:hedron | hedron components last] with: [25.0]).
	toDoList add: #truncatedTetrahedron 
				-> (Array with: [:hedron | hedron components last] with: [1.5]).
	toDoList add: #truncatedHexahedron 
				-> (Array with: [:hedron | hedron components first] with: [1.6]).
	toDoList add: #truncatedOctahedron 
				-> (Array with: [:hedron | hedron components first] with: [2.0]).
	toDoList add: #truncatedDodecahedron 
				-> (Array with: [:hedron | hedron components first] with: [2.0]).
	toDoList add: #truncatedIcosahedron 
				-> (Array with: [:hedron | hedron components last] with: [2.2]).
	toDoList reverseDo: 
			[:association | 
			| englishString japaneseString aHedron aTable aCollection aBody aModel |
			englishString := JunStringUtility spacingMessageSelector: association key.
			japaneseString := (('jun_' 
						, (englishString copy replaceAll: Character space with: $_)) asSymbol 
						>> englishString) asString.
			aHedron := (JunOpenGL3dObject perform: association key) flatten.
			aTable := aHedron class 
						expandedBodiesLoopsEdgesVertexes: aHedron
						by: ((association value at: 1) value: aHedron)
						power: (association value at: 2) value.
			aCollection := OrderedCollection new.
			aBody := (aTable at: #bodies) last.
			aModel := aBody showProjectionTable: ((Dictionary new)
								add: #eyePoint -> (0 , 0 , 10);
								add: #sightPoint -> (0 , 0 , 0);
								add: #upVector -> (1 , 0 , 0);
								yourself)
						in: (100 @ 100 extent: (aBoolean ifTrue: [600 @ 600] ifFalse: [400 @ 400])).
			aModel getWindow label: japaneseString.
			aCollection add: aModel.
			aBody := (aTable at: #bodies) first.
			aBody boundingBox width > 1000 
				ifTrue: 
					[aModel := aBody showWithAxesIn: (550 @ 100 
										extent: (aBoolean ifTrue: [600 @ 600] ifFalse: [400 @ 400]))]
				ifFalse: 
					[aModel := aBody showProjectionTable: ((Dictionary new)
										add: #eyePoint -> (0 , 0 , 1000);
										add: #sightPoint -> (0 , 0 , 0);
										add: #upVector -> (1 , 0 , 0);
										yourself)
								in: (550 @ 100 extent: (aBoolean ifTrue: [600 @ 600] ifFalse: [400 @ 400]))].
			aModel getWindow label: 'expanded ' , englishString.
			aCollection add: aModel.
			aCollection do: [:each | each closeTogether: aCollection].
			aBoolean 
				ifTrue: 
					[aCollection with: (1 to: aCollection size)
						do: 
							[:each :index | 
							| filename stream |
							filename := ((englishString copy replaceAll: Character space with: $_) 
										, index printString , '.jpg') 
										asFilename.
							stream := JunJpegImageStream on: filename writeStream.
							[Cursor write showWhile: [stream nextPutImage: each asImage]] 
								ensure: [stream close]]]]
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleFullerene5 [
	"JunOpenGL3dObject exampleFullerene5."

	| aHedron aTable aCollection aModel |
	aHedron := JunOpenGL3dObject truncatedIcosahedron.
	aTable := aHedron class 
				expandedBodiesLoopsEdgesVertexes: aHedron
				by: aHedron components last
				power: 1.6.
	aCollection := OrderedCollection new.
	aModel := (aTable at: #bodies) last showProjectionTable: ((Dictionary new)
						add: #eyePoint -> (0 , 0 , 10);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #sightPoint -> (0 , 0 , 0);
						add: #upVector -> (1 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 2.5;
						yourself)
				in: (100 @ 100 extent: 400 @ 400).
	aModel getWindow 
		label: (#jun_truncated_icosahedron >> 'truncated icosahedron') asString.
	aCollection add: aModel.
	aModel := (aTable at: #bodies) first 
				showProjectionTable: ((Dictionary new)
						add: #eyePoint -> (0 , 0 , 1000);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #sightPoint -> (0 , 0 , 0);
						add: #upVector -> (1 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 38;
						yourself)
				in: (550 @ 100 extent: 400 @ 400).
	aModel getWindow label: 'expaned truncated icosahedron'.
	aCollection add: aModel.
	aCollection do: [:each | each closeTogether: aCollection].
	^aTable
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleFullerene55 [
	"JunOpenGL3dObject exampleFullerene55."

	| aBoolean aHedron polygonCollection lineCollection pointCollection aBody aCollection aModel basePoint assocCollection |
	aBoolean := JunSensorUtility shiftDown.
	aHedron := JunOpenGL3dObject truncatedIcosahedron.
	polygonCollection := OrderedCollection new: 32.
	aHedron polygonsDo: [:aPolygon | polygonCollection add: aPolygon].
	lineCollection := OrderedCollection new: 32 * 6.
	polygonCollection 
		do: [:aPolygon | lineCollection addAll: aPolygon asArrayOfLines].
	pointCollection := JunHashEqualitySet new: 60.
	pointCollection addAll: aHedron asPointArray.
	aBody := JunOpenGL3dCompoundObject new.
	aBody add: (aHedron
				primitivesDo: 
						[:each | 
						each
							paint: ColorValue lightGray;
							halftone: 0.75];
				yourself).
	pointCollection do: 
			[:each | 
			aBody add: ((each asJunOpenGL3dObject)
						paint: ColorValue black;
						size: 5;
						yourself)].
	lineCollection do: 
			[:line | 
			aBody 
				add: (((line asJunOpenGL3dObject)
						paint: ColorValue black;
						lineWidth: 3;
						yourself) scaledBy: 1.01)].
	aCollection := OrderedCollection new.
	aModel := aBody showProjectionTable: ((Dictionary new)
						add: #eyePoint -> (0 , 0 , 10);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #upVector -> (1 , 0 , 0);
						add: #sightPoint -> (0 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 2.5;
						yourself)
				in: (100 @ 100 extent: (aBoolean ifTrue: [600 @ 600] ifFalse: [400 @ 400])).
	aModel getWindow 
		label: (#jun_truncated_icosahedron >> 'truncated icosahedron') asString.
	aCollection add: aModel.
	basePoint := 0 , 0 , (2 sqrt * 2).
	assocCollection := OrderedCollection new.
	aBody := JunOpenGL3dCompoundObject new.
	pointCollection do: 
			[:each | 
			| distance line point |
			distance := basePoint distance: each.
			distance > 3.5 
				ifTrue: [distance := distance ** 2.2]
				ifFalse: [distance := distance ** 2].
			line := (basePoint x , basePoint y , 0 to: each x , each y , 0) normalized.
			point := line atT: distance.
			assocCollection add: each -> point.
			aBody add: ((point asJunOpenGL3dObject)
						paint: ColorValue black;
						size: 5;
						yourself)].
	lineCollection do: 
			[:line | 
			aBody 
				add: ((((assocCollection detect: [:a | line from equal: a key]) value 
						to: (assocCollection detect: [:a | line to equal: a key]) value) 
							asJunOpenGL3dObject)
						paint: ColorValue black;
						lineWidth: 3;
						yourself)].
	aModel := aBody showProjectionTable: ((Dictionary new)
						add: #eyePoint -> (0 , 0 , 1000);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #upVector -> (-1 , 0 , 0);
						add: #sightPoint -> (0 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 42;
						yourself)
				in: (550 @ 100 extent: (aBoolean ifTrue: [600 @ 600] ifFalse: [400 @ 400])).
	aModel getWindow label: 'expanded truncated icosahedron'.
	aCollection add: aModel.
	aCollection do: [:each | each closeTogether: aCollection].
	aBoolean 
		ifTrue: 
			[aCollection with: (1 to: aCollection size)
				do: 
					[:each :index | 
					| filename stream |
					filename := (('expanded truncated icosahedron' copy 
								replaceAll: Character space
								with: $_) , '5' 
								, index printString , '.jpg') 
								asFilename.
					stream := JunJpegImageStream on: filename writeStream.
					[Cursor write showWhile: [stream nextPutImage: each asImage]] 
						ensure: [stream close]]].
	^aBody
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleFullerene6 [
	"JunOpenGL3dObject exampleFullerene6."

	| aHedron aTable aCollection aModel |
	aHedron := JunOpenGL3dObject truncatedIcosahedron.
	aTable := aHedron class 
				expandedBodiesLoopsEdgesVertexes: aHedron
				by: aHedron components first
				power: 1.6.
	aCollection := OrderedCollection new.
	aModel := (aTable at: #bodies) last showProjectionTable: ((Dictionary new)
						add: #eyePoint -> (0 , 0 , 10);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #sightPoint -> (0 , 0 , 0);
						add: #upVector -> (1 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 2.5;
						yourself)
				in: (200 @ 250 extent: 400 @ 400).
	aCollection add: aModel.
	aModel := (aTable at: #bodies) first 
				showProjectionTable: ((Dictionary new)
						add: #eyePoint -> (0 , 0 , 1000);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #sightPoint -> (0 , 0 , 0);
						add: #upVector -> (1 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 38;
						yourself)
				in: (650 @ 250 extent: 400 @ 400).
	aCollection add: aModel.
	aCollection do: [:each | each closeTogether: aCollection].
	^aTable
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleFullerene66 [
	"JunOpenGL3dObject exampleFullerene66."

	| aBoolean aHedron polygonCollection lineCollection pointCollection aBody aCollection aModel basePoint assocCollection |
	aBoolean := JunSensorUtility shiftDown.
	aHedron := JunOpenGL3dObject truncatedIcosahedron 
				transform: (Jun3dTransformation 
						rotateY: (JunAngle fromDeg: 37.333333333333d)).
	polygonCollection := OrderedCollection new: 32.
	aHedron polygonsDo: [:aPolygon | polygonCollection add: aPolygon].
	lineCollection := OrderedCollection new: 32 * 6.
	polygonCollection 
		do: [:aPolygon | lineCollection addAll: aPolygon asArrayOfLines].
	pointCollection := JunHashEqualitySet new: 60.
	pointCollection addAll: aHedron asPointArray.
	aBody := JunOpenGL3dCompoundObject new.
	aBody add: (aHedron
				primitivesDo: 
						[:each | 
						each
							paint: ColorValue lightGray;
							halftone: 0.75];
				yourself).
	pointCollection do: 
			[:each | 
			aBody add: ((each asJunOpenGL3dObject)
						paint: ColorValue black;
						size: 5;
						yourself)].
	lineCollection do: 
			[:line | 
			aBody 
				add: (((line asJunOpenGL3dObject)
						paint: ColorValue black;
						lineWidth: 3;
						yourself) scaledBy: 1.01)].
	aCollection := OrderedCollection new.
	aModel := aBody showProjectionTable: ((Dictionary new)
						add: #eyePoint -> (0 , 0 , 10);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #upVector -> (1 , 0 , 0);
						add: #sightPoint -> (0 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 2.5;
						yourself)
				in: (200 @ 250 extent: (aBoolean ifTrue: [600 @ 600] ifFalse: [400 @ 400])).
	aModel getWindow 
		label: (#jun_truncated_icosahedron >> 'truncated icosahedron') asString.
	aCollection add: aModel.
	basePoint := 0 , 0 , (2 sqrt * 2).
	assocCollection := OrderedCollection new.
	aBody := JunOpenGL3dCompoundObject new.
	pointCollection do: 
			[:each | 
			| distance line point |
			distance := basePoint distance: each.
			distance > 3.5 
				ifTrue: [distance := distance ** 2.2]
				ifFalse: [distance := distance ** 2].
			line := (basePoint x , basePoint y , 0 to: each x , each y , 0) normalized.
			point := line atT: distance.
			assocCollection add: each -> point.
			aBody add: ((point asJunOpenGL3dObject)
						paint: ColorValue black;
						size: 5;
						yourself)].
	lineCollection do: 
			[:line | 
			aBody 
				add: ((((assocCollection detect: [:a | line from equal: a key]) value 
						to: (assocCollection detect: [:a | line to equal: a key]) value) 
							asJunOpenGL3dObject)
						paint: ColorValue black;
						lineWidth: 3;
						yourself)].
	aModel := aBody showProjectionTable: ((Dictionary new)
						add: #eyePoint -> (0 , 0 , 1000);
						add: #presentation -> #solidPresentation;
						add: #projection -> #perspectiveProjection;
						add: #shading -> #smoothShading;
						add: #upVector -> (-1 , 0 , 0);
						add: #sightPoint -> (0 , 0 , 0);
						add: #viewFactor -> 10;
						add: #zoomHeight -> 42;
						yourself)
				in: (650 @ 250 extent: (aBoolean ifTrue: [600 @ 600] ifFalse: [400 @ 400])).
	aModel getWindow label: 'expanded truncated icosahedron'.
	aCollection add: aModel.
	aCollection do: [:each | each closeTogether: aCollection].
	aBoolean 
		ifTrue: 
			[aCollection with: (1 to: aCollection size)
				do: 
					[:each :index | 
					| filename stream |
					filename := (('expanded truncated icosahedron' copy 
								replaceAll: Character space
								with: $_) , '6' 
								, index printString , '.jpg') 
								asFilename.
					stream := JunJpegImageStream on: filename writeStream.
					[Cursor write showWhile: [stream nextPutImage: each asImage]] 
						ensure: [stream close]]].
	^aBody
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleIcosahedron [
	"(JunOpenGL3dObject exampleIcosahedron) show."

	| object points |
	object := JunOpenGL3dCompoundObject new.
	points := Array new: 5.
	1 to: 5 do: [:each | points at: each put: (Jun3dPoint
				x: (Double pi * each * 2 / 5) cos * 5.0d sqrt * 2 / 5
				y: (Double pi * each * 2 / 5) sin * 5.0d sqrt * 2 / 5
				z: 5.0d sqrt / 5)].
	1 to: 5
		do: 
			[:each | 
			object add: (JunOpenGL3dPolygon vertexes: (Array
						with: 0.0d , 0.0d , 1.0d
						with: (points at: each)
						with: (points at: each \\ 5 + 1))).
			object add: (JunOpenGL3dPolygon vertexes: (Array
						with: (points at: each \\ 5 + 1)
						with: (points at: each)
						with: (points at: each + 2 \\ 5 + 1) negated)).
			object add: (JunOpenGL3dPolygon vertexes: (Array
						with: (points at: each) negated
						with: (points at: each \\ 5 + 1) negated
						with: (points at: each + 2 \\ 5 + 1))).
			object add: (JunOpenGL3dPolygon vertexes: (Array
						with: (points at: each \\ 5 + 1) negated
						with: (points at: each) negated
						with: (0.0d , 0.0d , 1.0d) negated))].
	object paint: ColorValue blue.
	^object
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleSoccerBall [
	"(JunOpenGL3dObject exampleSoccerBall) show."

	| object points aBlock |
	object := JunOpenGL3dCompoundObject new.
	points := Array new: 5.
	1 to: 5 do: [:each | points at: each put: (Jun3dPoint
				x: (Double pi * each * 2 / 5) cos * 5.0d sqrt * 2 / 5
				y: (Double pi * each * 2 / 5) sin * 5.0d sqrt * 2 / 5
				z: 5.0d sqrt / 5)].
	aBlock := 
			[:p1 :p2 :p3 | 
			| anArray polygon |
			anArray := Array new: 6.
			anArray at: 1 put: p1 * 2 + p2 / 3.
			anArray at: 2 put: p1 + (p2 * 2) / 3.
			anArray at: 3 put: p2 * 2 + p3 / 3.
			anArray at: 4 put: p2 + (p3 * 2) / 3.
			anArray at: 5 put: p3 * 2 + p1 / 3.
			anArray at: 6 put: p3 + (p1 * 2) / 3.
			polygon := JunOpenGL3dPolygon vertexes: anArray.
			polygon paint: ColorValue blue.
			object add: polygon].
	1 to: 5
		do: 
			[:each | 
			aBlock
				value: 0.0d , 0.0d , 1.0d
				value: (points at: each)
				value: (points at: each \\ 5 + 1).
			aBlock
				value: (points at: each \\ 5 + 1)
				value: (points at: each)
				value: (points at: each + 2 \\ 5 + 1) negated.
			aBlock
				value: (points at: each) negated
				value: (points at: each \\ 5 + 1) negated
				value: (points at: each + 2 \\ 5 + 1).
			aBlock
				value: (points at: each \\ 5 + 1) negated
				value: (points at: each) negated
				value: (0.0d , 0.0d , 1.0d) negated].
	aBlock := 
			[:p0 :pp | 
			| anArray polygon |
			anArray := Array new: 5.
			1 to: 5 do: [:each | anArray at: each put: p0 * 2 + (pp at: each) / 3].
			polygon := JunOpenGL3dPolygon vertexes: anArray.
			polygon paint: ColorValue red.
			object add: polygon.
			1 to: 5 do: [:each | anArray at: each put: (p0 * 2 + (pp at: 6 - each) / 3) negated].
			polygon := JunOpenGL3dPolygon vertexes: anArray.
			polygon paint: ColorValue red.
			object add: polygon].
	aBlock value: 0.0d , 0.0d , 1.0d value: points.
	1 to: 5 do: [:each | aBlock value: (points at: each)
			value: (Array
					with: (points at: each + 3 \\ 5 + 1)
					with: (points at: each + 1 \\ 5 + 1) negated
					with: (points at: each + 2 \\ 5 + 1) negated
					with: (points at: each \\ 5 + 1))
					, (Array with: 0.0d , 0.0d , 1.0d)].
	^object
]

{ #category : #examples }
JunOpenGL3dObject class >> exampleSoccerBall2 [
	"(JunOpenGL3dObject exampleSoccerBall2) show."

	| body1 body2 setOp |
	body1 := JunBody fromJunOpenGL3dObject: JunOpenGL3dObject exampleDodecahedron.
	body2 := JunBody fromJunOpenGL3dObject: JunOpenGL3dObject exampleIcosahedron.
	setOp := JunINTER body: body1 body: body2.
	setOp do.
	^setOp body
]

{ #category : #utilities }
JunOpenGL3dObject class >> expandedBodiesLoopsEdgesVertexes: aJunOpenGL3dCompoundObject by: aJunOpenGL3dPolygon [ 
	"| aBody aTable |
	aBody := JunOpenGL3dObject regularDodecahedron.
	aTable := aBody class 
				expandedBodiesLoopsEdgesVertexes: aBody
				by: aBody components last.
	(aTable at: #bodies) last showWithAxesIn: (100 @ 100 extent: 400 @ 400).
	(aTable at: #bodies) first showWithAxesIn: (550 @ 100 extent: 400 @ 400).
	^aTable"

	^self 
		expandedBodiesLoopsEdgesVertexes: aJunOpenGL3dCompoundObject
		by: aJunOpenGL3dPolygon
		power: 2
]

{ #category : #utilities }
JunOpenGL3dObject class >> expandedBodiesLoopsEdgesVertexes: aJunOpenGL3dCompoundObject by: aJunOpenGL3dPolygon power: powerValue [ 
	"| aBody aTable |
	aBody := JunOpenGL3dObject truncatedIcosahedron.
	aTable := aBody class 
				expandedBodiesLoopsEdgesVertexes: aBody
				by: aBody components last
				power: 3.
	(aTable at: #bodies) last showWithAxesIn: (100 @ 100 extent: 400 @ 400).
	(aTable at: #bodies) first showWithAxesIn: (550 @ 100 extent: 400 @ 400).
	^aTable"

	"| aBody aTable |
	aBody := JunOpenGL3dObject pentakisDodecahedron flatten.
	aTable := aBody class 
				expandedBodiesLoopsEdgesVertexes: aBody
				by: aBody components first
				power: 25.
	(aTable at: #bodies) last showWithAxesIn: (100 @ 100 extent: 400 @ 400).
	(aTable at: #bodies) first showWithAxesIn: (550 @ 100 extent: 400 @ 400).
	^aTable"

	| compoundObject basePolygon aTransformation firstPoint anAngle xzPlane pointCollection polylineCollection basePoint assocCollection vertexCollection edgeCollection loopCollection aTable aBody |
	compoundObject := JunOpenGL3dCompoundObject new.
	aJunOpenGL3dCompoundObject 
		polygonsDo: [:aPolygon | compoundObject add: aPolygon].
	basePolygon := aJunOpenGL3dPolygon.
	aTransformation := Jun3dTransformation 
				translate: basePolygon averagePoint negated.
	compoundObject := compoundObject transform: aTransformation.
	basePolygon := basePolygon transform: aTransformation.
	"compoundObject showWithAxes hiddenlinePresentation."
	aTransformation := Jun3dTransformation 
				alignVector: basePolygon normalVector
				withVector: 0 , 0 , 1.
	compoundObject := compoundObject transform: aTransformation.
	basePolygon := basePolygon transform: aTransformation.
	"compoundObject showWithAxes hiddenlinePresentation."
	firstPoint := basePolygon vertexes first.
	anAngle := (0 , 0 , 0 to: 1 , 0 , 0) 
				angleWithLine: (0 , 0 , 0 to: firstPoint).
	xzPlane := JunPlane 
				on: 0 , 0 , 0
				on: 0 , 0 , 1
				on: 1 , 0 , 0.
	(xzPlane whichSide: firstPoint) >= 0 
		ifTrue: [aTransformation := Jun3dTransformation rotateZ: anAngle negated]
		ifFalse: [aTransformation := Jun3dTransformation rotateZ: anAngle].
	compoundObject := compoundObject transform: aTransformation.
	basePolygon := basePolygon transform: aTransformation.
	"compoundObject showWithAxes hiddenlinePresentation."
	pointCollection := JunHashEqualitySet new.
	pointCollection addAll: compoundObject asPointArray.
	polylineCollection := OrderedCollection new.
	compoundObject 
		polygonsDo: [:aPolygon | polylineCollection add: aPolygon asArrayOfLines].
	basePoint := 0 , 0 , (compoundObject boundingBox origin z - 1).
	assocCollection := OrderedCollection new: pointCollection size.
	pointCollection do: 
			[:point | 
			| distance |
			distance := basePoint distance: point.
			assocCollection add: point -> distance].
	assocCollection := (assocCollection 
				asSortedCollection: [:a1 :a2 | a1 value < a2 value]) asArray.
	vertexCollection := OrderedCollection new: pointCollection size.
	edgeCollection := OrderedCollection new: polylineCollection size * 3.
	loopCollection := OrderedCollection new: polylineCollection size.
	assocCollection := assocCollection collect: 
					[:assoc | 
					| point distance p1 p2 vertex |
					point := assoc key.
					distance := assoc value.
					distance := distance ** powerValue.
					p1 := basePoint x , basePoint y , 0.
					p2 := point x , point y , 0.
					(p1 equal: p2) 
						ifTrue: [vertex := p1]
						ifFalse: [vertex := (p1 to: p2) normalized atT: distance].
					vertexCollection add: vertex.
					point -> vertex].
	polylineCollection do: 
			[:polyline | 
			| edges |
			edges := OrderedCollection new: polyline size.
			polyline do: 
					[:line | 
					| edge |
					edge := (assocCollection detect: [:a | line from equal: a key]) value 
								to: (assocCollection detect: [:a | line to equal: a key]) value.
					edgeCollection add: edge.
					edges add: edge].
			loopCollection add: edges asArray].
	aTable := Dictionary new.
	aTable 
		add: #bodies -> (Array with: JunOpenGL3dCompoundObject new
						with: JunOpenGL3dCompoundObject new).
	aTable add: #loops -> loopCollection asArray.
	aTable add: #edges -> edgeCollection asArray.
	aTable add: #vertexes -> vertexCollection asArray.
	aBody := (aTable at: #bodies) first.
	(aTable at: #edges) do: 
			[:line | 
			aBody add: ((line asJunOpenGL3dObject)
						paint: ColorValue black;
						lineWidth: 3;
						yourself)].
	(aTable at: #vertexes) do: 
			[:point | 
			aBody add: ((point asJunOpenGL3dObject)
						paint: ColorValue black;
						size: 5;
						yourself)].
	aBody := (aTable at: #bodies) last.
	compoundObject primitivesDo: 
			[:each | 
			each
				paint: ColorValue lightGray;
				halftone: 0.75].
	aBody add: compoundObject.
	compoundObject polygonsDo: 
			[:aPolygon | 
			aPolygon asArrayOfLines do: 
					[:line | 
					aBody 
						add: (((line asJunOpenGL3dObject)
								paint: ColorValue black;
								lineWidth: 3;
								yourself) scaledBy: 1.01)]].
	((JunHashEqualitySet new)
		addAll: compoundObject asPointArray;
		yourself) do: 
				[:point | 
				aBody add: ((point asJunOpenGL3dObject)
							paint: ColorValue black;
							size: 5;
							yourself)].
	^aTable
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> files [
	"(JunOpenGL3dObject files) show."

	"
	| aBody aTable aViewer |
	aBody := JunOpenGL3dObject files.
	aTable := Dictionary new.
	aTable add: #eyePoint -> (3 , 3 , 8.25).
	aTable add: #sightPoint -> (0 , 0 , 0).
	aTable add: #upVector -> (0 , 0 , 1).
	aTable add: #zoomHeight -> 3.
	aViewer := aBody showProjectionTable: aTable
				in: (600 , 600) alignedRectangleWithScreenCenter.
	aViewer movementVector: 0, (JunAngle degrees: 1) sin negated.
	^aViewer
	"

	| aBody aBox aCylinder anArrow aLine aText |
	aBody := JunOpenGL3dCompoundObject new.
	aBox := -4 , -4 , -1 box: 4 , 1 , 1.
	aBody add: (aBox asJunOpenGL3dObjectColor: ColorValue gray).
	aBody add: ((aBox asJunOpenGL3dPolylines)
				paint: ColorValue black;
				yourself).
	aCylinder := JunOpenGL3dObject cylinder scaledBy: 2 , 2 , 1.99.
	aCylinder := aCylinder translatedBy: aCylinder boundingBox center negated.
	aCylinder := aCylinder translatedBy: -3 , 3 , 0.
	aCylinder paint: ColorValue cyan alpha: nil.
	aBody add: aCylinder.
	aCylinder := JunOpenGL3dObject cylinder scaledBy: 2 , 2 , 1.99.
	aCylinder := aCylinder translatedBy: aCylinder boundingBox center negated.
	aCylinder := aCylinder translatedBy: 0 , 3 , 0.
	aCylinder paint: ColorValue magenta alpha: nil.
	aBody add: aCylinder.
	aCylinder := JunOpenGL3dObject cylinder scaledBy: 2 , 2 , 1.99.
	aCylinder := aCylinder translatedBy: aCylinder boundingBox center negated.
	aCylinder := aCylinder translatedBy: 3 , 3 , 0.
	aCylinder paint: ColorValue yellow alpha: nil.
	aBody add: aCylinder.
	aBox := -0.5 , -0.5 , -0.25 box: 0.5 , 0.5 , 0.25.
	aBox := aBox translatedBy: -3 , -0.5 , 0.5.
	aBody add: (aBox asJunOpenGL3dObjectColor: ColorValue red alpha: nil).
	aBody add: ((aBox asJunOpenGL3dPolylines)
				paint: ColorValue black;
				yourself).
	anArrow := JunOpenGL3dObject yUnitArrow scaledBy: 2.
	anArrow := anArrow translatedBy: -3 , 0 , 0.5.
	anArrow paint: ColorValue red.
	anArrow components first lineWidth: 2.
	aBody add: anArrow.
	aBox := -0.5 , -0.5 , -0.25 box: 0.5 , 0.5 , 0.25.
	aBox := aBox translatedBy: -3 , -2.5 , -0.5.
	aBody add: (aBox asJunOpenGL3dObjectColor: ColorValue red alpha: nil).
	aBody add: ((aBox asJunOpenGL3dPolylines)
				paint: ColorValue black;
				yourself).
	anArrow := JunOpenGL3dObject yUnitArrow scaledBy: 2.
	anArrow := anArrow translatedBy: -3 , 0 , -0.5.
	anArrow paint: ColorValue red.
	anArrow components first lineWidth: 2.
	aBody add: anArrow.
	aLine := JunOpenGL3dPolyline with: -3 , -2 , -0.5 with: -3 , 0 , -0.5.
	aLine paint: ColorValue red.
	aLine lineWidth: 2.
	aBody add: aLine.
	aBox := -0.5 , -0.5 , -0.25 box: 0.5 , 0.5 , 0.25.
	aBox := aBox translatedBy: 0 , -0.5 , -0.5.
	aBody add: (aBox asJunOpenGL3dObjectColor: ColorValue green alpha: nil).
	aBody add: ((aBox asJunOpenGL3dPolylines)
				paint: ColorValue black;
				yourself).
	anArrow := JunOpenGL3dObject yUnitArrow scaledBy: 2.
	anArrow := anArrow translatedBy: 0 , 0 , 0.5.
	anArrow paint: ColorValue green.
	anArrow components first lineWidth: 2.
	aBody add: anArrow.
	aLine := JunOpenGL3dPolyline with: 0 , -2 , 0.5 with: 0 , 0 , 0.5.
	aLine paint: ColorValue green.
	aLine lineWidth: 2.
	aBody add: aLine.
	aBox := -0.5 , -0.5 , -0.25 box: 0.5 , 0.5 , 0.25.
	aBox := aBox translatedBy: 0 , -2.5 , 0.5.
	aBody add: (aBox asJunOpenGL3dObjectColor: ColorValue green alpha: nil).
	aBody add: ((aBox asJunOpenGL3dPolylines)
				paint: ColorValue black;
				yourself).
	anArrow := JunOpenGL3dObject yUnitArrow scaledBy: 2.
	anArrow := anArrow translatedBy: 0 , 0 , -0.5.
	anArrow paint: ColorValue green.
	anArrow components first lineWidth: 2.
	aBody add: anArrow.
	aBox := -0.5 , -0.5 , -0.25 box: 0.5 , 0.5 , 0.25.
	aBox := aBox translatedBy: 3 , -0.5 , 0.5.
	aBody add: (aBox asJunOpenGL3dObjectColor: ColorValue blue alpha: nil).
	aBody add: ((aBox asJunOpenGL3dPolylines)
				paint: ColorValue black;
				yourself).
	anArrow := JunOpenGL3dObject yUnitArrow scaledBy: 2.
	anArrow := anArrow translatedBy: 3 , 0 , -0.5.
	anArrow paint: ColorValue blue.
	anArrow components first lineWidth: 2.
	aBody add: anArrow.
	aBox := -0.5 , -0.5 , -0.25 box: 0.5 , 0.5 , 0.25.
	aBox := aBox translatedBy: 3 , -2.5 , -0.5.
	aBody add: (aBox asJunOpenGL3dObjectColor: ColorValue blue alpha: nil).
	aBody add: ((aBox asJunOpenGL3dPolylines)
				paint: ColorValue black;
				yourself).
	anArrow := JunOpenGL3dObject yUnitArrow scaledBy: 2.
	anArrow := anArrow translatedBy: 3 , 0 , 0.5.
	anArrow paint: ColorValue blue.
	anArrow components first lineWidth: 2.
	aBody add: anArrow.
	aLine := JunOpenGL3dPolyline with: 3 , -2 , -0.5 with: 3 , 0 , -0.5.
	aLine paint: ColorValue blue.
	aLine lineWidth: 2.
	aBody add: aLine.
	aBox := -0.75 , -1.75 , -0.775 box: 0.75 , 1.75 , 0.775.
	aBox := aBox translatedBy: -3 , -1.5 , 0.
	aBody add: (aBox asJunOpenGL3dObjectColor: ColorValue cyan alpha: 0.25).
	aBody add: ((aBox asJunOpenGL3dPolylines)
				paint: ColorValue black;
				yourself).
	aBody := aBody 
				transform: (Jun3dTransformation rotateZ: (JunAngle degrees: 90)).
	aText := '.sou' asText allBold.
	aText := JunOpenGL3dObject text: aText.
	aText := aText scaledBy: 1 / aText boundingBox extent x.
	aText := aText 
				transform: (Jun3dTransformation rotateZ: (JunAngle degrees: 90)).
	aText := aText transform: (Jun3dTransformation translate: -2.5 , 2.5 , 1).
	aText paint: ColorValue black.
	aBody add: aText.
	aText := '.cha' asText allBold.
	aText := JunOpenGL3dObject text: aText.
	aText := aText scaledBy: 1 / aText boundingBox extent x.
	aText := aText 
				transform: (Jun3dTransformation rotateZ: (JunAngle degrees: 90)).
	aText := aText transform: (Jun3dTransformation translate: -2.5 , -0.5 , 1).
	aText paint: ColorValue black.
	aBody add: aText.
	aText := '.pst' asText allBold.
	aText := JunOpenGL3dObject text: aText.
	aText := aText scaledBy: 1 / aText boundingBox extent x.
	aText := aText 
				transform: (Jun3dTransformation rotateZ: (JunAngle degrees: 90)).
	aText := aText transform: (Jun3dTransformation translate: -2.5 , -3.5 , 1).
	aText paint: ColorValue black.
	aBody add: aText.
	aText := '.im ' asText allBold.
	aText := JunOpenGL3dObject text: aText.
	aText := aText scaledBy: 1 / aText boundingBox extent x.
	aText := aText 
				transform: (Jun3dTransformation rotateZ: (JunAngle degrees: 90)).
	aText := aText transform: (Jun3dTransformation translate: 2 , 1.5 , 1).
	aText paint: ColorValue black.
	aBody add: aText.
	aBody add: aText.
	aText := '.pcl' asText allBold.
	aText := JunOpenGL3dObject text: aText.
	aText := aText scaledBy: 1 / aText boundingBox extent x.
	aText := aText 
				transform: (Jun3dTransformation rotateZ: (JunAngle degrees: 90)).
	aText := aText transform: (Jun3dTransformation translate: 2 , -3.5 , 0.78).
	aText paint: ColorValue black.
	aBody add: aText.
	aBody := aBody scaledBy: 1 / 4.
	aBody name: 'files'.
	^aBody

	"
	| aBody aTable aViewer aFilename aStream |
	aBody := JunOpenGL3dObject files.
	aTable := Dictionary new.
	aTable add: #eyePoint -> (3 , 3 , 8.25).
	aTable add: #sightPoint -> (0 , 0 , 0).
	aTable add: #upVector -> (0 , 0 , 1).
	aTable add: #zoomHeight -> 3.
	aViewer := aBody showProjectionTable: aTable
				in: (600 , 600) alignedRectangleWithScreenCenter.
	aFilename := Filename defaultDirectory construct: 'files.gif'.
	JunControlUtility 
		assert: 
			[aStream := JunGifAnimationStream on: aFilename writeStream.
			aStream tick: 100.
			aStream loop: 0]
		do: 
			[| aBox anAngle |
			aBox := aViewer getWindow displayBox.
			aBox := aBox expandedBy: (4 @ 23 corner: 4 @ 4).
			anAngle := JunAngle degrees: 2.
			(0 to: 360 by: anAngle degrees) do: 
					[:angle | 
					| anImage |
					anImage := aViewer asImage.
					anImage := JunImageAdjuster adjust: anImage
								extent: (anImage extent / 2) rounded.
					aStream nextPutImage: anImage.
					aViewer grab: 0 , anAngle sin negated]]
		ensure: [aStream close].
	aViewer closeRequest.
	^JunCartoonMovie showFile: aFilename
	"
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> fish [
	"(JunOpenGL3dObject fish) show."

	| aStream formTransporter anObject |
	aStream := JunFormTransporter exampleForm4 readStream.
	formTransporter := JunFormTransporter new.
	formTransporter loadFrom: aStream.
	formTransporter formObject isNil ifTrue: [^nil].
	anObject := formTransporter formObject.
	anObject name: 'fish'.
	anObject paint: (ColorValue blue blendWith: ColorValue gray).
	^anObject
]

{ #category : #utilities }
JunOpenGL3dObject class >> from: fromPoint to: toPoint height: heightFactor depth: depthFactor with: a3dObject [ 
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: 3 , 4 , 5 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: -1 , -1 , -1 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: -1 , -1 , -1 to: 1 , 1 , 1 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 1 , 1 , 1 to: -1 , -1 , -1 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: 0 , 0 , -0.8 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: 0 , -0.8 , 0 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: -0.8 , 0 , 0 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: 0 , 0 , 0 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 1 , 1 , 1 to: 0 , 0 , 1 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 1 , 1 , 1 to: 0 , 1 , 0 height: 0.1 depth: 0.2 with: (JunOpenGL3dObject xUnitCone)) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	| aPoint distanceFromOrigin anObject xLine xyPoint shadowLine anAngle zRotationTransformation aLine targetLine aTransformation aPlane perpendicularLine rotationTransformation |
	aPoint := toPoint - fromPoint.
	distanceFromOrigin := 0 , 0 , 0 distance: aPoint.
	distanceFromOrigin < Jun3dTransformation accuracy ifTrue: [^JunOpenGL3dCompoundObject new].
	anObject := a3dObject scaledBy: distanceFromOrigin , heightFactor , depthFactor.
	aPoint y < 0
		ifTrue: 
			[anObject := anObject transform: (Jun3dTransformation rotateY: (JunAngle fromDeg: 180)).
			xLine := Jun3dLine from: 0 , 0 , 0 to: distanceFromOrigin negated , 0 , 0]
		ifFalse: [xLine := Jun3dLine from: 0 , 0 , 0 to: distanceFromOrigin , 0 , 0].
	xyPoint := aPoint x , aPoint y , 0.
	distanceFromOrigin := 0 , 0 , 0 distance: xyPoint.
	distanceFromOrigin < Jun3dTransformation accuracy
		ifTrue: 
			[aTransformation := Jun3dTransformation unity.
			aPoint z > 0
				ifTrue: [aTransformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 270)]
				ifFalse: [aTransformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90)]]
		ifFalse: 
			[shadowLine := Jun3dLine from: 0 , 0 , 0 to: xyPoint.
			anAngle := xLine angleWithLine: shadowLine.
			zRotationTransformation := Jun3dTransformation rotateZ: anAngle.
			aLine := xLine transform: zRotationTransformation.
			targetLine := Jun3dLine from: 0 , 0 , 0 to: aPoint.
			anAngle := aLine angleWithLine: targetLine.
			(xyPoint distance: aPoint)
				< Jun3dTransformation accuracy
				ifTrue: [aTransformation := zRotationTransformation]
				ifFalse: 
					[aPlane := JunPlane
								on: 0 , 0 , 0
								on: xyPoint
								on: aPoint.
					perpendicularLine := Jun3dLine from: 0 , 0 , 0 to: aPlane normalVector.
					rotationTransformation := Jun3dTransformation rotate: anAngle around: perpendicularLine.
					aTransformation := zRotationTransformation product: rotationTransformation]].
	aTransformation := aTransformation product: (Jun3dTransformation translate: fromPoint).
	anObject := anObject transform: aTransformation.
	^anObject
]

{ #category : #utilities }
JunOpenGL3dObject class >> from: fromPoint to: toPoint with: a3dObject [ 
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: 3 , 4 , 5 with: (JunOpenGL3dObject box)) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: -1 , -1 , -1 with: (JunOpenGL3dObject box)) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: -1 , -1 , -1 to: 1 , 1 , 1 with: (JunOpenGL3dObject box)) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject from: 0 , 0 , 0 to: 0 , 0 , -0.8 with: (JunOpenGL3dObject box)) paint: ColorValue green; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		from: fromPoint
		to: toPoint
		height: 1
		depth: 1
		with: a3dObject
]

{ #category : #'instance creation' }
JunOpenGL3dObject class >> fromUser [
	| filename stream |
	filename := JunUniFileModel requestFileName.
	filename isNil ifTrue: [^nil].
	stream := filename readStream.
	[^JunOpenGL3dObject loadFrom: stream]
		ensure: [stream close]
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> globe [
	"(JunOpenGL3dObject globe) show."

	^(self sphere) name: 'globe'; yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> globe: degrees [ 
	"(JunOpenGL3dObject globe: 15) show."

	^(self sphere: degrees)
		name: 'globe'; yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> globe: degrees radius: radius [ 
	"(JunOpenGL3dObject globe: 15 radius: 5) show."

	^(self sphere: degrees radius: radius)
		name: 'globe'; yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> globe: degrees radius: radius center: center [ 
	"(JunOpenGL3dObject globe: 15 radius: 5 center: 1, 1, 1) show."

	^(self
		sphere: degrees
		radius: radius
		center: center)
		name: 'globe'; yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> globeFrom: fromPoint to: toPoint width: widthFactor [ 
	"((JunOpenGL3dObject globeFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject globeFrom: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject globeFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: self xUnitGlobe
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> hand [
	"(JunOpenGL3dObject hand) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:28:41

(CompoundBody (name . "hand")
  (bodies (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.8551d , 2.3735d , 0.7793d)}
        {(0.6449d , 2.3735d , 0.7793d)}
        {(0.5823d , 2.2955d , 0.6984d)}
        {(0.9177d , 2.2955d , 0.6984d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.8059d , 0.2572d , 1.4527d)}
        {(1.6639d , 0.6263d , 1.3225d)}
        {(1.4702d , 0.5912d , 1.5095d)}
        {(1.6201d , 0.2249d , 1.6393d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(1.857d , 0.362d , 1.3829d)}
        {(1.7731d , 0.5613d , 1.3205d)}
        {(1.6669d , 0.5871d , 1.26d)}
        {(1.7961d , 0.2803d , 1.356d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.8551d , 2.3735d , 0.7793d)}
        {(0.9177d , 2.2955d , 0.6984d)}
        {(0.9096d , 2.0801d , 0.3833d)}
        {(0.873d , 2.2102d , 0.4293d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.8551d , 2.3735d , 0.7793d)}
        {(0.873d , 2.2102d , 0.4293d)}
        {(0.75d , 2.2102d , 0.4293d)}
        {(0.627d , 2.2102d , 0.4293d)}
        {(0.6449d , 2.3735d , 0.7793d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.75d , 2.2102d , 0.4293d)}
        {(0.873d , 2.2102d , 0.4293d)}
        {(0.9096d , 2.0801d , 0.3833d)}
        {(0.75d , 2.1179d , 0.3367d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.116d , 1.8099d , 1.4647d)}
        {(0.3467d , 1.81d , 1.47d)}
        {(0.3737d , 1.8401d , 1.1475d)}
        {(0.1036d , 1.8399d , 1.1413d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9253d , 2.2072d , 0.8614d)}
        {(0.9164d , 1.9194d , 0.8742d)}
        {(0.9353d , 1.7067d , 0.6559d)}
        {(0.9656d , 1.746d , 0.4382d)}
        {(0.9656d , 2.0153d , 0.277d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4117d , 1.6316d , 1.4618d)}
        {(0.4566d , 1.7922d , 0.905d)}
        {(0.3635d , 1.7629d , 1.0299d)}
        {(0.4141d , 1.7692d , 1.3984d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.75d , 2.2102d , 0.4293d)}
        {(0.75d , 2.1179d , 0.3367d)}
        {(0.5904d , 2.0801d , 0.3833d)}
        {(0.627d , 2.2102d , 0.4293d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9096d , 2.0801d , 0.3833d)}
        {(0.9656d , 2.0153d , 0.277d)}
        {(0.75d , 2.0555d , 0.2325d)}
        {(0.75d , 2.1179d , 0.3367d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9656d , 1.746d , 0.4382d)}
        {(0.9353d , 1.7067d , 0.6559d)}
        {(0.8811d , 1.6632d , 0.4579d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.3737d , 1.8401d , 1.1475d)}
        {(0.3635d , 1.7629d , 1.0299d)}
        {(0.1163d , 1.7627d , 1.0242d)}
        {(0.1036d , 1.8399d , 1.1413d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0434d , 1.6355d , 1.454d)}
        {(0.0458d , 1.769d , 1.39d)}
        {(0.1163d , 1.7627d , 1.0242d)}
        {(0.0255d , 1.7967d , 0.8959d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(1.6669d , 0.5871d , 1.26d)}
        {(1.7731d , 0.5613d , 1.3205d)}
        {(1.5902d , 0.4052d , 0.972d)}
        {(1.4926d , 0.3947d , 0.9527d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9353d , 1.7067d , 0.6559d)}
        {(0.5647d , 1.7067d , 0.6559d)}
        {(0.6189d , 1.6632d , 0.4579d)}
        {(0.8811d , 1.6632d , 0.4579d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(1.4926d , 0.3947d , 0.9527d)}
        {(1.5902d , 0.4052d , 0.972d)}
        {(1.642d , 0.282d , 1.0106d)}
        {(1.6098d , 0.2425d , 0.9702d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(1.857d , 0.362d , 1.3829d)}
        {(1.7961d , 0.2803d , 1.356d)}
        {(1.6284d , 0.0719d , 1.0537d)}
        {(1.6938d , 0.1588d , 1.0491d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.1604d , 1.5634d , 1.3977d)}
        {(-0.1419d , 1.6523d , 1.1562d)}
        {(-0.3964d , 1.6523d , 1.1562d)}
        {(-0.3778d , 1.5634d , 1.3977d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 1.6033d , 0.9029d)}
        {(-0.1328d , 1.5791d , 1.0481d)}
        {(-0.0768d , 1.5061d , 1.3477d)}
        {(-0.0658d , 1.5074d , 1.3864d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.6436d , -0.0147d , 0.9862d)}
        {(1.458d , -0.0459d , 1.209d)}
        {(1.2309d , -0.0648d , 1.1679d)}
        {(1.0888d , -0.2968d , 0.9382d)}
        {(1.5565d , -0.2313d , 0.5826d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4581d , 1.1618d , 0.5227d)}
        {(0.4556d , 1.2192d , 0.6731d)}
        {(0.0245d , 1.2237d , 0.664d)}
        {(0.027d , 1.1663d , 0.5136d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.6075d , 1.033d , 1.1023d)}
        {(-0.5971d , 1.0536d , 1.341d)}
        {(-0.6022d , 0.8824d , 1.498d)}
        {(-0.545d , 0.873d , 1.4391d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.3656d , 1.1831d , 0.799d)}
        {(-0.416d , 1.157d , 0.9553d)}
        {(-0.4656d , 1.2966d , 0.836d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.6022d , 0.8824d , 1.498d)}
        {(-0.5971d , 1.0536d , 1.341d)}
        {(-0.8308d , 1.0471d , 1.352d)}
        {(-0.8017d , 0.8769d , 1.5073d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.0d , 0.5434d , 0.4028d)}
        {(0.9656d , 0.8168d , 0.2262d)}
        {(0.5344d , 0.8168d , 0.2262d)}
        {(0.5d , 0.5434d , 0.4028d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4656d , 1.6033d , 0.9029d)}
        {(-0.0344d , 1.6033d , 0.9029d)}
        {(-0.0344d , 1.4661d , 0.2895d)}
        {(-0.4656d , 1.4661d , 0.2895d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 1.1629d , 0.3708d)}
        {(-0.1344d , 1.0443d , 0.3887d)}
        {(-0.0756d , 0.8877d , 0.361d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4244d , 1.0743d , 0.7232d)}
        {(-0.4656d , 1.2966d , 0.836d)}
        {(-0.4656d , 1.6033d , 0.9029d)}
        {(-0.4656d , 1.4661d , 0.2895d)}
        {(-0.4656d , 1.1629d , 0.3708d)}
        {(-0.4244d , 1.0045d , 0.5163d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0756d , 1.0045d , 0.5163d)}
        {(-0.4244d , 1.0045d , 0.5163d)}
        {(-0.3656d , 1.0443d , 0.3887d)}
        {(-0.1344d , 1.0443d , 0.3887d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4244d , 1.0045d , 0.5163d)}
        {(-0.4656d , 1.1629d , 0.3708d)}
        {(-0.3656d , 1.0443d , 0.3887d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9035d , 0.1558d , 0.7779d)}
        {(1.0639d , 0.2579d , 0.4135d)}
        {(0.5319d , 0.2579d , 0.4135d)}
        {(0.1861d , -0.0867d , 0.5928d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0332d , 1.3148d , 0.2953d)}
        {(0.0383d , 1.6146d , 0.2026d)}
        {(0.0344d , 0.9951d , -0.2065d)}
        {(0.0143d , 0.8746d , 0.0289d)}
        {(0.0339d , 0.749d , 0.263d)}
        {(0.0314d , 1.0129d , 0.3531d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0067d , 0.7646d , 0.0758d)}
        {(-0.0058d , 0.4862d , 0.4175d)}
        {(0.0339d , 0.749d , 0.263d)}
        {(0.0143d , 0.8746d , 0.0289d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.0888d , -0.2968d , 0.9382d)}
        {(0.9035d , 0.1558d , 0.7779d)}
        {(0.1861d , -0.0867d , 0.5928d)}
        {(0.5357d , -0.7547d , 0.8425d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5182d , 0.7638d , 0.5097d)}
        {(-0.6363d , 0.6554d , 0.5224d)}
        {(-0.562d , 0.5221d , 0.5722d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.1861d , -0.0867d , 0.5928d)}
        {(0.5319d , 0.2579d , 0.4135d)}
        {(0.0012d , 0.0408d , 0.3282d)}
        {(0.0d , -0.5021d , 0.4135d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9713d , 0.4026d , 0.5932d)}
        {(-0.5183d , 0.3977d , 0.5397d)}
        {(-0.562d , 0.5221d , 0.5722d)}
        {(-0.9083d , 0.5126d , 0.5884d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.5565d , -0.2313d , 0.5826d)}
        {(0.9585d , -1.2868d , -0.3676d)}
        {(1.0639d , 0.2579d , -0.4135d)}
        {(1.3712d , 0.2213d , 0.4222d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0d , 0.7161d , -0.2999d)}
        {(-0.518d , 0.4267d , -0.1751d)}
        {(-0.4656d , 1.0471d , -0.1679d)}
        {(-0.0344d , 1.0471d , -0.1679d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4656d , 0.8693d , 0.0154d)}
        {(-0.4656d , 1.0471d , -0.1679d)}
        {(-0.518d , 0.4267d , -0.1751d)}
        {(-0.5044d , 0.4892d , 0.2071d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5365d , 0.5789d , 0.296d)}
        {(-0.5044d , 0.4892d , 0.2071d)}
        {(-0.518d , 0.4267d , -0.1751d)}
        {(-0.5547d , 0.6816d , 0.0269d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9836d , 0.2625d , 0.4114d)}
        {(-0.4863d , 0.2887d , 0.39d)}
        {(-0.5183d , 0.3977d , 0.5397d)}
        {(-0.9713d , 0.4026d , 0.5932d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9966d , 0.5685d , -0.0164d)}
        {(-0.9906d , 0.9723d , 0.361d)}
        {(-0.5379d , 0.9847d , 0.3398d)}
        {(-0.5547d , 0.6816d , 0.0269d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0012d , 0.0408d , 0.3282d)}
        {(-0.5166d , 0.0967d , 0.5512d)}
        {(-0.5319d , -0.5021d , 0.7935d)}
        {(0.0d , -0.5021d , 0.4135d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9083d , 0.5126d , 0.5884d)}
        {(-0.971d , 0.7513d , 0.5309d)}
        {(-0.9906d , 0.9723d , 0.361d)}
        {(-0.9966d , 0.5685d , -0.0164d)}
        {(-0.9713d , 0.4026d , 0.5932d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.5565d , -0.2313d , 0.5826d)}
        {(1.0888d , -0.2968d , 0.9382d)}
        {(0.9585d , -1.2868d , 0.3807d)}
        {(0.9585d , -1.2868d , -0.3676d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-1.0032d , 0.072d , 0.4709d)}
        {(-0.5166d , 0.0967d , 0.5512d)}
        {(-0.4863d , 0.2887d , 0.39d)}
        {(-0.9836d , 0.2625d , 0.4114d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0d , 0.2579d , -0.4135d)}
        {(-0.5383d , 0.2161d , -0.3056d)}
        {(-0.518d , 0.4267d , -0.1751d)}
        {(0.0d , 0.7161d , -0.2999d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5319d , -0.5021d , 0.7935d)}
        {(-0.5166d , 0.0967d , 0.5512d)}
        {(-1.0032d , 0.072d , 0.4709d)}
        {(-1.0639d , -0.5021d , 0.4135d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0042d , -1.2868d , 0.3807d)}
        {(0.0d , -0.5021d , 0.4135d)}
        {(-0.5319d , -0.5021d , 0.7935d)}
        {(-0.4855d , -1.2868d , 0.3807d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5319d , -0.5021d , 0.7935d)}
        {(-1.0639d , -0.5021d , 0.4135d)}
        {(-0.967d , -1.2868d , 0.3807d)}
        {(-0.4855d , -1.2868d , 0.3807d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5319d , 0.2579d , -0.4135d)}
        {(1.0639d , 0.2579d , -0.4135d)}
        {(0.9585d , -1.2868d , -0.3676d)}
        {(-0.967d , -1.2868d , -0.3676d)}
        {(-1.0073d , 0.1888d , -0.2479d)}
        {(-0.5383d , 0.2161d , -0.3056d)}
        {(0.0d , 0.2579d , -0.4135d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.7413d , -1.7574d , 0.4143d)}
        {(0.9585d , -1.2868d , 0.3807d)}
        {(-0.0042d , -1.2868d , 0.3807d)}
        {(-0.4855d , -1.2868d , 0.3807d)}
        {(-0.967d , -1.2868d , 0.3807d)}
        {(-0.7497d , -1.7574d , 0.4143d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.967d , -1.2868d , -0.3676d)}
        {(0.9585d , -1.2868d , -0.3676d)}
        {(0.7413d , -1.7574d , -0.4012d)}
        {(-0.7497d , -1.7574d , -0.4012d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.518d , 0.4267d , -0.1751d)}
        {(-0.5383d , 0.2161d , -0.3056d)}
        {(-1.0073d , 0.1888d , -0.2479d)}
        {(-0.9854d , 0.3847d , -0.1321d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9854d , 0.3847d , -0.1321d)}
        {(-0.9836d , 0.2625d , 0.4114d)}
        {(-0.9713d , 0.4026d , 0.5932d)}
        {(-0.9966d , 0.5685d , -0.0164d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4656d , 0.6916d , 0.1987d)}
        {(-0.4656d , 0.8693d , 0.0154d)}
        {(-0.5044d , 0.4892d , 0.2071d)}
        {(-0.4863d , 0.2887d , 0.39d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.8322d , 0.7461d , 0.8924d)}
        {(-0.6221d , 0.7519d , 0.8825d)}
        {(-0.5587d , 0.6876d , 0.9223d)}
        {(-0.888d , 0.6785d , 0.9377d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4244d , 0.8877d , 0.361d)}
        {(-0.3656d , 1.0443d , 0.3887d)}
        {(-0.4656d , 1.1629d , 0.3708d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.8643d , 0.833d , 1.4185d)}
        {(-0.8635d , 0.8642d , 1.454d)}
        {(-0.8417d , 1.0265d , 1.1132d)}
        {(-0.9158d , 1.0775d , 1.0458d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.8417d , 1.0265d , 1.1132d)}
        {(-0.8308d , 1.0471d , 1.352d)}
        {(-0.5971d , 1.0536d , 1.341d)}
        {(-0.6075d , 1.033d , 1.1023d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.3866d , 1.5791d , 1.0481d)}
        {(-0.3964d , 1.6523d , 1.1562d)}
        {(-0.1419d , 1.6523d , 1.1562d)}
        {(-0.1328d , 1.5791d , 1.0481d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(1.642d , 0.282d , 1.0106d)}
        {(1.6938d , 0.1588d , 1.0491d)}
        {(1.6284d , 0.0719d , 1.0537d)}
        {(1.6098d , 0.2425d , 0.9702d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.4912d , 0.4059d , 0.837d)}
        {(1.6639d , 0.6263d , 1.3225d)}
        {(1.6669d , 0.5871d , 1.26d)}
        {(1.4926d , 0.3947d , 0.9527d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5747d , 2.2072d , 0.8614d)}
        {(0.5344d , 2.0153d , 0.277d)}
        {(0.5344d , 1.746d , 0.4382d)}
        {(0.5647d , 1.7067d , 0.6559d)}
        {(0.5836d , 1.9194d , 0.8742d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4549d , 1.4859d , 0.8365d)}
        {(0.4566d , 1.7922d , 0.905d)}
        {(0.4117d , 1.6316d , 1.4618d)}
        {(0.4129d , 1.4402d , 1.3089d)}
        {(0.4392d , 1.3022d , 0.9919d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.6098d , 0.2425d , 0.9702d)}
        {(1.6553d , 0.2217d , 0.8927d)}
        {(1.4912d , 0.4059d , 0.837d)}
        {(1.4926d , 0.3947d , 0.9527d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.4702d , 0.5912d , 1.5095d)}
        {(1.6639d , 0.6263d , 1.3225d)}
        {(1.4912d , 0.4059d , 0.837d)}
        {(1.2792d , 0.4091d , 1.0483d)}
        {(1.2338d , 0.3706d , 1.3535d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5647d , 1.7067d , 0.6559d)}
        {(0.5344d , 1.746d , 0.4382d)}
        {(0.6189d , 1.6632d , 0.4579d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.2338d , 0.3706d , 1.3535d)}
        {(1.2792d , 0.4091d , 1.0483d)}
        {(1.2302d , 0.3046d , 1.1685d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.3403d , 0.1103d , 1.4457d)}
        {(1.2338d , 0.3706d , 1.3535d)}
        {(1.2302d , 0.3046d , 1.1685d)}
        {(1.3373d , 0.0428d , 1.2612d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.8059d , 0.2572d , 1.4527d)}
        {(1.6201d , 0.2249d , 1.6393d)}
        {(1.3403d , 0.1103d , 1.4457d)}
        {(1.458d , -0.0459d , 1.209d)}
        {(1.6436d , -0.0147d , 0.9862d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.3292d , 1.3739d , 0.7955d)}
        {(0.4549d , 1.4859d , 0.8365d)}
        {(0.4392d , 1.3022d , 0.9919d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5344d , 1.746d , 0.4382d)}
        {(0.5553d , 1.4892d , 0.4601d)}
        {(0.6189d , 1.6632d , 0.4579d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.0768d , 1.5061d , 1.3477d)}
        {(-0.1328d , 1.5791d , 1.0481d)}
        {(-0.1419d , 1.6523d , 1.1562d)}
        {(-0.1604d , 1.5634d , 1.3977d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.2792d , 0.4091d , 1.0483d)}
        {(1.1042d , 0.2448d , 1.0582d)}
        {(1.2302d , 0.3046d , 1.1685d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4129d , 1.4402d , 1.3089d)}
        {(0.0446d , 1.4441d , 1.3011d)}
        {(0.029d , 1.3065d , 0.9832d)}
        {(0.4392d , 1.3022d , 0.9919d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.0768d , 1.5061d , 1.3477d)}
        {(-0.1604d , 1.5634d , 1.3977d)}
        {(-0.3778d , 1.5634d , 1.3977d)}
        {(-0.4238d , 1.5061d , 1.3477d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0658d , 1.3221d , 1.4542d)}
        {(-0.0658d , 1.5074d , 1.3864d)}
        {(-0.4342d , 1.5074d , 1.3864d)}
        {(-0.4342d , 1.3221d , 1.4542d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9656d , 1.3233d , 0.2067d)}
        {(0.8811d , 1.2731d , 0.2677d)}
        {(0.9447d , 1.1023d , 0.3039d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.3373d , 0.0428d , 1.2612d)}
        {(1.2302d , 0.3046d , 1.1685d)}
        {(1.1042d , 0.2448d , 1.0582d)}
        {(1.2309d , -0.0648d , 1.1679d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.3778d , 1.5634d , 1.3977d)}
        {(-0.3964d , 1.6523d , 1.1562d)}
        {(-0.3866d , 1.5791d , 1.0481d)}
        {(-0.4238d , 1.5061d , 1.3477d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0446d , 1.4441d , 1.3011d)}
        {(0.0434d , 1.6355d , 1.454d)}
        {(0.0255d , 1.7967d , 0.8959d)}
        {(0.0238d , 1.4904d , 0.8274d)}
        {(0.029d , 1.3065d , 0.9832d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4566d , 1.7922d , 0.905d)}
        {(0.4694d , 1.6101d , 0.2117d)}
        {(0.0383d , 1.6146d , 0.2026d)}
        {(0.0255d , 1.7967d , 0.8959d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 1.6033d , 0.9029d)}
        {(-0.0658d , 1.5074d , 1.3864d)}
        {(-0.0658d , 1.3221d , 1.4542d)}
        {(-0.084d , 1.157d , 0.9553d)}
        {(-0.0344d , 1.2966d , 0.836d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5553d , 1.1023d , 0.3039d)}
        {(0.9447d , 1.1023d , 0.3039d)}
        {(0.8811d , 1.2731d , 0.2677d)}
        {(0.6189d , 1.2731d , 0.2677d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.6189d , 1.2731d , 0.2677d)}
        {(0.5344d , 1.3233d , 0.2067d)}
        {(0.5553d , 1.1023d , 0.3039d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9656d , 0.9474d , -0.2262d)}
        {(0.9656d , 1.4798d , -0.0654d)}
        {(0.9656d , 1.3233d , 0.2067d)}
        {(0.9447d , 1.1023d , 0.3039d)}
        {(0.9656d , 0.8168d , 0.2262d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4643d , 1.3103d , 0.3044d)}
        {(0.3372d , 1.1897d , 0.3196d)}
        {(0.4625d , 1.0099d , 0.3592d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.1042d , 0.2448d , 1.0582d)}
        {(0.9035d , 0.1558d , 0.7779d)}
        {(1.0888d , -0.2968d , 0.9382d)}
        {(1.2309d , -0.0648d , 1.1679d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9656d , 0.8168d , 0.2262d)}
        {(0.9447d , 1.1023d , 0.3039d)}
        {(0.5553d , 1.1023d , 0.3039d)}
        {(0.5344d , 0.8168d , 0.2262d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4581d , 1.1618d , 0.5227d)}
        {(0.027d , 1.1663d , 0.5136d)}
        {(0.1568d , 1.1915d , 0.3157d)}
        {(0.3372d , 1.1897d , 0.3196d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4342d , 1.3221d , 1.4542d)}
        {(-0.4342d , 1.5074d , 1.3864d)}
        {(-0.4656d , 1.6033d , 0.9029d)}
        {(-0.4656d , 1.2966d , 0.836d)}
        {(-0.416d , 1.157d , 0.9553d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0314d , 1.0129d , 0.3531d)}
        {(0.4625d , 1.0099d , 0.3592d)}
        {(0.3372d , 1.1897d , 0.3196d)}
        {(0.1568d , 1.1915d , 0.3157d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0314d , 1.0129d , 0.3531d)}
        {(0.1568d , 1.1915d , 0.3157d)}
        {(0.0332d , 1.3148d , 0.2953d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 1.6033d , 0.9029d)}
        {(-0.0344d , 1.2966d , 0.836d)}
        {(-0.0756d , 1.0743d , 0.7232d)}
        {(-0.0756d , 1.0045d , 0.5163d)}
        {(-0.0344d , 1.1629d , 0.3708d)}
        {(-0.0344d , 1.4661d , 0.2895d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.1487d , 1.3758d , 0.7917d)}
        {(0.029d , 1.3065d , 0.9832d)}
        {(0.0238d , 1.4904d , 0.8274d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5747d , 2.2072d , 0.8614d)}
        {(0.9253d , 2.2072d , 0.8614d)}
        {(0.9177d , 2.2955d , 0.6984d)}
        {(0.5823d , 2.2955d , 0.6984d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.3467d , 1.81d , 1.47d)}
        {(0.4141d , 1.7692d , 1.3984d)}
        {(0.3635d , 1.7629d , 1.0299d)}
        {(0.3737d , 1.8401d , 1.1475d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4117d , 1.6316d , 1.4618d)}
        {(0.4141d , 1.7692d , 1.3984d)}
        {(0.0458d , 1.769d , 1.39d)}
        {(0.0434d , 1.6355d , 1.454d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.5823d , 2.2955d , 0.6984d)}
        {(0.6449d , 2.3735d , 0.7793d)}
        {(0.627d , 2.2102d , 0.4293d)}
        {(0.5904d , 2.0801d , 0.3833d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4129d , 1.4402d , 1.3089d)}
        {(0.4117d , 1.6316d , 1.4618d)}
        {(0.0434d , 1.6355d , 1.454d)}
        {(0.0446d , 1.4441d , 1.3011d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9656d , 1.746d , 0.4382d)}
        {(0.8811d , 1.6632d , 0.4579d)}
        {(0.9447d , 1.4892d , 0.4601d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5747d , 2.2072d , 0.8614d)}
        {(0.5823d , 2.2955d , 0.6984d)}
        {(0.5904d , 2.0801d , 0.3833d)}
        {(0.5344d , 2.0153d , 0.277d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9447d , 1.3672d , 0.4014d)}
        {(0.8811d , 1.2731d , 0.2677d)}
        {(0.9656d , 1.3233d , 0.2067d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0658d , 1.5074d , 1.3864d)}
        {(-0.0768d , 1.5061d , 1.3477d)}
        {(-0.4238d , 1.5061d , 1.3477d)}
        {(-0.4342d , 1.5074d , 1.3864d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9447d , 1.3672d , 0.4014d)}
        {(0.9656d , 1.3233d , 0.2067d)}
        {(0.9656d , 1.4798d , -0.0654d)}
        {(0.9656d , 2.0153d , 0.277d)}
        {(0.9656d , 1.746d , 0.4382d)}
        {(0.9447d , 1.4892d , 0.4601d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.1487d , 1.3758d , 0.7917d)}
        {(0.3292d , 1.3739d , 0.7955d)}
        {(0.4392d , 1.3022d , 0.9919d)}
        {(0.029d , 1.3065d , 0.9832d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.1344d , 1.1831d , 0.799d)}
        {(-0.0344d , 1.2966d , 0.836d)}
        {(-0.084d , 1.157d , 0.9553d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.4912d , 0.4059d , 0.837d)}
        {(1.3712d , 0.2213d , 0.4222d)}
        {(0.9035d , 0.1558d , 0.7779d)}
        {(1.1042d , 0.2448d , 1.0582d)}
        {(1.2792d , 0.4091d , 1.0483d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0658d , 1.3221d , 1.4542d)}
        {(-0.4342d , 1.3221d , 1.4542d)}
        {(-0.416d , 1.157d , 0.9553d)}
        {(-0.084d , 1.157d , 0.9553d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.1344d , 1.1831d , 0.799d)}
        {(-0.084d , 1.157d , 0.9553d)}
        {(-0.416d , 1.157d , 0.9553d)}
        {(-0.3656d , 1.1831d , 0.799d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.027d , 1.1663d , 0.5136d)}
        {(0.0332d , 1.3148d , 0.2953d)}
        {(0.1568d , 1.1915d , 0.3157d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.6075d , 1.033d , 1.1023d)}
        {(-0.545d , 0.873d , 1.4391d)}
        {(-0.5458d , 0.8417d , 1.4036d)}
        {(-0.5429d , 1.0878d , 1.0284d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9656d , 0.9474d , -0.2262d)}
        {(0.5344d , 0.9474d , -0.2262d)}
        {(0.5344d , 1.4798d , -0.0654d)}
        {(0.9656d , 1.4798d , -0.0654d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5d , 0.5434d , 0.4028d)}
        {(0.5344d , 0.8168d , 0.2262d)}
        {(0.5257d , 0.8667d , 0.0133d)}
        {(0.4991d , 0.7775d , 0.0834d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.6075d , 1.033d , 1.1023d)}
        {(-0.5429d , 1.0878d , 1.0284d)}
        {(-0.9158d , 1.0775d , 1.0458d)}
        {(-0.8417d , 1.0265d , 1.1132d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5429d , 1.0878d , 1.0284d)}
        {(-0.5458d , 0.8417d , 1.4036d)}
        {(-0.5454d , 0.6813d , 1.3187d)}
        {(-0.5587d , 0.6876d , 0.9223d)}
        {(-0.5435d , 0.8775d , 0.8927d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4738d , 0.8592d , 0.0346d)}
        {(0.4991d , 0.7775d , 0.0834d)}
        {(0.5d , 0.7161d , -0.2999d)}
        {(0.4656d , 0.9951d , -0.2065d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0756d , 0.8877d , 0.361d)}
        {(-0.1344d , 1.0443d , 0.3887d)}
        {(-0.3656d , 1.0443d , 0.3887d)}
        {(-0.4244d , 0.8877d , 0.361d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.8643d , 0.833d , 1.4185d)}
        {(-0.9158d , 1.0775d , 1.0458d)}
        {(-0.9163d , 0.8673d , 0.9102d)}
        {(-0.888d , 0.6785d , 0.9377d)}
        {(-0.8639d , 0.6726d , 1.3336d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.888d , 0.6785d , 0.9377d)}
        {(-0.9163d , 0.8673d , 0.9102d)}
        {(-0.8322d , 0.7461d , 0.8924d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5535d , 0.6462d , 0.8277d)}
        {(-0.8998d , 0.6366d , 0.8439d)}
        {(-0.9071d , 0.5739d , 0.6509d)}
        {(-0.5608d , 0.5834d , 0.6347d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.0888d , -0.2968d , 0.9382d)}
        {(0.5357d , -0.7547d , 0.8425d)}
        {(0.9585d , -1.2868d , 0.3807d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5608d , 0.5834d , 0.6347d)}
        {(-0.9071d , 0.5739d , 0.6509d)}
        {(-0.8464d , 0.6496d , 0.5323d)}
        {(-0.6363d , 0.6554d , 0.5224d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5183d , 0.3977d , 0.5397d)}
        {(-0.4863d , 0.2887d , 0.39d)}
        {(-0.5044d , 0.4892d , 0.2071d)}
        {(-0.5365d , 0.5789d , 0.296d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.8464d , 0.6496d , 0.5323d)}
        {(-0.971d , 0.7513d , 0.5309d)}
        {(-0.9083d , 0.5126d , 0.5884d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5182d , 0.7638d , 0.5097d)}
        {(-0.562d , 0.5221d , 0.5722d)}
        {(-0.5183d , 0.3977d , 0.5397d)}
        {(-0.5365d , 0.5789d , 0.296d)}
        {(-0.5547d , 0.6816d , 0.0269d)}
        {(-0.5379d , 0.9847d , 0.3398d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4863d , 0.2887d , 0.39d)}
        {(-0.5166d , 0.0967d , 0.5512d)}
        {(0.0012d , 0.0408d , 0.3282d)}
        {(-0.0058d , 0.4862d , 0.4175d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5d , 0.7161d , -0.2999d)}
        {(0.5319d , 0.2579d , -0.4135d)}
        {(0.0d , 0.2579d , -0.4135d)}
        {(0.0d , 0.7161d , -0.2999d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9585d , -1.2868d , 0.3807d)}
        {(0.5357d , -0.7547d , 0.8425d)}
        {(-0.0042d , -1.2868d , 0.3807d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5357d , -0.7547d , 0.8425d)}
        {(0.1861d , -0.0867d , 0.5928d)}
        {(0.0d , -0.5021d , 0.4135d)}
        {(-0.0042d , -1.2868d , 0.3807d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5547d , 0.6816d , 0.0269d)}
        {(-0.518d , 0.4267d , -0.1751d)}
        {(-0.9854d , 0.3847d , -0.1321d)}
        {(-0.9966d , 0.5685d , -0.0164d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9836d , 0.2625d , 0.4114d)}
        {(-0.9854d , 0.3847d , -0.1321d)}
        {(-1.0073d , 0.1888d , -0.2479d)}
        {(-1.0032d , 0.072d , 0.4709d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.7413d , -1.7574d , -0.4012d)}
        {(0.9585d , -1.2868d , -0.3676d)}
        {(0.9585d , -1.2868d , 0.3807d)}
        {(0.7413d , -1.7574d , 0.4143d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-1.0032d , 0.072d , 0.4709d)}
        {(-1.0073d , 0.1888d , -0.2479d)}
        {(-0.967d , -1.2868d , -0.3676d)}
        {(-0.967d , -1.2868d , 0.3807d)}
        {(-1.0639d , -0.5021d , 0.4135d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.7413d , -1.7574d , -0.4012d)}
        {(0.7413d , -1.7574d , 0.4143d)}
        {(-0.7497d , -1.7574d , 0.4143d)}
        {(-0.7497d , -1.7574d , -0.4012d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.967d , -1.2868d , 0.3807d)}
        {(-0.967d , -1.2868d , -0.3676d)}
        {(-0.7497d , -1.7574d , -0.4012d)}
        {(-0.7497d , -1.7574d , 0.4143d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9083d , 0.5126d , 0.5884d)}
        {(-0.562d , 0.5221d , 0.5722d)}
        {(-0.6363d , 0.6554d , 0.5224d)}
        {(-0.8464d , 0.6496d , 0.5323d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4863d , 0.2887d , 0.39d)}
        {(-0.0058d , 0.4862d , 0.4175d)}
        {(-0.0344d , 0.6916d , 0.1987d)}
        {(-0.4656d , 0.6916d , 0.1987d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9071d , 0.5739d , 0.6509d)}
        {(-0.971d , 0.7513d , 0.5309d)}
        {(-0.8464d , 0.6496d , 0.5323d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9163d , 0.8673d , 0.9102d)}
        {(-0.9158d , 1.0775d , 1.0458d)}
        {(-0.9906d , 0.9723d , 0.361d)}
        {(-0.971d , 0.7513d , 0.5309d)}
        {(-0.9071d , 0.5739d , 0.6509d)}
        {(-0.8998d , 0.6366d , 0.8439d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4656d , 1.1629d , 0.3708d)}
        {(-0.4656d , 1.4661d , 0.2895d)}
        {(-0.4656d , 1.0471d , -0.1679d)}
        {(-0.4656d , 0.8693d , 0.0154d)}
        {(-0.4656d , 0.6916d , 0.1987d)}
        {(-0.4244d , 0.8877d , 0.361d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0067d , 0.7646d , 0.0758d)}
        {(0.0143d , 0.8746d , 0.0289d)}
        {(0.0344d , 0.9951d , -0.2065d)}
        {(0.0d , 0.7161d , -0.2999d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.8322d , 0.7461d , 0.8924d)}
        {(-0.9163d , 0.8673d , 0.9102d)}
        {(-0.8998d , 0.6366d , 0.8439d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 1.4661d , 0.2895d)}
        {(-0.0344d , 1.1629d , 0.3708d)}
        {(-0.0756d , 0.8877d , 0.361d)}
        {(-0.0344d , 0.6916d , 0.1987d)}
        {(-0.0147d , 0.8724d , 0.0171d)}
        {(-0.0344d , 1.0471d , -0.1679d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5454d , 0.6813d , 1.3187d)}
        {(-0.8639d , 0.6726d , 1.3336d)}
        {(-0.888d , 0.6785d , 0.9377d)}
        {(-0.5587d , 0.6876d , 0.9223d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5535d , 0.6462d , 0.8277d)}
        {(-0.5435d , 0.8775d , 0.8927d)}
        {(-0.6221d , 0.7519d , 0.8825d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5344d , 0.9474d , -0.2262d)}
        {(0.5d , 0.7161d , -0.2999d)}
        {(0.4991d , 0.7775d , 0.0834d)}
        {(0.5257d , 0.8667d , 0.0133d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4244d , 1.0743d , 0.7232d)}
        {(-0.3656d , 1.1831d , 0.799d)}
        {(-0.4656d , 1.2966d , 0.836d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.1487d , 1.3758d , 0.7917d)}
        {(0.0238d , 1.4904d , 0.8274d)}
        {(0.0245d , 1.2237d , 0.664d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.6436d , -0.0147d , 0.9862d)}
        {(1.6284d , 0.0719d , 1.0537d)}
        {(1.7961d , 0.2803d , 1.356d)}
        {(1.8059d , 0.2572d , 1.4527d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9177d , 2.2955d , 0.6984d)}
        {(0.9253d , 2.2072d , 0.8614d)}
        {(0.9656d , 2.0153d , 0.277d)}
        {(0.9096d , 2.0801d , 0.3833d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.116d , 1.8099d , 1.4647d)}
        {(0.0458d , 1.769d , 1.39d)}
        {(0.4141d , 1.7692d , 1.3984d)}
        {(0.3467d , 1.81d , 1.47d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9164d , 1.9194d , 0.8742d)}
        {(0.5836d , 1.9194d , 0.8742d)}
        {(0.5647d , 1.7067d , 0.6559d)}
        {(0.9353d , 1.7067d , 0.6559d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.75d , 2.1179d , 0.3367d)}
        {(0.75d , 2.0555d , 0.2325d)}
        {(0.5344d , 2.0153d , 0.277d)}
        {(0.5904d , 2.0801d , 0.3833d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(1.7731d , 0.5613d , 1.3205d)}
        {(1.857d , 0.362d , 1.3829d)}
        {(1.6938d , 0.1588d , 1.0491d)}
        {(1.642d , 0.282d , 1.0106d)}
        {(1.5902d , 0.4052d , 0.972d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.6553d , 0.2217d , 0.8927d)}
        {(1.6098d , 0.2425d , 0.9702d)}
        {(1.6284d , 0.0719d , 1.0537d)}
        {(1.6436d , -0.0147d , 0.9862d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.458d , -0.0459d , 1.209d)}
        {(1.3403d , 0.1103d , 1.4457d)}
        {(1.3373d , 0.0428d , 1.2612d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.8811d , 1.6632d , 0.4579d)}
        {(0.6189d , 1.6632d , 0.4579d)}
        {(0.5553d , 1.4892d , 0.4601d)}
        {(0.9447d , 1.4892d , 0.4601d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.458d , -0.0459d , 1.209d)}
        {(1.3373d , 0.0428d , 1.2612d)}
        {(1.2309d , -0.0648d , 1.1679d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9447d , 1.3672d , 0.4014d)}
        {(0.5553d , 1.3672d , 0.4014d)}
        {(0.6189d , 1.2731d , 0.2677d)}
        {(0.8811d , 1.2731d , 0.2677d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.75d , 2.0555d , 0.2325d)}
        {(0.9656d , 2.0153d , 0.277d)}
        {(0.9656d , 1.4798d , -0.0654d)}
        {(0.5344d , 1.4798d , -0.0654d)}
        {(0.5344d , 2.0153d , 0.277d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4556d , 1.2192d , 0.6731d)}
        {(0.3292d , 1.3739d , 0.7955d)}
        {(0.1487d , 1.3758d , 0.7917d)}
        {(0.0245d , 1.2237d , 0.664d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5344d , 2.0153d , 0.277d)}
        {(0.5344d , 1.4798d , -0.0654d)}
        {(0.5344d , 1.3233d , 0.2067d)}
        {(0.5553d , 1.3672d , 0.4014d)}
        {(0.5553d , 1.4892d , 0.4601d)}
        {(0.5344d , 1.746d , 0.4382d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0255d , 1.7967d , 0.8959d)}
        {(0.0383d , 1.6146d , 0.2026d)}
        {(0.0332d , 1.3148d , 0.2953d)}
        {(0.027d , 1.1663d , 0.5136d)}
        {(0.0245d , 1.2237d , 0.664d)}
        {(0.0238d , 1.4904d , 0.8274d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0756d , 1.0743d , 0.7232d)}
        {(-0.1344d , 1.1831d , 0.799d)}
        {(-0.3656d , 1.1831d , 0.799d)}
        {(-0.4244d , 1.0743d , 0.7232d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.545d , 0.873d , 1.4391d)}
        {(-0.6022d , 0.8824d , 1.498d)}
        {(-0.8017d , 0.8769d , 1.5073d)}
        {(-0.8635d , 0.8642d , 1.454d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4738d , 0.8592d , 0.0346d)}
        {(0.4651d , 0.749d , 0.263d)}
        {(0.5d , 0.5434d , 0.4028d)}
        {(0.4991d , 0.7775d , 0.0834d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5344d , 1.3233d , 0.2067d)}
        {(0.5344d , 1.4798d , -0.0654d)}
        {(0.5344d , 0.9474d , -0.2262d)}
        {(0.5257d , 0.8667d , 0.0133d)}
        {(0.5344d , 0.8168d , 0.2262d)}
        {(0.5553d , 1.1023d , 0.3039d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.0639d , 0.2579d , 0.4135d)}
        {(1.0d , 0.5434d , 0.4028d)}
        {(0.5d , 0.5434d , 0.4028d)}
        {(0.5319d , 0.2579d , 0.4135d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.3712d , 0.2213d , 0.4222d)}
        {(1.0639d , 0.2579d , -0.4135d)}
        {(1.0639d , 0.2579d , 0.4135d)}
        {(0.9035d , 0.1558d , 0.7779d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4651d , 0.749d , 0.263d)}
        {(0.4625d , 1.0099d , 0.3592d)}
        {(0.0314d , 1.0129d , 0.3531d)}
        {(0.0339d , 0.749d , 0.263d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9656d , 0.9474d , -0.2262d)}
        {(1.0d , 0.7161d , -0.2999d)}
        {(0.5d , 0.7161d , -0.2999d)}
        {(0.5344d , 0.9474d , -0.2262d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0383d , 1.6146d , 0.2026d)}
        {(0.4694d , 1.6101d , 0.2117d)}
        {(0.4656d , 0.9951d , -0.2065d)}
        {(0.0344d , 0.9951d , -0.2065d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5435d , 0.8775d , 0.8927d)}
        {(-0.5587d , 0.6876d , 0.9223d)}
        {(-0.6221d , 0.7519d , 0.8825d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.3866d , 1.5791d , 1.0481d)}
        {(-0.1328d , 1.5791d , 1.0481d)}
        {(-0.0344d , 1.6033d , 0.9029d)}
        {(-0.4656d , 1.6033d , 0.9029d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5836d , 1.9194d , 0.8742d)}
        {(0.9164d , 1.9194d , 0.8742d)}
        {(0.9253d , 2.2072d , 0.8614d)}
        {(0.5747d , 2.2072d , 0.8614d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.3403d , 0.1103d , 1.4457d)}
        {(1.6201d , 0.2249d , 1.6393d)}
        {(1.4702d , 0.5912d , 1.5095d)}
        {(1.2338d , 0.3706d , 1.3535d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4549d , 1.4859d , 0.8365d)}
        {(0.3292d , 1.3739d , 0.7955d)}
        {(0.4556d , 1.2192d , 0.6731d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9447d , 1.3672d , 0.4014d)}
        {(0.9447d , 1.4892d , 0.4601d)}
        {(0.5553d , 1.4892d , 0.4601d)}
        {(0.5553d , 1.3672d , 0.4014d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4342d , 1.5074d , 1.3864d)}
        {(-0.4238d , 1.5061d , 1.3477d)}
        {(-0.3866d , 1.5791d , 1.0481d)}
        {(-0.4656d , 1.6033d , 0.9029d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.6189d , 1.2731d , 0.2677d)}
        {(0.5553d , 1.3672d , 0.4014d)}
        {(0.5344d , 1.3233d , 0.2067d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4549d , 1.4859d , 0.8365d)}
        {(0.4556d , 1.2192d , 0.6731d)}
        {(0.4581d , 1.1618d , 0.5227d)}
        {(0.4643d , 1.3103d , 0.3044d)}
        {(0.4694d , 1.6101d , 0.2117d)}
        {(0.4566d , 1.7922d , 0.905d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4581d , 1.1618d , 0.5227d)}
        {(0.3372d , 1.1897d , 0.3196d)}
        {(0.4643d , 1.3103d , 0.3044d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.6553d , 0.2217d , 0.8927d)}
        {(1.6436d , -0.0147d , 0.9862d)}
        {(1.5565d , -0.2313d , 0.5826d)}
        {(1.3712d , 0.2213d , 0.4222d)}
        {(1.4912d , 0.4059d , 0.837d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0756d , 1.0743d , 0.7232d)}
        {(-0.0344d , 1.2966d , 0.836d)}
        {(-0.1344d , 1.1831d , 0.799d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.9656d , 0.9474d , -0.2262d)}
        {(0.9656d , 0.8168d , 0.2262d)}
        {(1.0d , 0.5434d , 0.4028d)}
        {(1.0d , 0.7161d , -0.2999d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5458d , 0.8417d , 1.4036d)}
        {(-0.545d , 0.873d , 1.4391d)}
        {(-0.8635d , 0.8642d , 1.454d)}
        {(-0.8643d , 0.833d , 1.4185d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(-0.8017d , 0.8769d , 1.5073d)}
        {(-0.8308d , 1.0471d , 1.352d)}
        {(-0.8417d , 1.0265d , 1.1132d)}
        {(-0.8635d , 0.8642d , 1.454d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 1.1629d , 0.3708d)}
        {(-0.0756d , 1.0045d , 0.5163d)}
        {(-0.1344d , 1.0443d , 0.3887d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4656d , 0.9951d , -0.2065d)}
        {(0.4694d , 1.6101d , 0.2117d)}
        {(0.4643d , 1.3103d , 0.3044d)}
        {(0.4625d , 1.0099d , 0.3592d)}
        {(0.4651d , 0.749d , 0.263d)}
        {(0.4738d , 0.8592d , 0.0346d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5454d , 0.6813d , 1.3187d)}
        {(-0.5458d , 0.8417d , 1.4036d)}
        {(-0.8643d , 0.833d , 1.4185d)}
        {(-0.8639d , 0.6726d , 1.3336d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0756d , 1.0743d , 0.7232d)}
        {(-0.4244d , 1.0743d , 0.7232d)}
        {(-0.4244d , 1.0045d , 0.5163d)}
        {(-0.0756d , 1.0045d , 0.5163d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.0d , 0.7161d , -0.2999d)}
        {(1.0d , 0.5434d , 0.4028d)}
        {(1.0639d , 0.2579d , 0.4135d)}
        {(1.0639d , 0.2579d , -0.4135d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5d , 0.5434d , 0.4028d)}
        {(0.4651d , 0.749d , 0.263d)}
        {(0.0339d , 0.749d , 0.263d)}
        {(-0.0058d , 0.4862d , 0.4175d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 0.6916d , 0.1987d)}
        {(-0.0058d , 0.4862d , 0.4175d)}
        {(-0.0067d , 0.7646d , 0.0758d)}
        {(-0.0147d , 0.8724d , 0.0171d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5535d , 0.6462d , 0.8277d)}
        {(-0.6221d , 0.7519d , 0.8825d)}
        {(-0.8322d , 0.7461d , 0.8924d)}
        {(-0.8998d , 0.6366d , 0.8439d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5535d , 0.6462d , 0.8277d)}
        {(-0.5608d , 0.5834d , 0.6347d)}
        {(-0.5182d , 0.7638d , 0.5097d)}
        {(-0.5379d , 0.9847d , 0.3398d)}
        {(-0.5429d , 1.0878d , 1.0284d)}
        {(-0.5435d , 0.8775d , 0.8927d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.5d , 0.7161d , -0.2999d)}
        {(1.0d , 0.7161d , -0.2999d)}
        {(1.0639d , 0.2579d , -0.4135d)}
        {(0.5319d , 0.2579d , -0.4135d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.0012d , 0.0408d , 0.3282d)}
        {(0.5319d , 0.2579d , 0.4135d)}
        {(0.5d , 0.5434d , 0.4028d)}
        {(-0.0058d , 0.4862d , 0.4175d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 1.0471d , -0.1679d)}
        {(-0.0147d , 0.8724d , 0.0171d)}
        {(-0.0067d , 0.7646d , 0.0758d)}
        {(0.0d , 0.7161d , -0.2999d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.4656d , 0.9951d , -0.2065d)}
        {(0.5d , 0.7161d , -0.2999d)}
        {(0.0d , 0.7161d , -0.2999d)}
        {(0.0344d , 0.9951d , -0.2065d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.0344d , 1.4661d , 0.2895d)}
        {(-0.0344d , 1.0471d , -0.1679d)}
        {(-0.4656d , 1.0471d , -0.1679d)}
        {(-0.4656d , 1.4661d , 0.2895d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.4656d , 0.6916d , 0.1987d)}
        {(-0.0344d , 0.6916d , 0.1987d)}
        {(-0.0756d , 0.8877d , 0.361d)}
        {(-0.4244d , 0.8877d , 0.361d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.5608d , 0.5834d , 0.6347d)}
        {(-0.6363d , 0.6554d , 0.5224d)}
        {(-0.5182d , 0.7638d , 0.5097d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(-0.9158d , 1.0775d , 1.0458d)}
        {(-0.5429d , 1.0878d , 1.0284d)}
        {(-0.5379d , 0.9847d , 0.3398d)}
        {(-0.9906d , 0.9723d , 0.361d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(0.3635d , 1.7629d , 1.0299d)}
        {(0.4566d , 1.7922d , 0.905d)}
        {(0.0255d , 1.7967d , 0.8959d)}
        {(0.1163d , 1.7627d , 1.0242d)}))
    (Polygon (color 0.886339
        0.741179
        0.721646)
      (points {(0.1036d , 1.8399d , 1.1413d)}
        {(0.1163d , 1.7627d , 1.0242d)}
        {(0.0458d , 1.769d , 1.39d)}
        {(0.116d , 1.8099d , 1.4647d)}))
    (Polygon (color 0.988158
        0.854841
        0.654865)
      (points {(1.6669d , 0.5871d , 1.26d)}
        {(1.6639d , 0.6263d , 1.3225d)}
        {(1.8059d , 0.2572d , 1.4527d)}
        {(1.7961d , 0.2803d , 1.356d)}))))
'
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> hemisphere [
	"JunOpenGL3dObject hemisphere show."

	^(self
		sphere: 10
		radius: 1
		longitude: 180
		latitude: 180)
		name: 'hemisphere'; yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> hemisphere: degrees [ 
	"(JunOpenGL3dObject hemisphere: 15) show."

	^(self
		sphere: degrees
		radius: 1
		longitude: 180
		latitude: 180)
		name: 'hemisphere'; yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> hemisphere: degrees radius: radius [ 
	"(JunOpenGL3dObject hemisphere: 15 radius: 5) show."

	^(self
		sphere: degrees
		radius: radius
		longitude: 180
		latitude: 180)
		name: 'hemisphere'; yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> hemisphere: degrees radius: radius center: center [ 
	"(JunOpenGL3dObject hemisphere: 15 radius: 5 center: 1, 1, 1) show."

	^((Jun3dTransformation align: 0 , 0 , 0 with: center)
		applyTo: (self
				sphere: degrees
				radius: radius
				longitude: 180
				latitude: 180))
		name: 'hemisphere'; yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> hemisphereFrom: fromPoint to: toPoint width: widthFactor [ 
	"((JunOpenGL3dObject hemisphereFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject hemisphereFrom: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject hemisphereFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: self xUnitHemisphere
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> icosidodecahedron [
	"(JunOpenGL3dObject icosidodecahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject icosidodecahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject icosidodecahedron)."

	| angle1 angle2 a00 a01 a02 a03 a04 a05 a06 a07 a08 a09 b01 b02 b03 b04 b06 b07 b08 b09 c00 c02 c03 c05 c07 c08 d02 d03 d07 d08 e00 e05 compoundObject aSet totalDistance originPoint aRadius scaleFactor icosidodecahedron |
	angle1 := JunAngle fromDeg: 31.717474411461d.
	angle2 := JunAngle fromDeg: 36.
	a00 := 1 , 0 , 0.
	a01 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 1) 
						product: (Jun3dTransformation rotateX: angle1)).
	a02 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 2) 
						product: (Jun3dTransformation rotateX: angle1)).
	a03 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 3) 
						product: (Jun3dTransformation rotateX: angle1)).
	a04 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 4) 
						product: (Jun3dTransformation rotateX: angle1)).
	a05 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 5) 
						product: (Jun3dTransformation rotateX: angle1)).
	a06 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 6) 
						product: (Jun3dTransformation rotateX: angle1)).
	a07 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 7) 
						product: (Jun3dTransformation rotateX: angle1)).
	a08 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 8) 
						product: (Jun3dTransformation rotateX: angle1)).
	a09 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 9) 
						product: (Jun3dTransformation rotateX: angle1)).
	b01 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 1) 
						product: (Jun3dTransformation rotateX: angle1 negated)).
	b02 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 2) 
						product: (Jun3dTransformation rotateX: angle1 negated)).
	b03 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 3) 
						product: (Jun3dTransformation rotateX: angle1 negated)).
	b04 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 4) 
						product: (Jun3dTransformation rotateX: angle1 negated)).
	b06 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 6) 
						product: (Jun3dTransformation rotateX: angle1 negated)).
	b07 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 7) 
						product: (Jun3dTransformation rotateX: angle1 negated)).
	b08 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 8) 
						product: (Jun3dTransformation rotateX: angle1 negated)).
	b09 := a00 transform: ((Jun3dTransformation rotateZ: angle2 * 9) 
						product: (Jun3dTransformation rotateX: angle1 negated)).
	c00 := 0 , 1 , 0.
	c02 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 2) 
						product: (Jun3dTransformation rotateY: angle1)).
	c03 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 3) 
						product: (Jun3dTransformation rotateY: angle1)).
	c05 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 5) 
						product: (Jun3dTransformation rotateY: angle1)).
	c07 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 7) 
						product: (Jun3dTransformation rotateY: angle1)).
	c08 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 8) 
						product: (Jun3dTransformation rotateY: angle1)).
	d02 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 2) 
						product: (Jun3dTransformation rotateY: angle1 negated)).
	d03 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 3) 
						product: (Jun3dTransformation rotateY: angle1 negated)).
	d07 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 7) 
						product: (Jun3dTransformation rotateY: angle1 negated)).
	d08 := c00 transform: ((Jun3dTransformation rotateX: angle2 * 8) 
						product: (Jun3dTransformation rotateY: angle1 negated)).
	e00 := 0 , 0 , 1.
	e05 := e00 transform: ((Jun3dTransformation rotateX: angle2 * 5) 
						product: (Jun3dTransformation rotateZ: angle1)).
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: a00
						with: b01
						with: a01)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: a05
						with: a04
						with: b04)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: a00
						with: b09
						with: a09)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: a05
						with: a06
						with: b06)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: c00
						with: a03
						with: a02)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: c05
						with: b08
						with: b07)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: c00
						with: b02
						with: b03)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: c05
						with: a07
						with: a08)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: a01
						with: b01
						with: b02) , (Array with: c00 with: a02)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: a04
						with: a03
						with: c00) , (Array with: b03 with: b04)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: b06
						with: a06
						with: a07) , (Array with: c05 with: b07)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: b09
						with: b08
						with: c05) , (Array with: a08 with: a09)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: e00
						with: d03
						with: b07) , (Array with: b08 with: c03)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: e00
						with: c02
						with: a02) , (Array with: a03 with: d02)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: e05
						with: d07
						with: a08) , (Array with: a07 with: c07)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: e05
						with: c08
						with: b03) , (Array with: b02 with: d08)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: a00
						with: a01
						with: c02) , (Array with: c03 with: b09)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: a00
						with: a09
						with: d07) , (Array with: d08 with: b01)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: a05
						with: b06
						with: d03) , (Array with: d02 with: a04)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: a05
						with: b04
						with: c08) , (Array with: c07 with: a06)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: e00
						with: c03
						with: c02)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: e00
						with: d02
						with: d03)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: e05
						with: c07
						with: c08)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: e05
						with: d08
						with: d07)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: a01
						with: a02
						with: c02)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: a03
						with: a04
						with: d02)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: b06
						with: b07
						with: d03)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: b08
						with: b09
						with: c03)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: b01
						with: d08
						with: b02)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: b03
						with: c08
						with: b04)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: a09
						with: a08
						with: d07)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: a07
						with: a06
						with: c07)).
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	icosidodecahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	icosidodecahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	icosidodecahedron flushAllPaints.
	icosidodecahedron paint: self defaultPaint.
	icosidodecahedron name: 'icosidodecahedron'.
	^icosidodecahedron
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageBMWC [
	"JunImageStream show: (JunOpenGL3dObject imageBMWC)."

	^self imageBMWC: self defaultImageSize
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageBMWC: imageSize [ 
	"JunImageStream show: (JunOpenGL3dObject imageBMWC: 256 @ 128)."

	^self imageSize: imageSize asPoint colorBlock: [:x :y | ColorValue
			red: y
			green: x
			blue: 1]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageEarth [
	"JunImageStream show: (JunOpenGL3dObject imageEarth)."

	^JunOpenGLTexture imageEarth2
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageGCWY [
	"JunImageStream show: (JunOpenGL3dObject imageGCWY)."

	^self imageGCWY: self defaultImageSize
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageGCWY: imageSize [ 
	"JunImageStream show: (JunOpenGL3dObject imageGCWY: 256 @ 128)."

	^self imageSize: imageSize asPoint colorBlock: [:x :y | ColorValue
			red: x
			green: 1
			blue: y]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageKBCG [
	"JunImageStream show: (JunOpenGL3dObject imageKBCG)."

	^self imageKBCG: self defaultImageSize
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageKBCG: imageSize [ 
	"JunImageStream show: (JunOpenGL3dObject imageKBCG: 256 @ 128)."

	^self imageSize: imageSize asPoint colorBlock: [:x :y | ColorValue
			red: 0
			green: x
			blue: y]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageKGYR [
	"JunImageStream show: (JunOpenGL3dObject imageKGYR)."

	^self imageKGYR: self defaultImageSize
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageKGYR: imageSize [ 
	"JunImageStream show: (JunOpenGL3dObject imageKGYR: 256 @ 128)."

	^self imageSize: imageSize asPoint colorBlock: [:x :y | ColorValue
			red: x
			green: y
			blue: 0]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageKRMB [
	"JunImageStream show: (JunOpenGL3dObject imageKRMB)."

	^self imageSize: self defaultImageSize colorBlock: [:x :y | ColorValue
			red: y
			green: 0
			blue: x]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageKRMB: imageSize [ 
	"JunImageStream show: (JunOpenGL3dObject imageKRMB: 256 @ 128)."

	^self imageSize: imageSize asPoint colorBlock: [:x :y | ColorValue
			red: y
			green: 0
			blue: x]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageMoon [
	"JunImageStream show: (JunOpenGL3dObject imageMoon)."

	^JunOpenGLTexture imageMoon2
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageRBBR [
	"JunImageStream show: (JunOpenGL3dObject imageRBBR)."

	^self imageRBBR: self defaultImageSize
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageRBBR: imageSize [ 
	"JunImageStream show: (JunOpenGL3dObject imageRBBR: 256 @ 128)."

	^self imageSize: imageSize asPoint colorBlock: [:x :y | ColorValue
			hue: x
			saturation: 1
			brightness: 1 - y]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageRGBR [
	"JunImageStream show: (JunOpenGL3dObject imageRGBR)."

	^self imageRGBR: self defaultImageSize
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageRGBR: imageSize [ 
	"JunImageStream show: (JunOpenGL3dObject imageRGBR: 256 @ 128)."

	^self imageSize: imageSize asPoint
		colorBlock: 
			[:x :y | 
			| aPoint aHue aSaturation |
			aPoint := x , y - (0.5 , 0.5).
			aHue := aPoint theta radiansToDegrees / 360.
			aSaturation := aPoint r / 0.5.
			ColorValue
				hue: aHue
				saturation: (aSaturation min: 1)
				brightness: 1]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageRYWM [
	"JunImageStream show: (JunOpenGL3dObject imageRYWM)."

	^self imageRYWM: self defaultImageSize
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageRYWM: imageSize [ 
	"JunImageStream show: (JunOpenGL3dObject imageRYWM: 256 @ 128)."

	^self imageSize: imageSize asPoint colorBlock: [:x :y | ColorValue
			red: 1
			green: y
			blue: x]
]

{ #category : #'typical objects image' }
JunOpenGL3dObject class >> imageSize: imageSize colorBlock: colorBlock [ 
	"JunImageStream show: (JunOpenGL3dObject imageSize: 256 colorBlock: [:x :y | ColorValue red: x green: y blue: 0])."

	| anImage divisionSize xIntervals yIntervals xHowMany yHowMany colorValue colorIndex |
	anImage := Image
				extent: imageSize asPoint
				depth: 24
				bitsPerPixel: 24
				palette: (FixedPalette
						redShift: 0
						redMask: 255
						greenShift: 8
						greenMask: 255
						blueShift: 16
						blueMask: 255).
	divisionSize := anImage width min: anImage height.
	xIntervals := JunImageAdjuster new computeIntervals: anImage width divisionSize: divisionSize.
	yIntervals := JunImageAdjuster new computeIntervals: anImage height divisionSize: divisionSize.
	xHowMany := xIntervals size - 1.
	yHowMany := yIntervals size - 1.
	(0 to: yHowMany)
		with: (1 to: yIntervals size)
		do: [:y :j | (0 to: xHowMany)
				with: (1 to: xIntervals size)
				do: 
					[:x :i | 
					colorValue := colorBlock value: x / xHowMany value: y / yHowMany.
					colorIndex := anImage palette indexOfPaintNearest: colorValue.
					(yIntervals at: j)
						do: [:n | (xIntervals at: i)
								do: [:m | anImage
										atX: m
										y: n
										put: colorIndex]]]].
	^anImage
]

{ #category : #'class initialization' }
JunOpenGL3dObject class >> initialize [
	"JunOpenGL3dObject initialize."

	IdClock := nil.
	IdNumber := nil.
	RandomStream := nil
]

{ #category : #'lisp support' }
JunOpenGL3dObject class >> loadFrom: aStream [ 
	"
	| file stream object | 
	file := JunUniFileModel requestFileName. 
	file isNil ifTrue: [^self]. 
	stream := file readStream. 
	[Cursor read showWhile: [object := JunOpenGL3dObject loadFrom: stream]] 
	valueNowOrOnUnwindDo: [stream close]. 
	^object 
	"

	| list object |
	list := self defaultLispParserClass parse: aStream.
	Cursor wait showWhile: [object := JunOpenGL3dCompoundObject objectFromLispList: list].
	^object
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> luminol [
	"(JunOpenGL3dObject luminol) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
    0.0550   -1.1096   -0.2102 C
    0.0644    0.2928   -0.3272 C
   -1.1553    0.9823   -0.4814 C
   -2.3672    0.2587   -0.4503 C
   -2.3530   -1.1152   -0.3169 C
   -1.1444   -1.8083   -0.2079 C
    1.3345   -1.8509   -0.0836 C
    2.5551   -1.1200   -0.2237 N
    2.5339    0.3012    0.0280 N
    1.3435    1.0253   -0.2575 C
    1.4557   -3.0576    0.0598 O
    1.4718    2.2454   -0.3410 O
   -1.1838    2.3649   -0.7693 N
   -3.3246    0.7874   -0.5385 H
   -3.2960   -1.6732   -0.3008 H
   -1.1447   -2.9019   -0.1179 H
    3.3937   -1.5522    0.1040 H
    3.4077    0.7430   -0.1681 H
   -0.3064    2.8181   -0.5748 H
   -1.9711    2.8279   -0.3790 H
	'.
	compoundObject name: 'luminol'.
	^compoundObject
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> melatonin [
	"(JunOpenGL3dObject melatonin) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
   -2.7056   -1.9840    1.7098 C
   -3.2980   -0.7404    1.6910 C
   -2.6216    0.4342    1.2305 C
   -1.3161    0.2911    0.7895 C
   -0.6628   -0.9700    0.7897 C
   -1.3705   -2.0868    1.2506 C
   -0.5433   -3.1822    1.1577 N
    0.6719   -2.7754    0.6469 C
    0.6431   -1.4207    0.4056 C
    1.8257   -0.6775   -0.1560 C
    1.6792    0.8300   -0.3834 C
    2.9290    1.3649   -0.9305 N
    3.0571    2.6947   -1.2234 C
    4.4127    3.0788   -1.7803 C
    2.1673    3.4944   -1.0532 O
   -3.1772    1.6900    1.1964 O
   -4.5089    1.8505    1.6437 C
   -3.2443   -2.8747    2.0682 H
   -4.3364   -0.6850    2.0527 H
   -0.7969    1.1919    0.4362 H
   -0.7980   -4.1587    1.4303 H
    1.4876   -3.4884    0.4872 H
    2.6844   -0.8502    0.5365 H
    2.0880   -1.1594   -1.1285 H
    0.8591    1.0240   -1.1139 H
    1.4680    1.3397    0.5858 H
    3.7086    0.7445   -1.0945 H
    4.4586    4.1695   -1.9994 H
    5.2125    2.8369   -1.0442 H
    4.6100    2.5245   -2.7258 H
   -4.7748    2.9263    1.5392 H
   -5.2032    1.2558    1.0094 H
   -4.5909    1.5732    2.7182 H
	'.
	compoundObject name: 'melatonin'.
	^compoundObject
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> methane [
	"(JunOpenGL3dObject methane) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
    -1.2639 0.5973  0.000  C
    -1.2639 1.7103 -0.000  H
    -0.2146 0.2263 -0.000  H
    -1.7886 0.2263  0.908  H
    -1.7886 0.2262 -0.908  H
	'.
	compoundObject name: 'methane'.
	^compoundObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> mickey [
	"(JunOpenGL3dObject mickey) show."

	| anObject |
	anObject := self mickey3.
	anObject name: 'mickey'.
	^anObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> mickey1 [
	"(JunOpenGL3dObject mickey1) show."

	| baseSphere head leftEar transformation leftEyeRound leftEye cheek nose leftBow leftObjects mickey box maximum |
	baseSphere := (JunOpenGL3dTransformedObject 
				object: (JunOpenGL3dObject ball: 3))
				flushAllPaints;
				yourself.
	head := baseSphere scaledBy: 4.
	leftEar := JunOpenGL3dObject 
				pieFrom: 0
				to: 360
				by: 10
				radius: 2.5
				thickness: 0.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	leftEar := leftEar transform: transformation.
	leftEar := leftEar translatedBy: -1 , 3.5 , 5.
	leftEyeRound := baseSphere scaledBy: 3.05 * (1 , 1 , 1.2).
	leftEyeRound := leftEyeRound translatedBy: 1 , 0.5 , 0.
	leftEye := baseSphere scaledBy: 0.5 * (1 , 1 , 3).
	leftEye := leftEye translatedBy: 3.6 , 1.1 , 0.2.
	cheek := baseSphere scaledBy: 3.5 * (1 , 1 , 0.5).
	cheek := cheek translatedBy: 1 , 0 , -2.
	nose := baseSphere scaledBy: 1 , 1.5 , 0.5.
	nose := nose translatedBy: 4 , 0 , -1.5.
	leftBow := JunOpenGL3dObject 
				cone: 10
				radius: 1
				height: 2.
	transformation := Jun3dTransformation rotateX: (JunAngle fromDeg: 90).
	leftBow := leftBow transform: transformation.
	leftBow := leftBow translatedBy: 3 , 1.5 , -4.5.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftEar
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftEyeRound
				paint: ColorValue white;
				yourself).
	leftObjects add: (leftEye
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftBow
				paint: ColorValue red;
				yourself).
	mickey := JunOpenGL3dCompoundObject new.
	mickey add: leftObjects.
	mickey 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	mickey add: (head
				paint: ColorValue black;
				yourself).
	mickey add: (cheek
				paint: ColorValue white;
				yourself).
	mickey add: (nose
				paint: ColorValue black;
				yourself).
	box := mickey boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	mickey := JunOpenGL3dTransformedObject object: mickey
				transformation: transformation.
	mickey name: 'mickey1'.
	^mickey
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> mickey2 [
	"(JunOpenGL3dObject mickey2) show."

	| aCompositePart aPixmap anImage aTexture anObject |
	aCompositePart := JunSampleTriangle exampleMickey.
	aPixmap := Pixmap extent: aCompositePart preferredBounds extent.
	aCompositePart displayOn: aPixmap graphicsContext at: aCompositePart preferredBounds origin negated.
	anImage := aPixmap asImage.
	aPixmap close.
	aTexture := JunOpenGLTexture image: anImage.
	aTexture linear: true; repeat: true.
	aTexture coordinates: (Array
			with: 0.0 , 0.0
			with: 1.0 , 0.0
			with: 1.0 , 1.0
			with: 0.0 , 1.0).
	anObject := JunOpenGL3dObject cube.
	anObject texture: aTexture.
	anObject name: 'mickey2'.
	^anObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> mickey3 [
	"(JunOpenGL3dObject mickey3) show."

	| leftBow transformation leftObjects mickey box maximum |
	leftBow := JunOpenGL3dObject 
				cone: 10
				radius: 0.07
				height: 0.14.
	transformation := Jun3dTransformation rotateX: (JunAngle fromDeg: 90).
	leftBow := leftBow transform: transformation.
	leftBow := leftBow translatedBy: 0.15 , 0.1 , -0.4.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftBow
				paint: ColorValue yellow;
				yourself).
	mickey := JunOpenGL3dCompoundObject new.
	mickey add: leftObjects.
	mickey 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	mickey add: JunOpenGL3dObject mouse.
	box := mickey boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	mickey := JunOpenGL3dTransformedObject object: mickey
				transformation: transformation.
	mickey name: 'mickey3'.
	^mickey
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> minnie [
	"(JunOpenGL3dObject minnie) show."

	| transformation lashes leftLashes leftRibbon leftObjects minnie box maximum |
	lashes := JunOpenGL3dCompoundObject new.
	leftLashes := JunOpenGL3dPolyline 
				vertexes: (Array with: 0 , -0.03 , 0 with: 0 , 0.03 , 0).
	leftLashes := leftLashes lineWidth: 0.1.
	lashes add: leftLashes.
	(Array 
		with: -0.02
		with: 0
		with: 0.02) do: 
				[:each | 
				leftLashes := JunOpenGL3dPolyline 
							vertexes: (Array with: 0 , each , 0 with: 0 , each , 0.06).
				leftLashes := leftLashes lineWidth: 0.1.
				lashes add: leftLashes].
	transformation := Jun3dTransformation rotateX: (JunAngle fromDeg: -15).
	leftLashes := lashes transform: transformation.
	leftLashes := leftLashes translatedBy: 0.2 , 0.085 , 0.035.
	leftRibbon := JunOpenGL3dObject 
				chunkOfPieFrom: 70
				to: 140
				by: 10
				radius: 0.21
				thickness: 0.07.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	leftRibbon := leftRibbon transform: transformation.
	leftRibbon := leftRibbon translatedBy: -0.1 , 0 , 0.2.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftLashes
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftRibbon
				paint: ColorValue red;
				yourself).
	minnie := JunOpenGL3dCompoundObject new.
	minnie add: leftObjects.
	minnie 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	minnie add: JunOpenGL3dObject mouse.
	box := minnie boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	minnie := JunOpenGL3dTransformedObject object: minnie
				transformation: transformation.
	minnie name: 'minnie'.
	^minnie
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> mobius [
	"(JunOpenGL3dObject mobius) showIn: (200 @ 200 extent: 400 @ 400)."

	^self 
		mobiusRadius: 3 / 4
		divisions: 72
		stripRadius: 1 / 4
		divisions: 6
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> mobiusRadius: mobiusRadius divisions: mobiusDivision stripRadius: stripRadius [ 
	"(((JunOpenGL3dObject 
		mobiusRadius: 3 / 4
		divisions: 36
		stripRadius: 1 / 4)
		polylinesDo: 
				[:each | 
				each
					lineWidth: 3;
					paint: ColorValue black];
		yourself) showIn: (200 @ 200 extent: 400 @ 400))
		hiddenlinePresentation;
		yourself."

	"| aViewer |
	aViewer := (JunOpenGL3dCompoundObject 
				with: ((JunOpenGL3dObject 
						mobiusRadius: 3 / 4
						divisions: 72
						stripRadius: 1 / 4)
						polylinesDo: 
								[:each | 
								each
									lineWidth: 3;
									paint: ColorValue black];
						yourself)
				with: ((JunOpenGL3dObject 
						torusRadius: 3 / 4
						divisions: 72
						tubeRadius: 1 / 4
						divisions: 18)
						polygonsDo: 
								[:each | 
								each
									halftone: 0.5;
									paint: (ColorValue brightness: 0.9)];
						yourself)) 
					showIn: (200 @ 200 extent: 400 @ 400).
	aViewer
		hiddenlinePresentation;
		yourself."

	| stepDegrees thetaCollection compoundObject |
	mobiusRadius > stripRadius ifFalse: [self error: 'can not create mobius.'].
	stepDegrees := (1.0d / mobiusDivision) asDouble.
	thetaCollection := (((0.0d to: 2.0d - (stepDegrees / 2.0d) by: stepDegrees) 
				asOrderedCollection)
				add: 2.0d;
				yourself) asArray.
	compoundObject := JunOpenGL3dCompoundObject new.
	(thetaCollection copyFrom: 1 to: thetaCollection size - 1) 
		with: (thetaCollection copyFrom: 2 to: thetaCollection size)
		do: 
			[:firstTheta :secondTheta | 
			| firstPoint secondPoint aPolyline |
			firstPoint := JunGeometry 
						mobiusRadius: mobiusRadius
						normalizedTheta: firstTheta
						stripRadius: stripRadius
						normalizedRadius: 1.
			secondPoint := JunGeometry 
						mobiusRadius: mobiusRadius
						normalizedTheta: secondTheta
						stripRadius: stripRadius
						normalizedRadius: 1.
			aPolyline := JunOpenGL3dPolyline with: firstPoint with: secondPoint.
			compoundObject add: aPolyline].
	compoundObject name: 'mobius polyline'.
	compoundObject flushAllPaints.
	compoundObject paint: self defaultPaint.
	^compoundObject
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> mobiusRadius: mobiusRadius divisions: mobiusDivision stripRadius: stripRadius divisions: stripDivision [ 
	"(((JunOpenGL3dObject 
		mobiusRadius: 3 / 4
		divisions: 36
		stripRadius: 1 / 4
		divisions: 4)
		polygonsDo: [:each | each paint: (ColorValue brightness: 0.9)];
		yourself) showIn: (200 @ 200 extent: 400 @ 400))
		hiddenlinePresentation;
		yourself."

	"| aViewer |
	aViewer := (JunOpenGL3dCompoundObject 
				with: ((JunOpenGL3dObject 
						mobiusRadius: 3 / 4
						divisions: 36
						stripRadius: 1 / 4
						divisions: 4)
						polygonsDo: [:each | each paint: ColorValue lightGray];
						yourself)
				with: ((JunOpenGL3dObject 
						mobiusRadius: 3 / 4
						divisions: 36
						stripRadius: 1 / 4)
						polylinesDo: 
								[:each | 
								each
									lineWidth: 3;
									paint: ColorValue black];
						yourself)
				with: ((JunOpenGL3dObject 
						torusRadius: 3 / 4
						divisions: 36
						tubeRadius: 1 / 4
						divisions: 18)
						polygonsDo: 
								[:each | 
								each
									halftone: 0.5;
									paint: (ColorValue brightness: 0.9)];
						yourself)) 
					showIn: (200 @ 200 extent: 400 @ 400).
	aViewer
		addSelectedObject: aViewer displayObject components first;
		hiddenlinePresentation;
		yourself."

	| stepDegrees thetaCollection radiusCollection compoundObject |
	mobiusRadius > stripRadius ifFalse: [self error: 'can not create mobius.'].
	stepDegrees := (1.0d / mobiusDivision) asDouble.
	thetaCollection := (((0.0d to: 2.0d - (stepDegrees / 2.0d) by: stepDegrees) 
				asOrderedCollection)
				add: 2.0d;
				yourself) asArray.
	stepDegrees := (1.0d / stripDivision) asDouble.
	radiusCollection := (((0.0d to: 1.0d - (stepDegrees / 2.0d) by: stepDegrees) 
				asOrderedCollection)
				add: 1.0d;
				yourself) asArray 
				reverse.
	compoundObject := JunOpenGL3dCompoundObject new.
	(thetaCollection copyFrom: 1 to: thetaCollection size - 1) 
		with: (thetaCollection copyFrom: 2 to: thetaCollection size)
		do: 
			[:firstTheta :secondTheta | 
			| firstPoints secondPoints mobiusPoint aBody |
			firstPoints := OrderedCollection new.
			secondPoints := OrderedCollection new.
			radiusCollection do: 
					[:aRadius | 
					mobiusPoint := JunGeometry 
								mobiusRadius: mobiusRadius
								normalizedTheta: firstTheta
								stripRadius: stripRadius
								normalizedRadius: aRadius.
					firstPoints add: mobiusPoint.
					mobiusPoint := JunGeometry 
								mobiusRadius: mobiusRadius
								normalizedTheta: secondTheta
								stripRadius: stripRadius
								normalizedRadius: aRadius.
					secondPoints add: mobiusPoint].
			aBody := JunOpenGL3dCompoundObject new.
			(1 to: firstPoints size - 1) with: (2 to: firstPoints size)
				do: 
					[:firstIndex :secondIndex | 
					| firstPoint secondPoint thirdPoint forthPoint firstPolygon secondPolygon |
					firstPoint := firstPoints at: firstIndex.
					secondPoint := secondPoints at: firstIndex.
					thirdPoint := firstPoints at: secondIndex.
					forthPoint := secondPoints at: secondIndex.
					firstPolygon := JunOpenGL3dPolygon vertexes: (Array 
										with: firstPoint
										with: secondPoint
										with: thirdPoint).
					secondPolygon := JunOpenGL3dPolygon vertexes: (Array 
										with: secondPoint
										with: forthPoint
										with: thirdPoint).
					aBody add: firstPolygon.
					aBody add: secondPolygon].
			compoundObject add: aBody].
	compoundObject name: 'mobius'.
	compoundObject flushAllPaints.
	compoundObject paint: self defaultPaint.
	^compoundObject
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> mobiusRadius: mobiusRadius divisions: mobiusDivision stripRadius: stripRadius locusDo: aBlock [ 
	"| compoundObject theBall aBall theBody |
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject add: ((JunOpenGL3dObject 
				mobiusStripRadius: 3 / 4
				divisions: 72
				stripRadius: 1 / 4
				divisions: 12)
				polygonsDo: 
						[:each | 
						each
							halftone: 0.75;
							paint: (ColorValue brightness: 0.9)];
				yourself).
	theBall := (JunOpenGL3dObject ball: 1) scaledBy: 0.025.
	theBody := JunOpenGL3dCompoundObject new.
	JunOpenGL3dObject 
		mobiusRadius: 3 / 4
		divisions: 72
		stripRadius: 1 / 4
		locusDo: 
			[:locusPoint :rightVector :upVector :normalizedValue | 
			aBall := (theBall translatedBy: locusPoint) translatedBy: upVector * 0.025.
			aBall paint: (ColorValue 
						hue: normalizedValue
						saturation: 1
						brightness: 1).
			theBody add: aBall].
	compoundObject add: theBody.
	compoundObject show."

	| mobiusBody aPolygon locusPoint rightVector upVector normalizedValue anArray |
	mobiusBody := self 
				mobiusRadius: mobiusRadius
				divisions: mobiusDivision
				stripRadius: stripRadius
				divisions: 1.
	mobiusBody components with: (0 to: mobiusBody components size - 1)
		do: 
			[:aBody :anInteger | 
			aPolygon := aBody components first.
			locusPoint := aPolygon vertexes at: 3.
			rightVector := (locusPoint to: (aPolygon vertexes at: 1)) normalUnitVector.
			upVector := aPolygon normalUnitVector.
			normalizedValue := anInteger / mobiusBody components size.
			anArray := Array 
						with: locusPoint
						with: rightVector
						with: upVector
						with: normalizedValue.
			aBlock valueWithArguments: (anArray copyFrom: 1 to: aBlock numArgs)]
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> mobiusRadius: mobiusRadius stripRadius: stripRadius [ 
	"(JunOpenGL3dObject mobiusRadius: 1 stripRadius: 0.4) showIn: (200 @ 200 extent: 400 @ 400)."

	^self 
		mobiusRadius: mobiusRadius
		divisions: 72
		stripRadius: stripRadius
		divisions: 8
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> mobiusStrip [
	"(JunOpenGL3dObject mobiusStrip) show."

	^self 
		mobiusStripRadius: 3 / 4
		divisions: 72
		stripRadius: 1 / 4
		divisions: 6
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> mobiusStripRadius: mobiusRadius divisions: mobiusDivision stripRadius: stripRadius divisions: stripDivision [ 
	"(((JunOpenGL3dObject 
		mobiusStripRadius: 3 / 4
		divisions: 72
		stripRadius: 1 / 4
		divisions: 4)
		polygonsDo: [:each | each paint: (ColorValue brightness: 0.9)];
		yourself) showIn: (200 @ 200 extent: 400 @ 400))
		hiddenlinePresentation;
		yourself."

	"| aViewer |
	aViewer := (JunOpenGL3dCompoundObject 
				with: ((JunOpenGL3dObject 
						mobiusStripRadius: 3 / 4
						divisions: 72
						stripRadius: 1 / 4
						divisions: 4)
						polygonsDo: [:each | each paint: ColorValue lightGray];
						yourself)
				with: ((JunOpenGL3dObject 
						mobiusRadius: 3 / 4
						divisions: 72
						stripRadius: 1 / 4)
						polylinesDo: 
								[:each | 
								each
									lineWidth: 3;
									paint: ColorValue black];
						yourself)
				with: ((JunOpenGL3dObject 
						torusRadius: 3 / 4
						divisions: 72
						tubeRadius: 1 / 4
						divisions: 18)
						polygonsDo: 
								[:each | 
								each
									halftone: 0.5;
									paint: (ColorValue brightness: 0.9)];
						yourself)) 
					showIn: (200 @ 200 extent: 400 @ 400).
	aViewer
		addSelectedObject: aViewer displayObject components first;
		hiddenlinePresentation;
		yourself."

	^self 
		mobiusStripRadius: mobiusRadius
		divisions: mobiusDivision
		stripRadius: stripRadius
		divisions: stripDivision
		thicknessFactor: 0.001 * (mobiusRadius + stripRadius)
]

{ #category : #'typical objects mobius' }
JunOpenGL3dObject class >> mobiusStripRadius: mobiusRadius divisions: mobiusDivision stripRadius: stripRadius divisions: stripDivision thicknessFactor: thicknessFactor [ 
	"(((JunOpenGL3dObject 
		mobiusStripRadius: 3 / 4
		divisions: 72
		stripRadius: 1 / 4
		divisions: 4
		thicknessFactor: 0.05)
		polygonsDo: [:each | each paint: (ColorValue brightness: 0.9)];
		yourself) showIn: (200 @ 200 extent: 400 @ 400))
		hiddenlinePresentation;
		yourself."

	"| aViewer |
	aViewer := (JunOpenGL3dCompoundObject 
				with: ((JunOpenGL3dObject 
						mobiusStripRadius: 3 / 4
						divisions: 72
						stripRadius: 1 / 4
						divisions: 4
						thicknessFactor: 0.05)
						polygonsDo: [:each | each paint: ColorValue lightGray];
						yourself)
				with: ((JunOpenGL3dObject 
						mobiusRadius: 3 / 4
						divisions: 72
						stripRadius: 1 / 4)
						polylinesDo: 
								[:each | 
								each
									lineWidth: 3;
									paint: ColorValue black];
						yourself)
				with: ((JunOpenGL3dObject 
						torusRadius: 3 / 4
						divisions: 72
						tubeRadius: 1 / 4
						divisions: 18)
						polygonsDo: 
								[:each | 
								each
									halftone: 0.5;
									paint: (ColorValue brightness: 0.9)];
						yourself)) 
					showIn: (200 @ 200 extent: 400 @ 400).
	aViewer
		addSelectedObject: aViewer displayObject components first;
		hiddenlinePresentation;
		yourself."

	| compoundObject numberOfPolygons size firstSetOfPolygons secondSetOfPolygons mobiusStrip normalTable positiveTable negativeTable count aVector collectionOfPairs firstPolygon secondPolygon thirdPolygon forthPolygon |
	compoundObject := self 
				mobiusRadius: mobiusRadius
				divisions: mobiusDivision
				stripRadius: stripRadius
				divisions: stripDivision.
	numberOfPolygons := 0.
	compoundObject 
		polygonsDo: [:aPolygon | numberOfPolygons := numberOfPolygons + 1].
	size := numberOfPolygons // 2.
	firstSetOfPolygons := IdentitySet new.
	secondSetOfPolygons := IdentitySet new.
	mobiusStrip := JunOpenGL3dCompoundObject new.
	normalTable := JunHashEqualityDictionary new.
	positiveTable := JunHashEqualityDictionary new.
	negativeTable := JunHashEqualityDictionary new.
	count := 0.
	compoundObject polygonsDo: 
			[:aPolygon | 
			count < size 
				ifTrue: 
					[aVector := aPolygon normalUnitVector.
					aPolygon vertexes do: 
							[:aPoint | 
							(aPoint x > 0 and: [aPoint y abs < JunGeometry accuracy]) 
								ifTrue: 
									[(JunPlane xy whichSide: aVector) >= 0 
										ifTrue: 
											[(positiveTable includesKey: aPoint) 
												ifFalse: [positiveTable at: aPoint put: 0 , 0 , 1]]
										ifFalse: 
											[(negativeTable includesKey: aPoint) 
												ifFalse: [negativeTable at: aPoint put: 0 , 0 , -1]]]
								ifFalse: 
									[(normalTable includesKey: aPoint) 
										ifFalse: [normalTable at: aPoint put: aVector]]]].
			count := count + 1].
	count := 0.
	compoundObject polygonsDo: 
			[:aPolygon | 
			count < size 
				ifTrue: 
					[aVector := aPolygon normalUnitVector.
					collectionOfPairs := aPolygon vertexes collect: 
									[:aPoint | 
									(aPoint x > 0 and: [aPoint y abs < JunGeometry accuracy]) 
										ifTrue: 
											[(JunPlane xy whichSide: aVector) >= 0 
												ifTrue: [aVector := positiveTable at: aPoint]
												ifFalse: [aVector := negativeTable at: aPoint]]
										ifFalse: [aVector := normalTable at: aPoint].
									(Array with: aPoint with: aVector) yourself].
					firstPolygon := JunOpenGL3dPolygon vertexes: (collectionOfPairs 
										collect: [:anArray | anArray first translatedBy: anArray last * thicknessFactor]).
					secondPolygon := JunOpenGL3dPolygon 
								vertexes: (collectionOfPairs collect: 
											[:anArray | 
											anArray first translatedBy: (anArray last * thicknessFactor) negated]) 
										reverse.
					mobiusStrip add: firstPolygon.
					mobiusStrip add: secondPolygon.
					firstSetOfPolygons add: firstPolygon.
					firstSetOfPolygons add: secondPolygon.
					count \\ (stripDivision * 2) = 0 
						ifTrue: 
							[thirdPolygon := JunOpenGL3dPolygon 
										with: (firstPolygon vertexes at: 2)
										with: (firstPolygon vertexes at: 1)
										with: (secondPolygon vertexes at: 3).
							forthPolygon := JunOpenGL3dPolygon 
										vertexes: (secondPolygon vertexes copyFrom: 2 to: 3) reverse 
												, (firstPolygon vertexes copyFrom: 2 to: 2).
							mobiusStrip add: thirdPolygon.
							mobiusStrip add: forthPolygon.
							secondSetOfPolygons add: thirdPolygon.
							secondSetOfPolygons add: forthPolygon]].
			count := count + 1].
	normalTable := JunHashEqualityDictionary new.
	positiveTable := JunHashEqualityDictionary new.
	negativeTable := JunHashEqualityDictionary new.
	count := 0.
	compoundObject polygonsDo: 
			[:aPolygon | 
			count >= size 
				ifTrue: 
					[aVector := aPolygon normalUnitVector.
					aPolygon vertexes do: 
							[:aPoint | 
							(aPoint x > 0 and: [aPoint y abs < JunGeometry accuracy]) 
								ifTrue: 
									[(JunPlane xy whichSide: aVector) >= 0 
										ifTrue: 
											[(positiveTable includesKey: aPoint) 
												ifFalse: [positiveTable at: aPoint put: 0 , 0 , 1]]
										ifFalse: 
											[(negativeTable includesKey: aPoint) 
												ifFalse: [negativeTable at: aPoint put: 0 , 0 , -1]]]
								ifFalse: 
									[(normalTable includesKey: aPoint) 
										ifFalse: [normalTable at: aPoint put: aVector]]]].
			count := count + 1].
	count := 0.
	compoundObject polygonsDo: 
			[:aPolygon | 
			count >= size 
				ifTrue: 
					[aVector := aPolygon normalUnitVector.
					collectionOfPairs := aPolygon vertexes collect: 
									[:aPoint | 
									(aPoint x > 0 and: [aPoint y abs < JunGeometry accuracy]) 
										ifTrue: 
											[(JunPlane xy whichSide: aVector) >= 0 
												ifTrue: [aVector := positiveTable at: aPoint]
												ifFalse: [aVector := negativeTable at: aPoint]]
										ifFalse: [aVector := normalTable at: aPoint].
									(Array with: aPoint with: aVector) yourself].
					firstPolygon := JunOpenGL3dPolygon vertexes: (collectionOfPairs 
										collect: [:anArray | anArray first translatedBy: anArray last * thicknessFactor]).
					secondPolygon := JunOpenGL3dPolygon 
								vertexes: (collectionOfPairs collect: 
											[:anArray | 
											anArray first translatedBy: (anArray last * thicknessFactor) negated]) 
										reverse.
					mobiusStrip add: firstPolygon.
					mobiusStrip add: secondPolygon.
					firstSetOfPolygons add: firstPolygon.
					firstSetOfPolygons add: secondPolygon.
					count \\ (stripDivision * 2) = 0 
						ifTrue: 
							[thirdPolygon := JunOpenGL3dPolygon 
										with: (firstPolygon vertexes at: 2)
										with: (firstPolygon vertexes at: 1)
										with: (secondPolygon vertexes at: 3).
							forthPolygon := JunOpenGL3dPolygon 
										vertexes: (secondPolygon vertexes copyFrom: 2 to: 3) reverse 
												, (firstPolygon vertexes copyFrom: 2 to: 2).
							mobiusStrip add: thirdPolygon.
							mobiusStrip add: forthPolygon.
							secondSetOfPolygons add: thirdPolygon.
							secondSetOfPolygons add: forthPolygon]].
			count := count + 1].
	normalTable := self normalVectorTableOfPolygons: firstSetOfPolygons.
	firstSetOfPolygons do: 
			[:aPolygon | 
			aPolygon 
				normalVectors: (aPolygon vertexes collect: [:p | normalTable at: p])].
	normalTable := self normalVectorTableOfPolygons: secondSetOfPolygons.
	secondSetOfPolygons do: 
			[:aPolygon | 
			aPolygon 
				normalVectors: (aPolygon vertexes collect: [:p | normalTable at: p])].
	mobiusStrip name: 'mobius strip'.
	mobiusStrip flushAllPaints.
	mobiusStrip paint: self defaultPaint.
	^mobiusStrip
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> moon [
	"(JunOpenGL3dObject moon)
		showEyePoint: -10 , 0 , 0
		sightPoint: 0 , 0 , 0
		upVector: 0 , 0 , 1."

	| xyPointsAndSphere xyPoints aCompoundObject aTexture |
	xyPointsAndSphere := JunOpenGL3dObject 
				xyPointsAndSphere: 12
				radius: 1
				longitude: 360
				latitude: 180.
	xyPoints := xyPointsAndSphere first 
				collect: [:aPoint | aPoint x , (1 - aPoint y)].
	aCompoundObject := xyPointsAndSphere last.
	aCompoundObject paint: ColorValue white.
	aTexture := JunOpenGLTexture image: self imageMoon.
	aTexture
		linear: true;
		repeat: true.
	aTexture coordinates: xyPoints.
	aCompoundObject texture: aTexture.
	aCompoundObject name: 'moon'.
	^aCompoundObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> mouse [
	"(JunOpenGL3dObject mouse) show."

	| baseSphere head leftEar transformation leftEyeRound leftEye leftCheek noseRound nose leftObjects mouse box maximum |
	baseSphere := (JunOpenGL3dTransformedObject 
				object: (JunOpenGL3dObject ball: 3))
				flushAllPaints;
				yourself.
	head := baseSphere scaledBy: 4.
	leftEar := JunOpenGL3dObject 
				pieFrom: 0
				to: 360
				by: 10
				radius: 2.5
				thickness: 0.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	leftEar := leftEar transform: transformation.
	leftEar := leftEar translatedBy: -1 , 4.5 , 4.
	leftEyeRound := baseSphere scaledBy: 3.05.
	leftEyeRound := leftEyeRound scaledBy: 1 , 1 , 1.2.
	leftEyeRound := leftEyeRound translatedBy: 1 , 0.5 , 0.
	leftEye := baseSphere scaledBy: 0.5 * (1 , 1 , 3).
	leftEye := leftEye translatedBy: 3.6 , 1.1 , 0.2.
	leftCheek := baseSphere scaledBy: 3 * (0.8 , 0.6 , 1).
	transformation := Jun3dTransformation rotateZ: (JunAngle fromDeg: -10).
	transformation := transformation 
				product: (Jun3dTransformation rotateX: (JunAngle fromDeg: -60)).
	leftCheek := leftCheek transform: transformation.
	leftCheek := leftCheek translatedBy: 1.5 , 1 , -2.
	noseRound := baseSphere scaledBy: 2 * (1 , 1.1 , 0.7).
	noseRound := noseRound translatedBy: 3 , 0 , -2.
	nose := baseSphere scaledBy: 1 , 1 , 0.9.
	nose := nose translatedBy: 4.8 , 0 , -1.5.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftEar
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftEyeRound
				paint: ColorValue white;
				yourself).
	leftObjects add: (leftEye
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftCheek
				paint: ColorValue white;
				yourself).
	mouse := JunOpenGL3dCompoundObject new.
	mouse add: leftObjects.
	mouse 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	mouse add: (head
				paint: ColorValue black;
				yourself).
	mouse add: (noseRound
				paint: ColorValue white;
				yourself).
	mouse add: (nose
				paint: ColorValue black;
				yourself).
	box := mouse boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	mouse := JunOpenGL3dTransformedObject object: mouse
				transformation: transformation.
	mouse name: 'mouse'.
	^mouse
]

{ #category : #utilities }
JunOpenGL3dObject class >> nAkisHedron: aHedron [ 
	"
	| aHedron | 
	aHedron := JunOpenGL3dObject regularDodecahedron. 
	JunOpenGL3dObject showHedron: (aHedron). 
	JunOpenGL3dObject showHedron: (JunOpenGL3dObject nAkisHedron: aHedron). 
	"
	"
	| aHedron | 
	aHedron := JunOpenGL3dObject regularTetrahedron. 
	JunOpenGL3dObject showHedron: (aHedron). 
	JunOpenGL3dObject showHedron: (JunOpenGL3dObject nAkisHedron: aHedron). 
	"

	^self nAkisHedron: aHedron interim: [:compoundObject | compoundObject yourself]
]

{ #category : #utilities }
JunOpenGL3dObject class >> nAkisHedron: aHedron interim: aBlock [ 
	"
	| aHedron aModel | 
	aHedron := JunOpenGL3dObject regularDodecahedron. 
	aModel := JunOpenGLDisplayModel displayObject: aHedron. 
	aModel defaultSightPoint: 0 , 0 , 0. 
	aModel defaultEyePoint: 10 , 10 , 10. 
	aModel defaultProjection: #perspectiveProjection. 
	aModel defaultPresentation: #hiddenlinePresentation. 
	aModel open. 
	JunOpenGL3dObject 
		nAkisHedron: aHedron 
		interim: [:object :original | JunControlUtility do: [
				| anOriginal anObject | 
				anOriginal := JunOpenGL3dTransformedObject object: original transformation: (Jun3dTransformation scale: 0.999).
				anOriginal paint: ColorValue veryLightGray. 
				anObject := JunOpenGL3dTransformedObject object: object transformation: Jun3dTransformation unity.
				anObject paint: ColorValue veryDarkGray. 
				aModel displayObject: (JunOpenGL3dCompoundObject with: anOriginal with: anObject). 
				aModel changed: #object]
				forMilliseconds: 500] 
	"

	| originPoint nAkisHedron |
	originPoint := 0 , 0 , 0.
	nAkisHedron := JunOpenGL3dCompoundObject new.
	aHedron primitivesDo: 
			[:polygon | 
			| aPlane aPoint aLine compoundObject |
			polygon vertexes size >= 5 
				ifTrue: 
					[aPlane := JunPlane 
								on: (polygon vertexes at: 1)
								on: (polygon vertexes at: 3)
								on: (polygon vertexes at: 5)]
				ifFalse: 
					[aPlane := JunPlane 
								on: (polygon vertexes at: 1)
								on: (polygon vertexes at: 2)
								on: (polygon vertexes at: 3)].
			aPoint := aPlane nearestPointFromPoint: originPoint.
			aLine := (Jun3dLine from: originPoint to: aPoint) normalizedLine.
			aPoint := aLine atT: 1.
			compoundObject := JunOpenGL3dCompoundObject new.
			1 to: polygon vertexes size
				do: 
					[:index | 
					| aTriangle |
					index < polygon vertexes size 
						ifTrue: 
							[aTriangle := JunOpenGL3dPolygon vertexes: (Array 
												with: (polygon vertexes at: index)
												with: (polygon vertexes at: index + 1)
												with: aPoint)]
						ifFalse: 
							[aTriangle := JunOpenGL3dPolygon vertexes: (Array 
												with: (polygon vertexes at: index)
												with: (polygon vertexes at: 1)
												with: aPoint)].
					compoundObject add: aTriangle].
			"nAkisHedron addAll: compoundObject components."
			nAkisHedron add: compoundObject.
			aBlock notNil 
				ifTrue: 
					[aBlock numArgs = 1 ifTrue: [aBlock value: nAkisHedron].
					aBlock numArgs = 2 ifTrue: [aBlock value: nAkisHedron value: aHedron]]].
	^nAkisHedron
]

{ #category : #'lisp support' }
JunOpenGL3dObject class >> nameFromLispList: aList for: a3dObject [ 
	| list |
	list := aList detect: [:car | (car isKindOf: self defaultLispConsClass)
					and: [car head = #name]]
				ifNone: [nil].
	list isNil ifTrue: [^a3dObject].
	a3dObject name: list tail.
	^a3dObject
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> naphthalene [
	"(JunOpenGL3dObject naphthalene) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
-0010.1558 00005.9261 -0000.000  C
-0010.1558 00007.2668 -0000.000  C
-0008.9919 00007.9344 -0000.000  C
-0007.8209 00007.2711 -0000.000  C
-0007.8209 00005.9221 00000.000  C
-0008.9918 00005.2585 00000.000  C
-0011.1120 00005.3741 -0000.000  H
-0011.1121 00007.8187 -0000.000  H
-0009.0182 00009.0383 -0000.000  H
-0006.6500 00007.9345 -0000.000  C
-0006.6499 00005.2586 00000.000  C
-0009.0180 00004.1546 00000.000  H
-0005.4861 00007.2670 -0000.000  C
-0005.4860 00005.9263 00000.000  C
-0006.6239 00009.0383 -0000.000  H
-0006.6238 00004.1547 00000.001  H
-0004.5299 00007.8189 -0000.000  H
-0004.5298 00005.3743 00000.000  H
	'.
	compoundObject name: 'naphthalene'.
	^compoundObject
]

{ #category : #utilities }
JunOpenGL3dObject class >> normalVectorTableOfPolygons: polygonCollection [ 
	| normalVectorsTable normalVectorTableOfPolygons |
	normalVectorsTable := JunHashEqualityDictionary new.
	polygonCollection do: 
			[:aPolygon | 
			| vector |
			vector := aPolygon normalUnitVector.
			aPolygon vertexes do: 
					[:p | 
					(normalVectorsTable includesKey: p) 
						ifFalse: [normalVectorsTable at: p put: OrderedCollection new].
					(normalVectorsTable at: p) add: vector]].
	normalVectorTableOfPolygons := JunHashEqualityDictionary new.
	normalVectorsTable keysAndValuesDo: 
			[:p :vectors | 
			| total |
			total := 0 , 0 , 0.
			vectors do: [:vector | total := total + vector].
			normalVectorTableOfPolygons at: p
				put: (total / vectors size) normalUnitVector].
	^normalVectorTableOfPolygons
]

{ #category : #'lisp support' }
JunOpenGL3dObject class >> objectFromLispList: aList [ 
	"JunOpenGL3dObject objectFromLispList: ((JunOpenGL3dObject aoki) toLispList)."

	| kindName |
	kindName := aList head.
	kindName = #CompoundBody     ifTrue: [^JunOpenGL3dCompoundObject fromLispList: aList].
	kindName = #PatchedBody      ifTrue: [^JunOpenGL3dCompoundObject patchedBodyFromLispList: aList].
	kindName = #SkinningBody     ifTrue: [^JunOpenGL3dCompoundObject skinningBodyFromLispList: aList].
	kindName = #Polygon          ifTrue: [^JunOpenGL3dPolygon fromLispList: aList].
	kindName = #NonConvexPolygon ifTrue: [^JunOpenGL3dNonConvexPolygon fromLispList: aList].
	kindName = #Polyline         ifTrue: [^JunOpenGL3dPolyline fromLispList: aList].
	kindName = #PolylineLoop     ifTrue: [^JunOpenGL3dPolylineLoop fromLispList: aList].
	kindName = #Spot             ifTrue: [^JunOpenGL3dVertex fromLispList: aList].
	kindName = #NurbsCurve       ifTrue: [^JunOpenGL3dNurbsCurve fromLispList: aList].
	kindName = #NurbsSurface     ifTrue: [^JunOpenGL3dNurbsSurface fromLispList: aList].
	^self error: 'unexpected error'
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> oni [
	"(JunOpenGL3dObject oni) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:27:06

(CompoundBody (name . "oni")
  (bodies (CompoundBody (bodies (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.7061d , 2.9403d , -1.2107d)}
	    {(1.4874d , 3.0918d , -0.5026d)}
	    {(1.3184d , 2.6003d , -0.0119d)}
	    {(1.3091d , 2.4135d , 0.13d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(0.692d , 3.3377d , -0.4023d)}
	    {(0.5729d , 2.8307d , 0.0821d)}
	    {(1.3757d , 4.0242d , 1.2743d)}
	    {(1.4443d , 4.2945d , 1.0141d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(-1.4293d , 4.443d , 0.8337d)}
	    {(-1.3488d , 4.2014d , 1.1325d)}
	    {(-0.5622d , 2.8706d , 0.0826d)}
	    {(-0.7033d , 3.3243d , -0.4742d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(1.6321d , 3.945d , 1.242d)}
	    {(1.7179d , 4.21d , 0.9796d)}
	    {(1.4443d , 4.2945d , 1.0141d)}
	    {(1.3757d , 4.0242d , 1.2743d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(1.4874d , 3.0918d , -0.5026d)}
	    {(1.7179d , 4.21d , 0.9796d)}
	    {(1.6321d , 3.945d , 1.242d)}
	    {(1.3184d , 2.6003d , -0.0119d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(-1.3488d , 4.2014d , 1.1325d)}
	    {(-1.4293d , 4.443d , 0.8337d)}
	    {(-1.7026d , 4.3525d , 0.8177d)}
	    {(-1.605d , 4.1165d , 1.1175d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.3091d , 2.4135d , 0.13d)}
	    {(1.3184d , 2.6003d , -0.0119d)}
	    {(0.5729d , 2.8307d , 0.0821d)}
	    {(0.4364d , 2.4135d , 0.13d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.692d , 3.3377d , -0.4023d)}
	    {(0.4299d , 3.2713d , -0.8016d)}
	    {(0.4364d , 2.4135d , 0.13d)}
	    {(0.5729d , 2.8307d , 0.0821d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.709d , 1.5862d , -0.5675d)}
	    {(2.1664d , 1.4587d , -0.8016d)}
	    {(1.3279d , 1.6771d , 0.285d)}
	    {(1.1515d , 1.744d , -0.2662d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.3279d , 1.6771d , 0.285d)}
	    {(0.7596d , 1.4932d , 0.3942d)}
	    {(0.7015d , 1.7112d , -0.0665d)}
	    {(1.1515d , 1.744d , -0.2662d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(1.709d , 1.5862d , -0.5675d)}
	    {(1.1515d , 1.744d , -0.2662d)}
	    {(1.0485d , 1.8985d , -0.728d)}
	    {(1.541d , 1.7591d , -0.9942d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.7033d , 3.3243d , -0.4742d)}
	    {(-0.5622d , 2.8706d , 0.0826d)}
	    {(-0.4364d , 2.4135d , 0.13d)}
	    {(-0.4299d , 3.2713d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.7015d , 1.7112d , -0.0665d)}
	    {(0.7596d , 1.4932d , 0.3942d)}
	    {(0.2782d , 1.3677d , -0.4207d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(1.709d , 1.5862d , -0.5675d)}
	    {(1.541d , 1.7591d , -0.9942d)}
	    {(1.0485d , 1.2347d , -0.8852d)}
	    {(1.1516d , 0.9927d , -0.4442d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(0.2782d , 1.3677d , -0.4207d)}
	    {(1.1516d , 0.9927d , -0.4442d)}
	    {(1.0485d , 1.2347d , -0.8852d)}
	    {(0.2769d , 1.566d , -0.8645d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.2664d , 0.7473d , 1.0427d)}
	    {(0.2056d , 1.456d , 0.0779d)}
	    {(0.0d , 1.5788d , 0.0043d)}
	    {(0.0d , 0.8265d , 1.1383d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.2056d , 1.456d , 0.0779d)}
	    {(0.2664d , 0.7473d , 1.0427d)}
	    {(0.5328d , 0.6681d , -0.1578d)}
	    {(0.2782d , 1.3677d , -0.4207d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.2664d , 0.7473d , 1.0427d)}
	    {(0.4514d , 0.495d , 0.6651d)}
	    {(0.5328d , 0.6681d , -0.1578d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.195d , 1.0208d , 0.3262d)}
	    {(0.5328d , 0.6681d , -0.1578d)}
	    {(0.9186d , 0.5306d , -0.1174d)}
	    {(1.2308d , 0.4156d , 0.4046d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.2956d , 2.9675d , -2.084d)}
	    {(1.7061d , 2.9403d , -1.2107d)}
	    {(2.1664d , 1.4587d , -0.8016d)}
	    {(2.1664d , 0.5524d , -0.8016d)}
	    {(2.415d , 0.4692d , -1.7454d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.2664d , 0.7473d , 1.0427d)}
	    {(0.3273d , 0.0386d , 1.271d)}
	    {(0.531d , 0.0604d , 0.7179d)}
	    {(0.4514d , 0.495d , 0.6651d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.0d , 1.5788d , 0.0043d)}
	    {(0.0d , 1.7931d , 0.0d)}
	    {(-0.26d , 1.7441d , 0.5214d)}
	    {(-0.2056d , 1.456d , 0.0779d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.9545d , 0.586d , 0.4401d)}
	    {(1.0474d , 0.161d , 0.4766d)}
	    {(1.0249d , 0.1152d , -0.0972d)}
	    {(0.9186d , 0.5306d , -0.1174d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.5305d , 0.1779d , 0.6603d)}
	    {(0.6622d , 0.2341d , 0.5254d)}
	    {(0.6532d , 0.0557d , 0.5032d)}
	    {(0.5216d , -5.0d-4 , 0.6381d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.3493d , 2.9292d , -3.3668d)}
	    {(2.2956d , 2.9675d , -2.084d)}
	    {(2.415d , 0.4692d , -1.7454d)}
	    {(2.8028d , 1.8995d , -3.4954d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4011d , -0.0571d , 0.8092d)}
	    {(0.1952d , -0.0347d , 0.8395d)}
	    {(0.2247d , 0.0072d , 0.8142d)}
	    {(0.4077d , -0.0127d , 0.7873d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.3091d , -0.0679d , 0.13d)}
	    {(1.2308d , 0.4156d , 0.4046d)}
	    {(0.9186d , 0.5306d , -0.1174d)}
	    {(1.0249d , 0.1152d , -0.0972d)}
	    {(1.0901d , -0.0324d , -0.0818d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.6774d , 0.0199d , 0.4895d)}
	    {(0.6545d , 0.0031d , 0.183d)}
	    {(1.0249d , 0.1152d , -0.0972d)}
	    {(1.0474d , 0.161d , 0.4766d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.26d , 1.7441d , 0.5214d)}
	    {(-0.4364d , 2.4135d , 0.13d)}
	    {(-1.3091d , 2.4135d , 0.13d)}
	    {(-1.3346d , 1.6812d , 0.295d)}
	    {(-0.7532d , 1.486d , 0.4264d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.2336d , 0.1856d , 0.8365d)}
	    {(0.2247d , 0.0072d , 0.8142d)}
	    {(0.2265d , 0.0601d , 0.4617d)}
	    {(0.2355d , 0.2385d , 0.484d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.2845d , 1.3763d , -0.4307d)}
	    {(-0.7532d , 1.486d , 0.4264d)}
	    {(-0.8074d , 1.6681d , -0.0748d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.419d , 0.1647d , 0.811d)}
	    {(-0.236d , 0.1846d , 0.8379d)}
	    {(-0.2259d , 0.0064d , 0.8147d)}
	    {(-0.4089d , -0.0135d , 0.7878d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.5827d , 3.2922d , -4.9893d)}
	    {(0.7589d , 4.1416d , -2.898d)}
	    {(2.3493d , 2.9292d , -3.3668d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.2259d , 0.0064d , 0.8147d)}
	    {(-0.236d , 0.1846d , 0.8379d)}
	    {(-0.2566d , 0.2381d , 0.4851d)}
	    {(-0.2465d , 0.0599d , 0.4619d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.4017d , -0.0578d , 0.8096d)}
	    {(-0.4089d , -0.0135d , 0.7878d)}
	    {(-0.2259d , 0.0064d , 0.8147d)}
	    {(-0.1958d , -0.0354d , 0.8398d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.2664d , 0.7473d , 1.0427d)}
	    {(-0.2056d , 1.456d , 0.0779d)}
	    {(-0.2845d , 1.3763d , -0.4307d)}
	    {(-0.5328d , 0.6681d , -0.1578d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.0d , -0.1269d , 0.4429d)}
	    {(0.0065d , -0.1444d , 1.0577d)}
	    {(-0.1958d , -0.0354d , 0.8398d)}
	    {(-0.219d , 0.0248d , 0.4429d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.1876d , -0.3278d , 0.5681d)}
	    {(0.1973d , 0.0248d , 0.4429d)}
	    {(0.0d , -0.1269d , 0.4429d)}
	    {(0.0d , -0.3278d , 0.5464d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.219d , 0.0248d , 0.4429d)}
	    {(-0.2093d , -0.3278d , 0.5681d)}
	    {(0.0d , -0.3278d , 0.5464d)}
	    {(0.0d , -0.1269d , 0.4429d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(1.5905d , -0.8137d , -0.4787d)}
	    {(1.2648d , -0.7449d , -0.194d)}
	    {(0.1873d , -0.4402d , 0.4451d)}
	    {(0.2251d , -0.4149d , 0.2203d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.1876d , -0.3278d , 0.5681d)}
	    {(0.0d , -0.3278d , 0.5464d)}
	    {(-4.0d-4 , -0.4412d , 0.4659d)}
	    {(0.1873d , -0.4402d , 0.4451d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.5228d , -0.0013d , 0.6386d)}
	    {(-0.4089d , -0.0135d , 0.7878d)}
	    {(-0.4017d , -0.0578d , 0.8096d)}
	    {(-0.5299d , -0.0441d , 0.6417d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(1.5905d , -0.8137d , -0.4787d)}
	    {(1.434d , -1.0678d , -0.161d)}
	    {(1.0273d , -1.1618d , 0.0334d)}
	    {(1.2648d , -0.7449d , -0.194d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.4514d , 0.495d , 0.6651d)}
	    {(-0.5328d , 0.6681d , -0.1578d)}
	    {(-0.9549d , 0.5761d , 0.4389d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.569d , -0.8399d , -0.05d)}
	    {(1.5029d , -0.7788d , 0.0241d)}
	    {(1.309d , -1.7774d , -0.1858d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6546d , 0.0524d , 0.503d)}
	    {(-0.6647d , 0.2306d , 0.5261d)}
	    {(-0.5329d , 0.1769d , 0.6617d)}
	    {(-0.5228d , -0.0013d , 0.6386d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.5328d , 0.6681d , -0.1578d)}
	    {(-0.2845d , 1.3763d , -0.4307d)}
	    {(-1.331d , 1.0177d , 0.3264d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(0.2251d , -0.4149d , 0.2203d)}
	    {(0.1873d , -0.4402d , 0.4451d)}
	    {(-4.0d-4 , -0.4412d , 0.4659d)}
	    {(0.0063d , -0.3897d , 0.1935d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6546d , 0.0524d , 0.503d)}
	    {(-0.5228d , -0.0013d , 0.6386d)}
	    {(-0.5299d , -0.0441d , 0.6417d)}
	    {(-0.6781d , 0.0164d , 0.4891d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.4514d , 0.495d , 0.6651d)}
	    {(-0.9549d , 0.5761d , 0.4389d)}
	    {(-1.0478d , 0.1565d , 0.4754d)}
	    {(-0.531d , 0.0604d , 0.7179d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6437d , 0.2189d , 0.2541d)}
	    {(-0.6647d , 0.2306d , 0.5261d)}
	    {(-0.6546d , 0.0524d , 0.503d)}
	    {(-0.6336d , 0.0406d , 0.2309d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.5029d , -0.7788d , 0.0241d)}
	    {(1.3501d , -0.6961d , 0.0265d)}
	    {(1.1127d , -1.2169d , 0.2524d)}
	    {(1.309d , -1.7774d , -0.1858d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6546d , 0.0524d , 0.503d)}
	    {(-0.6781d , 0.0164d , 0.4891d)}
	    {(-0.6545d , 0.0031d , 0.183d)}
	    {(-0.6336d , 0.0406d , 0.2309d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.331d , 1.0177d , 0.3264d)}
	    {(-0.2845d , 1.3763d , -0.4307d)}
	    {(-1.2189d , 0.9935d , -0.4441d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.331d , 1.0177d , 0.3264d)}
	    {(-1.2958d , 0.4156d , 0.4046d)}
	    {(-0.9186d , 0.5089d , -0.1174d)}
	    {(-0.5328d , 0.6681d , -0.1578d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(1.5924d , -0.6103d , -1.3808d)}
	    {(1.4361d , -0.9611d , -1.1747d)}
	    {(1.434d , -1.0678d , -0.161d)}
	    {(1.5905d , -0.8137d , -0.4787d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.6363d , -1.2461d , 0.4202d)}
	    {(0.6314d , -1.1703d , 0.2501d)}
	    {(-0.0103d , -1.0604d , 0.4611d)}
	    {(-3.0d-4 , -1.181d , 0.6089d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(1.5924d , -0.6103d , -1.3808d)}
	    {(1.5905d , -0.8137d , -0.4787d)}
	    {(0.2251d , -0.4149d , 0.2203d)}
	    {(0.2268d , -0.4881d , -0.5858d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(-1.5401d , 1.7648d , -0.9917d)}
	    {(-1.0896d , 1.9042d , -0.7254d)}
	    {(-1.195d , 1.7447d , -0.266d)}
	    {(-1.7049d , 1.5869d , -0.5674d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(-1.1108d , 1.2405d , -0.8827d)}
	    {(-0.2852d , 1.5787d , -0.8709d)}
	    {(-0.7472d , 1.8365d , -0.5565d)}
	    {(-1.0896d , 1.9042d , -0.7254d)}
	    {(-1.5401d , 1.7648d , -0.9917d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.1127d , -1.2169d , 0.2524d)}
	    {(0.6363d , -1.2461d , 0.4202d)}
	    {(-3.0d-4 , -1.181d , 0.6089d)}
	    {(0.4146d , -1.5839d , 0.4441d)}
	    {(1.309d , -1.7774d , -0.1858d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.415d , 0.4692d , -1.7454d)}
	    {(2.5014d , -0.8614d , -1.9947d)}
	    {(1.8188d , -0.6412d , -2.2407d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.8338d , 3.7428d , -1.5104d)}
	    {(-2.3915d , 2.803d , -2.0659d)}
	    {(-2.0263d , 3.1045d , -0.9435d)}
	    {(-0.4299d , 3.2713d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.8028d , 1.8995d , -3.4954d)}
	    {(2.415d , 0.4692d , -1.7454d)}
	    {(1.8188d , -0.6412d , -2.2407d)}
	    {(2.5304d , 0.1508d , -3.4296d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(0.0063d , -0.3897d , 0.1935d)}
	    {(0.008d , -0.4552d , -0.6018d)}
	    {(0.2268d , -0.4881d , -0.5858d)}
	    {(0.2251d , -0.4149d , 0.2203d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.6876d , -2.1664d , -0.8016d)}
	    {(1.8726d , -1.2601d , -0.9285d)}
	    {(1.569d , -0.8399d , -0.05d)}
	    {(1.309d , -1.7774d , -0.1858d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.331d , 1.0177d , 0.3264d)}
	    {(-1.8925d , 0.8688d , 0.3035d)}
	    {(-1.8506d , 0.2819d , 0.2591d)}
	    {(-1.2958d , 0.4156d , 0.4046d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.5014d , -0.8614d , -1.9947d)}
	    {(1.8616d , -1.1618d , -1.9682d)}
	    {(1.8188d , -0.6412d , -2.2407d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(0.0063d , -0.3897d , 0.1935d)}
	    {(-0.2371d , -0.4149d , 0.2203d)}
	    {(-0.2354d , -0.4884d , -0.5858d)}
	    {(0.008d , -0.4552d , -0.6018d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.3068d , -0.7178d , 0.0265d)}
	    {(-0.2093d , -0.3278d , 0.5681d)}
	    {(-0.219d , 0.0248d , 0.4429d)}
	    {(-0.6545d , 0.0031d , 0.183d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.0249d , 0.1044d , -0.0972d)}
	    {(-0.9186d , 0.5089d , -0.1174d)}
	    {(-1.2958d , 0.4156d , 0.4046d)}
	    {(-1.3091d , -0.0679d , 0.13d)}
	    {(-1.1118d , -0.0324d , -0.0818d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6174d , -1.2523d , 0.4189d)}
	    {(-3.0d-4 , -1.181d , 0.6089d)}
	    {(-0.0103d , -1.0604d , 0.4611d)}
	    {(-0.6223d , -1.1764d , 0.2488d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(0.6314d , -1.1703d , 0.2501d)}
	    {(0.6343d , -1.5053d , -0.5491d)}
	    {(-0.0075d , -1.4784d , -0.3129d)}
	    {(-0.0103d , -1.0604d , 0.4611d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.8616d , -1.1618d , -1.9682d)}
	    {(2.5014d , -0.8614d , -1.9947d)}
	    {(1.6876d , -2.1664d , -0.8016d)}
	    {(1.2549d , -2.1346d , -1.0788d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.7589d , 4.1416d , -2.898d)}
	    {(0.5827d , 3.2922d , -4.9893d)}
	    {(-0.6833d , 3.2922d , -4.9893d)}
	    {(-0.8596d , 4.1416d , -2.898d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.3091d , -0.0679d , 0.13d)}
	    {(-1.2958d , 0.4156d , 0.4046d)}
	    {(-1.8506d , 0.2819d , 0.2591d)}
	    {(-1.7377d , -0.2109d , -0.3358d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-2.1664d , 0.5524d , -0.8016d)}
	    {(-1.8925d , 0.8688d , 0.3035d)}
	    {(-1.331d , 1.0177d , 0.3264d)}
	    {(-2.1664d , 1.4587d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.8188d , -0.6412d , -2.2407d)}
	    {(1.8616d , -1.1618d , -1.9682d)}
	    {(1.5394d , -1.4294d , -2.086d)}
	    {(1.5039d , -1.2846d , -2.4202d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.8028d , 1.8995d , -3.4954d)}
	    {(2.5304d , 0.1508d , -3.4296d)}
	    {(1.5558d , 0.6717d , -5.6243d)}
	    {(0.5827d , 3.2922d , -4.9893d)}
	    {(2.3493d , 2.9292d , -3.3668d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.9656d , -2.1093d , -0.1506d)}
	    {(0.6223d , -2.441d , -0.1154d)}
	    {(0.722d , -2.5377d , -0.776d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.8338d , 3.7428d , -1.5104d)}
	    {(-0.8596d , 4.1416d , -2.898d)}
	    {(-2.4365d , 2.761d , -3.3909d)}
	    {(-2.3915d , 2.803d , -2.0659d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.1118d , -0.0324d , -0.0818d)}
	    {(-1.3091d , -0.0679d , 0.13d)}
	    {(-1.6124d , -0.8616d , -0.05d)}
	    {(-1.4921d , -0.7788d , 0.0241d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.3004d , -1.5861d , 0.1114d)}
	    {(-0.3432d , -1.586d , 0.1114d)}
	    {(-0.6213d , -2.4408d , -0.1153d)}
	    {(0.6223d , -2.441d , -0.1154d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.0365d , -1.7986d , -1.1838d)}
	    {(0.9153d , -2.054d , -1.4091d)}
	    {(1.3604d , -1.7272d , -2.2079d)}
	    {(1.5394d , -1.4294d , -2.086d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.4581d , -1.5838d , 0.4441d)}
	    {(-3.0d-4 , -1.181d , 0.6089d)}
	    {(-0.6174d , -1.2523d , 0.4189d)}
	    {(-1.0755d , -1.225d , 0.2497d)}
	    {(-1.3092d , -1.777d , -0.1857d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.5039d , -1.2846d , -2.4202d)}
	    {(1.5394d , -1.4294d , -2.086d)}
	    {(1.3604d , -1.7272d , -2.2079d)}
	    {(1.329d , -1.599d , -2.5037d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.0755d , -1.225d , 0.2497d)}
	    {(-1.3068d , -0.7178d , 0.0265d)}
	    {(-1.4921d , -0.7788d , 0.0241d)}
	    {(-1.3092d , -1.777d , -0.1857d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.2628d , -1.3092d , -3.0059d)}
	    {(1.5685d , -0.7791d , -3.0133d)}
	    {(1.5039d , -1.2846d , -2.4202d)}
	    {(1.329d , -1.599d , -2.5037d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.7222d , -2.5375d , -0.776d)}
	    {(-0.6213d , -2.4408d , -0.1153d)}
	    {(-0.9653d , -2.109d , -0.1505d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4399d , -1.8429d , -1.098d)}
	    {(0.535d , -2.4115d , -1.0597d)}
	    {(-0.5416d , -2.4113d , -1.0597d)}
	    {(-0.4523d , -1.8429d , -1.098d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.535d , -2.4115d , -1.0597d)}
	    {(0.722d , -2.5377d , -0.776d)}
	    {(-0.7222d , -2.5375d , -0.776d)}
	    {(-0.5416d , -2.4113d , -1.0597d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-2.4277d , 0.4692d , -1.7481d)}
	    {(-2.3915d , 2.803d , -2.0659d)}
	    {(-2.4365d , 2.761d , -3.3909d)}
	    {(-2.9151d , 1.817d , -3.501d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.4523d , -1.8429d , -1.098d)}
	    {(-1.0488d , -1.7986d , -1.1837d)}
	    {(-0.9308d , -2.054d , -1.4091d)}
	    {(-0.4028d , -2.0933d , -1.3332d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.5416d , -2.4113d , -1.0597d)}
	    {(-1.2613d , -2.1346d , -1.0788d)}
	    {(-1.0488d , -1.7986d , -1.1837d)}
	    {(-0.4523d , -1.8429d , -1.098d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.6876d , -2.1664d , -0.8016d)}
	    {(-1.3092d , -1.777d , -0.1857d)}
	    {(-1.6124d , -0.8616d , -0.05d)}
	    {(-1.8714d , -1.2601d , -0.9255d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-2.1664d , 0.0993d , -0.8016d)}
	    {(-2.1664d , 0.5524d , -0.8016d)}
	    {(-2.4277d , 0.4692d , -1.7481d)}
	    {(-2.5014d , -0.8614d , -1.9947d)}
	    {(-1.8714d , -0.3538d , -0.9255d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.7222d , -2.5375d , -0.776d)}
	    {(-1.6876d , -2.1664d , -0.8016d)}
	    {(-1.2613d , -2.1346d , -1.0788d)}
	    {(-0.5416d , -2.4113d , -1.0597d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.8714d , -0.3538d , -0.9255d)}
	    {(-2.5014d , -0.8614d , -1.9947d)}
	    {(-1.6876d , -2.1664d , -0.8016d)}
	    {(-1.8714d , -1.2601d , -0.9255d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-2.4277d , 0.4692d , -1.7481d)}
	    {(-1.8724d , -0.641d , -2.2804d)}
	    {(-2.5014d , -0.8614d , -1.9947d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.8724d , -0.641d , -2.2804d)}
	    {(-1.868d , -1.1618d , -1.9682d)}
	    {(-2.5014d , -0.8614d , -1.9947d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.5516d , -1.4294d , -2.086d)}
	    {(-1.0488d , -1.7986d , -1.1837d)}
	    {(-1.2613d , -2.1346d , -1.0788d)}
	    {(-1.868d , -1.1618d , -1.9682d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-2.9151d , 1.817d , -3.501d)}
	    {(-2.638d , 0.15d , -3.4264d)}
	    {(-1.8724d , -0.641d , -2.2804d)}
	    {(-2.4277d , 0.4692d , -1.7481d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.5516d , -1.4294d , -2.086d)}
	    {(-1.5553d , -1.2742d , -2.4493d)}
	    {(-1.3792d , -1.5899d , -2.5294d)}
	    {(-1.3759d , -1.7272d , -2.2079d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.2628d , -1.3092d , -3.0059d)}
	    {(1.329d , -1.599d , -2.5037d)}
	    {(1.6775d , -3.7765d , -3.3971d)}
	    {(2.1932d , -3.5253d , -4.1848d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6833d , 3.2922d , -4.9893d)}
	    {(0.5827d , 3.2922d , -4.9893d)}
	    {(1.5558d , 0.6717d , -5.6243d)}
	    {(-0.0503d , 0.6717d , -5.6243d)}
	    {(-1.6564d , 0.6717d , -5.6243d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.0448d , -0.9204d , -4.6023d)}
	    {(-1.6591d , -0.7736d , -3.0271d)}
	    {(-2.638d , 0.15d , -3.4264d)}
	    {(-1.6564d , 0.6717d , -5.6243d)}
	    {(-0.0503d , 0.6717d , -5.6243d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.2628d , -1.3092d , -3.0059d)}
	    {(-0.0419d , -1.2951d , -4.5136d)}
	    {(-0.0448d , -0.9204d , -4.6023d)}
	    {(1.5685d , -0.7791d , -3.0133d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.0448d , -0.9204d , -4.6023d)}
	    {(-0.0419d , -1.2951d , -4.5136d)}
	    {(-1.3454d , -1.302d , -3.0202d)}
	    {(-1.6591d , -0.7736d , -3.0271d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.2628d , -1.3092d , -3.0059d)}
	    {(2.1932d , -3.5253d , -4.1848d)}
	    {(-0.048d , -3.1912d , -5.069d)}
	    {(-0.0419d , -1.2951d , -4.5136d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.5016d , -4.3985d , -1.9243d)}
	    {(-0.4028d , -2.0933d , -1.3332d)}
	    {(-0.9308d , -2.054d , -1.4091d)}
	    {(-1.166d , -4.3491d , -2.0198d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.6775d , -3.7765d , -3.3971d)}
	    {(1.717d , -3.9378d , -3.0249d)}
	    {(1.1569d , -4.3491d , -2.0198d)}
	    {(0.4923d , -4.3985d , -1.9242d)}
	    {(-0.5016d , -4.3985d , -1.9243d)}
	    {(-1.166d , -4.3491d , -2.0198d)}
	    {(-1.7261d , -3.9378d , -3.0248d)}
	    {(-1.7302d , -3.765d , -3.4295d)}
	    {(-2.2892d , -3.5253d , -4.1848d)}
	    {(-0.048d , -3.1912d , -5.069d)}
	    {(2.1932d , -3.5253d , -4.1848d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6174d , -1.2523d , 0.4189d)}
	    {(-0.6223d , -1.1764d , 0.2488d)}
	    {(-0.9891d , -1.168d , 0.0331d)}
	    {(-1.0755d , -1.225d , 0.2497d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.209d , -0.4402d , 0.4451d)}
	    {(-0.2093d , -0.3278d , 0.5681d)}
	    {(-1.3068d , -0.7178d , 0.0265d)}
	    {(-1.2203d , -0.7638d , -0.1928d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(-1.5261d , -0.8391d , -0.4787d)}
	    {(-0.2371d , -0.4149d , 0.2203d)}
	    {(-0.209d , -0.4402d , 0.4451d)}
	    {(-1.2203d , -0.7638d , -0.1928d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(-1.2203d , -0.7638d , -0.1928d)}
	    {(-0.9891d , -1.168d , 0.0331d)}
	    {(-1.3696d , -1.0805d , -0.161d)}
	    {(-1.5261d , -0.8391d , -0.4787d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(-0.9891d , -1.168d , 0.0331d)}
	    {(-0.6223d , -1.1764d , 0.2488d)}
	    {(-0.6194d , -1.5114d , -0.5526d)}
	    {(-1.0842d , -1.6142d , -0.9104d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(-1.5242d , -0.6363d , -1.3903d)}
	    {(-0.2354d , -0.4884d , -0.5858d)}
	    {(-0.2371d , -0.4149d , 0.2203d)}
	    {(-1.5261d , -0.8391d , -0.4787d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(1.134d , -1.6065d , -0.9051d)}
	    {(1.4361d , -0.9611d , -1.1747d)}
	    {(1.5924d , -0.6103d , -1.3808d)}
	    {(0.2268d , -0.4881d , -0.5858d)}
	    {(0.008d , -0.4552d , -0.6018d)}
	    {(-0.2354d , -0.4884d , -0.5858d)}
	    {(-1.5242d , -0.6363d , -1.3903d)}
	    {(-1.3675d , -0.9751d , -1.1796d)}
	    {(-1.0842d , -1.6142d , -0.9104d)}
	    {(-0.6194d , -1.5114d , -0.5526d)}
	    {(-0.0075d , -1.4784d , -0.3129d)}
	    {(0.6343d , -1.5053d , -0.5491d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-2.1664d , 1.4587d , -0.8016d)}
	    {(-1.331d , 1.0177d , 0.3264d)}
	    {(-1.2189d , 0.9935d , -0.4441d)}
	    {(-1.7049d , 1.5869d , -0.5674d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.6545d , 0.0031d , 0.183d)}
	    {(0.1973d , 0.0248d , 0.4429d)}
	    {(0.1876d , -0.3278d , 0.5681d)}
	    {(1.3501d , -0.6961d , 0.0265d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.1973d , 0.0248d , 0.4429d)}
	    {(0.1952d , -0.0347d , 0.8395d)}
	    {(0.0065d , -0.1444d , 1.0577d)}
	    {(0.0d , -0.1269d , 0.4429d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.1958d , -0.0354d , 0.8398d)}
	    {(0.0065d , -0.1444d , 1.0577d)}
	    {(0.0d , 0.0742d , 1.3191d)}
	    {(-0.3273d , 0.0386d , 1.271d)}
	    {(-0.4017d , -0.0578d , 0.8096d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.3273d , 0.0386d , 1.271d)}
	    {(-0.2664d , 0.7473d , 1.0427d)}
	    {(-0.4514d , 0.495d , 0.6651d)}
	    {(-0.531d , 0.0604d , 0.7179d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(-0.7472d , 1.8365d , -0.5565d)}
	    {(-0.2852d , 1.5787d , -0.8709d)}
	    {(-0.2845d , 1.3763d , -0.4307d)}
	    {(-0.8074d , 1.6681d , -0.0748d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.4514d , 0.495d , 0.6651d)}
	    {(-0.2664d , 0.7473d , 1.0427d)}
	    {(-0.5328d , 0.6681d , -0.1578d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.1958d , -0.0354d , 0.8398d)}
	    {(-0.2259d , 0.0064d , 0.8147d)}
	    {(-0.2465d , 0.0599d , 0.4619d)}
	    {(-0.219d , 0.0248d , 0.4429d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.3501d , -0.6961d , 0.0265d)}
	    {(0.1876d , -0.3278d , 0.5681d)}
	    {(0.1873d , -0.4402d , 0.4451d)}
	    {(1.2648d , -0.7449d , -0.194d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.5228d , -0.0013d , 0.6386d)}
	    {(-0.5329d , 0.1769d , 0.6617d)}
	    {(-0.419d , 0.1647d , 0.811d)}
	    {(-0.4089d , -0.0135d , 0.7878d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(-0.7472d , 1.8365d , -0.5565d)}
	    {(-0.8074d , 1.6681d , -0.0748d)}
	    {(-1.195d , 1.7447d , -0.266d)}
	    {(-1.0896d , 1.9042d , -0.7254d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.3273d , 0.0386d , 1.271d)}
	    {(-0.531d , 0.0604d , 0.7179d)}
	    {(-0.5299d , -0.0441d , 0.6417d)}
	    {(-0.4017d , -0.0578d , 0.8096d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.3091d , -0.0679d , 0.13d)}
	    {(1.569d , -0.8399d , -0.05d)}
	    {(1.8726d , -1.2601d , -0.9285d)}
	    {(1.8726d , -0.3538d , -0.9285d)}
	    {(1.7377d , -0.2109d , -0.3358d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.415d , 0.4692d , -1.7454d)}
	    {(2.1664d , 0.5524d , -0.8016d)}
	    {(2.1664d , 0.0993d , -0.8016d)}
	    {(1.8726d , -0.3538d , -0.9285d)}
	    {(2.5014d , -0.8614d , -1.9947d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.3501d , -0.6961d , 0.0265d)}
	    {(1.2648d , -0.7449d , -0.194d)}
	    {(1.0273d , -1.1618d , 0.0334d)}
	    {(1.1127d , -1.2169d , 0.2524d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.2566d , 0.2381d , 0.4851d)}
	    {(-0.236d , 0.1846d , 0.8379d)}
	    {(-0.419d , 0.1647d , 0.811d)}
	    {(-0.5329d , 0.1769d , 0.6617d)}
	    {(-0.6647d , 0.2306d , 0.5261d)}
	    {(-0.6437d , 0.2189d , 0.2541d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.0d , -0.3278d , 0.5464d)}
	    {(-0.2093d , -0.3278d , 0.5681d)}
	    {(-0.209d , -0.4402d , 0.4451d)}
	    {(-4.0d-4 , -0.4412d , 0.4659d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.1127d , -1.2169d , 0.2524d)}
	    {(1.0273d , -1.1618d , 0.0334d)}
	    {(0.6314d , -1.1703d , 0.2501d)}
	    {(0.6363d , -1.2461d , 0.4202d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.9549d , 0.5761d , 0.4389d)}
	    {(-0.5328d , 0.6681d , -0.1578d)}
	    {(-0.9186d , 0.5089d , -0.1174d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6781d , 0.0164d , 0.4891d)}
	    {(-0.5299d , -0.0441d , 0.6417d)}
	    {(-0.531d , 0.0604d , 0.7179d)}
	    {(-1.0478d , 0.1565d , 0.4754d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(0.0063d , -0.3897d , 0.1935d)}
	    {(-4.0d-4 , -0.4412d , 0.4659d)}
	    {(-0.209d , -0.4402d , 0.4451d)}
	    {(-0.2371d , -0.4149d , 0.2203d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.3091d , 2.4135d , 0.13d)}
	    {(-2.0263d , 3.1045d , -0.9435d)}
	    {(-2.1664d , 1.4587d , -0.8016d)}
	    {(-1.3346d , 1.6812d , 0.295d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6545d , 0.0031d , 0.183d)}
	    {(-0.6781d , 0.0164d , 0.4891d)}
	    {(-1.0478d , 0.1565d , 0.4754d)}
	    {(-1.0249d , 0.1044d , -0.0972d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.195d , 1.7447d , -0.266d)}
	    {(-1.3346d , 1.6812d , 0.295d)}
	    {(-2.1664d , 1.4587d , -0.8016d)}
	    {(-1.7049d , 1.5869d , -0.5674d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.0478d , 0.1565d , 0.4754d)}
	    {(-0.9549d , 0.5761d , 0.4389d)}
	    {(-0.9186d , 0.5089d , -0.1174d)}
	    {(-1.0249d , 0.1044d , -0.0972d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.5014d , -0.8614d , -1.9947d)}
	    {(1.8726d , -0.3538d , -0.9285d)}
	    {(1.8726d , -1.2601d , -0.9285d)}
	    {(1.6876d , -2.1664d , -0.8016d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(1.434d , -1.0678d , -0.161d)}
	    {(1.4361d , -0.9611d , -1.1747d)}
	    {(1.134d , -1.6065d , -0.9051d)}
	    {(1.0273d , -1.1618d , 0.0334d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6545d , 0.0031d , 0.183d)}
	    {(-1.0249d , 0.1044d , -0.0972d)}
	    {(-1.1118d , -0.0324d , -0.0818d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4146d , -1.5839d , 0.4441d)}
	    {(-3.0d-4 , -1.181d , 0.6089d)}
	    {(-0.4581d , -1.5838d , 0.4441d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.309d , -1.7774d , -0.1858d)}
	    {(0.4146d , -1.5839d , 0.4441d)}
	    {(0.3004d , -1.5861d , 0.1114d)}
	    {(0.9656d , -2.1093d , -0.1506d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(0.6314d , -1.1703d , 0.2501d)}
	    {(1.0273d , -1.1618d , 0.0334d)}
	    {(1.134d , -1.6065d , -0.9051d)}
	    {(0.6343d , -1.5053d , -0.5491d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.9656d , -2.1093d , -0.1506d)}
	    {(0.3004d , -1.5861d , 0.1114d)}
	    {(0.6223d , -2.441d , -0.1154d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.3004d , -1.5861d , 0.1114d)}
	    {(0.4146d , -1.5839d , 0.4441d)}
	    {(-0.4581d , -1.5838d , 0.4441d)}
	    {(-0.3432d , -1.586d , 0.1114d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.309d , -1.7774d , -0.1858d)}
	    {(0.9656d , -2.1093d , -0.1506d)}
	    {(0.722d , -2.5377d , -0.776d)}
	    {(1.6876d , -2.1664d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.8616d , -1.1618d , -1.9682d)}
	    {(1.2549d , -2.1346d , -1.0788d)}
	    {(1.0365d , -1.7986d , -1.1838d)}
	    {(1.5394d , -1.4294d , -2.086d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.0755d , -1.225d , 0.2497d)}
	    {(-0.9891d , -1.168d , 0.0331d)}
	    {(-1.2203d , -0.7638d , -0.1928d)}
	    {(-1.3068d , -0.7178d , 0.0265d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(-0.6223d , -1.1764d , 0.2488d)}
	    {(-0.0103d , -1.0604d , 0.4611d)}
	    {(-0.0075d , -1.4784d , -0.3129d)}
	    {(-0.6194d , -1.5114d , -0.5526d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(-1.5261d , -0.8391d , -0.4787d)}
	    {(-1.3696d , -1.0805d , -0.161d)}
	    {(-1.3675d , -0.9751d , -1.1796d)}
	    {(-1.5242d , -0.6363d , -1.3903d)}))
        (Polygon (color 0.152851
	    0.184349
	    0.337321)
	  (points {(-1.3696d , -1.0805d , -0.161d)}
	    {(-0.9891d , -1.168d , 0.0331d)}
	    {(-1.0842d , -1.6142d , -0.9104d)}
	    {(-1.3675d , -0.9751d , -1.1796d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6545d , 0.0031d , 0.183d)}
	    {(-1.1118d , -0.0324d , -0.0818d)}
	    {(-1.4921d , -0.7788d , 0.0241d)}
	    {(-1.3068d , -0.7178d , 0.0265d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.5304d , 0.1508d , -3.4296d)}
	    {(1.8188d , -0.6412d , -2.2407d)}
	    {(1.5039d , -1.2846d , -2.4202d)}
	    {(1.5685d , -0.7791d , -3.0133d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.8506d , 0.2819d , 0.2591d)}
	    {(-1.8925d , 0.8688d , 0.3035d)}
	    {(-2.1664d , 0.5524d , -0.8016d)}
	    {(-2.1664d , 0.0993d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.0365d , -1.7986d , -1.1838d)}
	    {(1.2549d , -2.1346d , -1.0788d)}
	    {(0.535d , -2.4115d , -1.0597d)}
	    {(0.4399d , -1.8429d , -1.098d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.8596d , 4.1416d , -2.898d)}
	    {(-0.6833d , 3.2922d , -4.9893d)}
	    {(-2.4365d , 2.761d , -3.3909d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.2549d , -2.1346d , -1.0788d)}
	    {(1.6876d , -2.1664d , -0.8016d)}
	    {(0.722d , -2.5377d , -0.776d)}
	    {(0.535d , -2.4115d , -1.0597d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.0365d , -1.7986d , -1.1838d)}
	    {(0.4399d , -1.8429d , -1.098d)}
	    {(0.3871d , -2.0933d , -1.3332d)}
	    {(0.9153d , -2.054d , -1.4091d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.3092d , -1.777d , -0.1857d)}
	    {(-1.4921d , -0.7788d , 0.0241d)}
	    {(-1.6124d , -0.8616d , -0.05d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.8506d , 0.2819d , 0.2591d)}
	    {(-2.1664d , 0.0993d , -0.8016d)}
	    {(-1.8714d , -0.3538d , -0.9255d)}
	    {(-1.7377d , -0.2109d , -0.3358d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-2.1664d , 1.4587d , -0.8016d)}
	    {(-2.0263d , 3.1045d , -0.9435d)}
	    {(-2.3915d , 2.803d , -2.0659d)}
	    {(-2.4277d , 0.4692d , -1.7481d)}
	    {(-2.1664d , 0.5524d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.3432d , -1.586d , 0.1114d)}
	    {(-0.9653d , -2.109d , -0.1505d)}
	    {(-0.6213d , -2.4408d , -0.1153d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.3432d , -1.586d , 0.1114d)}
	    {(-0.4581d , -1.5838d , 0.4441d)}
	    {(-1.3092d , -1.777d , -0.1857d)}
	    {(-0.9653d , -2.109d , -0.1505d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.3091d , -0.0679d , 0.13d)}
	    {(-1.7377d , -0.2109d , -0.3358d)}
	    {(-1.8714d , -0.3538d , -0.9255d)}
	    {(-1.8714d , -1.2601d , -0.9255d)}
	    {(-1.6124d , -0.8616d , -0.05d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6213d , -2.4408d , -0.1153d)}
	    {(-0.7222d , -2.5375d , -0.776d)}
	    {(0.722d , -2.5377d , -0.776d)}
	    {(0.6223d , -2.441d , -0.1154d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.4523d , -1.8429d , -1.098d)}
	    {(-0.4028d , -2.0933d , -1.3332d)}
	    {(0.3871d , -2.0933d , -1.3332d)}
	    {(0.4399d , -1.8429d , -1.098d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.7222d , -2.5375d , -0.776d)}
	    {(-0.9653d , -2.109d , -0.1505d)}
	    {(-1.3092d , -1.777d , -0.1857d)}
	    {(-1.6876d , -2.1664d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.8724d , -0.641d , -2.2804d)}
	    {(-1.5553d , -1.2742d , -2.4493d)}
	    {(-1.5516d , -1.4294d , -2.086d)}
	    {(-1.868d , -1.1618d , -1.9682d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.5516d , -1.4294d , -2.086d)}
	    {(-1.3759d , -1.7272d , -2.2079d)}
	    {(-0.9308d , -2.054d , -1.4091d)}
	    {(-1.0488d , -1.7986d , -1.1837d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.717d , -3.9378d , -3.0249d)}
	    {(1.3604d , -1.7272d , -2.2079d)}
	    {(0.9153d , -2.054d , -1.4091d)}
	    {(1.1569d , -4.3491d , -2.0198d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.5685d , -0.7791d , -3.0133d)}
	    {(-0.0448d , -0.9204d , -4.6023d)}
	    {(-0.0503d , 0.6717d , -5.6243d)}
	    {(1.5558d , 0.6717d , -5.6243d)}
	    {(2.5304d , 0.1508d , -3.4296d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.6775d , -3.7765d , -3.3971d)}
	    {(1.329d , -1.599d , -2.5037d)}
	    {(1.3604d , -1.7272d , -2.2079d)}
	    {(1.717d , -3.9378d , -3.0249d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.1569d , -4.3491d , -2.0198d)}
	    {(0.9153d , -2.054d , -1.4091d)}
	    {(0.3871d , -2.0933d , -1.3332d)}
	    {(0.4923d , -4.3985d , -1.9242d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.3792d , -1.5899d , -2.5294d)}
	    {(-1.5553d , -1.2742d , -2.4493d)}
	    {(-1.6591d , -0.7736d , -3.0271d)}
	    {(-1.3454d , -1.302d , -3.0202d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.3871d , -2.0933d , -1.3332d)}
	    {(-0.4028d , -2.0933d , -1.3332d)}
	    {(-0.5016d , -4.3985d , -1.9243d)}
	    {(0.4923d , -4.3985d , -1.9242d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.9308d , -2.054d , -1.4091d)}
	    {(-1.3759d , -1.7272d , -2.2079d)}
	    {(-1.7261d , -3.9378d , -3.0248d)}
	    {(-1.166d , -4.3491d , -2.0198d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.3759d , -1.7272d , -2.2079d)}
	    {(-1.3792d , -1.5899d , -2.5294d)}
	    {(-1.7302d , -3.765d , -3.4295d)}
	    {(-1.7261d , -3.9378d , -3.0248d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.0419d , -1.2951d , -4.5136d)}
	    {(-0.048d , -3.1912d , -5.069d)}
	    {(-2.2892d , -3.5253d , -4.1848d)}
	    {(-1.3454d , -1.302d , -3.0202d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.3454d , -1.302d , -3.0202d)}
	    {(-2.2892d , -3.5253d , -4.1848d)}
	    {(-1.7302d , -3.765d , -3.4295d)}
	    {(-1.3792d , -1.5899d , -2.5294d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.8724d , -0.641d , -2.2804d)}
	    {(-2.638d , 0.15d , -3.4264d)}
	    {(-1.6591d , -0.7736d , -3.0271d)}
	    {(-1.5553d , -1.2742d , -2.4493d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-2.4365d , 2.761d , -3.3909d)}
	    {(-0.6833d , 3.2922d , -4.9893d)}
	    {(-1.6564d , 0.6717d , -5.6243d)}
	    {(-2.638d , 0.15d , -3.4264d)}
	    {(-2.9151d , 1.817d , -3.501d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.868d , -1.1618d , -1.9682d)}
	    {(-1.2613d , -2.1346d , -1.0788d)}
	    {(-1.6876d , -2.1664d , -0.8016d)}
	    {(-2.5014d , -0.8614d , -1.9947d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(-0.2845d , 1.3763d , -0.4307d)}
	    {(-0.2852d , 1.5787d , -0.8709d)}
	    {(-1.1108d , 1.2405d , -0.8827d)}
	    {(-1.2189d , 0.9935d , -0.4441d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(-1.7049d , 1.5869d , -0.5674d)}
	    {(-1.2189d , 0.9935d , -0.4441d)}
	    {(-1.1108d , 1.2405d , -0.8827d)}
	    {(-1.5401d , 1.7648d , -0.9917d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.219d , 0.0248d , 0.4429d)}
	    {(-0.2465d , 0.0599d , 0.4619d)}
	    {(-0.6336d , 0.0406d , 0.2309d)}
	    {(-0.6545d , 0.0031d , 0.183d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.6437d , 0.2189d , 0.2541d)}
	    {(-0.6336d , 0.0406d , 0.2309d)}
	    {(-0.2465d , 0.0599d , 0.4619d)}
	    {(-0.2566d , 0.2381d , 0.4851d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.8074d , 1.6681d , -0.0748d)}
	    {(-0.7532d , 1.486d , 0.4264d)}
	    {(-1.3346d , 1.6812d , 0.295d)}
	    {(-1.195d , 1.7447d , -0.266d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-1.4981d , 3.0609d , -0.5209d)}
	    {(-2.0263d , 3.1045d , -0.9435d)}
	    {(-1.3091d , 2.4135d , 0.13d)}
	    {(-1.3071d , 2.6237d , 0.0389d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.7033d , 3.3243d , -0.4742d)}
	    {(-0.4299d , 3.2713d , -0.8016d)}
	    {(-2.0263d , 3.1045d , -0.9435d)}
	    {(-1.4981d , 3.0609d , -0.5209d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.569d , -0.8399d , -0.05d)}
	    {(1.3091d , -0.0679d , 0.13d)}
	    {(1.0901d , -0.0324d , -0.0818d)}
	    {(1.5029d , -0.7788d , 0.0241d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.5029d , -0.7788d , 0.0241d)}
	    {(1.0901d , -0.0324d , -0.0818d)}
	    {(0.6545d , 0.0031d , 0.183d)}
	    {(1.3501d , -0.6961d , 0.0265d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.2247d , 0.0072d , 0.8142d)}
	    {(0.1952d , -0.0347d , 0.8395d)}
	    {(0.1973d , 0.0248d , 0.4429d)}
	    {(0.2265d , 0.0601d , 0.4617d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.6774d , 0.0199d , 0.4895d)}
	    {(0.5292d , -0.0433d , 0.6413d)}
	    {(0.5216d , -5.0d-4 , 0.6381d)}
	    {(0.6532d , 0.0557d , 0.5032d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.531d , 0.0604d , 0.7179d)}
	    {(0.3273d , 0.0386d , 1.271d)}
	    {(0.4011d , -0.0571d , 0.8092d)}
	    {(0.5292d , -0.0433d , 0.6413d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(-1.605d , 4.1165d , 1.1175d)}
	    {(-1.7026d , 4.3525d , 0.8177d)}
	    {(-1.4981d , 3.0609d , -0.5209d)}
	    {(-1.3071d , 2.6237d , 0.0389d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.5622d , 2.8706d , 0.0826d)}
	    {(-1.3071d , 2.6237d , 0.0389d)}
	    {(-1.3091d , 2.4135d , 0.13d)}
	    {(-0.4364d , 2.4135d , 0.13d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(-1.3488d , 4.2014d , 1.1325d)}
	    {(-1.605d , 4.1165d , 1.1175d)}
	    {(-1.3071d , 2.6237d , 0.0389d)}
	    {(-0.5622d , 2.8706d , 0.0826d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.3493d , 2.9292d , -3.3668d)}
	    {(0.7589d , 4.1416d , -2.898d)}
	    {(0.8338d , 3.7428d , -1.5104d)}
	    {(2.2956d , 2.9675d , -2.084d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(1.4443d , 4.2945d , 1.0141d)}
	    {(1.7179d , 4.21d , 0.9796d)}
	    {(1.4874d , 3.0918d , -0.5026d)}
	    {(0.692d , 3.3377d , -0.4023d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(1.3184d , 2.6003d , -0.0119d)}
	    {(1.6321d , 3.945d , 1.242d)}
	    {(1.3757d , 4.0242d , 1.2743d)}
	    {(0.5729d , 2.8307d , 0.0821d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.4874d , 3.0918d , -0.5026d)}
	    {(1.7061d , 2.9403d , -1.2107d)}
	    {(0.4299d , 3.2713d , -0.8016d)}
	    {(0.692d , 3.3377d , -0.4023d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.7061d , 2.9403d , -1.2107d)}
	    {(1.3091d , 2.4135d , 0.13d)}
	    {(1.3279d , 1.6771d , 0.285d)}
	    {(2.1664d , 1.4587d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4299d , 3.2713d , -0.8016d)}
	    {(1.7061d , 2.9403d , -1.2107d)}
	    {(2.2956d , 2.9675d , -2.084d)}
	    {(0.8338d , 3.7428d , -1.5104d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.3279d , 1.6771d , 0.285d)}
	    {(1.3091d , 2.4135d , 0.13d)}
	    {(0.4364d , 2.4135d , 0.13d)}
	    {(0.2611d , 1.7432d , 0.5217d)}
	    {(0.7596d , 1.4932d , 0.3942d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.1664d , 1.4587d , -0.8016d)}
	    {(1.195d , 1.0208d , 0.3262d)}
	    {(1.8163d , 0.8804d , 0.3067d)}
	    {(2.1664d , 0.5524d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.8163d , 0.8804d , 0.3067d)}
	    {(1.195d , 1.0208d , 0.3262d)}
	    {(1.2308d , 0.4156d , 0.4046d)}
	    {(1.8129d , 0.2904d , 0.2626d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4364d , 2.4135d , 0.13d)}
	    {(0.0d , 2.4135d , 0.13d)}
	    {(0.0d , 1.7931d , 0.0d)}
	    {(0.2611d , 1.7432d , 0.5217d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(1.1515d , 1.744d , -0.2662d)}
	    {(0.7015d , 1.7112d , -0.0665d)}
	    {(0.6509d , 1.8695d , -0.5515d)}
	    {(1.0485d , 1.8985d , -0.728d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.26d , 1.7441d , 0.5214d)}
	    {(0.0d , 1.7931d , 0.0d)}
	    {(0.0d , 2.4135d , 0.13d)}
	    {(-0.4364d , 2.4135d , 0.13d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.8338d , 3.7428d , -1.5104d)}
	    {(-0.8338d , 3.7428d , -1.5104d)}
	    {(-0.4299d , 3.2713d , -0.8016d)}
	    {(0.4299d , 3.2713d , -0.8016d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.1664d , 0.5524d , -0.8016d)}
	    {(1.8163d , 0.8804d , 0.3067d)}
	    {(1.8129d , 0.2904d , 0.2626d)}
	    {(2.1664d , 0.0993d , -0.8016d)}))
        (Polygon (color 0.996093
	    0.858747
	    0.43914)
	  (points {(-1.7026d , 4.3525d , 0.8177d)}
	    {(-1.4293d , 4.443d , 0.8337d)}
	    {(-0.7033d , 3.3243d , -0.4742d)}
	    {(-1.4981d , 3.0609d , -0.5209d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.2664d , 0.7473d , 1.0427d)}
	    {(0.0d , 0.8265d , 1.1383d)}
	    {(0.0d , 0.0742d , 1.3191d)}
	    {(0.3273d , 0.0386d , 1.271d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.0d , 0.8265d , 1.1383d)}
	    {(0.0d , 1.5788d , 0.0043d)}
	    {(-0.2056d , 1.456d , 0.0779d)}
	    {(-0.2664d , 0.7473d , 1.0427d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.8129d , 0.2904d , 0.2626d)}
	    {(1.2308d , 0.4156d , 0.4046d)}
	    {(1.3091d , -0.0679d , 0.13d)}
	    {(1.7377d , -0.2109d , -0.3358d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.0d , 0.8265d , 1.1383d)}
	    {(-0.2664d , 0.7473d , 1.0427d)}
	    {(-0.3273d , 0.0386d , 1.271d)}
	    {(0.0d , 0.0742d , 1.3191d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.5305d , 0.1779d , 0.6603d)}
	    {(0.5216d , -5.0d-4 , 0.6381d)}
	    {(0.4077d , -0.0127d , 0.7873d)}
	    {(0.4166d , 0.1657d , 0.8096d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.0474d , 0.161d , 0.4766d)}
	    {(0.531d , 0.0604d , 0.7179d)}
	    {(0.5292d , -0.0433d , 0.6413d)}
	    {(0.6774d , 0.0199d , 0.4895d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4077d , -0.0127d , 0.7873d)}
	    {(0.5216d , -5.0d-4 , 0.6381d)}
	    {(0.5292d , -0.0433d , 0.6413d)}
	    {(0.4011d , -0.0571d , 0.8092d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4166d , 0.1657d , 0.8096d)}
	    {(0.4077d , -0.0127d , 0.7873d)}
	    {(0.2247d , 0.0072d , 0.8142d)}
	    {(0.2336d , 0.1856d , 0.8365d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.5305d , 0.1779d , 0.6603d)}
	    {(0.4166d , 0.1657d , 0.8096d)}
	    {(0.2336d , 0.1856d , 0.8365d)}
	    {(0.2355d , 0.2385d , 0.484d)}
	    {(0.6418d , 0.2192d , 0.253d)}
	    {(0.6622d , 0.2341d , 0.5254d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.6532d , 0.0557d , 0.5032d)}
	    {(0.6622d , 0.2341d , 0.5254d)}
	    {(0.6418d , 0.2192d , 0.253d)}
	    {(0.6329d , 0.0408d , 0.2307d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.3273d , 0.0386d , 1.271d)}
	    {(0.0d , 0.0742d , 1.3191d)}
	    {(0.0065d , -0.1444d , 1.0577d)}
	    {(0.1952d , -0.0347d , 0.8395d)}
	    {(0.4011d , -0.0571d , 0.8092d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(-0.26d , 1.7441d , 0.5214d)}
	    {(-0.7532d , 1.486d , 0.4264d)}
	    {(-0.2845d , 1.3763d , -0.4307d)}
	    {(-0.2056d , 1.456d , 0.0779d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.0249d , 0.1152d , -0.0972d)}
	    {(0.6545d , 0.0031d , 0.183d)}
	    {(1.0901d , -0.0324d , -0.0818d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.8338d , 3.7428d , -1.5104d)}
	    {(0.7589d , 4.1416d , -2.898d)}
	    {(-0.8596d , 4.1416d , -2.898d)}
	    {(-0.8338d , 3.7428d , -1.5104d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.7377d , -0.2109d , -0.3358d)}
	    {(1.8726d , -0.3538d , -0.9285d)}
	    {(2.1664d , 0.0993d , -0.8016d)}
	    {(1.8129d , 0.2904d , 0.2626d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.6774d , 0.0199d , 0.4895d)}
	    {(0.6532d , 0.0557d , 0.5032d)}
	    {(0.6329d , 0.0408d , 0.2307d)}
	    {(0.6545d , 0.0031d , 0.183d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.6329d , 0.0408d , 0.2307d)}
	    {(0.6418d , 0.2192d , 0.253d)}
	    {(0.2355d , 0.2385d , 0.484d)}
	    {(0.2265d , 0.0601d , 0.4617d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.6329d , 0.0408d , 0.2307d)}
	    {(0.2265d , 0.0601d , 0.4617d)}
	    {(0.1973d , 0.0248d , 0.4429d)}
	    {(0.6545d , 0.0031d , 0.183d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4514d , 0.495d , 0.6651d)}
	    {(0.531d , 0.0604d , 0.7179d)}
	    {(1.0474d , 0.161d , 0.4766d)}
	    {(0.9545d , 0.586d , 0.4401d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.9545d , 0.586d , 0.4401d)}
	    {(0.9186d , 0.5306d , -0.1174d)}
	    {(0.5328d , 0.6681d , -0.1578d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4514d , 0.495d , 0.6651d)}
	    {(0.9545d , 0.586d , 0.4401d)}
	    {(0.5328d , 0.6681d , -0.1578d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.7596d , 1.4932d , 0.3942d)}
	    {(0.2611d , 1.7432d , 0.5217d)}
	    {(0.2056d , 1.456d , 0.0779d)}
	    {(0.2782d , 1.3677d , -0.4207d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.195d , 1.0208d , 0.3262d)}
	    {(0.2782d , 1.3677d , -0.4207d)}
	    {(0.5328d , 0.6681d , -0.1578d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.2056d , 1.456d , 0.0779d)}
	    {(0.2611d , 1.7432d , 0.5217d)}
	    {(0.0d , 1.7931d , 0.0d)}
	    {(0.0d , 1.5788d , 0.0043d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(1.195d , 1.0208d , 0.3262d)}
	    {(1.1516d , 0.9927d , -0.4442d)}
	    {(0.2782d , 1.3677d , -0.4207d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(1.0485d , 1.8985d , -0.728d)}
	    {(0.6509d , 1.8695d , -0.5515d)}
	    {(0.2769d , 1.566d , -0.8645d)}
	    {(1.0485d , 1.2347d , -0.8852d)}
	    {(1.541d , 1.7591d , -0.9942d)}))
        (Polygon (color 0.199976
	    0.196069
	    0.337321)
	  (points {(0.7015d , 1.7112d , -0.0665d)}
	    {(0.2782d , 1.3677d , -0.4207d)}
	    {(0.2769d , 1.566d , -0.8645d)}
	    {(0.6509d , 1.8695d , -0.5515d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(0.4364d , 2.4135d , 0.13d)}
	    {(0.4299d , 3.2713d , -0.8016d)}
	    {(-0.4299d , 3.2713d , -0.8016d)}
	    {(-0.4364d , 2.4135d , 0.13d)}
	    {(0.0d , 2.4135d , 0.13d)}))
        (Polygon (color 1.0
	    0.0
	    0.0)
	  (points {(2.1664d , 1.4587d , -0.8016d)}
	    {(1.709d , 1.5862d , -0.5675d)}
	    {(1.1516d , 0.9927d , -0.4442d)}
	    {(1.195d , 1.0208d , 0.3262d)}))))
    (CompoundBody (bodies (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(1.2199d , -0.2306d , -0.2516d)}
	    {(0.6783d , -0.2349d , 0.0829d)}
	    {(0.8216d , -0.5345d , 0.0314d)}
	    {(1.1131d , -0.5322d , -0.1487d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(0.8216d , -0.5345d , 0.0314d)}
	    {(0.7005d , -0.7931d , -0.1682d)}
	    {(0.8307d , -1.1358d , -0.1847d)}
	    {(0.8873d , -1.1253d , -0.0929d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(0.8873d , -1.1253d , -0.0929d)}
	    {(0.8307d , -1.1358d , -0.1847d)}
	    {(0.9229d , -1.1351d , -0.2417d)}
	    {(0.9795d , -1.1246d , -0.1498d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(1.2199d , -0.2306d , -0.2516d)}
	    {(1.1131d , -0.5322d , -0.1487d)}
	    {(0.992d , -0.7907d , -0.3482d)}
	    {(0.9483d , -0.5963d , -0.6962d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(0.6783d , -0.2349d , 0.0829d)}
	    {(1.2199d , -0.2306d , -0.2516d)}
	    {(0.9483d , -0.5963d , -0.6962d)}
	    {(0.4067d , -0.6006d , -0.3617d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(0.8216d , -0.5345d , 0.0314d)}
	    {(0.6783d , -0.2349d , 0.0829d)}
	    {(0.4067d , -0.6006d , -0.3617d)}
	    {(0.7005d , -0.7931d , -0.1682d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(0.7005d , -0.7931d , -0.1682d)}
	    {(0.4067d , -0.6006d , -0.3617d)}
	    {(0.9483d , -0.5963d , -0.6962d)}
	    {(0.992d , -0.7907d , -0.3482d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(1.1131d , -0.5322d , -0.1487d)}
	    {(0.8216d , -0.5345d , 0.0314d)}
	    {(0.8873d , -1.1253d , -0.0929d)}
	    {(0.9795d , -1.1246d , -0.1498d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(0.9229d , -1.1351d , -0.2417d)}
	    {(0.992d , -0.7907d , -0.3482d)}
	    {(1.1131d , -0.5322d , -0.1487d)}
	    {(0.9795d , -1.1246d , -0.1498d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(0.7005d , -0.7931d , -0.1682d)}
	    {(0.992d , -0.7907d , -0.3482d)}
	    {(0.9229d , -1.1351d , -0.2417d)}
	    {(0.8307d , -1.1358d , -0.1847d)}))))
    (CompoundBody (bodies (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.5306d , -0.2311d , 0.0634d)}
	    {(-0.6766d , -0.5314d , 0.0249d)}
	    {(-0.568d , -0.7925d , -0.1785d)}
	    {(-0.2871d , -0.6026d , -0.3926d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.845d , -1.1238d , -0.1384d)}
	    {(-0.9788d , -0.5314d , -0.1365d)}
	    {(-0.8702d , -0.7925d , -0.3399d)}
	    {(-0.7943d , -1.1355d , -0.2334d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.5306d , -0.2311d , 0.0634d)}
	    {(-0.2871d , -0.6026d , -0.3926d)}
	    {(-0.8486d , -0.6026d , -0.6924d)}
	    {(-1.0921d , -0.2311d , -0.2364d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.2871d , -0.6026d , -0.3926d)}
	    {(-0.568d , -0.7925d , -0.1785d)}
	    {(-0.8702d , -0.7925d , -0.3399d)}
	    {(-0.8486d , -0.6026d , -0.6924d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.6766d , -0.5314d , 0.0249d)}
	    {(-0.5306d , -0.2311d , 0.0634d)}
	    {(-1.0921d , -0.2311d , -0.2364d)}
	    {(-0.9788d , -0.5314d , -0.1365d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.9788d , -0.5314d , -0.1365d)}
	    {(-1.0921d , -0.2311d , -0.2364d)}
	    {(-0.8486d , -0.6026d , -0.6924d)}
	    {(-0.8702d , -0.7925d , -0.3399d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.568d , -0.7925d , -0.1785d)}
	    {(-0.6766d , -0.5314d , 0.0249d)}
	    {(-0.7494d , -1.1238d , -0.0873d)}
	    {(-0.6987d , -1.1355d , -0.1824d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.7494d , -1.1238d , -0.0873d)}
	    {(-0.6766d , -0.5314d , 0.0249d)}
	    {(-0.9788d , -0.5314d , -0.1365d)}
	    {(-0.845d , -1.1238d , -0.1384d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.8702d , -0.7925d , -0.3399d)}
	    {(-0.568d , -0.7925d , -0.1785d)}
	    {(-0.6987d , -1.1355d , -0.1824d)}
	    {(-0.7943d , -1.1355d , -0.2334d)}))
        (Polygon (color 0.694054
	    0.71371
	    0.560859)
	  (points {(-0.845d , -1.1238d , -0.1384d)}
	    {(-0.7943d , -1.1355d , -0.2334d)}
	    {(-0.6987d , -1.1355d , -0.1824d)}
	    {(-0.7494d , -1.1238d , -0.0873d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(1.0633d , 1.558d , -0.0248d)}
	    {(0.9505d , 1.4451d , 0.0052d)}
	    {(1.0633d , 1.3323d , -0.0248d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(1.0633d , 1.558d , -0.0248d)}
	    {(0.8376d , 1.558d , -0.0248d)}
	    {(0.9505d , 1.4451d , 0.0052d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.8376d , 1.558d , -0.0248d)}
	    {(1.0633d , 1.558d , -0.0248d)}
	    {(1.5758d , 2.0704d , -0.3412d)}
	    {(0.3252d , 2.0704d , -0.3412d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.5758d , 2.0704d , -0.3412d)}
	    {(1.0633d , 1.558d , -0.0248d)}
	    {(1.0633d , 1.3323d , -0.0248d)}
	    {(1.5758d , 0.8198d , -0.3412d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.5758d , 2.0704d , -1.2171d)}
	    {(1.5758d , 2.0704d , -0.3412d)}
	    {(1.5758d , 0.8198d , -0.3412d)}
	    {(1.5758d , 0.8198d , -1.2171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.0633d , 1.3323d , -0.0248d)}
	    {(0.8376d , 1.3323d , -0.0248d)}
	    {(0.3252d , 0.8198d , -0.3412d)}
	    {(1.5758d , 0.8198d , -0.3412d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.3252d , 2.0704d , -1.2171d)}
	    {(1.5758d , 2.0704d , -1.2171d)}
	    {(1.5758d , 0.8198d , -1.2171d)}
	    {(0.3252d , 0.8198d , -1.2171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.3252d , 2.0704d , -0.3412d)}
	    {(0.3252d , 2.0704d , -1.2171d)}
	    {(0.3252d , 0.8198d , -1.2171d)}
	    {(0.3252d , 0.8198d , -0.3412d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.8376d , 1.558d , -0.0248d)}
	    {(0.8376d , 1.3323d , -0.0248d)}
	    {(0.9505d , 1.4451d , 0.0052d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(1.0633d , 1.3323d , -0.0248d)}
	    {(0.9505d , 1.4451d , 0.0052d)}
	    {(0.8376d , 1.3323d , -0.0248d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.3252d , 2.0704d , -0.3412d)}
	    {(1.5758d , 2.0704d , -0.3412d)}
	    {(1.5758d , 2.0704d , -1.2171d)}
	    {(0.3252d , 2.0704d , -1.2171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(0.8376d , 1.3323d , -0.0248d)}
	    {(0.8376d , 1.558d , -0.0248d)}
	    {(0.3252d , 2.0704d , -0.3412d)}
	    {(0.3252d , 0.8198d , -0.3412d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(1.5758d , 0.8198d , -1.2171d)}
	    {(1.5758d , 0.8198d , -0.3412d)}
	    {(0.3252d , 0.8198d , -0.3412d)}
	    {(0.3252d , 0.8198d , -1.2171d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.8376d , 1.558d , -0.0248d)}
	    {(-0.9505d , 1.4451d , 0.0052d)}
	    {(-0.8376d , 1.3323d , -0.0248d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.9505d , 1.4451d , 0.0052d)}
	    {(-1.0633d , 1.558d , -0.0248d)}
	    {(-1.0633d , 1.3323d , -0.0248d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.8376d , 1.3323d , -0.0248d)}
	    {(-1.0633d , 1.3323d , -0.0248d)}
	    {(-1.5758d , 0.8198d , -0.3412d)}
	    {(-0.3252d , 0.8198d , -0.3412d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.5758d , 2.0704d , -1.2171d)}
	    {(-0.3252d , 2.0704d , -1.2171d)}
	    {(-0.3252d , 0.8198d , -1.2171d)}
	    {(-1.5758d , 0.8198d , -1.2171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.5758d , 0.8198d , -1.2171d)}
	    {(-1.5758d , 0.8198d , -0.3412d)}
	    {(-1.5758d , 2.0704d , -0.3412d)}
	    {(-1.5758d , 2.0704d , -1.2171d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.9505d , 1.4451d , 0.0052d)}
	    {(-0.8376d , 1.558d , -0.0248d)}
	    {(-1.0633d , 1.558d , -0.0248d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.8376d , 1.3323d , -0.0248d)}
	    {(-0.9505d , 1.4451d , 0.0052d)}
	    {(-1.0633d , 1.3323d , -0.0248d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.8376d , 1.558d , -0.0248d)}
	    {(-0.3252d , 2.0704d , -0.3412d)}
	    {(-1.5758d , 2.0704d , -0.3412d)}
	    {(-1.0633d , 1.558d , -0.0248d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.8376d , 1.558d , -0.0248d)}
	    {(-0.8376d , 1.3323d , -0.0248d)}
	    {(-0.3252d , 0.8198d , -0.3412d)}
	    {(-0.3252d , 2.0704d , -0.3412d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.5758d , 2.0704d , -0.3412d)}
	    {(-0.3252d , 2.0704d , -0.3412d)}
	    {(-0.3252d , 2.0704d , -1.2171d)}
	    {(-1.5758d , 2.0704d , -1.2171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.3252d , 2.0704d , -1.2171d)}
	    {(-0.3252d , 2.0704d , -0.3412d)}
	    {(-0.3252d , 0.8198d , -0.3412d)}
	    {(-0.3252d , 0.8198d , -1.2171d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-1.0633d , 1.3323d , -0.0248d)}
	    {(-1.0633d , 1.558d , -0.0248d)}
	    {(-1.5758d , 2.0704d , -0.3412d)}
	    {(-1.5758d , 0.8198d , -0.3412d)}))
        (Polygon (color 1.0
	    1.0
	    1.0)
	  (points {(-0.3252d , 0.8198d , -0.3412d)}
	    {(-1.5758d , 0.8198d , -0.3412d)}
	    {(-1.5758d , 0.8198d , -1.2171d)}
	    {(-0.3252d , 0.8198d , -1.2171d)}))))))
'
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> origin: origin3dPoint corner: corner3dPoint [ 
	"(JunOpenGL3dObject origin: 1, 2, 3 corner: 10, 10, 10) show."

	| originX originY originZ extent |
	originX := origin3dPoint x min: corner3dPoint x.
	originY := origin3dPoint y min: corner3dPoint y.
	originZ := origin3dPoint z min: corner3dPoint z.
	extent := (corner3dPoint - origin3dPoint) abs.
	^self origin: originX , originY , originZ extent: extent
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> origin: origin3dPoint extent: extent3dPoint [ 
	"(JunOpenGL3dObject origin: 1, 2, 3 extent: 10, 10, 10) show."

	| box transformation |
	box := self box: extent3dPoint.
	transformation := Jun3dTransformation align: Jun3dPoint zero with: origin3dPoint.
	^box transform: transformation
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> panda [
	"(JunOpenGL3dObject panda) show."

	| baseSphere head leftEar leftEyeRound transformation leftEye leftEyeLight noseRound nose leftObjects panda box maximum |
	baseSphere := (JunOpenGL3dTransformedObject 
				object: (JunOpenGL3dObject ball: 3))
				flushAllPaints;
				yourself.
	head := baseSphere scaledBy: 4.
	leftEar := baseSphere scaledBy: 0.5 , 1.2 , 1.2.
	leftEar := leftEar translatedBy: -1 , 3.3 , 3.0.
	leftEyeRound := baseSphere scaledBy: 0.4 , 1.0 , 1.2.
	transformation := Jun3dTransformation rotateX: (JunAngle fromDeg: 30).
	transformation := transformation 
				product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 10)).
	transformation := transformation 
				product: (Jun3dTransformation rotateZ: (JunAngle fromDeg: 20)).
	leftEyeRound := leftEyeRound transform: transformation.
	leftEyeRound := leftEyeRound translatedBy: 3.5 , 1.6 , -0.4.
	leftEye := baseSphere scaledBy: 0.2 , 0.3 , 0.3.
	leftEye := leftEye translatedBy: 3.8 , 1.6 , 0.2.
	leftEyeLight := baseSphere scaledBy: 0.8 * (0.2 , 0.3 , 0.3).
	leftEyeLight := leftEyeLight 
				translatedBy: leftEye center + (0.1 , 0 , 0.05).
	noseRound := baseSphere scaledBy: 1.8.
	noseRound := noseRound translatedBy: 3.2 , 0 , -1.1.
	nose := baseSphere scaledBy: 0.5 , 0.7 , 0.5.
	nose := nose translatedBy: 4.8 , 0 , -0.5.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftEar
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftEyeRound
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftEye
				paint: ColorValue white;
				yourself).
	leftObjects add: (leftEyeLight
				paint: ColorValue black;
				yourself).
	panda := JunOpenGL3dCompoundObject new.
	panda add: leftObjects.
	panda 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	panda add: (head
				paint: ColorValue white;
				yourself).
	panda add: (noseRound
				paint: ColorValue white;
				yourself).
	panda add: (nose
				paint: ColorValue black;
				yourself).
	box := panda boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	panda := JunOpenGL3dTransformedObject object: panda
				transformation: transformation.
	panda name: 'panda'.
	^panda
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> pandaWithBody [
	"(JunOpenGL3dObject pandaWithBody) show."

	"(JunOpenGL3dObject pandaWithBody) showWithAxes."

	| body head hemisphere ball aTransformation breast stomach leftArm rightArm leftLeg rightLeg tail |
	body := self compound.
	head := self panda.
	hemisphere := JunOpenGL3dObject 
				hemisphere: 15
				radius: 0.4
				center: 0 , 0 , 0.
	ball := JunOpenGL3dObject ball.
	aTransformation := (90 asDegrees transformationToRotateX 
				product: (1 , 1 , 1.3) transformationToScale) 
					product: (-0.2 , 0 , -0.6) transformationToTranslate.
	breast := hemisphere transform: aTransformation.
	aTransformation := (-90 asDegrees transformationToRotateX 
				product: (0.43 * (1 , 1 , 0.8)) transformationToScale) 
					product: (-0.19 , 0 , -0.7) transformationToTranslate.
	stomach := ball transform: aTransformation.
	aTransformation := (((0.15 * (2 , 0.8 , 1)) transformationToScale 
				product: 20 asDegrees transformationToRotateY) 
					product: 20 asDegrees transformationToRotateZ) 
					product: (0 , 0.4 , -0.5) transformationToTranslate.
	leftArm := ball transform: aTransformation.
	aTransformation := (((0.15 * (2 , 0.8 , 1)) transformationToScale 
				product: 20 asDegrees transformationToRotateY) 
					product: -20 asDegrees transformationToRotateZ) 
					product: (0 , -0.4 , -0.5) transformationToTranslate.
	rightArm := ball transform: aTransformation.
	aTransformation := (((0.15 * (1.6 , 0.9 , 1)) transformationToScale 
				product: 10 asDegrees transformationToRotateY) 
					product: 30 asDegrees transformationToRotateZ) 
					product: (0 , 0.4 , -0.85) transformationToTranslate.
	leftLeg := ball transform: aTransformation.
	aTransformation := (((0.15 * (1.6 , 0.9 , 1)) transformationToScale 
				product: 10 asDegrees transformationToRotateY) 
					product: -30 asDegrees transformationToRotateZ) 
					product: (0 , -0.4 , -0.85) transformationToTranslate.
	rightLeg := ball transform: aTransformation.
	aTransformation := (0.1 , 0.1 , 0.1) transformationToScale 
				product: (-0.6 , 0 , -0.8) transformationToTranslate.
	tail := ball transform: aTransformation.
	body add: head.
	body add: (breast paint: ColorValue black).
	body add: (stomach paint: ColorValue white).
	body add: (leftArm paint: ColorValue black).
	body add: (rightArm paint: ColorValue black).
	body add: (leftLeg paint: ColorValue black).
	body add: (rightLeg paint: ColorValue black).
	body add: (tail paint: ColorValue white).
	^body
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> penguin [
	"(JunOpenGL3dObject penguin) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:25:51

(CompoundBody (name . "penguin")
  (bodies (CompoundBody (bodies (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0729718d , 2.96024d , 1.29823d)}
	    {(-0.0423881d , 2.92402d , 1.37415d)}
	    {(-2.20804d-7 , 2.94964d , 1.3665d)}
	    {(-2.19913d-7 , 3.01296d , 1.2828d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.103019d , 2.86326d , 1.26201d)}
	    {(-0.0973851d , 2.88539d , 1.31969d)}
	    {(-0.0851785d , 2.87077d , 1.28159d)}
	    {(-0.0901416d , 2.85038d , 1.22083d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.17362d-7 , 2.83884d , 1.39856d)}
	    {(-0.0347422d , 2.84475d , 1.39682d)}
	    {(-0.0653259d , 2.81564d , 1.33981d)}
	    {(-2.13434d-7 , 2.8045d , 1.34303d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0423877d , 2.92402d , 1.37415d)}
	    {(0.0470826d , 2.85078d , 1.35282d)}
	    {(0.0851781d , 2.87077d , 1.28159d)}
	    {(0.0729714d , 2.96024d , 1.29823d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0470826d , 2.85078d , 1.35282d)}
	    {(0.0517774d , 2.88177d , 1.38609d)}
	    {(0.0973847d , 2.88539d , 1.31969d)}
	    {(0.0851781d , 2.87077d , 1.28159d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.13434d-7 , 2.8045d , 1.34303d)}
	    {(-2.10092d-7 , 2.77848d , 1.29259d)}
	    {(0.0690814d , 2.79015d , 1.2883d)}
	    {(0.0653255d , 2.81564d , 1.33981d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.155601d , 2.81644d , 0.983268d)}
	    {(-0.0771302d , 2.94173d , 1.23438d)}
	    {(-2.16201d-7 , 2.99699d , 1.21385d)}
	    {(-2.10901d-7 , 2.98559d , 1.10399d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0851781d , 2.87077d , 1.28159d)}
	    {(0.0973847d , 2.88539d , 1.31969d)}
	    {(0.103019d , 2.86326d , 1.26201d)}
	    {(0.0901412d , 2.85038d , 1.22083d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.155601d , 2.81644d , 0.983268d)}
	    {(-2.10901d-7 , 2.98559d , 1.10399d)}
	    {(-2.12994d-7 , 3.08257d , 1.0549d)}
	    {(-0.17921d , 3.07788d , 0.75389d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0690818d , 2.79015d , 1.2883d)}
	    {(-0.103019d , 2.86326d , 1.26201d)}
	    {(-0.178539d , 2.78304d , 1.03357d)}
	    {(-0.124213d , 2.66943d , 1.09755d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.178539d , 2.78304d , 1.03357d)}
	    {(-0.167003d , 2.77473d , 0.99306d)}
	    {(-0.185917d , 2.80678d , 0.963281d)}
	    {(-0.216232d , 2.74294d , 0.919417d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.16201d-7 , 2.99699d , 1.21385d)}
	    {(0.0771297d , 2.94173d , 1.23438d)}
	    {(0.155601d , 2.81644d , 0.983268d)}
	    {(-2.10901d-7 , 2.98559d , 1.10399d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.10092d-7 , 2.77848d , 1.29259d)}
	    {(-0.0690818d , 2.79015d , 1.2883d)}
	    {(-0.124213d , 2.66943d , 1.09755d)}
	    {(-1.95263d-7 , 2.62033d , 1.1115d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.17921d , 3.07788d , 0.75389d)}
	    {(-2.12994d-7 , 3.08257d , 1.0549d)}
	    {(-1.87347d-7 , 3.1982d , 0.352546d)}
	    {(-0.339774d , 3.06903d , 0.361936d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.95263d-7 , 2.62033d , 1.1115d)}
	    {(-0.124213d , 2.66943d , 1.09755d)}
	    {(-0.151711d , 2.60906d , 1.00218d)}
	    {(-1.87852d-7 , 2.54119d , 1.0211d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.103019d , 2.86326d , 1.26201d)}
	    {(0.0690814d , 2.79015d , 1.2883d)}
	    {(0.124213d , 2.66943d , 1.09755d)}
	    {(0.178539d , 2.78304d , 1.03357d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0771297d , 2.94173d , 1.23438d)}
	    {(0.0901412d , 2.85038d , 1.22083d)}
	    {(0.167003d , 2.77473d , 0.99306d)}
	    {(0.155601d , 2.81644d , 0.983268d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0901412d , 2.85038d , 1.22083d)}
	    {(0.103019d , 2.86326d , 1.26201d)}
	    {(0.178539d , 2.78304d , 1.03357d)}
	    {(0.167003d , 2.77473d , 0.99306d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.185916d , 2.80678d , 0.963281d)}
	    {(0.155601d , 2.81644d , 0.983268d)}
	    {(0.167003d , 2.77473d , 0.99306d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.124213d , 2.66943d , 1.09755d)}
	    {(-1.95263d-7 , 2.62033d , 1.1115d)}
	    {(-1.87852d-7 , 2.54119d , 1.0211d)}
	    {(0.151711d , 2.60906d , 1.00218d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.91305d-7 , 2.43254d , 1.20876d)}
	    {(-1.87852d-7 , 2.54119d , 1.0211d)}
	    {(-0.151711d , 2.60906d , 1.00218d)}
	    {(-0.304898d , 2.35192d , 0.644969d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.325556d , 2.19001d , 0.945306d)}
	    {(-1.82352d-7 , 2.18679d , 1.24967d)}
	    {(-1.91305d-7 , 2.43254d , 1.20876d)}
	    {(-0.304898d , 2.35192d , 0.644969d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-2.12994d-7 , 3.08257d , 1.0549d)}
	    {(0.17921d , 3.07788d , 0.75389d)}
	    {(0.339774d , 3.06903d , 0.361936d)}
	    {(-1.87347d-7 , 3.1982d , 0.352546d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.75327d-7 , 1.77485d , 1.50091d)}
	    {(-1.82352d-7 , 2.18679d , 1.24967d)}
	    {(-0.325556d , 2.19001d , 0.945306d)}
	    {(-0.429513d , 1.79819d , 1.06871d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.17921d , 3.07788d , 0.75389d)}
	    {(0.155601d , 2.81644d , 0.983268d)}
	    {(0.185916d , 2.80678d , 0.963281d)}
	    {(0.216232d , 2.74294d , 0.919417d)}
	    {(0.364321d , 2.74159d , 0.73216d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.429513d , 1.79819d , 1.06871d)}
	    {(-0.325556d , 2.19001d , 0.945306d)}
	    {(-0.672841d , 1.75406d , 0.716599d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.394235d , 2.67238d , 0.340071d)}
	    {(-0.339774d , 3.06903d , 0.361936d)}
	    {(-0.259023d , 2.93851d , 0.108681d)}
	    {(-0.446415d , 2.58505d , -0.00211744d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.339774d , 3.06903d , 0.361936d)}
	    {(-1.87347d-7 , 3.1982d , 0.352546d)}
	    {(-1.63612d-7 , 3.00263d , 0.00512611d)}
	    {(-0.259023d , 2.93851d , 0.108681d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.151711d , 2.60906d , 1.00218d)}
	    {(-1.87852d-7 , 2.54119d , 1.0211d)}
	    {(-1.91305d-7 , 2.43254d , 1.20876d)}
	    {(0.304898d , 2.35192d , 0.644969d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.325556d , 2.19001d , 0.945306d)}
	    {(-0.304898d , 2.35192d , 0.644969d)}
	    {(-0.433001d , 2.33891d , 0.35429d)}
	    {(-0.590078d , 2.03696d , 0.342888d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.672841d , 1.75406d , 0.716599d)}
	    {(-0.325556d , 2.19001d , 0.945306d)}
	    {(-0.590078d , 2.03696d , 0.342888d)}
	    {(-0.916036d , 1.71006d , 0.364619d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.17921d , 3.07788d , 0.75389d)}
	    {(0.364321d , 2.74159d , 0.73216d)}
	    {(0.394234d , 2.67238d , 0.340071d)}
	    {(0.339774d , 3.06903d , 0.361936d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.433001d , 2.33891d , 0.35429d)}
	    {(-0.394235d , 2.67238d , 0.340071d)}
	    {(-0.446415d , 2.58505d , -0.00211744d)}
	    {(-0.40671d , 2.37741d , -0.144439d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.91305d-7 , 2.43254d , 1.20876d)}
	    {(-1.82352d-7 , 2.18679d , 1.24967d)}
	    {(0.325555d , 2.19001d , 0.945306d)}
	    {(0.304898d , 2.35192d , 0.644969d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.75327d-7 , 1.77485d , 1.50091d)}
	    {(0.429513d , 1.79819d , 1.06871d)}
	    {(0.325555d , 2.19001d , 0.945306d)}
	    {(-1.82352d-7 , 2.18679d , 1.24967d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.433001d , 2.33891d , 0.35429d)}
	    {(-0.40671d , 2.37741d , -0.144439d)}
	    {(-0.490144d , 1.91449d , -0.0968196d)}
	    {(-0.590078d , 2.03696d , 0.342888d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.39572d-7 , 2.72053d , -0.262749d)}
	    {(-1.63612d-7 , 3.00263d , 0.00512611d)}
	    {(0.259022d , 2.93851d , 0.108681d)}
	    {(0.446414d , 2.58505d , -0.0021174d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.833674d , 1.6552d , 6.9951d-4)}
	    {(-0.916036d , 1.71006d , 0.364619d)}
	    {(-0.590078d , 2.03696d , 0.342888d)}
	    {(-0.490144d , 1.91449d , -0.0968196d)}
	    {(-0.751313d , 1.60034d , -0.363354d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.19303d , 0.801272d , 0.191579d)}
	    {(-1.12435d , 0.720923d , 0.253149d)}
	    {(-1.05943d , 1.07264d , 0.0684397d)}
	    {(-1.26144d , 0.841112d , 0.211432d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.325555d , 2.19001d , 0.945306d)}
	    {(0.429513d , 1.79819d , 1.06871d)}
	    {(0.672841d , 1.75406d , 0.7166d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.51669d-7 , 1.12482d , 1.6097d)}
	    {(0.585651d , 1.14749d , 1.1936d)}
	    {(0.429513d , 1.79819d , 1.06871d)}
	    {(-1.75327d-7 , 1.77485d , 1.50091d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.61316d , -0.238707d , 0.654359d)}
	    {(-1.52731d , 0.403148d , 0.530414d)}
	    {(-1.64146d , 0.440438d , 0.496209d)}
	    {(-1.76339d , -0.245146d , 0.627665d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.833674d , 1.6552d , 6.9951d-4)}
	    {(-1.07419d , 1.02636d , -0.149268d)}
	    {(-1.05943d , 1.07264d , 0.0684397d)}
	    {(-1.08076d , 1.06258d , 0.361399d)}
	    {(-0.916036d , 1.71006d , 0.364619d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.08076d , 1.06258d , 0.361399d)}
	    {(-1.05943d , 1.07264d , 0.0684397d)}
	    {(-1.12435d , 0.720923d , 0.253149d)}
	    {(-1.18941d , 0.369345d , 0.437859d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.41798d , 0.878939d , 0.203115d)}
	    {(-1.26144d , 0.841112d , 0.211432d)}
	    {(-1.05943d , 1.07264d , 0.0684397d)}
	    {(-1.07419d , 1.02636d , -0.149268d)}
	    {(-1.34622d , 0.814418d , -0.231763d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.4424d , 0.348822d , 0.512574d)}
	    {(-1.52731d , 0.403148d , 0.530414d)}
	    {(-1.61316d , -0.238707d , 0.654359d)}
	    {(-1.52328d , -0.30068d , 0.627799d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.20516d-7 , 2.48042d , -0.458592d)}
	    {(-1.39572d-7 , 2.72053d , -0.262749d)}
	    {(0.446414d , 2.58505d , -0.0021174d)}
	    {(0.406709d , 2.37741d , -0.144439d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.41798d , 0.878939d , 0.203115d)}
	    {(-1.34622d , 0.814418d , -0.231763d)}
	    {(-1.71725d , 0.332456d , -0.147792d)}
	    {(-1.64146d , 0.440438d , 0.496209d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.76339d , -0.245146d , 0.627665d)}
	    {(-1.82429d , -0.857625d , 0.736184d)}
	    {(-1.73428d , -0.87788d , 0.802717d)}
	    {(-1.61316d , -0.238707d , 0.654359d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.76339d , -0.245146d , 0.627665d)}
	    {(-1.64146d , 0.440438d , 0.496209d)}
	    {(-1.71725d , 0.332456d , -0.147792d)}
	    {(-1.75239d , -0.363054d , -0.0243845d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.433001d , 2.33891d , 0.35429d)}
	    {(0.590077d , 2.03696d , 0.342888d)}
	    {(0.490144d , 1.91449d , -0.0968195d)}
	    {(0.406709d , 2.37741d , -0.144439d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.63462d , -0.963729d , 0.746244d)}
	    {(-1.52328d , -0.30068d , 0.627799d)}
	    {(-1.61316d , -0.238707d , 0.654359d)}
	    {(-1.73428d , -0.87788d , 0.802717d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.325555d , 2.19001d , 0.945306d)}
	    {(0.672841d , 1.75406d , 0.7166d)}
	    {(0.916035d , 1.71006d , 0.364619d)}
	    {(0.590077d , 2.03696d , 0.342888d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.751313d , 1.60034d , -0.363354d)}
	    {(-0.490144d , 1.91449d , -0.0968196d)}
	    {(-1.08995d-7 , 2.15406d , -0.395815d)}
	    {(-8.16537d-8 , 1.8104d , -0.677641d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.17881d , 0.350431d , 0.120217d)}
	    {(-1.18941d , 0.369345d , 0.437859d)}
	    {(-1.12435d , 0.720923d , 0.253149d)}
	    {(-1.19303d , 0.801272d , 0.191579d)}
	    {(-1.15118d , 0.822734d , -0.253896d)}
	    {(-1.15775d , 0.312336d , -0.514931d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.34622d , 0.814418d , -0.231763d)}
	    {(-1.07419d , 1.02636d , -0.149268d)}
	    {(-0.989946d , 0.866732d , -0.607487d)}
	    {(-1.34313d , 0.663914d , -0.766844d)}
	    {(-1.4534d , 0.607978d , -0.661813d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.4534d , 0.607978d , -0.661813d)}
	    {(-1.61544d , 0.19483d , -0.759064d)}
	    {(-1.71725d , 0.332456d , -0.147792d)}
	    {(-1.34622d , 0.814418d , -0.231763d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.833674d , 1.6552d , 6.9951d-4)}
	    {(-0.751313d , 1.60034d , -0.363354d)}
	    {(-0.904634d , 0.957947d , -0.663691d)}
	    {(-0.989946d , 0.866732d , -0.607487d)}
	    {(-1.07419d , 1.02636d , -0.149268d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.51669d-7 , 1.12482d , 1.6097d)}
	    {(-1.19303d-7 , 0.370016d , 1.62405d)}
	    {(0.846417d , 0.41522d , 1.11969d)}
	    {(0.585651d , 1.14749d , 1.1936d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.82429d , -0.857625d , 0.736184d)}
	    {(-1.76339d , -0.245146d , 0.627665d)}
	    {(-1.75239d , -0.363054d , -0.0243845d)}
	    {(-1.91376d , -1.03576d , 0.0980845d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.15118d , 0.822734d , -0.253896d)}
	    {(-1.46225d , 0.236279d , -0.135854d)}
	    {(-1.4821d , 0.123602d , -0.784148d)}
	    {(-1.2652d , 0.634806d , -0.764161d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.52328d , -0.30068d , 0.627799d)}
	    {(-1.63462d , -0.963729d , 0.746244d)}
	    {(-1.65447d , -1.07627d , 0.0979504d)}
	    {(-1.54314d , -0.413222d , -0.0204944d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.34313d , 0.663914d , -0.766844d)}
	    {(-1.2652d , 0.634806d , -0.764161d)}
	    {(-1.4821d , 0.123602d , -0.784148d)}
	    {(-1.5764d , 0.167197d , -0.788843d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.82429d , -0.857625d , 0.736184d)}
	    {(-1.91376d , -1.03576d , 0.0980845d)}
	    {(-2.14032d , -1.54442d , 0.172532d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.75239d , -0.363054d , -0.0243845d)}
	    {(-1.71725d , 0.332456d , -0.147792d)}
	    {(-1.61544d , 0.19483d , -0.759064d)}
	    {(-1.78029d , -0.496254d , -0.714932d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.73428d , -0.87788d , 0.802717d)}
	    {(-1.82429d , -0.857625d , 0.736184d)}
	    {(-2.14032d , -1.54442d , 0.172532d)}
	    {(-2.07205d , -1.63375d , 0.207542d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.63462d , -0.963729d , 0.746244d)}
	    {(-1.9595d , -1.64314d , 0.205798d)}
	    {(-1.65447d , -1.07627d , 0.0979504d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.61544d , 0.19483d , -0.759064d)}
	    {(-1.5764d , 0.167197d , -0.788843d)}
	    {(-1.6813d , -0.479755d , -0.743101d)}
	    {(-1.78029d , -0.496254d , -0.714932d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.4821d , 0.123602d , -0.784148d)}
	    {(-1.56299d , -0.525899d , -0.668923d)}
	    {(-1.6813d , -0.479755d , -0.743101d)}
	    {(-1.5764d , 0.167197d , -0.788843d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.56299d , -0.525899d , -0.668923d)}
	    {(-1.54314d , -0.413222d , -0.0204944d)}
	    {(-1.65447d , -1.07627d , 0.0979504d)}
	    {(-1.67432d , -1.18881d , -0.550478d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.78029d , -0.496254d , -0.714932d)}
	    {(-1.6813d , -0.479755d , -0.743101d)}
	    {(-1.65997d , -1.19673d , -0.562416d)}
	    {(-1.81316d , -1.17379d , -0.513187d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.65997d , -1.19673d , -0.562416d)}
	    {(-1.6813d , -0.479755d , -0.743101d)}
	    {(-1.56299d , -0.525899d , -0.668923d)}
	    {(-1.67432d , -1.18881d , -0.550478d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-2.15615d , -1.65428d , -0.363085d)}
	    {(-1.81316d , -1.17379d , -0.513187d)}
	    {(-1.65997d , -1.19673d , -0.562416d)}
	    {(-2.0919d , -1.7463d , -0.440886d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-2.07205d , -1.63375d , 0.207542d)}
	    {(-2.0919d , -1.7463d , -0.440886d)}
	    {(-1.97936d , -1.75569d , -0.44263d)}
	    {(-1.9595d , -1.64314d , 0.205798d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.18941d , -0.330861d , 0.282257d)}
	    {(-1.18941d , 0.369345d , 0.437859d)}
	    {(-1.17881d , 0.350431d , 0.120217d)}
	    {(-1.17533d , -0.346287d , -0.105807d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.08995d-7 , 2.15406d , -0.395815d)}
	    {(0.490144d , 1.91449d , -0.0968195d)}
	    {(0.751313d , 1.60034d , -0.363354d)}
	    {(-8.16537d-8 , 1.8104d , -0.677641d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.590077d , 2.03696d , 0.342888d)}
	    {(0.916035d , 1.71006d , 0.364619d)}
	    {(0.833674d , 1.6552d , 6.99589d-4)}
	    {(0.751313d , 1.60034d , -0.363354d)}
	    {(0.490144d , 1.91449d , -0.0968195d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.904634d , 0.957947d , -0.663691d)}
	    {(-0.751313d , 1.60034d , -0.363354d)}
	    {(-8.16537d-8 , 1.8104d , -0.677641d)}
	    {(-3.81063d-8 , 1.12307d , -0.986564d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.832064d , -0.0419254d , 1.14115d)}
	    {(-1.18941d , -0.330861d , 0.282257d)}
	    {(-1.15051d , -0.638978d , 0.190775d)}
	    {(-0.998397d , -0.97674d , 0.473271d)}
	    {(-0.721131d , -1.0147d , 0.868177d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.19303d-7 , 0.370016d , 1.62405d)}
	    {(-9.68458d-8 , -0.0621803d , 1.54249d)}
	    {(0.83193d , -0.0419253d , 1.14102d)}
	    {(0.846417d , 0.41522d , 1.11969d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.929986d , 1.13595d , 0.747317d)}
	    {(0.585651d , 1.14749d , 1.1936d)}
	    {(0.846417d , 0.41522d , 1.11969d)}
	    {(1.18941d , 0.369345d , 0.437859d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.08076d , 1.06258d , 0.361399d)}
	    {(1.03636d , 1.04071d , 0.100097d)}
	    {(1.00805d , 1.14225d , -0.0846128d)}
	    {(0.833674d , 1.6552d , 6.99589d-4)}
	    {(0.916035d , 1.71006d , 0.364619d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.08076d , 1.06258d , 0.361399d)}
	    {(0.929986d , 1.13595d , 0.747317d)}
	    {(1.18941d , 0.369345d , 0.437859d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.23904d , 0.79537d , 0.277831d)}
	    {(1.03636d , 1.04071d , 0.100097d)}
	    {(1.09846d , 0.862842d , 0.24215d)}
	    {(1.17184d , 0.735812d , 0.257308d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.83193d , -0.0419253d , 1.14102d)}
	    {(-9.68458d-8 , -0.0621803d , 1.54249d)}
	    {(-4.36765d-8 , -1.08754d , 1.35148d)}
	    {(0.720997d , -1.0147d , 0.868042d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.882501d , 0.624745d , -0.6763d)}
	    {(-0.904634d , 0.957947d , -0.663691d)}
	    {(-3.81063d-8 , 1.12307d , -0.986564d)}
	    {(3.57081d-9 , 0.416696d , -1.23365d)}
	    {(-1.00376d , 0.295166d , -0.790184d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.17184d , 0.735812d , 0.257308d)}
	    {(1.09846d , 0.862842d , 0.24215d)}
	    {(1.10692d , 0.829173d , -0.123245d)}
	    {(1.2369d , 0.734873d , -0.145914d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.751313d , 1.60034d , -0.363354d)}
	    {(0.833674d , 1.6552d , 6.99589d-4)}
	    {(1.00805d , 1.14225d , -0.0846128d)}
	    {(0.972239d , 0.948423d , -0.598231d)}
	    {(0.904633d , 0.957947d , -0.663691d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.17533d , -0.346287d , -0.105807d)}
	    {(-1.00376d , -0.367078d , -0.929689d)}
	    {(-1.00376d , -1.04864d , -0.919628d)}
	    {(-1.17533d , -1.03013d , -0.160804d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.877537d , -1.95944d , 0.518745d)}
	    {(-1.01516d , -1.70511d , 0.502648d)}
	    {(-1.18941d , -1.70552d , 0.136985d)}
	    {(-1.06332d , -1.98949d , 0.204457d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.2369d , 0.734873d , -0.145914d)}
	    {(1.10692d , 0.829173d , -0.123245d)}
	    {(1.0495d , 0.801809d , -0.59367d)}
	    {(1.38914d , 0.495167d , -0.534247d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.67633d , 0.38799d , 0.546377d)}
	    {(1.55038d , 0.360089d , 0.632226d)}
	    {(1.64119d , -0.206782d , 0.744098d)}
	    {(1.78056d , -0.21255d , 0.690174d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.43314d , 0.612136d , -0.533576d)}
	    {(0.972239d , 0.948423d , -0.598231d)}
	    {(1.00805d , 1.14225d , -0.0846128d)}
	    {(1.39142d , 0.760896d , -0.137329d)}
	    {(1.49833d , 0.566932d , -0.513187d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.38914d , 0.495167d , -0.534247d)}
	    {(1.43314d , 0.612136d , -0.533576d)}
	    {(1.71269d , 0.172831d , -0.666642d)}
	    {(1.62281d , 0.135943d , -0.652289d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.43314d , 0.612136d , -0.533576d)}
	    {(1.49833d , 0.566932d , -0.513187d)}
	    {(1.75561d , 0.202878d , -0.628412d)}
	    {(1.71269d , 0.172831d , -0.666642d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.58552d , -0.352457d , 0.0912436d)}
	    {(1.53965d , 0.225145d , -0.0254574d)}
	    {(1.62281d , 0.135943d , -0.652289d)}
	    {(1.66869d , -0.441794d , -0.535722d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.92355d , -0.293838d , 0.0499287d)}
	    {(1.89619d , -0.397662d , -0.515736d)}
	    {(1.75561d , 0.202878d , -0.628412d)}
	    {(1.78298d , 0.306702d , -0.0627481d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.64857d , -0.960643d , 0.212908d)}
	    {(1.58552d , -0.352457d , 0.0912436d)}
	    {(1.66869d , -0.441794d , -0.535722d)}
	    {(1.76889d , -1.08808d , -0.45497d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.9866d , -0.902159d , 0.171727d)}
	    {(1.8931d , -0.882843d , 0.873542d)}
	    {(2.26829d , -1.4917d , 0.258381d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.92355d , -0.293838d , 0.0499287d)}
	    {(1.9866d , -0.902159d , 0.171727d)}
	    {(1.99652d , -1.04408d , -0.434984d)}
	    {(1.89619d , -0.397662d , -0.515736d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.85863d , -1.05508d , -0.437264d)}
	    {(1.75414d , -0.392296d , -0.553831d)}
	    {(1.89619d , -0.397662d , -0.515736d)}
	    {(1.99652d , -1.04408d , -0.434984d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.99652d , -1.04408d , -0.434984d)}
	    {(1.9866d , -0.902159d , 0.171727d)}
	    {(2.26829d , -1.4917d , 0.258381d)}
	    {(2.25622d , -1.4359d , -0.194473d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.85863d , -1.05508d , -0.437264d)}
	    {(1.99652d , -1.04408d , -0.434984d)}
	    {(2.25622d , -1.4359d , -0.194473d)}
	    {(2.29646d , -1.52912d , -0.214593d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(2.26158d , -1.59177d , 0.290708d)}
	    {(2.15441d , -1.59807d , 0.29983d)}
	    {(2.18928d , -1.53556d , -0.205338d)}
	    {(2.29646d , -1.52912d , -0.214593d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.904633d , 0.957947d , -0.663691d)}
	    {(0.972239d , 0.948423d , -0.598231d)}
	    {(1.0495d , 0.801809d , -0.59367d)}
	    {(0.845344d , 0.738227d , -0.614194d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.18941d , 0.369345d , 0.437859d)}
	    {(0.846417d , 0.41522d , 1.11969d)}
	    {(0.83193d , -0.0419253d , 1.14102d)}
	    {(1.18941d , -0.330861d , 0.282257d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.10692d , 0.829173d , -0.123245d)}
	    {(1.09846d , 0.862842d , 0.24215d)}
	    {(1.17533d , 0.343993d , 0.0143818d)}
	    {(1.00698d , 0.300531d , -0.785623d)}
	    {(0.845344d , 0.738227d , -0.614194d)}
	    {(1.0495d , 0.801809d , -0.59367d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.00376d , 0.295166d , -0.790184d)}
	    {(3.57081d-9 , 0.416696d , -1.23365d)}
	    {(4.09617d-8 , -0.295582d , -1.37677d)}
	    {(-1.00376d , -0.367078d , -0.929689d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.513887d , -1.81565d , 0.598825d)}
	    {(-0.877537d , -1.95944d , 0.518745d)}
	    {(-0.723009d , -2.34549d , 0.27716d)}
	    {(-0.450573d , -2.22262d , 0.353619d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.17533d , -0.346287d , -0.105807d)}
	    {(1.17533d , 0.343993d , 0.0143818d)}
	    {(1.18941d , 0.369345d , 0.437859d)}
	    {(1.18941d , -0.330861d , 0.282257d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.720997d , -1.0147d , 0.868042d)}
	    {(1.01919d , -0.977411d , 0.483734d)}
	    {(1.1713d , -0.639649d , 0.201238d)}
	    {(1.18941d , -0.330861d , 0.282257d)}
	    {(0.83193d , -0.0419253d , 1.14102d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.785116d , -2.77179d , 0.0210889d)}
	    {(-0.937229d , -2.43094d , 0.0527456d)}
	    {(-0.928913d , -2.39902d , -0.186827d)}
	    {(-0.912816d , -2.61793d , -0.146451d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.1713d , -0.639649d , 0.201238d)}
	    {(1.01919d , -0.977411d , 0.483734d)}
	    {(1.11496d , -1.03522d , 0.329609d)}
	    {(1.18941d , -1.03093d , 0.134839d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.723009d , -2.34549d , 0.27716d)}
	    {(-0.937229d , -2.43094d , 0.0527456d)}
	    {(-0.785116d , -2.77179d , 0.0210889d)}
	    {(-0.659427d , -2.75958d , 0.146777d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.00698d , 0.300531d , -0.785623d)}
	    {(1.17533d , 0.343993d , 0.0143818d)}
	    {(1.17533d , -0.346287d , -0.105807d)}
	    {(1.00698d , -0.361713d , -0.925128d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.00376d , -0.367078d , -0.929689d)}
	    {(4.09617d-8 , -0.295582d , -1.37677d)}
	    {(7.20026d-8 , -1.02557d , -1.35692d)}
	    {(-1.00376d , -1.04864d , -0.919628d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.785786d , -2.96173d , 0.0818538d)}
	    {(-0.785116d , -2.77179d , 0.0210889d)}
	    {(-0.464121d , -2.81646d , 0.085878d)}
	    {(-0.602552d , -2.9679d , 0.0880242d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.18941d , -0.330861d , 0.282257d)}
	    {(1.1713d , -0.639649d , 0.201238d)}
	    {(1.18941d , -1.03093d , 0.134839d)}
	    {(1.17533d , -1.03013d , -0.160804d)}
	    {(1.17533d , -0.346287d , -0.105807d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.18941d , -1.70552d , 0.136985d)}
	    {(1.18941d , -1.03093d , 0.134839d)}
	    {(1.11496d , -1.03522d , 0.329609d)}
	    {(1.01516d , -1.70511d , 0.502648d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.441854d , -2.40975d , 0.20714d)}
	    {(-0.357078d , -2.73409d , -0.193265d)}
	    {(0.00147561d , -2.57447d , 0.0281982d)}
	    {(4.10438d-8 , -2.31491d , 0.640677d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.17533d , -0.346287d , -0.105807d)}
	    {(1.17533d , -1.03013d , -0.160804d)}
	    {(1.00698d , -1.04327d , -0.915067d)}
	    {(1.00698d , -0.361713d , -0.925128d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.912816d , -2.61793d , -0.146451d)}
	    {(-0.928913d , -2.39902d , -0.186827d)}
	    {(-0.7603d , -2.3023d , -0.876704d)}
	    {(-0.687865d , -2.67749d , -1.14082d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.01516d , -1.70511d , 0.502648d)}
	    {(0.877537d , -1.95944d , 0.518745d)}
	    {(1.06332d , -1.98949d , 0.204457d)}
	    {(1.18941d , -1.70552d , 0.136985d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.17533d , -1.03013d , -0.160804d)}
	    {(1.18941d , -1.03093d , 0.134839d)}
	    {(1.18941d , -1.70552d , 0.136985d)}
	    {(1.17533d , -1.69707d , -0.100307d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(4.10438d-8 , -2.31491d , 0.640677d)}
	    {(0.00147561d , -2.57447d , 0.0281982d)}
	    {(0.350774d , -2.73249d , -0.179717d)}
	    {(0.442927d , -2.40988d , 0.210359d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.05219d , -1.9974d , -0.048261d)}
	    {(1.17533d , -1.69707d , -0.100307d)}
	    {(1.18941d , -1.70552d , 0.136985d)}
	    {(1.06332d , -1.98949d , 0.204457d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.995043d , -1.67279d , -0.912787d)}
	    {(0.00871914d , -1.69841d , -1.33693d)}
	    {(0.00871915d , -2.03376d , -1.31923d)}
	    {(-0.877671d , -1.98359d , -0.891593d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.00698d , -1.04327d , -0.915067d)}
	    {(1.17533d , -1.03013d , -0.160804d)}
	    {(1.17533d , -1.69707d , -0.100307d)}
	    {(1.0157d , -1.66742d , -0.908226d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.652452d , -2.90995d , 0.25543d)}
	    {(0.502351d , -2.70472d , 0.213712d)}
	    {(0.463585d , -2.81512d , 0.0929874d)}
	    {(0.602687d , -2.9679d , 0.0881584d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.00871915d , -2.03376d , -1.31923d)}
	    {(0.00871914d , -1.69841d , -1.33693d)}
	    {(1.0157d , -1.66742d , -0.908226d)}
	    {(0.898329d , -1.97822d , -0.887032d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.05219d , -1.9974d , -0.048261d)}
	    {(0.928913d , -2.39902d , -0.186827d)}
	    {(0.780957d , -2.29694d , -0.872143d)}
	    {(0.898329d , -1.97822d , -0.887032d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.350774d , -2.73249d , -0.179717d)}
	    {(0.00147561d , -2.57447d , 0.0281982d)}
	    {(-0.0402415d , -2.85428d , -1.51158d)}
	    {(0.430989d , -2.93799d , -1.33184d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.913218d , -2.61753d , -0.146987d)}
	    {(0.350774d , -2.73249d , -0.179717d)}
	    {(0.430989d , -2.93799d , -1.33184d)}
	    {(0.660769d , -2.74697d , -1.0036d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.00147561d , -2.57447d , 0.0281982d)}
	    {(-0.357078d , -2.73409d , -0.193265d)}
	    {(-0.436086d , -2.83282d , -1.40239d)}
	    {(-0.0402415d , -2.85428d , -1.51158d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.784847d , -2.77139d , 0.0220279d)}
	    {(0.913218d , -2.61753d , -0.146987d)}
	    {(0.928913d , -2.39902d , -0.186827d)}
	    {(0.937229d , -2.43094d , 0.0527457d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.912816d , -2.61793d , -0.146451d)}
	    {(-0.687865d , -2.67749d , -1.14082d)}
	    {(-0.436086d , -2.83282d , -1.40239d)}
	    {(-0.357078d , -2.73409d , -0.193265d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.652452d , -2.90995d , 0.25543d)}
	    {(0.785787d , -2.96173d , 0.0818539d)}
	    {(0.784847d , -2.77139d , 0.0220279d)}
	    {(0.65983d , -2.75904d , 0.14946d)}
	    {(0.502351d , -2.70472d , 0.213712d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.785116d , -2.77179d , 0.0210889d)}
	    {(-0.912816d , -2.61793d , -0.146451d)}
	    {(-0.357078d , -2.73409d , -0.193265d)}
	    {(-0.464121d , -2.81646d , 0.085878d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.882501d , 0.624745d , -0.6763d)}
	    {(-1.2652d , 0.634806d , -0.764161d)}
	    {(-1.34313d , 0.663914d , -0.766844d)}
	    {(-0.989946d , 0.866732d , -0.607487d)}
	    {(-0.904634d , 0.957947d , -0.663691d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.364321d , 2.74159d , 0.73216d)}
	    {(0.304898d , 2.35192d , 0.644969d)}
	    {(0.433001d , 2.33891d , 0.35429d)}
	    {(0.394234d , 2.67238d , 0.340071d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.859563d , 1.11449d , 0.706941d)}
	    {(-1.08076d , 1.06258d , 0.361399d)}
	    {(-1.18941d , 0.369345d , 0.437859d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.26144d , 0.841112d , 0.211432d)}
	    {(-1.52731d , 0.403148d , 0.530414d)}
	    {(-1.4424d , 0.348822d , 0.512574d)}
	    {(-1.19303d , 0.801272d , 0.191579d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.859563d , 1.11449d , 0.706941d)}
	    {(-1.18941d , 0.369345d , 0.437859d)}
	    {(-0.846417d , 0.41522d , 1.11969d)}
	    {(-0.585651d , 1.14749d , 1.1936d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.51669d-7 , 1.12482d , 1.6097d)}
	    {(-0.585651d , 1.14749d , 1.1936d)}
	    {(-0.846417d , 0.41522d , 1.11969d)}
	    {(-1.19303d-7 , 0.370016d , 1.62405d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.304898d , 2.35192d , 0.644969d)}
	    {(0.325555d , 2.19001d , 0.945306d)}
	    {(0.590077d , 2.03696d , 0.342888d)}
	    {(0.433001d , 2.33891d , 0.35429d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.394234d , 2.67238d , 0.340071d)}
	    {(0.433001d , 2.33891d , 0.35429d)}
	    {(0.406709d , 2.37741d , -0.144439d)}
	    {(0.446414d , 2.58505d , -0.0021174d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.490144d , 1.91449d , -0.0968196d)}
	    {(-0.40671d , 2.37741d , -0.144439d)}
	    {(-1.20516d-7 , 2.48042d , -0.458592d)}
	    {(-1.08995d-7 , 2.15406d , -0.395815d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.846417d , 0.41522d , 1.11969d)}
	    {(-0.832064d , -0.0419254d , 1.14115d)}
	    {(-9.68458d-8 , -0.0621803d , 1.54249d)}
	    {(-1.19303d-7 , 0.370016d , 1.62405d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.15118d , 0.822734d , -0.253896d)}
	    {(-1.19303d , 0.801272d , 0.191579d)}
	    {(-1.4424d , 0.348822d , 0.512574d)}
	    {(-1.46225d , 0.236279d , -0.135854d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.08995d-7 , 2.15406d , -0.395815d)}
	    {(-1.20516d-7 , 2.48042d , -0.458592d)}
	    {(0.406709d , 2.37741d , -0.144439d)}
	    {(0.490144d , 1.91449d , -0.0968195d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.846417d , 0.41522d , 1.11969d)}
	    {(-1.18941d , 0.369345d , 0.437859d)}
	    {(-1.18941d , -0.330861d , 0.282257d)}
	    {(-0.832064d , -0.0419254d , 1.14115d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.929986d , 1.13595d , 0.747317d)}
	    {(0.672841d , 1.75406d , 0.7166d)}
	    {(0.429513d , 1.79819d , 1.06871d)}
	    {(0.585651d , 1.14749d , 1.1936d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.52328d , -0.30068d , 0.627799d)}
	    {(-1.54314d , -0.413222d , -0.0204944d)}
	    {(-1.46225d , 0.236279d , -0.135854d)}
	    {(-1.4424d , 0.348822d , 0.512574d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.882501d , 0.624745d , -0.6763d)}
	    {(-1.15118d , 0.822734d , -0.253896d)}
	    {(-1.2652d , 0.634806d , -0.764161d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.00376d , 0.295166d , -0.790184d)}
	    {(-1.15775d , 0.312336d , -0.514931d)}
	    {(-1.15118d , 0.822734d , -0.253896d)}
	    {(-0.882501d , 0.624745d , -0.6763d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.08076d , 1.06258d , 0.361399d)}
	    {(0.916035d , 1.71006d , 0.364619d)}
	    {(0.672841d , 1.75406d , 0.7166d)}
	    {(0.929986d , 1.13595d , 0.747317d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.832064d , -0.0419254d , 1.14115d)}
	    {(-0.721131d , -1.0147d , 0.868177d)}
	    {(-4.36765d-8 , -1.08754d , 1.35148d)}
	    {(-9.68458d-8 , -0.0621803d , 1.54249d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.11496d , -1.03522d , 0.329608d)}
	    {(-0.998397d , -0.97674d , 0.473271d)}
	    {(-1.15051d , -0.638978d , 0.190775d)}
	    {(-1.18941d , -1.03093d , 0.134839d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.18941d , -0.330861d , 0.282257d)}
	    {(-1.17533d , -0.346287d , -0.105807d)}
	    {(-1.17533d , -1.03013d , -0.160804d)}
	    {(-1.18941d , -1.03093d , 0.134839d)}
	    {(-1.15051d , -0.638978d , 0.190775d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.671768d , -1.53959d , 0.649932d)}
	    {(-0.721131d , -1.0147d , 0.868177d)}
	    {(-0.998397d , -0.97674d , 0.473271d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.17881d , 0.350431d , 0.120217d)}
	    {(-1.15775d , 0.312336d , -0.514931d)}
	    {(-1.00376d , 0.295166d , -0.790184d)}
	    {(-1.00376d , -0.367078d , -0.929689d)}
	    {(-1.17533d , -0.346287d , -0.105807d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.09846d , 0.862842d , 0.24215d)}
	    {(1.03636d , 1.04071d , 0.100097d)}
	    {(1.08076d , 1.06258d , 0.361399d)}
	    {(1.18941d , 0.369345d , 0.437859d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.01516d , -1.70511d , 0.502648d)}
	    {(-0.671768d , -1.53959d , 0.649932d)}
	    {(-0.998397d , -0.97674d , 0.473271d)}
	    {(-1.11496d , -1.03522d , 0.329608d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-3.81063d-8 , 1.12307d , -0.986564d)}
	    {(-8.16537d-8 , 1.8104d , -0.677641d)}
	    {(0.751313d , 1.60034d , -0.363354d)}
	    {(0.904633d , 0.957947d , -0.663691d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.01516d , -1.70511d , 0.502648d)}
	    {(-1.11496d , -1.03522d , 0.329608d)}
	    {(-1.18941d , -1.03093d , 0.134839d)}
	    {(-1.18941d , -1.70552d , 0.136985d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-4.36765d-8 , -1.08754d , 1.35148d)}
	    {(-0.721131d , -1.0147d , 0.868177d)}
	    {(-0.671768d , -1.53959d , 0.649932d)}
	    {(-1.20669d-8 , -1.61806d , 1.15886d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.00805d , 1.14225d , -0.0846128d)}
	    {(1.03636d , 1.04071d , 0.100097d)}
	    {(1.23904d , 0.79537d , 0.277831d)}
	    {(1.29659d , 0.7837d , 0.30211d)}
	    {(1.39142d , 0.760896d , -0.137329d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.18941d , -1.03093d , 0.134839d)}
	    {(-1.17533d , -1.03013d , -0.160804d)}
	    {(-1.17533d , -1.69707d , -0.100307d)}
	    {(-1.18941d , -1.70552d , 0.136985d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.17184d , 0.735812d , 0.257308d)}
	    {(1.45662d , 0.314616d , 0.601374d)}
	    {(1.55038d , 0.360089d , 0.632226d)}
	    {(1.23904d , 0.79537d , 0.277831d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.09846d , 0.862842d , 0.24215d)}
	    {(1.18941d , 0.369345d , 0.437859d)}
	    {(1.17533d , 0.343993d , 0.0143818d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.01516d , -1.70511d , 0.502648d)}
	    {(-0.877537d , -1.95944d , 0.518745d)}
	    {(-0.513887d , -1.81565d , 0.598825d)}
	    {(-0.671768d , -1.53959d , 0.649932d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.67633d , 0.38799d , 0.546377d)}
	    {(1.29659d , 0.7837d , 0.30211d)}
	    {(1.23904d , 0.79537d , 0.277831d)}
	    {(1.55038d , 0.360089d , 0.632226d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.20669d-8 , -1.61806d , 1.15886d)}
	    {(-0.671768d , -1.53959d , 0.649932d)}
	    {(-0.513887d , -1.81565d , 0.598825d)}
	    {(4.49723d-9 , -1.87346d , 1.03531d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.06332d , -1.98949d , 0.204457d)}
	    {(-1.18941d , -1.70552d , 0.136985d)}
	    {(-1.17533d , -1.69707d , -0.100307d)}
	    {(-1.05219d , -1.9974d , -0.0482611d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(3.57081d-9 , 0.416696d , -1.23365d)}
	    {(-3.81063d-8 , 1.12307d , -0.986564d)}
	    {(0.904633d , 0.957947d , -0.663691d)}
	    {(0.845344d , 0.738227d , -0.614194d)}
	    {(1.00698d , 0.300531d , -0.785623d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.720997d , -1.0147d , 0.868042d)}
	    {(-4.36765d-8 , -1.08754d , 1.35148d)}
	    {(-1.20669d-8 , -1.61806d , 1.15886d)}
	    {(0.6715d , -1.53999d , 0.650067d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.17533d , -1.69707d , -0.100307d)}
	    {(-1.17533d , -1.03013d , -0.160804d)}
	    {(-1.00376d , -1.04864d , -0.919628d)}
	    {(-0.995043d , -1.67279d , -0.912787d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(4.49723d-9 , -1.87346d , 1.03531d)}
	    {(-0.513887d , -1.81565d , 0.598825d)}
	    {(-0.450573d , -2.22262d , 0.353619d)}
	    {(2.42569d-8 , -2.12819d , 0.837995d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.877537d , -1.95944d , 0.518745d)}
	    {(-1.06332d , -1.98949d , 0.204457d)}
	    {(-0.937229d , -2.43094d , 0.0527456d)}
	    {(-0.723009d , -2.34549d , 0.27716d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.720997d , -1.0147d , 0.868042d)}
	    {(0.6715d , -1.53999d , 0.650067d)}
	    {(1.01919d , -0.977411d , 0.483734d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.06332d , -1.98949d , 0.204457d)}
	    {(-1.05219d , -1.9974d , -0.0482611d)}
	    {(-0.928913d , -2.39902d , -0.186827d)}
	    {(-0.937229d , -2.43094d , 0.0527456d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.20669d-8 , -1.61806d , 1.15886d)}
	    {(4.49723d-9 , -1.87346d , 1.03531d)}
	    {(0.513752d , -1.81565d , 0.598826d)}
	    {(0.6715d , -1.53999d , 0.650067d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(4.10438d-8 , -2.31491d , 0.640677d)}
	    {(2.42569d-8 , -2.12819d , 0.837995d)}
	    {(-0.450573d , -2.22262d , 0.353619d)}
	    {(-0.441854d , -2.40975d , 0.20714d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.05219d , -1.9974d , -0.0482611d)}
	    {(-1.17533d , -1.69707d , -0.100307d)}
	    {(-0.995043d , -1.67279d , -0.912787d)}
	    {(-0.877671d , -1.98359d , -0.891593d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.450573d , -2.22262d , 0.353619d)}
	    {(-0.723009d , -2.34549d , 0.27716d)}
	    {(-0.659427d , -2.75958d , 0.146777d)}
	    {(-0.501143d , -2.70552d , 0.209286d)}
	    {(-0.441854d , -2.40975d , 0.20714d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(4.09617d-8 , -0.295582d , -1.37677d)}
	    {(3.57081d-9 , 0.416696d , -1.23365d)}
	    {(1.00698d , 0.300531d , -0.785623d)}
	    {(1.00698d , -0.361713d , -0.925128d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.01919d , -0.977411d , 0.483734d)}
	    {(0.6715d , -1.53999d , 0.650067d)}
	    {(1.01516d , -1.70511d , 0.502648d)}
	    {(1.11496d , -1.03522d , 0.329609d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.513752d , -1.81565d , 0.598826d)}
	    {(4.49723d-9 , -1.87346d , 1.03531d)}
	    {(2.42569d-8 , -2.12819d , 0.837995d)}
	    {(0.449902d , -2.22235d , 0.353619d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.501143d , -2.70552d , 0.209286d)}
	    {(-0.659427d , -2.75958d , 0.146777d)}
	    {(-0.785116d , -2.77179d , 0.0210889d)}
	    {(-0.785786d , -2.96173d , 0.0818538d)}
	    {(-0.652318d , -2.90995d , 0.255296d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.7603d , -2.3023d , -0.876704d)}
	    {(-0.928913d , -2.39902d , -0.186827d)}
	    {(-1.05219d , -1.9974d , -0.0482611d)}
	    {(-0.877671d , -1.98359d , -0.891593d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.501143d , -2.70552d , 0.209286d)}
	    {(-0.464121d , -2.81646d , 0.085878d)}
	    {(-0.357078d , -2.73409d , -0.193265d)}
	    {(-0.441854d , -2.40975d , 0.20714d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.6715d , -1.53999d , 0.650067d)}
	    {(0.513752d , -1.81565d , 0.598826d)}
	    {(0.877537d , -1.95944d , 0.518745d)}
	    {(1.01516d , -1.70511d , 0.502648d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.449902d , -2.22235d , 0.353619d)}
	    {(2.42569d-8 , -2.12819d , 0.837995d)}
	    {(4.10438d-8 , -2.31491d , 0.640677d)}
	    {(0.442927d , -2.40988d , 0.210359d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.722875d , -2.34563d , 0.277026d)}
	    {(0.877537d , -1.95944d , 0.518745d)}
	    {(0.513752d , -1.81565d , 0.598826d)}
	    {(0.449902d , -2.22235d , 0.353619d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(7.20026d-8 , -1.02557d , -1.35692d)}
	    {(4.09617d-8 , -0.295582d , -1.37677d)}
	    {(1.00698d , -0.361713d , -0.925128d)}
	    {(1.00698d , -1.04327d , -0.915067d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.995043d , -1.67279d , -0.912787d)}
	    {(-1.00376d , -1.04864d , -0.919628d)}
	    {(7.20026d-8 , -1.02557d , -1.35692d)}
	    {(0.00871914d , -1.69841d , -1.33693d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.722875d , -2.34563d , 0.277026d)}
	    {(0.937229d , -2.43094d , 0.0527457d)}
	    {(1.06332d , -1.98949d , 0.204457d)}
	    {(0.877537d , -1.95944d , 0.518745d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.722875d , -2.34563d , 0.277026d)}
	    {(0.449902d , -2.22235d , 0.353619d)}
	    {(0.442927d , -2.40988d , 0.210359d)}
	    {(0.502351d , -2.70472d , 0.213712d)}
	    {(0.65983d , -2.75904d , 0.14946d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.502351d , -2.70472d , 0.213712d)}
	    {(0.442927d , -2.40988d , 0.210359d)}
	    {(0.350774d , -2.73249d , -0.179717d)}
	    {(0.463585d , -2.81512d , 0.0929874d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(7.20026d-8 , -1.02557d , -1.35692d)}
	    {(1.00698d , -1.04327d , -0.915067d)}
	    {(1.0157d , -1.66742d , -0.908226d)}
	    {(0.00871914d , -1.69841d , -1.33693d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.652452d , -2.90995d , 0.25543d)}
	    {(0.602687d , -2.9679d , 0.0881584d)}
	    {(0.785787d , -2.96173d , 0.0818539d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.463585d , -2.81512d , 0.0929874d)}
	    {(0.784847d , -2.77139d , 0.0220279d)}
	    {(0.785787d , -2.96173d , 0.0818539d)}
	    {(0.602687d , -2.9679d , 0.0881584d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.05219d , -1.9974d , -0.048261d)}
	    {(1.06332d , -1.98949d , 0.204457d)}
	    {(0.937229d , -2.43094d , 0.0527457d)}
	    {(0.928913d , -2.39902d , -0.186827d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.687865d , -2.67749d , -1.14082d)}
	    {(-0.7603d , -2.3023d , -0.876704d)}
	    {(-0.469486d , -2.29318d , -1.2142d)}
	    {(-0.436086d , -2.83282d , -1.40239d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.65983d , -2.75904d , 0.14946d)}
	    {(0.784847d , -2.77139d , 0.0220279d)}
	    {(0.937229d , -2.43094d , 0.0527457d)}
	    {(0.722875d , -2.34563d , 0.277026d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.7603d , -2.3023d , -0.876704d)}
	    {(-0.877671d , -1.98359d , -0.891593d)}
	    {(0.00871915d , -2.03376d , -1.31923d)}
	    {(0.00871916d , -2.37688d , -1.30769d)}
	    {(-0.469486d , -2.29318d , -1.2142d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.463585d , -2.81512d , 0.0929874d)}
	    {(0.350774d , -2.73249d , -0.179717d)}
	    {(0.913218d , -2.61753d , -0.146987d)}
	    {(0.784847d , -2.77139d , 0.0220279d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.00871915d , -2.03376d , -1.31923d)}
	    {(0.898329d , -1.97822d , -0.887032d)}
	    {(0.780957d , -2.29694d , -0.872143d)}
	    {(0.494571d , -2.30807d , -1.21903d)}
	    {(0.00871916d , -2.37688d , -1.30769d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.00871916d , -2.37688d , -1.30769d)}
	    {(-0.0402415d , -2.85428d , -1.51158d)}
	    {(-0.436086d , -2.83282d , -1.40239d)}
	    {(-0.469486d , -2.29318d , -1.2142d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.928913d , -2.39902d , -0.186827d)}
	    {(0.913218d , -2.61753d , -0.146987d)}
	    {(0.660769d , -2.74697d , -1.0036d)}
	    {(0.780957d , -2.29694d , -0.872143d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.494571d , -2.30807d , -1.21903d)}
	    {(0.780957d , -2.29694d , -0.872143d)}
	    {(0.660769d , -2.74697d , -1.0036d)}
	    {(0.430989d , -2.93799d , -1.33184d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.00871916d , -2.37688d , -1.30769d)}
	    {(0.494571d , -2.30807d , -1.21903d)}
	    {(0.430989d , -2.93799d , -1.33184d)}
	    {(-0.0402415d , -2.85428d , -1.51158d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.0157d , -1.66742d , -0.908226d)}
	    {(1.17533d , -1.69707d , -0.100307d)}
	    {(1.05219d , -1.9974d , -0.048261d)}
	    {(0.898329d , -1.97822d , -0.887032d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.652318d , -2.90995d , 0.255296d)}
	    {(-0.785786d , -2.96173d , 0.0818538d)}
	    {(-0.602552d , -2.9679d , 0.0880242d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.501143d , -2.70552d , 0.209286d)}
	    {(-0.652318d , -2.90995d , 0.255296d)}
	    {(-0.602552d , -2.9679d , 0.0880242d)}
	    {(-0.464121d , -2.81646d , 0.085878d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.2369d , 0.734873d , -0.145914d)}
	    {(1.53965d , 0.225145d , -0.0254574d)}
	    {(1.45662d , 0.314616d , 0.601374d)}
	    {(1.17184d , 0.735812d , 0.257308d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.55038d , 0.360089d , 0.632226d)}
	    {(1.45662d , 0.314616d , 0.601374d)}
	    {(1.50236d , -0.263121d , 0.718075d)}
	    {(1.64119d , -0.206782d , 0.744098d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.39142d , 0.760896d , -0.137329d)}
	    {(1.29659d , 0.7837d , 0.30211d)}
	    {(1.67633d , 0.38799d , 0.546377d)}
	    {(1.78298d , 0.306702d , -0.0627481d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.38914d , 0.495167d , -0.534247d)}
	    {(1.0495d , 0.801809d , -0.59367d)}
	    {(0.972239d , 0.948423d , -0.598231d)}
	    {(1.43314d , 0.612136d , -0.533576d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.50236d , -0.263121d , 0.718075d)}
	    {(1.45662d , 0.314616d , 0.601374d)}
	    {(1.53965d , 0.225145d , -0.0254574d)}
	    {(1.58552d , -0.352457d , 0.0912436d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.50236d , -0.263121d , 0.718075d)}
	    {(1.61249d , -0.933279d , 0.899028d)}
	    {(1.74501d , -0.919865d , 0.913516d)}
	    {(1.64119d , -0.206782d , 0.744098d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.2369d , 0.734873d , -0.145914d)}
	    {(1.38914d , 0.495167d , -0.534247d)}
	    {(1.62281d , 0.135943d , -0.652289d)}
	    {(1.53965d , 0.225145d , -0.0254574d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.78056d , -0.21255d , 0.690174d)}
	    {(1.64119d , -0.206782d , 0.744098d)}
	    {(1.74501d , -0.919865d , 0.913516d)}
	    {(1.8931d , -0.882843d , 0.873542d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.67633d , 0.38799d , 0.546377d)}
	    {(1.78056d , -0.21255d , 0.690174d)}
	    {(1.92355d , -0.293838d , 0.0499287d)}
	    {(1.78298d , 0.306702d , -0.0627481d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.49833d , 0.566932d , -0.513187d)}
	    {(1.39142d , 0.760896d , -0.137329d)}
	    {(1.78298d , 0.306702d , -0.0627481d)}
	    {(1.75561d , 0.202878d , -0.628412d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.50236d , -0.263121d , 0.718075d)}
	    {(1.58552d , -0.352457d , 0.0912436d)}
	    {(1.64857d , -0.960643d , 0.212908d)}
	    {(1.61249d , -0.933279d , 0.899028d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.78056d , -0.21255d , 0.690174d)}
	    {(1.8931d , -0.882843d , 0.873542d)}
	    {(1.9866d , -0.902159d , 0.171727d)}
	    {(1.92355d , -0.293838d , 0.0499287d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.62281d , 0.135943d , -0.652289d)}
	    {(1.71269d , 0.172831d , -0.666642d)}
	    {(1.75414d , -0.392296d , -0.553831d)}
	    {(1.66869d , -0.441794d , -0.535722d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.75414d , -0.392296d , -0.553831d)}
	    {(1.71269d , 0.172831d , -0.666642d)}
	    {(1.75561d , 0.202878d , -0.628412d)}
	    {(1.89619d , -0.397662d , -0.515736d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(2.15441d , -1.59807d , 0.29983d)}
	    {(1.61249d , -0.933279d , 0.899028d)}
	    {(1.64857d , -0.960643d , 0.212908d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.66869d , -0.441794d , -0.535722d)}
	    {(1.75414d , -0.392296d , -0.553831d)}
	    {(1.85863d , -1.05508d , -0.437264d)}
	    {(1.76889d , -1.08808d , -0.45497d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(2.26158d , -1.59177d , 0.290708d)}
	    {(1.74501d , -0.919865d , 0.913516d)}
	    {(1.61249d , -0.933279d , 0.899028d)}
	    {(2.15441d , -1.59807d , 0.29983d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(2.26158d , -1.59177d , 0.290708d)}
	    {(2.26829d , -1.4917d , 0.258381d)}
	    {(1.8931d , -0.882843d , 0.873542d)}
	    {(1.74501d , -0.919865d , 0.913516d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(1.64857d , -0.960643d , 0.212908d)}
	    {(1.76889d , -1.08808d , -0.45497d)}
	    {(2.18928d , -1.53556d , -0.205338d)}
	    {(2.15441d , -1.59807d , 0.29983d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(1.76889d , -1.08808d , -0.45497d)}
	    {(1.85863d , -1.05508d , -0.437264d)}
	    {(2.29646d , -1.52912d , -0.214593d)}
	    {(2.18928d , -1.53556d , -0.205338d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(2.25622d , -1.4359d , -0.194473d)}
	    {(2.26829d , -1.4917d , 0.258381d)}
	    {(2.26158d , -1.59177d , 0.290708d)}
	    {(2.29646d , -1.52912d , -0.214593d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.61544d , 0.19483d , -0.759064d)}
	    {(-1.4534d , 0.607978d , -0.661813d)}
	    {(-1.34313d , 0.663914d , -0.766844d)}
	    {(-1.5764d , 0.167197d , -0.788843d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.4821d , 0.123602d , -0.784148d)}
	    {(-1.46225d , 0.236279d , -0.135854d)}
	    {(-1.54314d , -0.413222d , -0.0204944d)}
	    {(-1.56299d , -0.525899d , -0.668923d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.63462d , -0.963729d , 0.746244d)}
	    {(-1.73428d , -0.87788d , 0.802717d)}
	    {(-2.07205d , -1.63375d , 0.207542d)}
	    {(-1.9595d , -1.64314d , 0.205798d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.91376d , -1.03576d , 0.0980845d)}
	    {(-1.75239d , -0.363054d , -0.0243845d)}
	    {(-1.78029d , -0.496254d , -0.714932d)}
	    {(-1.81316d , -1.17379d , -0.513187d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-2.14032d , -1.54442d , 0.172532d)}
	    {(-1.91376d , -1.03576d , 0.0980845d)}
	    {(-1.81316d , -1.17379d , -0.513187d)}
	    {(-2.15615d , -1.65428d , -0.363085d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-2.14032d , -1.54442d , 0.172532d)}
	    {(-2.15615d , -1.65428d , -0.363085d)}
	    {(-2.0919d , -1.7463d , -0.440886d)}
	    {(-2.07205d , -1.63375d , 0.207542d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.9595d , -1.64314d , 0.205798d)}
	    {(-1.97936d , -1.75569d , -0.44263d)}
	    {(-1.67432d , -1.18881d , -0.550478d)}
	    {(-1.65447d , -1.07627d , 0.0979504d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.67432d , -1.18881d , -0.550478d)}
	    {(-1.97936d , -1.75569d , -0.44263d)}
	    {(-2.0919d , -1.7463d , -0.440886d)}
	    {(-1.65997d , -1.19673d , -0.562416d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.20516d-7 , 2.48042d , -0.458592d)}
	    {(-0.40671d , 2.37741d , -0.144439d)}
	    {(-0.446415d , 2.58505d , -0.00211744d)}
	    {(-1.39572d-7 , 2.72053d , -0.262749d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.155601d , 2.81644d , 0.983268d)}
	    {(-0.185917d , 2.80678d , 0.963281d)}
	    {(-0.167003d , 2.77473d , 0.99306d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.20804d-7 , 2.94964d , 1.3665d)}
	    {(-2.15222d-7 , 2.82972d , 1.35872d)}
	    {(0.0470826d , 2.85078d , 1.35282d)}
	    {(0.0423877d , 2.92402d , 1.37415d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.20804d-7 , 2.94964d , 1.3665d)}
	    {(-0.0423881d , 2.92402d , 1.37415d)}
	    {(-0.047083d , 2.85078d , 1.35282d)}
	    {(-2.15222d-7 , 2.82972d , 1.35872d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.047083d , 2.85078d , 1.35282d)}
	    {(-0.0517779d , 2.88177d , 1.38609d)}
	    {(-2.15222d-7 , 2.82972d , 1.35872d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0517779d , 2.88177d , 1.38609d)}
	    {(-0.0973851d , 2.88539d , 1.31969d)}
	    {(-0.0653259d , 2.81564d , 1.33981d)}
	    {(-0.0347422d , 2.84475d , 1.39682d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0729718d , 2.96024d , 1.29823d)}
	    {(-2.19913d-7 , 3.01296d , 1.2828d)}
	    {(-2.16201d-7 , 2.99699d , 1.21385d)}
	    {(-0.0771302d , 2.94173d , 1.23438d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.19913d-7 , 3.01296d , 1.2828d)}
	    {(-2.20804d-7 , 2.94964d , 1.3665d)}
	    {(0.0423877d , 2.92402d , 1.37415d)}
	    {(0.0729714d , 2.96024d , 1.29823d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0517779d , 2.88177d , 1.38609d)}
	    {(-0.0347422d , 2.84475d , 1.39682d)}
	    {(-2.17362d-7 , 2.83884d , 1.39856d)}
	    {(-2.15222d-7 , 2.82972d , 1.35872d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0517774d , 2.88177d , 1.38609d)}
	    {(-2.15222d-7 , 2.82972d , 1.35872d)}
	    {(-2.17362d-7 , 2.83884d , 1.39856d)}
	    {(0.0347418d , 2.84475d , 1.39682d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0771302d , 2.94173d , 1.23438d)}
	    {(-0.0901416d , 2.85038d , 1.22083d)}
	    {(-0.0851785d , 2.87077d , 1.28159d)}
	    {(-0.0729718d , 2.96024d , 1.29823d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0517774d , 2.88177d , 1.38609d)}
	    {(0.0470826d , 2.85078d , 1.35282d)}
	    {(-2.15222d-7 , 2.82972d , 1.35872d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0973851d , 2.88539d , 1.31969d)}
	    {(-0.103019d , 2.86326d , 1.26201d)}
	    {(-0.0690818d , 2.79015d , 1.2883d)}
	    {(-0.0653259d , 2.81564d , 1.33981d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.19913d-7 , 3.01296d , 1.2828d)}
	    {(0.0729714d , 2.96024d , 1.29823d)}
	    {(0.0771297d , 2.94173d , 1.23438d)}
	    {(-2.16201d-7 , 2.99699d , 1.21385d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0347418d , 2.84475d , 1.39682d)}
	    {(-2.17362d-7 , 2.83884d , 1.39856d)}
	    {(-2.13434d-7 , 2.8045d , 1.34303d)}
	    {(0.0653255d , 2.81564d , 1.33981d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.13434d-7 , 2.8045d , 1.34303d)}
	    {(-0.0653259d , 2.81564d , 1.33981d)}
	    {(-0.0690818d , 2.79015d , 1.2883d)}
	    {(-2.10092d-7 , 2.77848d , 1.29259d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0517774d , 2.88177d , 1.38609d)}
	    {(0.0347418d , 2.84475d , 1.39682d)}
	    {(0.0653255d , 2.81564d , 1.33981d)}
	    {(0.0973847d , 2.88539d , 1.31969d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.0729714d , 2.96024d , 1.29823d)}
	    {(0.0851781d , 2.87077d , 1.28159d)}
	    {(0.0901412d , 2.85038d , 1.22083d)}
	    {(0.0771297d , 2.94173d , 1.23438d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(0.103019d , 2.86326d , 1.26201d)}
	    {(0.0973847d , 2.88539d , 1.31969d)}
	    {(0.0653255d , 2.81564d , 1.33981d)}
	    {(0.0690814d , 2.79015d , 1.2883d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.103019d , 2.86326d , 1.26201d)}
	    {(-0.0901416d , 2.85038d , 1.22083d)}
	    {(-0.167003d , 2.77473d , 0.99306d)}
	    {(-0.178539d , 2.78304d , 1.03357d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0771302d , 2.94173d , 1.23438d)}
	    {(-0.155601d , 2.81644d , 0.983268d)}
	    {(-0.167003d , 2.77473d , 0.99306d)}
	    {(-0.0901416d , 2.85038d , 1.22083d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.17921d , 3.07788d , 0.75389d)}
	    {(-0.364322d , 2.74159d , 0.732159d)}
	    {(-0.216232d , 2.74294d , 0.919417d)}
	    {(-0.185917d , 2.80678d , 0.963281d)}
	    {(-0.155601d , 2.81644d , 0.983268d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.124213d , 2.66943d , 1.09755d)}
	    {(-0.178539d , 2.78304d , 1.03357d)}
	    {(-0.216232d , 2.74294d , 0.919417d)}
	    {(-0.151711d , 2.60906d , 1.00218d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-2.10092d-7 , 2.77848d , 1.29259d)}
	    {(-1.95263d-7 , 2.62033d , 1.1115d)}
	    {(0.124213d , 2.66943d , 1.09755d)}
	    {(0.0690814d , 2.79015d , 1.2883d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-2.12994d-7 , 3.08257d , 1.0549d)}
	    {(-2.10901d-7 , 2.98559d , 1.10399d)}
	    {(0.155601d , 2.81644d , 0.983268d)}
	    {(0.17921d , 3.07788d , 0.75389d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.17921d , 3.07788d , 0.75389d)}
	    {(-0.339774d , 3.06903d , 0.361936d)}
	    {(-0.394235d , 2.67238d , 0.340071d)}
	    {(-0.364322d , 2.74159d , 0.732159d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.216232d , 2.74294d , 0.919417d)}
	    {(-0.364322d , 2.74159d , 0.732159d)}
	    {(-0.304898d , 2.35192d , 0.644969d)}
	    {(-0.151711d , 2.60906d , 1.00218d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.178539d , 2.78304d , 1.03357d)}
	    {(0.216232d , 2.74294d , 0.919417d)}
	    {(0.185916d , 2.80678d , 0.963281d)}
	    {(0.167003d , 2.77473d , 0.99306d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.124213d , 2.66943d , 1.09755d)}
	    {(0.151711d , 2.60906d , 1.00218d)}
	    {(0.216232d , 2.74294d , 0.919417d)}
	    {(0.178539d , 2.78304d , 1.03357d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.364322d , 2.74159d , 0.732159d)}
	    {(-0.394235d , 2.67238d , 0.340071d)}
	    {(-0.433001d , 2.33891d , 0.35429d)}
	    {(-0.304898d , 2.35192d , 0.644969d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.216232d , 2.74294d , 0.919417d)}
	    {(0.151711d , 2.60906d , 1.00218d)}
	    {(0.304898d , 2.35192d , 0.644969d)}
	    {(0.364321d , 2.74159d , 0.73216d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.63612d-7 , 3.00263d , 0.00512611d)}
	    {(-1.87347d-7 , 3.1982d , 0.352546d)}
	    {(0.339774d , 3.06903d , 0.361936d)}
	    {(0.259022d , 2.93851d , 0.108681d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-1.51669d-7 , 1.12482d , 1.6097d)}
	    {(-1.75327d-7 , 1.77485d , 1.50091d)}
	    {(-0.429513d , 1.79819d , 1.06871d)}
	    {(-0.585651d , 1.14749d , 1.1936d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.585651d , 1.14749d , 1.1936d)}
	    {(-0.429513d , 1.79819d , 1.06871d)}
	    {(-0.672841d , 1.75406d , 0.716599d)}
	    {(-0.859563d , 1.11449d , 0.706941d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.446415d , 2.58505d , -0.00211744d)}
	    {(-0.259023d , 2.93851d , 0.108681d)}
	    {(-1.63612d-7 , 3.00263d , 0.00512611d)}
	    {(-1.39572d-7 , 2.72053d , -0.262749d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-0.916036d , 1.71006d , 0.364619d)}
	    {(-1.08076d , 1.06258d , 0.361399d)}
	    {(-0.859563d , 1.11449d , 0.706941d)}
	    {(-0.672841d , 1.75406d , 0.716599d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(-1.41798d , 0.878939d , 0.203115d)}
	    {(-1.64146d , 0.440438d , 0.496209d)}
	    {(-1.52731d , 0.403148d , 0.530414d)}
	    {(-1.26144d , 0.841112d , 0.211432d)}))
        (Polygon (color 0.274448
	    0.274448
	    0.274448)
	  (points {(0.339774d , 3.06903d , 0.361936d)}
	    {(0.394234d , 2.67238d , 0.340071d)}
	    {(0.446414d , 2.58505d , -0.0021174d)}
	    {(0.259022d , 2.93851d , 0.108681d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0423881d , 2.92402d , 1.37415d)}
	    {(-0.0729718d , 2.96024d , 1.29823d)}
	    {(-0.0851785d , 2.87077d , 1.28159d)}
	    {(-0.047083d , 2.85078d , 1.35282d)}))
        (Polygon (color 0.450983
	    0.423514
	    0.199976)
	  (points {(-0.0851785d , 2.87077d , 1.28159d)}
	    {(-0.0973851d , 2.88539d , 1.31969d)}
	    {(-0.0517779d , 2.88177d , 1.38609d)}
	    {(-0.047083d , 2.85078d , 1.35282d)}))))
    (CompoundBody (bodies (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.996519d , -2.93597d , 0.943563d)}
	    {(-0.915364d , -2.93141d , 0.985682d)}
	    {(-0.915364d , -2.88285d , 0.942624d)}
	    {(-0.996519d , -2.89144d , 0.943563d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.996519d , -2.93597d , 0.943563d)}
	    {(-0.996519d , -2.89144d , 0.943563d)}
	    {(-0.993702d , -2.89318d , 0.821765d)}
	    {(-0.996519d , -2.98105d , 0.848726d)}
	    {(-0.999067d , -2.98037d , 0.940075d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.915364d , -2.88285d , 0.942624d)}
	    {(-0.915364d , -2.93141d , 0.985682d)}
	    {(-0.834076d , -2.93597d , 0.943563d)}
	    {(-0.834076d , -2.89144d , 0.943563d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.915364d , -2.93141d , 0.985682d)}
	    {(-0.915364d , -2.98037d , 0.943563d)}
	    {(-0.836759d , -2.98037d , 0.947185d)}
	    {(-0.834076d , -2.93597d , 0.943563d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.915364d , -2.88285d , 0.942624d)}
	    {(-0.834076d , -2.89144d , 0.943563d)}
	    {(-0.831528d , -2.89318d , 0.824179d)}
	    {(-0.880488d , -2.85804d , 0.851007d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.739374d , -2.92846d , 0.939807d)}
	    {(-0.742057d , -2.97286d , 0.936185d)}
	    {(-0.65822d , -2.97286d , 0.939807d)}
	    {(-0.65822d , -2.9239d , 0.981927d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.739374d , -2.92846d , 0.939807d)}
	    {(-0.739374d , -2.88393d , 0.939807d)}
	    {(-0.739374d , -2.88447d , 0.844836d)}
	    {(-0.739374d , -2.97353d , 0.844836d)}
	    {(-0.742057d , -2.97286d , 0.936185d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.831528d , -2.89318d , 0.824179d)}
	    {(-0.834076d , -2.98105d , 0.848726d)}
	    {(-0.786055d , -2.91411d , 0.649933d)}
	    {(-0.786993d , -2.85563d , 0.661066d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.482096d , -2.88393d , 0.939807d)}
	    {(-0.482096d , -2.92846d , 0.939807d)}
	    {(-0.400807d , -2.9239d , 0.981927d)}
	    {(-0.400807d , -2.87534d , 0.938868d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.400807d , -2.9239d , 0.981927d)}
	    {(-0.482096d , -2.92846d , 0.939807d)}
	    {(-0.484778d , -2.97286d , 0.936185d)}
	    {(-0.400807d , -2.97286d , 0.939807d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.400807d , -2.87534d , 0.938868d)}
	    {(-0.400807d , -2.9239d , 0.981927d)}
	    {(-0.319653d , -2.92846d , 0.939807d)}
	    {(-0.319653d , -2.88393d , 0.939807d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.577066d , -2.88447d , 0.844836d)}
	    {(-0.577066d , -2.97353d , 0.844836d)}
	    {(-0.576395d , -2.91398d , 0.650871d)}
	    {(-0.576395d , -2.85093d , 0.653152d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.848563d , -2.81525d , 0.648457d)}
	    {(-0.786993d , -2.85563d , 0.661066d)}
	    {(-0.754532d , -2.91357d , 0.529476d)}
	    {(-0.743532d , -2.91907d , 0.4836d)}
	    {(-0.824686d , -2.86998d , 0.481052d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.738703d , -2.91398d , 0.650871d)}
	    {(-0.738703d , -2.85415d , 0.62619d)}
	    {(-0.743532d , -2.91907d , 0.4836d)}
	    {(-0.739374d , -2.96267d , 0.438798d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.867343d , -2.91411d , 0.649933d)}
	    {(-0.948497d , -2.91411d , 0.649933d)}
	    {(-0.901816d , -2.96267d , 0.438798d)}
	    {(-0.820662d , -2.96267d , 0.438798d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.400807d , -2.87534d , 0.938868d)}
	    {(-0.319653d , -2.88393d , 0.939807d)}
	    {(-0.319653d , -2.88447d , 0.844837d)}
	    {(-0.432598d , -2.84328d , 0.877164d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.319653d , -2.92846d , 0.939807d)}
	    {(-0.400807d , -2.9239d , 0.981927d)}
	    {(-0.400807d , -2.97286d , 0.939807d)}
	    {(-0.322336d , -2.97286d , 0.943429d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.482096d , -2.97353d , 0.844837d)}
	    {(-0.482096d , -2.88447d , 0.844836d)}
	    {(-0.530386d , -2.85106d , 0.652213d)}
	    {(-0.530386d , -2.91411d , 0.649933d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.482096d , -2.97353d , 0.844837d)}
	    {(-0.530386d , -2.91411d , 0.649933d)}
	    {(-0.449097d , -2.91411d , 0.649933d)}
	    {(-0.400807d , -2.97353d , 0.844837d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.373845d , -2.85428d , 0.625251d)}
	    {(-0.319653d , -2.88447d , 0.844837d)}
	    {(-0.319653d , -2.97353d , 0.844837d)}
	    {(-0.367943d , -2.91411d , 0.649933d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.530386d , -2.85106d , 0.652213d)}
	    {(-0.46895d , -2.80385d , 0.638531d)}
	    {(-0.486656d , -2.86019d , 0.439468d)}
	    {(-0.577066d , -2.92551d , 0.443493d)}
	    {(-0.565128d , -2.91907d , 0.497551d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.809663d , -2.9349d , 0.156167d)}
	    {(-0.905707d , -2.91907d , 0.481052d)}
	    {(-0.824686d , -2.86998d , 0.481052d)}
	    {(-0.76258d , -2.88594d , 0.15563d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.824686d , -2.86998d , 0.481052d)}
	    {(-0.743532d , -2.91907d , 0.4836d)}
	    {(-0.715497d , -2.9349d , 0.157508d)}
	    {(-0.76258d , -2.88594d , 0.15563d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.809663d , -2.9349d , 0.156167d)}
	    {(-0.799603d , -2.94402d , 0.0563674d)}
	    {(-0.901816d , -2.96267d , 0.438798d)}
	    {(-0.905707d , -2.91907d , 0.481052d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.76258d , -2.88594d , 0.15563d)}
	    {(-0.75252d , -2.94402d , 0.0563674d)}
	    {(-0.799603d , -2.94402d , 0.0563674d)}
	    {(-0.809663d , -2.9349d , 0.156167d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.743532d , -2.91907d , 0.4836d)}
	    {(-0.65822d , -2.86797d , 0.442017d)}
	    {(-0.65822d , -2.88675d , 0.0595867d)}
	    {(-0.715497d , -2.9349d , 0.157508d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.705437d , -2.94402d , 0.0563674d)}
	    {(-0.739374d , -2.96267d , 0.438798d)}
	    {(-0.820662d , -2.96267d , 0.438798d)}
	    {(-0.75252d , -2.94402d , 0.0563674d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.96267d , 0.438798d)}
	    {(-0.739374d , -2.96267d , 0.438798d)}
	    {(-0.705437d , -2.94402d , 0.0563674d)}
	    {(-0.65822d , -2.94402d , 0.0563674d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.577066d , -2.92551d , 0.443493d)}
	    {(-0.486656d , -2.86019d , 0.439468d)}
	    {(-0.554799d , -2.87897d , 0.0570381d)}
	    {(-0.611003d , -2.94416d , 0.0610623d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.611003d , -2.94416d , 0.0610623d)}
	    {(-0.554799d , -2.87897d , 0.0570381d)}
	    {(-0.56392d , -2.94402d , 0.0563674d)}
	    {(-0.611003d , -2.94402d , 0.0563674d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.405502d , -2.95489d , 0.436249d)}
	    {(-0.495778d , -2.96267d , 0.438798d)}
	    {(-0.56392d , -2.94402d , 0.0563674d)}
	    {(-0.507582d , -2.93624d , 0.0538188d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.507582d , -2.93638d , 0.0585136d)}
	    {(-0.405502d , -2.91773d , 0.440944d)}
	    {(-0.405502d , -2.95489d , 0.436249d)}
	    {(-0.507582d , -2.93624d , 0.0538188d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.577066d , -2.96267d , 0.438798d)}
	    {(-0.530386d , -2.91411d , 0.649933d)}
	    {(-0.530386d , -2.85106d , 0.652213d)}
	    {(-0.565128d , -2.91907d , 0.497551d)}
	    {(-0.577066d , -2.92551d , 0.443493d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.577066d , -2.97353d , 0.844836d)}
	    {(-0.65822d , -2.97353d , 0.844836d)}
	    {(-0.657549d , -2.91398d , 0.650871d)}
	    {(-0.576395d , -2.91398d , 0.650871d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.739374d , -2.88447d , 0.844836d)}
	    {(-0.738703d , -2.85415d , 0.62619d)}
	    {(-0.738703d , -2.91398d , 0.650871d)}
	    {(-0.739374d , -2.97353d , 0.844836d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.97286d , 0.939807d)}
	    {(-0.65822d , -2.97353d , 0.844836d)}
	    {(-0.577066d , -2.97353d , 0.844836d)}
	    {(-0.579749d , -2.97286d , 0.943429d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.482096d , -2.88393d , 0.939807d)}
	    {(-0.400807d , -2.87534d , 0.938868d)}
	    {(-0.432598d , -2.84328d , 0.877164d)}
	    {(-0.482096d , -2.88447d , 0.844836d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.943534d , -2.85844d , 0.63558d)}
	    {(-0.848563d , -2.81525d , 0.648457d)}
	    {(-0.824686d , -2.86998d , 0.481052d)}
	    {(-0.905707d , -2.91907d , 0.481052d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.84328d , 0.877164d)}
	    {(-0.577066d , -2.88447d , 0.844836d)}
	    {(-0.576395d , -2.85093d , 0.653152d)}
	    {(-0.657549d , -2.80371d , 0.63947d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.97353d , 0.844836d)}
	    {(-0.739374d , -2.97353d , 0.844836d)}
	    {(-0.738703d , -2.91398d , 0.650871d)}
	    {(-0.657549d , -2.91398d , 0.650871d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.905707d , -2.91907d , 0.481052d)}
	    {(-0.901816d , -2.96267d , 0.438798d)}
	    {(-0.948497d , -2.91411d , 0.649933d)}
	    {(-0.943534d , -2.85844d , 0.63558d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.836759d , -2.98037d , 0.947185d)}
	    {(-0.915364d , -2.98037d , 0.943563d)}
	    {(-0.915364d , -2.98105d , 0.848726d)}
	    {(-0.834076d , -2.98105d , 0.848726d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.943534d , -2.85844d , 0.63558d)}
	    {(-0.993702d , -2.89318d , 0.821765d)}
	    {(-0.880488d , -2.85804d , 0.851007d)}
	    {(-0.848563d , -2.81525d , 0.648457d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.739374d , -2.88393d , 0.939807d)}
	    {(-0.65822d , -2.87534d , 0.938868d)}
	    {(-0.65822d , -2.84328d , 0.877164d)}
	    {(-0.739374d , -2.88447d , 0.844836d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.97286d , 0.939807d)}
	    {(-0.742057d , -2.97286d , 0.936185d)}
	    {(-0.739374d , -2.97353d , 0.844836d)}
	    {(-0.65822d , -2.97353d , 0.844836d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.84328d , 0.877164d)}
	    {(-0.657549d , -2.80371d , 0.63947d)}
	    {(-0.738703d , -2.85415d , 0.62619d)}
	    {(-0.739374d , -2.88447d , 0.844836d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.577066d , -2.92846d , 0.939807d)}
	    {(-0.579749d , -2.97286d , 0.943429d)}
	    {(-0.577066d , -2.97353d , 0.844836d)}
	    {(-0.577066d , -2.88447d , 0.844836d)}
	    {(-0.577066d , -2.88393d , 0.939807d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.482096d , -2.88393d , 0.939807d)}
	    {(-0.482096d , -2.88447d , 0.844836d)}
	    {(-0.482096d , -2.97353d , 0.844837d)}
	    {(-0.484778d , -2.97286d , 0.936185d)}
	    {(-0.482096d , -2.92846d , 0.939807d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.482096d , -2.88447d , 0.844836d)}
	    {(-0.432598d , -2.84328d , 0.877164d)}
	    {(-0.46895d , -2.80385d , 0.638531d)}
	    {(-0.530386d , -2.85106d , 0.652213d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.400807d , -2.97286d , 0.939807d)}
	    {(-0.484778d , -2.97286d , 0.936185d)}
	    {(-0.482096d , -2.97353d , 0.844837d)}
	    {(-0.400807d , -2.97353d , 0.844837d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.322336d , -2.97286d , 0.943429d)}
	    {(-0.400807d , -2.97286d , 0.939807d)}
	    {(-0.400807d , -2.97353d , 0.844837d)}
	    {(-0.319653d , -2.97353d , 0.844837d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.373845d , -2.85428d , 0.625251d)}
	    {(-0.46895d , -2.80385d , 0.638531d)}
	    {(-0.432598d , -2.84328d , 0.877164d)}
	    {(-0.319653d , -2.88447d , 0.844837d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.86797d , 0.442017d)}
	    {(-0.657549d , -2.80371d , 0.63947d)}
	    {(-0.576395d , -2.85093d , 0.653152d)}
	    {(-0.577066d , -2.91907d , 0.497551d)}
	    {(-0.577066d , -2.92551d , 0.443493d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.577066d , -2.91907d , 0.497551d)}
	    {(-0.576395d , -2.85093d , 0.653152d)}
	    {(-0.576395d , -2.91398d , 0.650871d)}
	    {(-0.577066d , -2.96267d , 0.438798d)}
	    {(-0.577066d , -2.92551d , 0.443493d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.577066d , -2.96267d , 0.438798d)}
	    {(-0.576395d , -2.91398d , 0.650871d)}
	    {(-0.657549d , -2.91398d , 0.650871d)}
	    {(-0.65822d , -2.96267d , 0.438798d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.449097d , -2.91411d , 0.649933d)}
	    {(-0.530386d , -2.91411d , 0.649933d)}
	    {(-0.577066d , -2.96267d , 0.438798d)}
	    {(-0.495778d , -2.96267d , 0.438798d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.46895d , -2.80385d , 0.638531d)}
	    {(-0.373845d , -2.85428d , 0.625251d)}
	    {(-0.405502d , -2.91773d , 0.440944d)}
	    {(-0.486656d , -2.86019d , 0.439468d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.367943d , -2.91411d , 0.649933d)}
	    {(-0.449097d , -2.91411d , 0.649933d)}
	    {(-0.495778d , -2.96267d , 0.438798d)}
	    {(-0.405502d , -2.95489d , 0.436249d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.373845d , -2.85428d , 0.625251d)}
	    {(-0.367943d , -2.91411d , 0.649933d)}
	    {(-0.405502d , -2.95489d , 0.436249d)}
	    {(-0.405502d , -2.91773d , 0.440944d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.88675d , 0.0595867d)}
	    {(-0.65822d , -2.86797d , 0.442017d)}
	    {(-0.577066d , -2.92551d , 0.443493d)}
	    {(-0.611003d , -2.94416d , 0.0610623d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.94402d , 0.0563674d)}
	    {(-0.611003d , -2.94402d , 0.0563674d)}
	    {(-0.577066d , -2.96267d , 0.438798d)}
	    {(-0.65822d , -2.96267d , 0.438798d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.88675d , 0.0595867d)}
	    {(-0.611003d , -2.94416d , 0.0610623d)}
	    {(-0.611003d , -2.94402d , 0.0563674d)}
	    {(-0.65822d , -2.94402d , 0.0563674d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.486656d , -2.86019d , 0.439468d)}
	    {(-0.405502d , -2.91773d , 0.440944d)}
	    {(-0.507582d , -2.93638d , 0.0585136d)}
	    {(-0.554799d , -2.87897d , 0.0570381d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.56392d , -2.94402d , 0.0563674d)}
	    {(-0.554799d , -2.87897d , 0.0570381d)}
	    {(-0.507582d , -2.93638d , 0.0585136d)}
	    {(-0.507582d , -2.93624d , 0.0538188d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.495778d , -2.96267d , 0.438798d)}
	    {(-0.577066d , -2.96267d , 0.438798d)}
	    {(-0.611003d , -2.94402d , 0.0563674d)}
	    {(-0.56392d , -2.94402d , 0.0563674d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.715497d , -2.9349d , 0.157508d)}
	    {(-0.65822d , -2.88675d , 0.0595867d)}
	    {(-0.65822d , -2.94402d , 0.0563674d)}
	    {(-0.705437d , -2.94402d , 0.0563674d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.76258d , -2.88594d , 0.15563d)}
	    {(-0.715497d , -2.9349d , 0.157508d)}
	    {(-0.705437d , -2.94402d , 0.0563674d)}
	    {(-0.75252d , -2.94402d , 0.0563674d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.901816d , -2.96267d , 0.438798d)}
	    {(-0.799603d , -2.94402d , 0.0563674d)}
	    {(-0.75252d , -2.94402d , 0.0563674d)}
	    {(-0.820662d , -2.96267d , 0.438798d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.319653d , -2.97353d , 0.844837d)}
	    {(-0.400807d , -2.97353d , 0.844837d)}
	    {(-0.449097d , -2.91411d , 0.649933d)}
	    {(-0.367943d , -2.91411d , 0.649933d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.96267d , 0.438798d)}
	    {(-0.657549d , -2.91398d , 0.650871d)}
	    {(-0.738703d , -2.91398d , 0.650871d)}
	    {(-0.739374d , -2.96267d , 0.438798d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.915364d , -2.93141d , 0.985682d)}
	    {(-0.996519d , -2.93597d , 0.943563d)}
	    {(-0.999067d , -2.98037d , 0.940075d)}
	    {(-0.915364d , -2.98037d , 0.943563d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.996519d , -2.89144d , 0.943563d)}
	    {(-0.915364d , -2.88285d , 0.942624d)}
	    {(-0.880488d , -2.85804d , 0.851007d)}
	    {(-0.993702d , -2.89318d , 0.821765d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.915364d , -2.98037d , 0.943563d)}
	    {(-0.999067d , -2.98037d , 0.940075d)}
	    {(-0.996519d , -2.98105d , 0.848726d)}
	    {(-0.915364d , -2.98105d , 0.848726d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.831528d , -2.89318d , 0.824179d)}
	    {(-0.834076d , -2.89144d , 0.943563d)}
	    {(-0.834076d , -2.93597d , 0.943563d)}
	    {(-0.836759d , -2.98037d , 0.947185d)}
	    {(-0.834076d , -2.98105d , 0.848726d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.739374d , -2.92846d , 0.939807d)}
	    {(-0.65822d , -2.9239d , 0.981927d)}
	    {(-0.65822d , -2.87534d , 0.938868d)}
	    {(-0.739374d , -2.88393d , 0.939807d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.996519d , -2.98105d , 0.848726d)}
	    {(-0.993702d , -2.89318d , 0.821765d)}
	    {(-0.943534d , -2.85844d , 0.63558d)}
	    {(-0.948497d , -2.91411d , 0.649933d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.915364d , -2.98105d , 0.848726d)}
	    {(-0.996519d , -2.98105d , 0.848726d)}
	    {(-0.948497d , -2.91411d , 0.649933d)}
	    {(-0.867343d , -2.91411d , 0.649933d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.831528d , -2.89318d , 0.824179d)}
	    {(-0.786993d , -2.85563d , 0.661066d)}
	    {(-0.848563d , -2.81525d , 0.648457d)}
	    {(-0.880488d , -2.85804d , 0.851007d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.9239d , 0.981927d)}
	    {(-0.577066d , -2.92846d , 0.939807d)}
	    {(-0.577066d , -2.88393d , 0.939807d)}
	    {(-0.65822d , -2.87534d , 0.938868d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.87534d , 0.938868d)}
	    {(-0.577066d , -2.88393d , 0.939807d)}
	    {(-0.577066d , -2.88447d , 0.844836d)}
	    {(-0.65822d , -2.84328d , 0.877164d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.65822d , -2.9239d , 0.981927d)}
	    {(-0.65822d , -2.97286d , 0.939807d)}
	    {(-0.579749d , -2.97286d , 0.943429d)}
	    {(-0.577066d , -2.92846d , 0.939807d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.915364d , -2.98105d , 0.848726d)}
	    {(-0.867343d , -2.91411d , 0.649933d)}
	    {(-0.786055d , -2.91411d , 0.649933d)}
	    {(-0.834076d , -2.98105d , 0.848726d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.738703d , -2.85415d , 0.62619d)}
	    {(-0.657549d , -2.80371d , 0.63947d)}
	    {(-0.65822d , -2.86797d , 0.442017d)}
	    {(-0.743532d , -2.91907d , 0.4836d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.739374d , -2.96267d , 0.438798d)}
	    {(-0.786055d , -2.91411d , 0.649933d)}
	    {(-0.867343d , -2.91411d , 0.649933d)}
	    {(-0.820662d , -2.96267d , 0.438798d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.319653d , -2.88393d , 0.939807d)}
	    {(-0.319653d , -2.92846d , 0.939807d)}
	    {(-0.322336d , -2.97286d , 0.943429d)}
	    {(-0.319653d , -2.97353d , 0.844837d)}
	    {(-0.319653d , -2.88447d , 0.844837d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(-0.786993d , -2.85563d , 0.661066d)}
	    {(-0.786055d , -2.91411d , 0.649933d)}
	    {(-0.739374d , -2.96267d , 0.438798d)}
	    {(-0.743532d , -2.91907d , 0.4836d)}
	    {(-0.754532d , -2.91357d , 0.529476d)}))))
    (CompoundBody (bodies (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.336823d , -2.92806d , 0.937929d)}
	    {(0.418111d , -2.9235d , 0.979915d)}
	    {(0.418111d , -2.87481d , 0.93699d)}
	    {(0.336823d , -2.88353d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.336823d , -2.88353d , 0.937929d)}
	    {(0.418111d , -2.87481d , 0.93699d)}
	    {(0.449768d , -2.84275d , 0.875286d)}
	    {(0.336823d , -2.88406d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.418111d , -2.9235d , 0.979915d)}
	    {(0.336823d , -2.92806d , 0.937929d)}
	    {(0.334275d , -2.97246d , 0.934307d)}
	    {(0.418111d , -2.97246d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.336823d , -2.973d , 0.842959d)}
	    {(0.336823d , -2.88406d , 0.842959d)}
	    {(0.391149d , -2.85388d , 0.623239d)}
	    {(0.385113d , -2.91371d , 0.64792d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.391149d , -2.85388d , 0.623239d)}
	    {(0.336823d , -2.88406d , 0.842959d)}
	    {(0.449768d , -2.84275d , 0.875286d)}
	    {(0.48612d , -2.80331d , 0.636653d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.87481d , 0.93699d)}
	    {(0.67539d , -2.9235d , 0.979915d)}
	    {(0.756544d , -2.92806d , 0.937929d)}
	    {(0.756544d , -2.88353d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.594236d , -2.973d , 0.842959d)}
	    {(0.594907d , -2.91344d , 0.648993d)}
	    {(0.676061d , -2.91344d , 0.648993d)}
	    {(0.67539d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.385113d , -2.91371d , 0.64792d)}
	    {(0.391149d , -2.85388d , 0.623239d)}
	    {(0.422672d , -2.91733d , 0.439066d)}
	    {(0.422672d , -2.95435d , 0.434371d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(1.01396d , -2.88353d , 0.937929d)}
	    {(0.932803d , -2.87481d , 0.93699d)}
	    {(0.932803d , -2.9235d , 0.979915d)}
	    {(1.01396d , -2.92806d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.499265d , -2.973d , 0.842959d)}
	    {(0.499265d , -2.88406d , 0.842959d)}
	    {(0.499265d , -2.88353d , 0.937929d)}
	    {(0.499265d , -2.92806d , 0.937929d)}
	    {(0.496717d , -2.97246d , 0.941551d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.496717d , -2.97246d , 0.941551d)}
	    {(0.418111d , -2.97246d , 0.937929d)}
	    {(0.418111d , -2.973d , 0.842959d)}
	    {(0.499265d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.594236d , -2.88353d , 0.937929d)}
	    {(0.67539d , -2.87481d , 0.93699d)}
	    {(0.67539d , -2.84275d , 0.875286d)}
	    {(0.594236d , -2.88406d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.9235d , 0.979915d)}
	    {(0.594236d , -2.92806d , 0.937929d)}
	    {(0.591553d , -2.97246d , 0.934307d)}
	    {(0.67539d , -2.97246d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.594236d , -2.88353d , 0.937929d)}
	    {(0.594236d , -2.88406d , 0.842959d)}
	    {(0.594236d , -2.973d , 0.842959d)}
	    {(0.591553d , -2.97246d , 0.934307d)}
	    {(0.594236d , -2.92806d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.336823d , -2.973d , 0.842959d)}
	    {(0.385113d , -2.91371d , 0.64792d)}
	    {(0.466267d , -2.91371d , 0.64792d)}
	    {(0.418111d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.449768d , -2.84275d , 0.875286d)}
	    {(0.499265d , -2.88406d , 0.842959d)}
	    {(0.547556d , -2.85066d , 0.650335d)}
	    {(0.48612d , -2.80331d , 0.636653d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.84275d , 0.875286d)}
	    {(0.67539d , -2.87481d , 0.93699d)}
	    {(0.756544d , -2.88353d , 0.937929d)}
	    {(0.756544d , -2.88406d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.594236d , -2.973d , 0.842959d)}
	    {(0.67539d , -2.973d , 0.842959d)}
	    {(0.67539d , -2.97246d , 0.937929d)}
	    {(0.591553d , -2.97246d , 0.934307d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.756544d , -2.92806d , 0.937929d)}
	    {(0.67539d , -2.9235d , 0.979915d)}
	    {(0.67539d , -2.97246d , 0.937929d)}
	    {(0.753995d , -2.97246d , 0.941551d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.547556d , -2.85066d , 0.650335d)}
	    {(0.499265d , -2.88406d , 0.842959d)}
	    {(0.499265d , -2.973d , 0.842959d)}
	    {(0.547556d , -2.91371d , 0.64792d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.932803d , -2.97246d , 0.937929d)}
	    {(0.932803d , -2.9235d , 0.979915d)}
	    {(0.851515d , -2.92806d , 0.937929d)}
	    {(0.848832d , -2.97246d , 0.934307d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.851515d , -2.88353d , 0.937929d)}
	    {(0.851515d , -2.88406d , 0.842959d)}
	    {(0.851515d , -2.973d , 0.842959d)}
	    {(0.848832d , -2.97246d , 0.934307d)}
	    {(0.851515d , -2.92806d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.757215d , -2.85039d , 0.651274d)}
	    {(0.756544d , -2.88406d , 0.842959d)}
	    {(0.756544d , -2.973d , 0.842959d)}
	    {(0.757215d , -2.91344d , 0.648993d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.901146d , -2.84275d , 0.875286d)}
	    {(1.01396d , -2.88406d , 0.842959d)}
	    {(0.959765d , -2.85388d , 0.623239d)}
	    {(0.864794d , -2.80331d , 0.636653d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.959765d , -2.85388d , 0.623239d)}
	    {(1.01396d , -2.88406d , 0.842959d)}
	    {(1.01396d , -2.973d , 0.842959d)}
	    {(0.965667d , -2.91371d , 0.64792d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.864794d , -2.80331d , 0.636653d)}
	    {(0.959765d , -2.85388d , 0.623239d)}
	    {(0.918987d , -2.92511d , 0.441615d)}
	    {(0.837832d , -2.86756d , 0.440139d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.422672d , -2.91733d , 0.439066d)}
	    {(0.503826d , -2.85978d , 0.437591d)}
	    {(0.571969d , -2.87843d , 0.0551602d)}
	    {(0.524886d , -2.93584d , 0.0566357d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.512948d , -2.96213d , 0.43692d)}
	    {(0.58109d , -2.94362d , 0.0544895d)}
	    {(0.628173d , -2.94362d , 0.0544895d)}
	    {(0.594236d , -2.96213d , 0.43692d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.628173d , -2.94362d , 0.0544895d)}
	    {(0.58109d , -2.94362d , 0.0544895d)}
	    {(0.571969d , -2.87843d , 0.0551602d)}
	    {(0.628173d , -2.94362d , 0.0591844d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.86756d , 0.440139d)}
	    {(0.756544d , -2.92511d , 0.441615d)}
	    {(0.722607d , -2.94362d , 0.0591844d)}
	    {(0.67539d , -2.88621d , 0.0577088d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.94362d , 0.0544895d)}
	    {(0.67539d , -2.88621d , 0.0577088d)}
	    {(0.722607d , -2.94362d , 0.0591844d)}
	    {(0.722607d , -2.94362d , 0.0544895d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.76969d , -2.94362d , 0.0544895d)}
	    {(0.837832d , -2.96213d , 0.43692d)}
	    {(0.756544d , -2.96213d , 0.43692d)}
	    {(0.722607d , -2.94362d , 0.0544895d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.837832d , -2.86756d , 0.440139d)}
	    {(0.918987d , -2.92511d , 0.441615d)}
	    {(0.816907d , -2.94362d , 0.0591844d)}
	    {(0.76969d , -2.88621d , 0.0577089d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.918987d , -2.96213d , 0.43692d)}
	    {(0.837832d , -2.96213d , 0.43692d)}
	    {(0.76969d , -2.94362d , 0.0544895d)}
	    {(0.816907d , -2.94362d , 0.0544895d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.816907d , -2.94362d , 0.0591844d)}
	    {(0.816907d , -2.94362d , 0.0544895d)}
	    {(0.76969d , -2.94362d , 0.0544895d)}
	    {(0.76969d , -2.88621d , 0.0577089d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.628173d , -2.94362d , 0.0591844d)}
	    {(0.67539d , -2.88621d , 0.0577088d)}
	    {(0.67539d , -2.94362d , 0.0544895d)}
	    {(0.628173d , -2.94362d , 0.0544895d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.571969d , -2.87843d , 0.0551602d)}
	    {(0.58109d , -2.94362d , 0.0544895d)}
	    {(0.524886d , -2.93584d , 0.0519409d)}
	    {(0.524886d , -2.93584d , 0.0566357d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.757215d , -2.91344d , 0.648993d)}
	    {(0.756544d , -2.96213d , 0.43692d)}
	    {(0.756544d , -2.92511d , 0.441615d)}
	    {(0.756544d , -2.91867d , 0.495539d)}
	    {(0.757215d , -2.85039d , 0.651274d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.594236d , -2.88406d , 0.842959d)}
	    {(0.67539d , -2.84275d , 0.875286d)}
	    {(0.676061d , -2.80331d , 0.637592d)}
	    {(0.594907d , -2.85361d , 0.624312d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.594236d , -2.88406d , 0.842959d)}
	    {(0.594907d , -2.85361d , 0.624312d)}
	    {(0.594907d , -2.91344d , 0.648993d)}
	    {(0.594236d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.756544d , -2.88353d , 0.937929d)}
	    {(0.756544d , -2.92806d , 0.937929d)}
	    {(0.753995d , -2.97246d , 0.941551d)}
	    {(0.756544d , -2.973d , 0.842959d)}
	    {(0.756544d , -2.88406d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.97246d , 0.937929d)}
	    {(0.67539d , -2.973d , 0.842959d)}
	    {(0.756544d , -2.973d , 0.842959d)}
	    {(0.753995d , -2.97246d , 0.941551d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.851515d , -2.88353d , 0.937929d)}
	    {(0.851515d , -2.92806d , 0.937929d)}
	    {(0.932803d , -2.9235d , 0.979915d)}
	    {(0.932803d , -2.87481d , 0.93699d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.901146d , -2.84275d , 0.875286d)}
	    {(0.851515d , -2.88406d , 0.842959d)}
	    {(0.851515d , -2.88353d , 0.937929d)}
	    {(0.932803d , -2.87481d , 0.93699d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.676061d , -2.80331d , 0.637592d)}
	    {(0.67539d , -2.84275d , 0.875286d)}
	    {(0.756544d , -2.88406d , 0.842959d)}
	    {(0.757215d , -2.85039d , 0.651274d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.973d , 0.842959d)}
	    {(0.676061d , -2.91344d , 0.648993d)}
	    {(0.757215d , -2.91344d , 0.648993d)}
	    {(0.756544d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.932803d , -2.97246d , 0.937929d)}
	    {(0.848832d , -2.97246d , 0.934307d)}
	    {(0.851515d , -2.973d , 0.842959d)}
	    {(0.932803d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.932803d , -2.9235d , 0.979915d)}
	    {(0.932803d , -2.97246d , 0.937929d)}
	    {(1.01127d , -2.97246d , 0.941551d)}
	    {(1.01396d , -2.92806d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.932803d , -2.973d , 0.842959d)}
	    {(0.851515d , -2.973d , 0.842959d)}
	    {(0.803224d , -2.91371d , 0.64792d)}
	    {(0.884513d , -2.91371d , 0.64792d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.932803d , -2.973d , 0.842959d)}
	    {(0.884513d , -2.91371d , 0.64792d)}
	    {(0.965667d , -2.91371d , 0.64792d)}
	    {(1.01396d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.803224d , -2.91371d , 0.64792d)}
	    {(0.803224d , -2.85066d , 0.650335d)}
	    {(0.768482d , -2.91867d , 0.495539d)}
	    {(0.756544d , -2.92511d , 0.441615d)}
	    {(0.756544d , -2.96213d , 0.43692d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.757215d , -2.91344d , 0.648993d)}
	    {(0.676061d , -2.91344d , 0.648993d)}
	    {(0.67539d , -2.96213d , 0.43692d)}
	    {(0.756544d , -2.96213d , 0.43692d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.768482d , -2.91867d , 0.495539d)}
	    {(0.803224d , -2.85066d , 0.650335d)}
	    {(0.864794d , -2.80331d , 0.636653d)}
	    {(0.837832d , -2.86756d , 0.440139d)}
	    {(0.756544d , -2.92511d , 0.441615d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.884513d , -2.91371d , 0.64792d)}
	    {(0.803224d , -2.91371d , 0.64792d)}
	    {(0.756544d , -2.96213d , 0.43692d)}
	    {(0.837832d , -2.96213d , 0.43692d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.965667d , -2.91371d , 0.64792d)}
	    {(0.884513d , -2.91371d , 0.64792d)}
	    {(0.837832d , -2.96213d , 0.43692d)}
	    {(0.918987d , -2.96213d , 0.43692d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.422672d , -2.95435d , 0.434371d)}
	    {(0.422672d , -2.91733d , 0.439066d)}
	    {(0.524886d , -2.93584d , 0.0566357d)}
	    {(0.524886d , -2.93584d , 0.0519409d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.918987d , -2.96213d , 0.43692d)}
	    {(0.918987d , -2.92511d , 0.441615d)}
	    {(0.959765d , -2.85388d , 0.623239d)}
	    {(0.965667d , -2.91371d , 0.64792d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.512948d , -2.96213d , 0.43692d)}
	    {(0.422672d , -2.95435d , 0.434371d)}
	    {(0.524886d , -2.93584d , 0.0519409d)}
	    {(0.58109d , -2.94362d , 0.0544895d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.503826d , -2.85978d , 0.437591d)}
	    {(0.594236d , -2.92511d , 0.441615d)}
	    {(0.628173d , -2.94362d , 0.0591844d)}
	    {(0.571969d , -2.87843d , 0.0551602d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.628173d , -2.94362d , 0.0591844d)}
	    {(0.594236d , -2.92511d , 0.441615d)}
	    {(0.67539d , -2.86756d , 0.440139d)}
	    {(0.67539d , -2.88621d , 0.0577088d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.96213d , 0.43692d)}
	    {(0.594236d , -2.96213d , 0.43692d)}
	    {(0.628173d , -2.94362d , 0.0544895d)}
	    {(0.67539d , -2.94362d , 0.0544895d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.96213d , 0.43692d)}
	    {(0.67539d , -2.94362d , 0.0544895d)}
	    {(0.722607d , -2.94362d , 0.0544895d)}
	    {(0.756544d , -2.96213d , 0.43692d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.837832d , -2.86756d , 0.440139d)}
	    {(0.76969d , -2.88621d , 0.0577089d)}
	    {(0.722607d , -2.94362d , 0.0591844d)}
	    {(0.756544d , -2.92511d , 0.441615d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.918987d , -2.92511d , 0.441615d)}
	    {(0.918987d , -2.96213d , 0.43692d)}
	    {(0.816907d , -2.94362d , 0.0544895d)}
	    {(0.816907d , -2.94362d , 0.0591844d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.722607d , -2.94362d , 0.0544895d)}
	    {(0.722607d , -2.94362d , 0.0591844d)}
	    {(0.76969d , -2.88621d , 0.0577089d)}
	    {(0.76969d , -2.94362d , 0.0544895d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.86756d , 0.440139d)}
	    {(0.676061d , -2.80331d , 0.637592d)}
	    {(0.757215d , -2.85039d , 0.651274d)}
	    {(0.756544d , -2.91867d , 0.495539d)}
	    {(0.756544d , -2.92511d , 0.441615d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.676061d , -2.91344d , 0.648993d)}
	    {(0.594907d , -2.91344d , 0.648993d)}
	    {(0.594236d , -2.96213d , 0.43692d)}
	    {(0.67539d , -2.96213d , 0.43692d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.547556d , -2.85066d , 0.650335d)}
	    {(0.547556d , -2.91371d , 0.64792d)}
	    {(0.594236d , -2.96213d , 0.43692d)}
	    {(0.594236d , -2.92511d , 0.441615d)}
	    {(0.582432d , -2.91867d , 0.495539d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.336823d , -2.92806d , 0.937929d)}
	    {(0.336823d , -2.88353d , 0.937929d)}
	    {(0.336823d , -2.88406d , 0.842959d)}
	    {(0.336823d , -2.973d , 0.842959d)}
	    {(0.334275d , -2.97246d , 0.934307d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.418111d , -2.87481d , 0.93699d)}
	    {(0.418111d , -2.9235d , 0.979915d)}
	    {(0.499265d , -2.92806d , 0.937929d)}
	    {(0.499265d , -2.88353d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.418111d , -2.87481d , 0.93699d)}
	    {(0.499265d , -2.88353d , 0.937929d)}
	    {(0.499265d , -2.88406d , 0.842959d)}
	    {(0.449768d , -2.84275d , 0.875286d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.334275d , -2.97246d , 0.934307d)}
	    {(0.336823d , -2.973d , 0.842959d)}
	    {(0.418111d , -2.973d , 0.842959d)}
	    {(0.418111d , -2.97246d , 0.937929d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.499265d , -2.92806d , 0.937929d)}
	    {(0.418111d , -2.9235d , 0.979915d)}
	    {(0.418111d , -2.97246d , 0.937929d)}
	    {(0.496717d , -2.97246d , 0.941551d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.594236d , -2.88353d , 0.937929d)}
	    {(0.594236d , -2.92806d , 0.937929d)}
	    {(0.67539d , -2.9235d , 0.979915d)}
	    {(0.67539d , -2.87481d , 0.93699d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.418111d , -2.973d , 0.842959d)}
	    {(0.466267d , -2.91371d , 0.64792d)}
	    {(0.547556d , -2.91371d , 0.64792d)}
	    {(0.499265d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.422672d , -2.91733d , 0.439066d)}
	    {(0.391149d , -2.85388d , 0.623239d)}
	    {(0.48612d , -2.80331d , 0.636653d)}
	    {(0.503826d , -2.85978d , 0.437591d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.503826d , -2.85978d , 0.437591d)}
	    {(0.48612d , -2.80331d , 0.636653d)}
	    {(0.547556d , -2.85066d , 0.650335d)}
	    {(0.582432d , -2.91867d , 0.495539d)}
	    {(0.594236d , -2.92511d , 0.441615d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.594907d , -2.85361d , 0.624312d)}
	    {(0.594236d , -2.92511d , 0.441615d)}
	    {(0.594236d , -2.96213d , 0.43692d)}
	    {(0.594907d , -2.91344d , 0.648993d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.901146d , -2.84275d , 0.875286d)}
	    {(0.932803d , -2.87481d , 0.93699d)}
	    {(1.01396d , -2.88353d , 0.937929d)}
	    {(1.01396d , -2.88406d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.901146d , -2.84275d , 0.875286d)}
	    {(0.864794d , -2.80331d , 0.636653d)}
	    {(0.803224d , -2.85066d , 0.650335d)}
	    {(0.851515d , -2.88406d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.851515d , -2.88406d , 0.842959d)}
	    {(0.803224d , -2.85066d , 0.650335d)}
	    {(0.803224d , -2.91371d , 0.64792d)}
	    {(0.851515d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.547556d , -2.91371d , 0.64792d)}
	    {(0.466267d , -2.91371d , 0.64792d)}
	    {(0.512948d , -2.96213d , 0.43692d)}
	    {(0.594236d , -2.96213d , 0.43692d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.67539d , -2.86756d , 0.440139d)}
	    {(0.594236d , -2.92511d , 0.441615d)}
	    {(0.594907d , -2.85361d , 0.624312d)}
	    {(0.676061d , -2.80331d , 0.637592d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(1.01396d , -2.88353d , 0.937929d)}
	    {(1.01396d , -2.92806d , 0.937929d)}
	    {(1.01127d , -2.97246d , 0.941551d)}
	    {(1.01396d , -2.973d , 0.842959d)}
	    {(1.01396d , -2.88406d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(1.01396d , -2.973d , 0.842959d)}
	    {(1.01127d , -2.97246d , 0.941551d)}
	    {(0.932803d , -2.97246d , 0.937929d)}
	    {(0.932803d , -2.973d , 0.842959d)}))
        (Polygon (color 0.803931
	    0.647052
	    0.470638)
	  (points {(0.385113d , -2.91371d , 0.64792d)}
	    {(0.422672d , -2.95435d , 0.434371d)}
	    {(0.512948d , -2.96213d , 0.43692d)}
	    {(0.466267d , -2.91371d , 0.64792d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.297118d , 3.01537d , 0.681053d)}
	    {(0.193294d , 2.94481d , 0.642421d)}
	    {(0.258486d , 2.83415d , 0.669517d)}
	    {(0.362309d , 2.90457d , 0.708417d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.193294d , 2.94481d , 0.642421d)}
	    {(0.297118d , 3.01537d , 0.681053d)}
	    {(0.3442d , 3.01296d , 0.558718d)}
	    {(0.240243d , 2.94253d , 0.52022d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.297118d , 3.01537d , 0.681053d)}
	    {(0.362309d , 2.90457d , 0.708417d)}
	    {(0.409392d , 2.90229d , 0.586082d)}
	    {(0.3442d , 3.01296d , 0.558718d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.258486d , 2.83415d , 0.669517d)}
	    {(0.193294d , 2.94481d , 0.642421d)}
	    {(0.240243d , 2.94253d , 0.52022d)}
	    {(0.305434d , 2.83173d , 0.547316d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.362309d , 2.90457d , 0.708417d)}
	    {(0.258486d , 2.83415d , 0.669517d)}
	    {(0.305434d , 2.83173d , 0.547316d)}
	    {(0.409392d , 2.90229d , 0.586082d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.240243d , 2.94253d , 0.52022d)}
	    {(0.3442d , 3.01296d , 0.558718d)}
	    {(0.409392d , 2.90229d , 0.586082d)}
	    {(0.305434d , 2.83173d , 0.547316d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.366736d , 2.90417d , 0.705198d)}
	    {(-0.305166d , 3.01779d , 0.682528d)}
	    {(-0.349969d , 3.01779d , 0.559523d)}
	    {(-0.411673d , 2.90417d , 0.582058d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.305166d , 3.01779d , 0.682528d)}
	    {(-0.366736d , 2.90417d , 0.705198d)}
	    {(-0.260096d , 2.83871d , 0.666297d)}
	    {(-0.198526d , 2.95233d , 0.643896d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.349969d , 3.01779d , 0.559523d)}
	    {(-0.305166d , 3.01779d , 0.682528d)}
	    {(-0.198526d , 2.95233d , 0.643896d)}
	    {(-0.243328d , 2.95233d , 0.52089d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.411673d , 2.90417d , 0.582058d)}
	    {(-0.349969d , 3.01779d , 0.559523d)}
	    {(-0.243328d , 2.95233d , 0.52089d)}
	    {(-0.305032d , 2.83871d , 0.543292d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.366736d , 2.90417d , 0.705198d)}
	    {(-0.411673d , 2.90417d , 0.582058d)}
	    {(-0.305032d , 2.83871d , 0.543292d)}
	    {(-0.260096d , 2.83871d , 0.666297d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.260096d , 2.83871d , 0.666297d)}
	    {(-0.305032d , 2.83871d , 0.543292d)}
	    {(-0.243328d , 2.95233d , 0.52089d)}
	    {(-0.198526d , 2.95233d , 0.643896d)}))))
    (CompoundBody (bodies (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.213951d , 3.01577d , 0.683735d)}
	    {(0.30919d , 2.84582d , 0.721831d)}
	    {(0.33186d , 2.86044d , 0.730013d)}
	    {(0.236621d , 3.03039d , 0.692052d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.33186d , 2.86044d , 0.730013d)}
	    {(0.30919d , 2.84582d , 0.721831d)}
	    {(0.37854d , 2.84314d , 0.535646d)}
	    {(0.401344d , 2.85776d , 0.544097d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.213951d , 3.01577d , 0.683735d)}
	    {(0.236621d , 3.03039d , 0.692052d)}
	    {(0.306105d , 3.02771d , 0.506001d)}
	    {(0.283301d , 3.01309d , 0.497685d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.236621d , 3.03039d , 0.692052d)}
	    {(0.33186d , 2.86044d , 0.730013d)}
	    {(0.401344d , 2.85776d , 0.544097d)}
	    {(0.306105d , 3.02771d , 0.506001d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.30919d , 2.84582d , 0.721831d)}
	    {(0.213951d , 3.01577d , 0.683735d)}
	    {(0.283301d , 3.01309d , 0.497685d)}
	    {(0.37854d , 2.84314d , 0.535646d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(0.283301d , 3.01309d , 0.497685d)}
	    {(0.306105d , 3.02771d , 0.506001d)}
	    {(0.401344d , 2.85776d , 0.544097d)}
	    {(0.37854d , 2.84314d , 0.535646d)}))))
    (CompoundBody (bodies (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.217976d , 3.01577d , 0.683735d)}
	    {(-0.240646d , 3.03039d , 0.692052d)}
	    {(-0.335884d , 2.86044d , 0.730013d)}
	    {(-0.313215d , 2.84582d , 0.721831d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.405368d , 2.85776d , 0.544097d)}
	    {(-0.310129d , 3.02771d , 0.506001d)}
	    {(-0.287326d , 3.01309d , 0.497685d)}
	    {(-0.382565d , 2.84314d , 0.535646d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.335884d , 2.86044d , 0.730013d)}
	    {(-0.240646d , 3.03039d , 0.692052d)}
	    {(-0.310129d , 3.02771d , 0.506001d)}
	    {(-0.405368d , 2.85776d , 0.544097d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.240646d , 3.03039d , 0.692052d)}
	    {(-0.217976d , 3.01577d , 0.683735d)}
	    {(-0.287326d , 3.01309d , 0.497685d)}
	    {(-0.310129d , 3.02771d , 0.506001d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.313215d , 2.84582d , 0.721831d)}
	    {(-0.335884d , 2.86044d , 0.730013d)}
	    {(-0.405368d , 2.85776d , 0.544097d)}
	    {(-0.382565d , 2.84314d , 0.535646d)}))
        (Polygon (color 0.948968
	    0.941155
	    0.858747)
	  (points {(-0.217976d , 3.01577d , 0.683735d)}
	    {(-0.313215d , 2.84582d , 0.721831d)}
	    {(-0.382565d , 2.84314d , 0.535646d)}
	    {(-0.287326d , 3.01309d , 0.497685d)}))))))
'
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> pentakisDodecahedron [
	"(JunOpenGL3dObject pentakisDodecahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject pentakisDodecahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject pentakisDodecahedron)."

	| tetrakisDodecahedron |
	tetrakisDodecahedron := self nAkisHedron: self regularDodecahedron.
	tetrakisDodecahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	tetrakisDodecahedron flushAllPaints.
	tetrakisDodecahedron paint: self defaultPaint.
	tetrakisDodecahedron name: 'pentakis dodecahedron'.
	^tetrakisDodecahedron
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> pieFrom: fromDegree to: toDegree by: byDegree [ 
	"(JunOpenGL3dObject pieFrom: 0 to: 10 by: 10) asCompoundObject add: JunOpenGL3dObject axes2; show"
	"(JunOpenGL3dObject pieFrom: 0 to: 270 by: 10) asCompoundObject add: JunOpenGL3dObject axes2; show"

	^self
		pieFrom: fromDegree
		to: toDegree
		by: byDegree
		radius: 1
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> pieFrom: fromDegree to: toDegree by: byDegree radius: radius [ 
	"((JunOpenGL3dObject 
		pieFrom: 0
		to: 90
		by: 10
		radius: 0.8) asCompoundObject)
		paint: ColorValue red;
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	"(JunOpenGL3dObject 
		pieFrom: 0
		to: 270
		by: 10
		radius: 0.8)
		paint: ColorValue red;
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	| selectorSymbol arguments |
	(fromDegree - toDegree) abs > 180 
		ifTrue: [selectorSymbol := #slicedPieFrom:to:by:radius:]
		ifFalse: [selectorSymbol := #chunkOfPieFrom:to:by:radius:].
	arguments := Array new: 4.
	arguments at: 1 put: fromDegree.
	arguments at: 2 put: toDegree.
	arguments at: 3 put: byDegree.
	arguments at: 4 put: radius.
	^self perform: selectorSymbol withArguments: arguments
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> pieFrom: fromDegree to: toDegree by: byDegree radius: radius thickness: thickness [ 
	"(JunOpenGL3dObject 
		pieFrom: 0
		to: 90
		by: 10
		radius: 0.8
		thickness: 0.2)
		paint: ColorValue red;
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	"(JunOpenGL3dObject 
		pieFrom: 0
		to: 270
		by: 10
		radius: 0.8
		thickness: 0.2)
		paint: ColorValue red;
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	| selectorSymbol arguments |
	(fromDegree - toDegree) abs > 180 
		ifTrue: [selectorSymbol := #slicedPieFrom:to:by:radius:thickness:]
		ifFalse: [selectorSymbol := #chunkOfPieFrom:to:by:radius:thickness:].
	arguments := Array new: 5.
	arguments at: 1 put: fromDegree.
	arguments at: 2 put: toDegree.
	arguments at: 3 put: byDegree.
	arguments at: 4 put: radius.
	arguments at: 5 put: thickness.
	^self perform: selectorSymbol withArguments: arguments
]

{ #category : #'typical objects plate' }
JunOpenGL3dObject class >> plateBMWC [
	"(JunOpenGL3dObject plateBMWC) show."

	^self plateVertexes: (Array
			with: 0 , 0 , 1
			with: 1 , 0 , 1
			with: 1 , 1 , 1
			with: 0 , 1 , 1)
		textureImage: self imageBMWC
]

{ #category : #'typical objects plate' }
JunOpenGL3dObject class >> plateGCWY [
	"(JunOpenGL3dObject plateGCWY) show."

	^self plateVertexes: (Array
			with: 0 , 1 , 0
			with: 0 , 1 , 1
			with: 1 , 1 , 1
			with: 1 , 1 , 0)
		textureImage: self imageGCWY
]

{ #category : #'typical objects plate' }
JunOpenGL3dObject class >> plateKBCG [
	"(JunOpenGL3dObject plateKBCG) show."

	^self plateVertexes: (Array
			with: 0 , 0 , 0
			with: 0 , 0 , 1
			with: 0 , 1 , 1
			with: 0 , 1 , 0)
		textureImage: self imageKBCG
]

{ #category : #'typical objects plate' }
JunOpenGL3dObject class >> plateKGYR [
	"(JunOpenGL3dObject plateKGYR) show."

	^self plateVertexes: (Array
			with: 0 , 0 , 0
			with: 0 , 1 , 0
			with: 1 , 1 , 0
			with: 1 , 0 , 0)
		textureImage: self imageKGYR
]

{ #category : #'typical objects plate' }
JunOpenGL3dObject class >> plateKRMB [
	"(JunOpenGL3dObject plateKRMB) show."

	^self plateVertexes: (Array
			with: 0 , 0 , 0
			with: 1 , 0 , 0
			with: 1 , 0 , 1
			with: 0 , 0 , 1)
		textureImage: self imageKRMB
]

{ #category : #'typical objects plate' }
JunOpenGL3dObject class >> plateRYWM [
	"(JunOpenGL3dObject plateRYWM) show."

	^self plateVertexes: (Array
			with: 1 , 0 , 0
			with: 1 , 1 , 0
			with: 1 , 1 , 1
			with: 1 , 0 , 1)
		textureImage: self imageRYWM
]

{ #category : #'typical objects plate' }
JunOpenGL3dObject class >> plateVertexes: vertexCollection textureImage: anImage [ 
	"(JunOpenGL3dObject
		plateVertexes: (Array 
						with: 0.0 , 0.0 , 1.0
						with: 1.0 , 0.0 , 1.0
						with: 1.0 , 1.0 , 1.0
						with: 0.0 , 1.0 , 1.0)
		textureImage: JunOpenGL3dObject imageBMWC) show."

	| aTexture aPolygon |
	aTexture := JunOpenGLTexture image: anImage.
	aTexture linear: false; repeat: false.
	aTexture coordinates: (Array
			with: 0.0 , 1.0
			with: 0.0 , 0.0
			with: 1.0 , 0.0
			with: 1.0 , 1.0).
	aPolygon := JunOpenGL3dPolygon vertexes: vertexCollection asArray.
	aPolygon paint: ColorValue white.
	aPolygon texture: aTexture.
	^aPolygon
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> plute [
	"(JunOpenGL3dObject plute) show."

	| aStream formTransporter anObject |
	aStream := JunFormTransporter exampleForm3 readStream.
	formTransporter := JunFormTransporter new.
	formTransporter loadFrom: aStream.
	formTransporter formObject isNil ifTrue: [^nil].
	anObject := formTransporter formObject.
	anObject name: 'plute'.
	anObject paint: (ColorValue red blendWith: ColorValue gray).
	^anObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> pooh [
	"(JunOpenGL3dObject pooh) show."

	| baseSphere basePie baseCircle head leftEar transformation leftEye leftEyebrow leftCheek noseRound nose tongue leftObjects pooh box maximum |
	baseSphere := (JunOpenGL3dTransformedObject 
				object: (JunOpenGL3dObject ball: 3))
				flushAllPaints;
				yourself.
	basePie := (JunOpenGL3dTransformedObject object: (JunOpenGL3dObject 
						pieFrom: 0
						to: 360
						by: 10
						radius: 1
						thickness: 1))
				flushAllPaints;
				yourself.
	baseCircle := (JunOpenGL3dTransformedObject 
				object: JunOpenGL3dNurbsCurve circle)
				flushAllPaints;
				yourself.
	head := baseSphere scaledBy: 4.
	leftEar := basePie scaledBy: 1.2 , 1.2 , 0.5.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 90).
	leftEar := leftEar transform: transformation.
	leftEar := leftEar translatedBy: -1 , 3.2 , 3.5.
	leftEye := baseSphere scaledBy: 0.4.
	leftEye := leftEye translatedBy: 3.6 , 1.6 , -0.4.
	leftEyebrow := baseCircle scaledBy: 0.8 , 1 , 1.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 70).
	transformation := transformation 
				product: (Jun3dTransformation rotateX: (JunAngle fromDeg: -60)).
	leftEyebrow := leftEyebrow transform: transformation.
	leftEyebrow := leftEyebrow translatedBy: 2.8 , 1.7 , 1.7.
	leftCheek := baseSphere scaledBy: 3 * (0.9 , 0.7 , 1).
	transformation := Jun3dTransformation rotateZ: (JunAngle fromDeg: -10).
	transformation := transformation 
				product: (Jun3dTransformation rotateX: (JunAngle fromDeg: -60)).
	leftCheek := leftCheek transform: transformation.
	leftCheek := leftCheek translatedBy: 1.3 , 1 , -2.
	noseRound := baseSphere scaledBy: 2 * (1 , 1.1 , 0.9).
	noseRound := noseRound translatedBy: 3 , 0 , -1.8.
	nose := baseSphere scaledBy: 0.8 * (0.8 , 1 , 0.9).
	nose := nose translatedBy: 4.8 , 0 , -1.3.
	tongue := basePie scaledBy: 1 , 0.7 , 0.39.
	transformation := Jun3dTransformation rotateY: (JunAngle fromDeg: 20).
	transformation := transformation 
				product: (Jun3dTransformation rotateX: (JunAngle fromDeg: 210)).
	tongue := tongue transform: transformation.
	tongue := tongue translatedBy: 3.7 , 1 , -2.9.
	leftObjects := JunOpenGL3dCompoundObject new.
	leftObjects add: (leftEar
				paint: ColorValue orange;
				yourself).
	leftObjects add: (leftEye
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftEyebrow
				paint: ColorValue black;
				yourself).
	leftObjects add: (leftCheek
				paint: ColorValue orange;
				yourself).
	pooh := JunOpenGL3dCompoundObject new.
	pooh add: leftObjects.
	pooh 
		add: (JunOpenGL3dTransformedObject object: (leftObjects
						establishAllNormalVectors;
						yourself)
				transformation: Jun3dTransformation mirrorY).
	pooh add: (head
				paint: ColorValue orange;
				yourself).
	pooh add: (noseRound
				paint: ColorValue orange;
				yourself).
	pooh add: (nose
				paint: ColorValue black;
				yourself).
	pooh add: (tongue
				paint: ColorValue red;
				yourself).
	box := pooh boundingBox.
	maximum := box width max: (box height max: box depth).
	transformation := Jun3dTransformation translate: box center negated.
	transformation := transformation 
				product: (Jun3dTransformation scale: maximum reciprocal).
	pooh := JunOpenGL3dTransformedObject object: pooh
				transformation: transformation.
	pooh name: 'pooh'.
	^pooh
]

{ #category : #'lisp support' }
JunOpenGL3dObject class >> propertiesFromLispList: aList for: a3dObject [ 
	| list |
	list := aList detect: 
					[:car | 
					(car isKindOf: self defaultLispConsClass) and: [car head = #properties]]
				ifNone: [nil].
	list isNil ifTrue: [^self nameFromLispList: aList for: a3dObject].
	a3dObject properties: (JunAttributeTable fromLispList: list tail).
	^a3dObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> raptor [
	"(JunOpenGL3dObject raptor) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:24:41

(CompoundBody (name . "raptor")
  (bodies (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.71d , 2.0461d , 3.9288d)}
        {(0.49d , 2.1451d , 4.018d)}
        {(0.5055d , 1.7435d , 4.1074d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7091d , 1.1182d , 4.7058d)}
        {(0.6645d , 1.6173d , 3.9946d)}
        {(0.6467d , 1.192d , 4.6934d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5696d , 0.9573d , 4.7657d)}
        {(0.5843d , 1.2657d , 4.6809d)}
        {(0.5116d , 1.2836d , 4.7104d)}
        {(0.5371d , 1.1096d , 4.7964d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.552d , 1.9715d , 3.8832d)}
        {(0.5746d , 1.8304d , 3.9084d)}
        {(0.7665d , 1.9511d , 3.7458d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5302d , 1.9952d , 3.9193d)}
        {(0.71d , 2.0461d , 3.9288d)}
        {(0.5055d , 1.7435d , 4.1074d)}
        {(0.5954d , 1.778d , 3.941d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.552d , 1.9715d , 3.8832d)}
        {(0.7665d , 1.9511d , 3.7458d)}
        {(0.5492d , 2.0472d , 3.6584d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5371d , 1.1096d , 4.7964d)}
        {(0.5116d , 1.2836d , 4.7104d)}
        {(0.4335d , 1.2644d , 4.7099d)}
        {(0.5049d , 0.955d , 4.7666d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5843d , 1.2657d , 4.6809d)}
        {(0.6467d , 1.192d , 4.6934d)}
        {(0.6645d , 1.6173d , 3.9946d)}
        {(0.5055d , 1.7435d , 4.1074d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5954d , 1.778d , 3.941d)}
        {(0.5055d , 1.7435d , 4.1074d)}
        {(0.6645d , 1.6173d , 3.9946d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6518d , 2.0976d , 3.5368d)}
        {(0.5302d , 1.9952d , 3.9193d)}
        {(0.552d , 1.9715d , 3.8832d)}
        {(0.5492d , 2.0472d , 3.6584d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2635d , 2.155d , 4.0439d)}
        {(0.3498d , 1.9455d , 3.8688d)}
        {(0.2706d , 2.3731d , 3.4114d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7665d , 1.9511d , 3.7458d)}
        {(0.5746d , 1.8304d , 3.9084d)}
        {(0.5932d , 1.7643d , 3.772d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5049d , 0.955d , 4.7666d)}
        {(0.3889d , 1.1827d , 4.7384d)}
        {(0.3442d , 1.1009d , 4.7669d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5276d , 0.9286d , 4.6772d)}
        {(0.5975d , 1.0332d , 4.6213d)}
        {(0.7381d , 0.9774d , 4.6543d)}
        {(0.5422d , 0.9252d , 4.7643d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7091d , 1.1182d , 4.7058d)}
        {(0.7381d , 0.9774d , 4.6543d)}
        {(0.7144d , 1.4578d , 3.9121d)}
        {(0.6645d , 1.6173d , 3.9946d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5492d , 2.0472d , 3.6584d)}
        {(0.7665d , 1.9511d , 3.7458d)}
        {(0.5768d , 1.9067d , 3.5976d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2775d , 1.7415d , 4.1513d)}
        {(0.2635d , 2.155d , 4.0439d)}
        {(0.0236d , 2.0674d , 4.0165d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5768d , 1.9067d , 3.5976d)}
        {(0.7665d , 1.9511d , 3.7458d)}
        {(0.5932d , 1.7643d , 3.772d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6518d , 2.0976d , 3.5368d)}
        {(0.5492d , 2.0472d , 3.6584d)}
        {(0.5768d , 1.9067d , 3.5976d)}
        {(0.5863d , 2.0251d , 3.4101d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5954d , 1.778d , 3.941d)}
        {(0.6645d , 1.6173d , 3.9946d)}
        {(0.7144d , 1.4578d , 3.9121d)}
        {(0.7644d , 1.5849d , 3.7463d)}
        {(0.6364d , 1.7322d , 3.8026d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4274d , 1.0082d , 4.658d)}
        {(0.5276d , 0.9286d , 4.6772d)}
        {(0.5422d , 0.9252d , 4.7643d)}
        {(0.3127d , 0.9571d , 4.7396d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7381d , 0.9774d , 4.6543d)}
        {(0.5975d , 1.0332d , 4.6213d)}
        {(0.6264d , 1.4351d , 3.9021d)}
        {(0.7144d , 1.4578d , 3.9121d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7644d , 1.5849d , 3.7463d)}
        {(0.7144d , 1.4578d , 3.9121d)}
        {(0.6264d , 1.4351d , 3.9021d)}
        {(0.7152d , 1.5696d , 3.7334d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3889d , 1.1827d , 4.7384d)}
        {(0.4335d , 1.2644d , 4.7099d)}
        {(0.2775d , 1.7415d , 4.1513d)}
        {(0.1125d , 1.5912d , 4.0871d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6264d , 1.4351d , 3.9021d)}
        {(0.5975d , 1.0332d , 4.6213d)}
        {(0.6913d , 0.9388d , 4.6129d)}
        {(0.6393d , 1.3713d , 3.8603d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7152d , 1.5696d , 3.7334d)}
        {(0.6264d , 1.4351d , 3.9021d)}
        {(0.6393d , 1.3713d , 3.8603d)}
        {(0.7431d , 1.476d , 3.7056d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1874d , 1.9751d , 3.9679d)}
        {(0.1522d , 1.9459d , 3.9554d)}
        {(0.1533d , 1.7712d , 3.9431d)}
        {(0.1439d , 1.7397d , 4.0144d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7024d , 1.8907d , 3.3283d)}
        {(0.5863d , 2.0251d , 3.4101d)}
        {(0.7456d , 1.6732d , 3.4139d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6518d , 2.0976d , 3.5368d)}
        {(0.5863d , 2.0251d , 3.4101d)}
        {(0.6464d , 2.1114d , 2.9328d)}
        {(0.6326d , 2.2749d , 3.2575d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2775d , 1.7415d , 4.1513d)}
        {(0.1439d , 1.7397d , 4.0144d)}
        {(0.1125d , 1.5912d , 4.0871d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1522d , 1.9459d , 3.9554d)}
        {(-0.0849d , 1.8851d , 3.9281d)}
        {(0.1533d , 1.7712d , 3.9431d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7024d , 1.8907d , 3.3283d)}
        {(0.7935d , 1.9432d , 3.1205d)}
        {(0.6464d , 2.1114d , 2.9328d)}
        {(0.5863d , 2.0251d , 3.4101d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1522d , 1.9459d , 3.9554d)}
        {(0.0647d , 2.0017d , 3.7503d)}
        {(-0.0849d , 1.8851d , 3.9281d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1533d , 1.7712d , 3.9431d)}
        {(-0.0849d , 1.8851d , 3.9281d)}
        {(0.101d , 1.7599d , 3.8138d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6393d , 1.3713d , 3.8603d)}
        {(0.6913d , 0.9388d , 4.6129d)}
        {(0.6157d , 0.9039d , 4.4607d)}
        {(0.576d , 1.1822d , 3.7635d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0647d , 2.0017d , 3.7503d)}
        {(0.0682d , 1.8706d , 3.6882d)}
        {(-0.0849d , 1.8851d , 3.9281d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.101d , 1.7599d , 3.8138d)}
        {(-0.0849d , 1.8851d , 3.9281d)}
        {(0.0682d , 1.8706d , 3.6882d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0406d , 2.0735d , 3.6144d)}
        {(0.1874d , 1.9751d , 3.9679d)}
        {(0.0236d , 2.0674d , 4.0165d)}
        {(-0.1196d , 2.2599d , 3.3935d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6157d , 0.9039d , 4.4607d)}
        {(0.4737d , 1.0134d , 4.3801d)}
        {(0.48d , 1.2632d , 3.8095d)}
        {(0.576d , 1.1822d , 3.7635d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6464d , 2.1114d , 2.9328d)}
        {(0.7935d , 1.9432d , 3.1205d)}
        {(0.6353d , 1.776d , 2.9696d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7456d , 1.6732d , 3.4139d)}
        {(0.6909d , 1.6508d , 3.3437d)}
        {(0.6353d , 1.776d , 2.9696d)}
        {(0.7935d , 1.9432d , 3.1205d)}
        {(0.7024d , 1.8907d , 3.3283d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.043d , 1.4267d , 4.0389d)}
        {(0.1191d , 1.4063d , 3.994d)}
        {(0.4274d , 1.0082d , 4.658d)}
        {(0.3127d , 0.9571d , 4.7396d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.576d , 1.1822d , 3.7635d)}
        {(0.5832d , 1.2421d , 3.6311d)}
        {(0.7431d , 1.476d , 3.7056d)}
        {(0.6393d , 1.3713d , 3.8603d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.576d , 1.1822d , 3.7635d)}
        {(0.48d , 1.2632d , 3.8095d)}
        {(0.4667d , 1.3238d , 3.6724d)}
        {(0.5832d , 1.2421d , 3.6311d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4274d , 1.0082d , 4.658d)}
        {(0.1191d , 1.4063d , 3.994d)}
        {(0.0874d , 1.3452d , 3.9528d)}
        {(0.3264d , 0.9215d , 4.674d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4737d , 1.0134d , 4.3801d)}
        {(0.2449d , 1.2596d , 3.8559d)}
        {(0.358d , 1.1803d , 3.8055d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4667d , 1.3238d , 3.6724d)}
        {(0.48d , 1.2632d , 3.8095d)}
        {(0.358d , 1.1803d , 3.8055d)}
        {(0.3388d , 1.2496d , 3.6623d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3587d , 0.9017d , 4.5102d)}
        {(0.3264d , 0.9215d , 4.674d)}
        {(0.0874d , 1.3452d , 3.9528d)}
        {(0.1399d , 1.1784d , 3.8474d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7431d , 1.476d , 3.7056d)}
        {(0.5832d , 1.2421d , 3.6311d)}
        {(0.6345d , 1.521d , 2.9971d)}
        {(0.6353d , 1.776d , 2.9696d)}
        {(0.6909d , 1.6508d , 3.3437d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3587d , 0.9017d , 4.5102d)}
        {(0.1399d , 1.1784d , 3.8474d)}
        {(0.2449d , 1.2596d , 3.8559d)}
        {(0.4737d , 1.0134d , 4.3801d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0406d , 2.0735d , 3.6144d)}
        {(-0.1196d , 2.2599d , 3.3935d)}
        {(-0.166d , 2.1075d , 2.9905d)}
        {(0.0047d , 1.9978d , 3.4661d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4667d , 1.3238d , 3.6724d)}
        {(0.4467d , 1.7092d , 3.0393d)}
        {(0.6345d , 1.521d , 2.9971d)}
        {(0.5832d , 1.2421d , 3.6311d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6353d , 1.776d , 2.9696d)}
        {(0.6345d , 1.521d , 2.9971d)}
        {(0.4594d , 1.6524d , 2.9629d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0874d , 1.3452d , 3.9528d)}
        {(-0.0662d , 1.4669d , 3.7954d)}
        {(0.0943d , 1.2572d , 3.6936d)}
        {(0.1399d , 1.1784d , 3.8474d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0047d , 1.9978d , 3.4661d)}
        {(-0.1175d , 1.8382d , 3.4237d)}
        {(-0.1498d , 1.6519d , 3.5233d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0662d , 1.4669d , 3.7954d)}
        {(-0.028d , 1.5541d , 3.825d)}
        {(-0.1498d , 1.6519d , 3.5233d)}
        {(-0.1199d , 1.6444d , 3.4175d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4467d , 1.7092d , 3.0393d)}
        {(0.4667d , 1.3238d , 3.6724d)}
        {(0.3388d , 1.2496d , 3.6623d)}
        {(0.2333d , 1.3541d , 3.1039d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6353d , 1.776d , 2.9696d)}
        {(0.4594d , 1.6524d , 2.9629d)}
        {(0.3949d , 1.5271d , 2.8462d)}
        {(0.6184d , 1.6748d , 2.6409d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6464d , 2.1114d , 2.9328d)}
        {(0.6238d , 1.8802d , 2.373d)}
        {(0.3712d , 2.0236d , 2.2011d)}
        {(0.6326d , 2.2749d , 3.2575d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0943d , 1.2572d , 3.6936d)}
        {(-0.1552d , 1.5527d , 3.0493d)}
        {(0.0518d , 1.7252d , 3.0649d)}
        {(0.2211d , 1.3312d , 3.7051d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1199d , 1.6444d , 3.4175d)}
        {(-0.177d , 1.7721d , 3.0273d)}
        {(-0.1552d , 1.5527d , 3.0493d)}
        {(0.0943d , 1.2572d , 3.6936d)}
        {(-0.0662d , 1.4669d , 3.7954d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1196d , 2.2599d , 3.3935d)}
        {(0.2706d , 2.3731d , 3.4114d)}
        {(0.2056d , 2.1494d , 2.1109d)}
        {(0.0338d , 2.0363d , 2.2041d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.166d , 2.1075d , 2.9905d)}
        {(-0.1196d , 2.2599d , 3.3935d)}
        {(0.0338d , 2.0363d , 2.2041d)}
        {(-0.1897d , 1.8887d , 2.4095d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3712d , 2.0236d , 2.2011d)}
        {(0.6238d , 1.8802d , 2.373d)}
        {(0.7452d , 1.3037d , 1.9373d)}
        {(0.3949d , 1.505d , 1.748d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3712d , 2.0236d , 2.2011d)}
        {(0.3949d , 1.505d , 1.748d)}
        {(0.1941d , 1.6581d , 1.6337d)}
        {(0.2056d , 2.1494d , 2.1109d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1897d , 1.8887d , 2.4095d)}
        {(0.0338d , 2.0363d , 2.2041d)}
        {(-0.0168d , 1.5231d , 1.7537d)}
        {(-0.3347d , 1.3183d , 1.9824d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6738d , 0.6254d , 2.1931d)}
        {(0.7363d , 1.0109d , 2.2272d)}
        {(0.2873d , 0.4414d , 2.3522d)}
        {(0.4116d , 0.3791d , 2.3112d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1361d , -0.2468d , 3.2451d)}
        {(0.0876d , -0.2448d , 3.2692d)}
        {(0.1226d , -0.5058d , 3.2456d)}
        {(0.1416d , -0.5017d , 3.2344d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1416d , -0.5017d , 3.2344d)}
        {(0.1271d , -0.4952d , 3.2022d)}
        {(0.1164d , -0.3042d , 3.1832d)}
        {(0.1361d , -0.2468d , 3.2451d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1416d , -0.5017d , 3.2344d)}
        {(0.1226d , -0.5058d , 3.2456d)}
        {(0.108d , -0.4992d , 3.2131d)}
        {(0.1271d , -0.4952d , 3.2022d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6276d , -0.5257d , 3.0173d)}
        {(0.6121d , -0.4181d , 3.0841d)}
        {(0.6126d , -0.3607d , 2.8057d)}
        {(0.6277d , -0.5061d , 2.7818d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2086d , 0.4753d , 2.3087d)}
        {(0.2418d , 1.1375d , 2.993d)}
        {(0.0576d , 1.5399d , 2.8493d)}
        {(0.1036d , 0.4467d , 2.3613d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0876d , -0.2448d , 3.2692d)}
        {(0.0415d , -0.1684d , 3.1832d)}
        {(0.0441d , -0.2955d , 3.1506d)}
        {(0.0677d , -0.3028d , 3.2066d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8019d , -0.329d , 2.7979d)}
        {(0.7283d , -0.3187d , 2.7301d)}
        {(0.5569d , -0.3427d , 2.7125d)}
        {(0.5189d , -0.3731d , 2.7878d)}
        {(0.6126d , -0.3607d , 2.8057d)}
        {(0.707d , -0.346d , 2.809d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0127d , -0.1754d , 3.2038d)}
        {(-0.01d , -0.2556d , 3.3044d)}
        {(-0.0158d , -0.3123d , 3.2379d)}
        {(-0.002d , -0.3013d , 3.1686d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7283d , -0.3187d , 2.7301d)}
        {(0.7483d , -0.1235d , 2.3535d)}
        {(0.577d , -0.1476d , 2.3359d)}
        {(0.5569d , -0.3427d , 2.7125d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7354d , 0.3731d , 2.1941d)}
        {(0.7641d , -0.0428d , 2.2888d)}
        {(0.7754d , -0.1005d , 2.0646d)}
        {(0.7637d , 0.2573d , 1.9249d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5776d , -0.5388d , 3.018d)}
        {(0.4978d , -0.5446d , 2.9931d)}
        {(0.5333d , -0.5177d , 2.7611d)}
        {(0.6277d , -0.5061d , 2.7818d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0034d , -0.2061d , 2.8861d)}
        {(0.1141d , -0.1693d , 3.1465d)}
        {(0.1165d , -0.295d , 3.1145d)}
        {(0.0257d , -0.3531d , 2.9021d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0415d , -0.1684d , 3.1832d)}
        {(-0.0889d , -0.2052d , 2.9262d)}
        {(-0.0592d , -0.3538d , 2.9423d)}
        {(0.0441d , -0.2955d , 3.1506d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0034d , -0.2061d , 2.8861d)}
        {(0.1659d , -0.1642d , 3.1197d)}
        {(0.2314d , -0.1674d , 3.07d)}
        {(0.076d , -0.2096d , 2.8329d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2873d , 0.4414d , 2.3522d)}
        {(0.3119d , 0.1379d , 1.9728d)}
        {(0.439d , 0.2211d , 1.9224d)}
        {(0.4116d , 0.3791d , 2.3112d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7146d , 0.4586d , 1.8057d)}
        {(0.439d , 0.2211d , 1.9224d)}
        {(0.3119d , 0.1379d , 1.9728d)}
        {(0.8524d , 0.3703d , 1.3459d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0806d , -0.3039d , 3.1912d)}
        {(-0.1503d , -0.3572d , 2.9694d)}
        {(-0.0592d , -0.3538d , 2.9423d)}
        {(-0.002d , -0.3013d , 3.1686d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0406d , 0.2365d , 1.9232d)}
        {(-0.0277d , 0.3962d , 2.3156d)}
        {(-0.0733d , 0.3123d , 2.2732d)}
        {(-0.0823d , 0.2014d , 2.0006d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1736d , -0.0702d , 2.276d)}
        {(-0.0733d , 0.3123d , 2.2732d)}
        {(-0.3763d , 0.2986d , 2.2618d)}
        {(-0.3432d , -0.0274d , 2.3128d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.037d , -0.2088d , 2.7684d)}
        {(0.005d , -0.4004d , 2.7545d)}
        {(-0.1578d , -0.3735d , 2.3724d)}
        {(-0.1456d , -0.1507d , 2.3969d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1736d , -0.0702d , 2.276d)}
        {(-0.3432d , -0.0274d , 2.3128d)}
        {(-0.3929d , -0.078d , 2.4354d)}
        {(-0.0804d , -0.1281d , 2.361d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3362d , -0.3471d , 2.4588d)}
        {(-0.1481d , -0.4022d , 2.8307d)}
        {(-0.1168d , -0.2069d , 2.8457d)}
        {(-0.3193d , -0.1242d , 2.495d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1578d , -0.3735d , 2.3724d)}
        {(0.005d , -0.4004d , 2.7545d)}
        {(-0.1481d , -0.4022d , 2.8307d)}
        {(-0.3362d , -0.3471d , 2.4588d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.4401d , -0.3373d , 2.3116d)}
        {(-0.3929d , -0.078d , 2.4354d)}
        {(-0.3432d , -0.0274d , 2.3128d)}
        {(-0.369d , -0.1506d , 2.144d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0406d , 0.2365d , 1.9232d)}
        {(-0.0823d , 0.2014d , 2.0006d)}
        {(-0.3832d , 0.1845d , 1.9845d)}
        {(-0.3479d , 0.4138d , 1.8104d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4551d , 1.1906d , 0.8543d)}
        {(0.7505d , 0.86d , 0.5253d)}
        {(0.4022d , 0.9411d , -0.3751d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6108d , -0.9324d , 1.5797d)}
        {(1.1001d , -0.8344d , 1.5034d)}
        {(0.8524d , 0.3703d , 1.3459d)}
        {(0.6551d , 0.1244d , 1.3102d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5221d , 0.3785d , 1.3796d)}
        {(-0.3435d , 1.0256d , 2.2724d)}
        {(-0.3347d , 1.3183d , 1.9824d)}
        {(-0.5008d , 0.8638d , 1.0815d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6551d , 0.1244d , 1.3102d)}
        {(0.3119d , 0.1379d , 1.9728d)}
        {(0.3112d , -0.3159d , 1.0848d)}
        {(0.4984d , -0.272d , 0.7279d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4022d , 0.9411d , -0.3751d)}
        {(0.7505d , 0.86d , 0.5253d)}
        {(0.8063d , 0.5449d , -0.3072d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5008d , 0.8638d , 1.0815d)}
        {(-0.6631d , 0.6554d , 0.7402d)}
        {(-0.5221d , 0.3785d , 1.3796d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1802d , 1.3933d , 0.803d)}
        {(0.4551d , 1.1906d , 0.8543d)}
        {(0.4022d , 0.9411d , -0.3751d)}
        {(0.1329d , 1.1593d , -0.3947d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1679d , 0.0816d , 1.9902d)}
        {(0.1026d , -0.3302d , 0.9989d)}
        {(0.3112d , -0.3159d , 1.0848d)}
        {(0.3119d , 0.1379d , 1.9728d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8063d , 0.5449d , -0.3072d)}
        {(1.0286d , 0.6584d , 0.6701d)}
        {(0.7648d , -0.009d , -0.1797d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6108d , -0.9324d , 1.5797d)}
        {(0.6551d , 0.1244d , 1.3102d)}
        {(0.4984d , -0.272d , 0.7279d)}
        {(0.6535d , -0.9253d , 0.9296d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1679d , 0.0816d , 1.9902d)}
        {(0.0374d , 0.1947d , 1.9426d)}
        {(-0.1036d , -0.2878d , 1.0012d)}
        {(0.1026d , -0.3302d , 0.9989d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6108d , -0.9324d , 1.5797d)}
        {(0.8827d , -1.3626d , 0.6528d)}
        {(1.1466d , -1.2377d , 0.5993d)}
        {(1.1001d , -0.8344d , 1.5034d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.4961d , -2.7858d , 1.6163d)}
        {(1.5127d , -2.77d , 1.6536d)}
        {(1.4783d , -2.7764d , 1.6689d)}
        {(1.476d , -2.7884d , 1.6228d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.3497d , -2.4966d , 1.689d)}
        {(1.5251d , -2.4855d , 1.6111d)}
        {(1.3922d , -2.3129d , 1.2694d)}
        {(1.1779d , -2.3178d , 1.3652d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.4783d , -2.7764d , 1.6689d)}
        {(1.3497d , -2.4966d , 1.689d)}
        {(1.3776d , -2.6871d , 1.545d)}
        {(1.476d , -2.7884d , 1.6228d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.5251d , -2.4855d , 1.6111d)}
        {(1.479d , -2.6777d , 1.5129d)}
        {(1.4356d , -2.5764d , 1.2718d)}
        {(1.3922d , -2.3129d , 1.2694d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.073d , -0.455d , 0.4324d)}
        {(1.2657d , -0.0283d , 0.8121d)}
        {(1.2523d , -0.9985d , 0.4609d)}
        {(0.9511d , -1.0938d , -0.1284d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0761d , -2.8803d , 1.7014d)}
        {(1.0842d , -2.8686d , 1.7454d)}
        {(1.0502d , -2.8727d , 1.7472d)}
        {(1.0565d , -2.8828d , 1.7035d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0704d , -2.3687d , 1.3844d)}
        {(1.1124d , -2.5769d , 1.7371d)}
        {(1.086d , -2.7657d , 1.603d)}
        {(1.1042d , -2.6496d , 1.3656d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.086d , -2.7657d , 1.603d)}
        {(0.9866d , -2.7723d , 1.6137d)}
        {(0.8905d , -2.6639d , 1.3938d)}
        {(1.1042d , -2.6496d , 1.3656d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.3922d , -2.3129d , 1.2694d)}
        {(1.4356d , -2.5764d , 1.2718d)}
        {(1.3782d , -2.7607d , 1.0886d)}
        {(1.2734d , -2.4838d , 0.9264d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6108d , -0.9324d , 1.5797d)}
        {(0.6535d , -0.9253d , 0.9296d)}
        {(0.5025d , -0.808d , 0.3797d)}
        {(0.5531d , -1.1394d , -0.1264d)}
        {(0.8827d , -1.3626d , 0.6528d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.4356d , -2.5764d , 1.2718d)}
        {(1.22d , -2.6008d , 1.3491d)}
        {(1.1629d , -2.7882d , 1.1645d)}
        {(1.3782d , -2.7607d , 1.0886d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6597d , -2.5728d , 1.5492d)}
        {(0.7354d , -2.3901d , 1.2461d)}
        {(0.5273d , -2.3928d , 1.1976d)}
        {(0.4893d , -2.574d , 1.5092d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.1053d , -2.4508d , 0.6657d)}
        {(1.0806d , -1.3941d , 0.4536d)}
        {(0.8908d , -1.3864d , 0.5041d)}
        {(0.9155d , -2.443d , 0.7162d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8314d , -2.53d , 1.0276d)}
        {(1.0387d , -2.5055d , 1.0035d)}
        {(1.0073d , -2.4766d , 0.8032d)}
        {(0.8638d , -2.5088d , 0.8174d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6137d , -2.8567d , 1.5439d)}
        {(0.5797d , -2.8594d , 1.5369d)}
        {(0.5952d , -2.8696d , 1.4968d)}
        {(0.6148d , -2.8678d , 1.4999d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.3776d , -2.6871d , 1.545d)}
        {(1.3497d , -2.4966d , 1.689d)}
        {(1.1779d , -2.3178d , 1.3652d)}
        {(1.22d , -2.6008d , 1.3491d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.1466d , -1.2377d , 0.5993d)}
        {(0.8827d , -1.3626d , 0.6528d)}
        {(0.8908d , -1.3864d , 0.5041d)}
        {(1.0806d , -1.3941d , 0.4536d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0537d , -2.4787d , 1.0112d)}
        {(1.1779d , -2.3178d , 1.3652d)}
        {(1.3922d , -2.3129d , 1.2694d)}
        {(1.2734d , -2.4838d , 0.9264d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.2523d , -0.9985d , 0.4609d)}
        {(1.0971d , -1.426d , 0.2502d)}
        {(0.9221d , -1.4718d , 0.0916d)}
        {(0.9511d , -1.0938d , -0.1284d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8314d , -2.53d , 1.0276d)}
        {(0.8623d , -2.3933d , 1.4069d)}
        {(1.0704d , -2.3687d , 1.3844d)}
        {(1.0387d , -2.5055d , 1.0035d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7365d , -2.6654d , 1.2278d)}
        {(0.7354d , -2.3901d , 1.2461d)}
        {(0.6597d , -2.5728d , 1.5492d)}
        {(0.6488d , -2.7533d , 1.4094d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8623d , -2.3933d , 1.4069d)}
        {(0.8314d , -2.53d , 1.0276d)}
        {(0.88d , -2.832d , 1.1857d)}
        {(0.8905d , -2.6639d , 1.3938d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6488d , -2.7533d , 1.4094d)}
        {(0.6597d , -2.5728d , 1.5492d)}
        {(0.6137d , -2.8567d , 1.5439d)}
        {(0.6148d , -2.8678d , 1.4999d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5502d , -2.752d , 1.3906d)}
        {(0.6488d , -2.7533d , 1.4094d)}
        {(0.6148d , -2.8678d , 1.4999d)}
        {(0.5952d , -2.8696d , 1.4968d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5273d , -2.3928d , 1.1976d)}
        {(0.7354d , -2.3901d , 1.2461d)}
        {(0.806d , -2.5295d , 1.0034d)}
        {(0.6001d , -2.5339d , 0.9474d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0073d , -2.4766d , 0.8032d)}
        {(1.0387d , -2.5055d , 1.0035d)}
        {(1.0952d , -2.822d , 1.1621d)}
        {(1.0588d , -2.8571d , 0.6544d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.1664d , -2.5028d , 0.6647d)}
        {(1.2734d , -2.4838d , 0.9264d)}
        {(1.3782d , -2.7607d , 1.0886d)}
        {(1.2102d , -2.8191d , 0.5565d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.806d , -2.5295d , 1.0034d)}
        {(0.8638d , -2.5088d , 0.8174d)}
        {(0.7336d , -2.5351d , 0.6811d)}
        {(0.6001d , -2.5339d , 0.9474d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.9109d , -2.8833d , 0.675d)}
        {(0.88d , -2.832d , 1.1857d)}
        {(0.8314d , -2.53d , 1.0276d)}
        {(0.8638d , -2.5088d , 0.8174d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.9221d , -1.4718d , 0.0916d)}
        {(1.0971d , -1.426d , 0.2502d)}
        {(1.1218d , -2.4827d , 0.4622d)}
        {(0.9695d , -2.5286d , 0.2989d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5273d , -2.3928d , 1.1976d)}
        {(0.6001d , -2.5339d , 0.9474d)}
        {(0.5526d , -2.8336d , 1.0955d)}
        {(0.5247d , -2.6596d , 1.184d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0952d , -2.822d , 1.1621d)}
        {(0.88d , -2.832d , 1.1857d)}
        {(0.9109d , -2.8833d , 0.675d)}
        {(1.0588d , -2.8571d , 0.6544d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7775d , -2.5088d , 0.3996d)}
        {(0.7962d , -2.3649d , 0.3447d)}
        {(0.9407d , -2.3787d , 0.2724d)}
        {(0.9695d , -2.5286d , 0.2989d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6001d , -2.5339d , 0.9474d)}
        {(0.7336d , -2.5351d , 0.6811d)}
        {(0.7674d , -2.8514d , 0.5635d)}
        {(0.5526d , -2.8336d , 1.0955d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7616d , -2.842d , 1.1519d)}
        {(0.5526d , -2.8336d , 1.0955d)}
        {(0.7674d , -2.8514d , 0.5635d)}
        {(0.9109d , -2.8833d , 0.675d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7336d , -2.5351d , 0.6811d)}
        {(0.9155d , -2.443d , 0.7162d)}
        {(0.7775d , -2.5088d , 0.3996d)}
        {(0.7674d , -2.8514d , 0.5635d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.9407d , -2.3787d , 0.2724d)}
        {(0.7962d , -2.3649d , 0.3447d)}
        {(0.7897d , -2.4145d , 0.271d)}
        {(0.8716d , -2.4198d , 0.2329d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7897d , -2.4145d , 0.271d)}
        {(0.7962d , -2.3649d , 0.3447d)}
        {(0.7534d , -2.1505d , 0.2393d)}
        {(0.7386d , -2.3486d , 0.1644d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8979d , -2.1643d , 0.1671d)}
        {(0.8204d , -2.3539d , 0.1263d)}
        {(0.7386d , -2.3486d , 0.1644d)}
        {(0.7534d , -2.1505d , 0.2393d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8288d , -2.4976d , 0.2243d)}
        {(0.8716d , -2.4198d , 0.2329d)}
        {(0.7897d , -2.4145d , 0.271d)}
        {(0.7988d , -2.498d , 0.2377d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8204d , -2.3539d , 0.1263d)}
        {(0.8716d , -2.4198d , 0.2329d)}
        {(0.8288d , -2.4976d , 0.2243d)}
        {(0.807d , -2.4989d , 0.1802d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7988d , -2.498d , 0.2377d)}
        {(0.777d , -2.4993d , 0.1936d)}
        {(0.807d , -2.4989d , 0.1802d)}
        {(0.8288d , -2.4976d , 0.2243d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7365d , -2.6654d , 1.2278d)}
        {(0.6488d , -2.7533d , 1.4094d)}
        {(0.5502d , -2.752d , 1.3906d)}
        {(0.5247d , -2.6596d , 1.184d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.1053d , -2.4508d , 0.6657d)}
        {(1.1218d , -2.4827d , 0.4622d)}
        {(1.0971d , -1.426d , 0.2502d)}
        {(1.0806d , -1.3941d , 0.4536d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6597d , -2.5728d , 1.5492d)}
        {(0.4893d , -2.574d , 1.5092d)}
        {(0.5797d , -2.8594d , 1.5369d)}
        {(0.6137d , -2.8567d , 1.5439d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.1042d , -2.6496d , 1.3656d)}
        {(0.8905d , -2.6639d , 1.3938d)}
        {(0.88d , -2.832d , 1.1857d)}
        {(1.0952d , -2.822d , 1.1621d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5531d , -1.1394d , -0.1264d)}
        {(0.9511d , -1.0938d , -0.1284d)}
        {(0.9221d , -1.4718d , 0.0916d)}
        {(0.7301d , -1.4519d , 0.1923d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4984d , -0.272d , 0.7279d)}
        {(0.3112d , -0.3159d , 1.0848d)}
        {(0.1849d , -0.3842d , -0.0638d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6631d , 0.6554d , 0.7402d)}
        {(-0.3734d , 0.8985d , 0.4797d)}
        {(-0.5662d , 0.5981d , -0.2456d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5025d , -0.808d , 0.3797d)}
        {(0.6535d , -0.9253d , 0.9296d)}
        {(0.4984d , -0.272d , 0.7279d)}
        {(0.1849d , -0.3842d , -0.0638d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3734d , 0.8985d , 0.4797d)}
        {(-0.1654d , 0.9881d , -0.3553d)}
        {(-0.5662d , 0.5981d , -0.2456d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.2916d , -0.9398d , 1.6445d)}
        {(-0.3578d , -0.7321d , 1.0149d)}
        {(-0.1832d , -0.3079d , 0.7919d)}
        {(-0.2565d , 0.0023d , 1.4709d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8063d , 0.5449d , -0.3072d)}
        {(0.4053d , 0.6263d , -1.4794d)}
        {(0.1942d , 0.8423d , -1.4451d)}
        {(0.4022d , 0.9411d , -0.3751d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5662d , 0.5981d , -0.2456d)}
        {(-0.6076d , 0.0441d , -0.1182d)}
        {(-0.6631d , 0.6554d , 0.7402d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1654d , 0.9881d , -0.3553d)}
        {(0.1329d , 1.1593d , -0.3947d)}
        {(0.0609d , 1.0528d , -1.4446d)}
        {(-0.1081d , 0.8731d , -1.4546d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6631d , 0.6554d , 0.7402d)}
        {(-0.6076d , 0.0441d , -0.1182d)}
        {(-0.769d , -0.2461d , 0.156d)}
        {(-0.9221d , -0.0114d , 1.2683d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.2886d , -2.5961d , 1.758d)}
        {(-0.4198d , -2.5632d , 1.8395d)}
        {(-0.3883d , -2.8751d , 1.789d)}
        {(-0.3635d , -2.8766d , 1.7699d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.2165d , -0.5813d , 0.3923d)}
        {(-0.3578d , -0.7321d , 1.0149d)}
        {(-0.2916d , -0.9398d , 1.6445d)}
        {(-0.573d , -1.3297d , 0.6799d)}
        {(-0.512d , -1.129d , -0.1048d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9221d , -0.0114d , 1.2683d)}
        {(-1.0221d , -0.9845d , 0.4986d)}
        {(-0.9629d , -1.2157d , 0.6408d)}
        {(-0.8015d , -0.7557d , 1.6532d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3635d , -2.8766d , 1.7699d)}
        {(-0.3883d , -2.8751d , 1.789d)}
        {(-0.4132d , -2.8838d , 1.7435d)}
        {(-0.3984d , -2.8838d , 1.7327d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.4339d , -2.7782d , 1.6436d)}
        {(-0.3984d , -2.8838d , 1.7327d)}
        {(-0.4132d , -2.8838d , 1.7435d)}
        {(-0.5105d , -2.7642d , 1.6927d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7988d , -2.7443d , 1.9139d)}
        {(-0.8286d , -2.8431d , 2.0162d)}
        {(-0.8507d , -2.843d , 2.0169d)}
        {(-0.91d , -2.7351d , 1.9141d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.3712d , -2.4895d , 1.9728d)}
        {(-1.1827d , -2.5159d , 2.0105d)}
        {(-1.0564d , -2.3117d , 1.6698d)}
        {(-1.2845d , -2.2764d , 1.6164d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5066d , -2.8614d , 1.3943d)}
        {(-0.4708d , -2.6905d , 1.4635d)}
        {(-0.6418d , -2.6546d , 1.5576d)}
        {(-0.6871d , -2.8261d , 1.471d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.0564d , -2.3117d , 1.6698d)}
        {(-1.1827d , -2.5159d , 2.0105d)}
        {(-1.2166d , -2.7269d , 1.8529d)}
        {(-1.1001d , -2.6254d , 1.659d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6842d , -2.4597d , 1.2975d)}
        {(-0.5058d , -2.4965d , 1.2367d)}
        {(-0.5786d , -2.4796d , 0.973d)}
        {(-0.7162d , -2.4048d , 1.0464d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.1827d , -2.5159d , 2.0105d)}
        {(-1.3712d , -2.4895d , 1.9728d)}
        {(-1.3051d , -2.8048d , 1.9899d)}
        {(-1.2669d , -2.8058d , 1.9957d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.974d , -2.623d , 1.6908d)}
        {(-0.9785d , -2.7953d , 1.4914d)}
        {(-0.7379d , -2.8144d , 1.5001d)}
        {(-0.7342d , -2.6419d , 1.6904d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.3712d , -2.4895d , 1.9728d)}
        {(-1.2845d , -2.2764d , 1.6164d)}
        {(-1.2957d , -2.6141d , 1.5901d)}
        {(-1.3068d , -2.7157d , 1.821d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.1001d , -2.6254d , 1.659d)}
        {(-1.0524d , -2.795d , 1.4789d)}
        {(-0.9458d , -2.453d , 1.2993d)}
        {(-1.0564d , -2.3117d , 1.6698d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6577d , -1.4552d , 0.5089d)}
        {(-0.8305d , -1.4344d , 0.5456d)}
        {(-0.8758d , -2.3865d , 0.939d)}
        {(-0.703d , -2.4073d , 0.9023d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8758d , -2.3865d , 0.939d)}
        {(-0.8694d , -2.3987d , 1.0382d)}
        {(-0.7162d , -2.4048d , 1.0464d)}
        {(-0.5786d , -2.4796d , 0.973d)}
        {(-0.703d , -2.4073d , 0.9023d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8758d , -2.3865d , 0.939d)}
        {(-0.8305d , -1.4344d , 0.5456d)}
        {(-0.9416d , -1.4804d , 0.4045d)}
        {(-0.9869d , -2.4324d , 0.7979d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.2957d , -2.6141d , 1.5901d)}
        {(-1.2845d , -2.2764d , 1.6164d)}
        {(-1.1732d , -2.4139d , 1.2293d)}
        {(-1.2437d , -2.7971d , 1.4077d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.1001d , -2.6254d , 1.659d)}
        {(-1.2957d , -2.6141d , 1.5901d)}
        {(-1.2437d , -2.7971d , 1.4077d)}
        {(-1.0524d , -2.795d , 1.4789d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.692d , -1.5634d , 0.2318d)}
        {(-0.7374d , -2.5154d , 0.6252d)}
        {(-0.7539d , -2.402d , 0.5536d)}
        {(-0.7241d , -2.2218d , 0.4103d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.703d , -2.4073d , 0.9023d)}
        {(-0.5786d , -2.4796d , 0.973d)}
        {(-0.6408d , -2.8247d , 0.8501d)}
        {(-0.7374d , -2.5154d , 0.6252d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.692d , -1.5634d , 0.2318d)}
        {(-0.7241d , -2.2218d , 0.4103d)}
        {(-0.8748d , -2.2358d , 0.3696d)}
        {(-0.8918d , -1.5868d , 0.1701d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9458d , -2.453d , 1.2993d)}
        {(-1.0524d , -2.795d , 1.4789d)}
        {(-0.9656d , -2.8261d , 0.8735d)}
        {(-0.8694d , -2.3987d , 1.0382d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5066d , -2.8614d , 1.3943d)}
        {(-0.6871d , -2.8261d , 1.471d)}
        {(-0.8043d , -2.8327d , 0.8802d)}
        {(-0.6408d , -2.8247d , 0.8501d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8918d , -1.5868d , 0.1701d)}
        {(-0.8748d , -2.2358d , 0.3696d)}
        {(-0.9047d , -2.416d , 0.5129d)}
        {(-0.9371d , -2.5389d , 0.5635d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7489d , -2.4286d , 0.3654d)}
        {(-0.7241d , -2.2218d , 0.4103d)}
        {(-0.7539d , -2.402d , 0.5536d)}
        {(-0.7789d , -2.469d , 0.4847d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7789d , -2.469d , 0.4847d)}
        {(-0.7539d , -2.402d , 0.5536d)}
        {(-0.9047d , -2.416d , 0.5129d)}
        {(-0.8642d , -2.4711d , 0.4658d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8343d , -2.4307d , 0.3464d)}
        {(-0.8748d , -2.2358d , 0.3696d)}
        {(-0.7241d , -2.2218d , 0.4103d)}
        {(-0.7489d , -2.4286d , 0.3654d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9047d , -2.416d , 0.5129d)}
        {(-0.8748d , -2.2358d , 0.3696d)}
        {(-0.8343d , -2.4307d , 0.3464d)}
        {(-0.8642d , -2.4711d , 0.4658d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8415d , -2.5569d , 0.4525d)}
        {(-0.8104d , -2.5574d , 0.4594d)}
        {(-0.7789d , -2.469d , 0.4847d)}
        {(-0.8642d , -2.4711d , 0.4658d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8415d , -2.5569d , 0.4525d)}
        {(-0.8642d , -2.4711d , 0.4658d)}
        {(-0.8343d , -2.4307d , 0.3464d)}
        {(-0.8303d , -2.5672d , 0.408d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7992d , -2.5677d , 0.4148d)}
        {(-0.8104d , -2.5574d , 0.4594d)}
        {(-0.8415d , -2.5569d , 0.4525d)}
        {(-0.8303d , -2.5672d , 0.408d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.2437d , -2.7971d , 1.4077d)}
        {(-1.1732d , -2.4139d , 1.2293d)}
        {(-1.0686d , -2.4213d , 1.0038d)}
        {(-1.1247d , -2.8049d , 0.8298d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.0686d , -2.4213d , 1.0038d)}
        {(-0.9869d , -2.4324d , 0.7979d)}
        {(-0.9371d , -2.5389d , 0.5635d)}
        {(-1.1247d , -2.8049d , 0.8298d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9371d , -2.5389d , 0.5635d)}
        {(-0.7374d , -2.5154d , 0.6252d)}
        {(-0.6408d , -2.8247d , 0.8501d)}
        {(-0.8043d , -2.8327d , 0.8802d)}
        {(-0.9656d , -2.8261d , 0.8735d)}
        {(-1.1247d , -2.8049d , 0.8298d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7162d , -2.4048d , 1.0464d)}
        {(-0.7063d , -2.4626d , 1.3184d)}
        {(-0.7379d , -2.8144d , 1.5001d)}
        {(-0.8043d , -2.8327d , 0.8802d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.692d , -1.5634d , 0.2318d)}
        {(-0.8918d , -1.5868d , 0.1701d)}
        {(-0.9168d , -1.067d , -0.095d)}
        {(-0.512d , -1.129d , -0.1048d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.0221d , -0.9845d , 0.4986d)}
        {(-0.9168d , -1.067d , -0.095d)}
        {(-0.8918d , -1.5868d , 0.1701d)}
        {(-0.9416d , -1.4804d , 0.4045d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.4339d , -2.7782d , 1.6436d)}
        {(-0.5105d , -2.7642d , 1.6927d)}
        {(-0.6418d , -2.6546d , 1.5576d)}
        {(-0.4708d , -2.6905d , 1.4635d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7162d , -2.4048d , 1.0464d)}
        {(-0.8694d , -2.3987d , 1.0382d)}
        {(-0.9377d , -2.4463d , 1.307d)}
        {(-0.7063d , -2.4626d , 1.3184d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.2666d , -2.82d , 1.9449d)}
        {(-1.2669d , -2.8058d , 1.9957d)}
        {(-1.3051d , -2.8048d , 1.9899d)}
        {(-1.285d , -2.8181d , 1.9398d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.3712d , -2.4895d , 1.9728d)}
        {(-1.3068d , -2.7157d , 1.821d)}
        {(-1.285d , -2.8181d , 1.9398d)}
        {(-1.3051d , -2.8048d , 1.9899d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7407d , -2.54d , 2.0649d)}
        {(-0.7118d , -2.3289d , 1.7064d)}
        {(-0.9442d , -2.3108d , 1.704d)}
        {(-0.931d , -2.5232d , 2.0631d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.4339d , -2.7782d , 1.6436d)}
        {(-0.2886d , -2.5961d , 1.758d)}
        {(-0.3635d , -2.8766d , 1.7699d)}
        {(-0.3984d , -2.8838d , 1.7327d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3883d , -2.8751d , 1.789d)}
        {(-0.4198d , -2.5632d , 1.8395d)}
        {(-0.5105d , -2.7642d , 1.6927d)}
        {(-0.4132d , -2.8838d , 1.7435d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.4004d , -2.3847d , 1.4827d)}
        {(-0.5058d , -2.4965d , 1.2367d)}
        {(-0.6842d , -2.4597d , 1.2975d)}
        {(-0.5689d , -2.3424d , 1.5661d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8305d , -1.4344d , 0.5456d)}
        {(-0.9629d , -1.2157d , 0.6408d)}
        {(-1.0221d , -0.9845d , 0.4986d)}
        {(-0.9416d , -1.4804d , 0.4045d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.4004d , -2.3847d , 1.4827d)}
        {(-0.4708d , -2.6905d , 1.4635d)}
        {(-0.5066d , -2.8614d , 1.3943d)}
        {(-0.5058d , -2.4965d , 1.2367d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.573d , -1.3297d , 0.6799d)}
        {(-0.6577d , -1.4552d , 0.5089d)}
        {(-0.692d , -1.5634d , 0.2318d)}
        {(-0.512d , -1.129d , -0.1048d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.769d , -0.2461d , 0.156d)}
        {(-0.2165d , -0.5813d , 0.3923d)}
        {(-0.512d , -1.129d , -0.1048d)}
        {(-0.9168d , -1.067d , -0.095d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.2669d , -2.8058d , 1.9957d)}
        {(-1.2666d , -2.82d , 1.9449d)}
        {(-1.2166d , -2.7269d , 1.8529d)}
        {(-1.1827d , -2.5159d , 2.0105d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9442d , -2.3108d , 1.704d)}
        {(-0.7118d , -2.3289d , 1.7064d)}
        {(-0.7063d , -2.4626d , 1.3184d)}
        {(-0.9377d , -2.4463d , 1.307d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.931d , -2.5232d , 2.0631d)}
        {(-0.9442d , -2.3108d , 1.704d)}
        {(-0.974d , -2.623d , 1.6908d)}
        {(-0.91d , -2.7351d , 1.9141d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5689d , -2.3424d , 1.5661d)}
        {(-0.4198d , -2.5632d , 1.8395d)}
        {(-0.2886d , -2.5961d , 1.758d)}
        {(-0.4004d , -2.3847d , 1.4827d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.2916d , -0.9398d , 1.6445d)}
        {(-0.8015d , -0.7557d , 1.6532d)}
        {(-0.9629d , -1.2157d , 0.6408d)}
        {(-0.573d , -1.3297d , 0.6799d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7407d , -2.54d , 2.0649d)}
        {(-0.931d , -2.5232d , 2.0631d)}
        {(-0.8569d , -2.83d , 2.0665d)}
        {(-0.819d , -2.8307d , 2.0656d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.4004d , -2.3847d , 1.4827d)}
        {(-0.2886d , -2.5961d , 1.758d)}
        {(-0.4339d , -2.7782d , 1.6436d)}
        {(-0.4708d , -2.6905d , 1.4635d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7988d , -2.7443d , 1.9139d)}
        {(-0.7407d , -2.54d , 2.0649d)}
        {(-0.819d , -2.8307d , 2.0656d)}
        {(-0.8286d , -2.8431d , 2.0162d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7988d , -2.7443d , 1.9139d)}
        {(-0.7342d , -2.6419d , 1.6904d)}
        {(-0.7118d , -2.3289d , 1.7064d)}
        {(-0.7407d , -2.54d , 2.0649d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5105d , -2.7642d , 1.6927d)}
        {(-0.4198d , -2.5632d , 1.8395d)}
        {(-0.5689d , -2.3424d , 1.5661d)}
        {(-0.6418d , -2.6546d , 1.5576d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9221d , -0.0114d , 1.2683d)}
        {(-0.769d , -0.2461d , 0.156d)}
        {(-0.9168d , -1.067d , -0.095d)}
        {(-1.0221d , -0.9845d , 0.4986d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7988d , -2.7443d , 1.9139d)}
        {(-0.91d , -2.7351d , 1.9141d)}
        {(-0.974d , -2.623d , 1.6908d)}
        {(-0.7342d , -2.6419d , 1.6904d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6418d , -2.6546d , 1.5576d)}
        {(-0.5689d , -2.3424d , 1.5661d)}
        {(-0.6842d , -2.4597d , 1.2975d)}
        {(-0.6871d , -2.8261d , 1.471d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8063d , 0.5449d , -0.3072d)}
        {(0.7648d , -0.009d , -0.1797d)}
        {(0.3772d , 0.3304d , -1.543d)}
        {(0.4053d , 0.6263d , -1.4794d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7648d , -0.009d , -0.1797d)}
        {(0.1849d , -0.3842d , -0.0638d)}
        {(0.1591d , 0.1258d , -1.5975d)}
        {(0.3772d , 0.3304d , -1.543d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5662d , 0.5981d , -0.2456d)}
        {(-0.3262d , 0.6685d , -1.5091d)}
        {(-0.3544d , 0.3726d , -1.5728d)}
        {(-0.6076d , 0.0441d , -0.1182d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1432d , 0.1566d , -1.607d)}
        {(-0.0244d , -0.3668d , -0.0565d)}
        {(-0.6076d , 0.0441d , -0.1182d)}
        {(-0.3544d , 0.3726d , -1.5728d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0729d , -0.4738d , -0.0644d)}
        {(-0.0244d , -0.3668d , -0.0565d)}
        {(-0.1432d , 0.1566d , -1.607d)}
        {(-0.0011d , 0.0434d , -1.6315d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1699d , 1.3886d , -3.6041d)}
        {(0.0609d , 1.0528d , -1.4446d)}
        {(0.1942d , 0.8423d , -1.4451d)}
        {(0.2577d , 1.1909d , -3.657d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1942d , 0.8423d , -1.4451d)}
        {(0.4053d , 0.6263d , -1.4794d)}
        {(0.4064d , 1.0518d , -3.7133d)}
        {(0.2577d , 1.1909d , -3.657d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4064d , 1.0518d , -3.7133d)}
        {(0.4053d , 0.6263d , -1.4794d)}
        {(0.3772d , 0.3304d , -1.543d)}
        {(0.3896d , 0.8612d , -3.8027d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3262d , 0.6685d , -1.5091d)}
        {(-0.1081d , 0.8731d , -1.4546d)}
        {(0.0475d , 1.2108d , -3.6596d)}
        {(-0.1022d , 1.0789d , -3.7292d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1022d , 1.0789d , -3.7292d)}
        {(-0.1191d , 0.8883d , -3.8186d)}
        {(-0.3544d , 0.3726d , -1.5728d)}
        {(-0.3262d , 0.6685d , -1.5091d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1591d , 0.1258d , -1.5975d)}
        {(-0.0011d , 0.0434d , -1.6315d)}
        {(0.126d , 0.6432d , -3.9067d)}
        {(0.2399d , 0.7294d , -3.8723d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1432d , 0.1566d , -1.607d)}
        {(-0.3544d , 0.3726d , -1.5728d)}
        {(-0.1191d , 0.8883d , -3.8186d)}
        {(0.0296d , 0.7492d , -3.8748d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1432d , 0.1566d , -1.607d)}
        {(0.0296d , 0.7492d , -3.8748d)}
        {(0.126d , 0.6432d , -3.9067d)}
        {(-0.0011d , 0.0434d , -1.6315d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2577d , 1.1909d , -3.657d)}
        {(0.4064d , 1.0518d , -3.7133d)}
        {(0.4427d , 2.0432d , -5.9258d)}
        {(0.3424d , 2.1315d , -5.8786d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3424d , 2.1315d , -5.8786d)}
        {(0.2718d , 2.138d , -5.8791d)}
        {(0.1699d , 1.3886d , -3.6041d)}
        {(0.2577d , 1.1909d , -3.657d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3896d , 0.8612d , -3.8027d)}
        {(0.2399d , 0.7294d , -3.8723d)}
        {(0.3324d , 1.8397d , -6.0566d)}
        {(0.4322d , 1.9228d , -5.9997d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1191d , 0.8883d , -3.8186d)}
        {(-0.1022d , 1.0789d , -3.7292d)}
        {(0.1015d , 2.0614d , -5.9366d)}
        {(0.091d , 1.941d , -6.0105d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3324d , 1.8397d , -6.0566d)}
        {(0.2399d , 0.7294d , -3.8723d)}
        {(0.126d , 0.6432d , -3.9067d)}
        {(0.2619d , 1.8462d , -6.0572d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1913d , 1.8527d , -6.0577d)}
        {(0.2619d , 1.8462d , -6.0572d)}
        {(0.126d , 0.6432d , -3.9067d)}
        {(0.0296d , 0.7492d , -3.8748d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1913d , 1.8527d , -6.0577d)}
        {(0.3698d , 3.1559d , -7.9831d)}
        {(0.2619d , 1.8462d , -6.0572d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4175d , 3.244d , -7.9264d)}
        {(0.3424d , 2.1315d , -5.8786d)}
        {(0.4427d , 2.0432d , -5.9258d)}
        {(0.4492d , 3.2161d , -7.9414d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2013d , 2.1445d , -5.8797d)}
        {(0.2718d , 2.138d , -5.8791d)}
        {(0.4175d , 3.244d , -7.9264d)}
        {(0.3729d , 3.2481d , -7.9268d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4492d , 3.2161d , -7.9414d)}
        {(0.4427d , 2.0432d , -5.9258d)}
        {(0.4322d , 1.9228d , -5.9997d)}
        {(0.4459d , 3.1781d , -7.9647d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4322d , 1.9228d , -5.9997d)}
        {(0.3324d , 1.8397d , -6.0566d)}
        {(0.4143d , 3.1519d , -7.9827d)}
        {(0.4459d , 3.1781d , -7.9647d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1913d , 1.8527d , -6.0577d)}
        {(0.091d , 1.941d , -6.0105d)}
        {(0.3381d , 3.1838d , -7.9681d)}
        {(0.3698d , 3.1559d , -7.9831d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3729d , 3.2481d , -7.9268d)}
        {(0.3972d , 3.2342d , -8.011d)}
        {(0.3381d , 3.1838d , -7.9681d)}
        {(0.3414d , 3.2219d , -7.9448d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0374d , 0.1947d , 1.9426d)}
        {(-0.2565d , 0.0023d , 1.4709d)}
        {(-0.1832d , -0.3079d , 0.7919d)}
        {(-0.1036d , -0.2878d , 1.0012d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.4783d , -2.7764d , 1.6689d)}
        {(1.5127d , -2.77d , 1.6536d)}
        {(1.5251d , -2.4855d , 1.6111d)}
        {(1.3497d , -2.4966d , 1.689d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.2565d , 0.0023d , 1.4709d)}
        {(-0.5221d , 0.3785d , 1.3796d)}
        {(-0.8015d , -0.7557d , 1.6532d)}
        {(-0.2916d , -0.9398d , 1.6445d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6631d , 0.6554d , 0.7402d)}
        {(-0.9221d , -0.0114d , 1.2683d)}
        {(-0.8015d , -0.7557d , 1.6532d)}
        {(-0.5221d , 0.3785d , 1.3796d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1832d , -0.3079d , 0.7919d)}
        {(-0.0244d , -0.3668d , -0.0565d)}
        {(-0.1036d , -0.2878d , 1.0012d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0729d , -0.4738d , -0.0644d)}
        {(0.1849d , -0.3842d , -0.0638d)}
        {(0.3112d , -0.3159d , 1.0848d)}
        {(0.1026d , -0.3302d , 0.9989d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1942d , 0.8423d , -1.4451d)}
        {(0.0609d , 1.0528d , -1.4446d)}
        {(0.1329d , 1.1593d , -0.3947d)}
        {(0.4022d , 0.9411d , -0.3751d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0244d , -0.3668d , -0.0565d)}
        {(-0.1832d , -0.3079d , 0.7919d)}
        {(-0.3578d , -0.7321d , 1.0149d)}
        {(-0.2165d , -0.5813d , 0.3923d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1026d , -0.3302d , 0.9989d)}
        {(-0.1036d , -0.2878d , 1.0012d)}
        {(-0.0244d , -0.3668d , -0.0565d)}
        {(0.0729d , -0.4738d , -0.0644d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1654d , 0.9881d , -0.3553d)}
        {(-0.1081d , 0.8731d , -1.4546d)}
        {(-0.3262d , 0.6685d , -1.5091d)}
        {(-0.5662d , 0.5981d , -0.2456d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1591d , 0.1258d , -1.5975d)}
        {(0.1849d , -0.3842d , -0.0638d)}
        {(0.0729d , -0.4738d , -0.0644d)}
        {(-0.0011d , 0.0434d , -1.6315d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1081d , 0.8731d , -1.4546d)}
        {(0.0609d , 1.0528d , -1.4446d)}
        {(0.1699d , 1.3886d , -3.6041d)}
        {(0.0475d , 1.2108d , -3.6596d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3772d , 0.3304d , -1.543d)}
        {(0.1591d , 0.1258d , -1.5975d)}
        {(0.2399d , 0.7294d , -3.8723d)}
        {(0.3896d , 0.8612d , -3.8027d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0475d , 1.2108d , -3.6596d)}
        {(0.1699d , 1.3886d , -3.6041d)}
        {(0.2718d , 2.138d , -5.8791d)}
        {(0.2013d , 2.1445d , -5.8797d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3896d , 0.8612d , -3.8027d)}
        {(0.4322d , 1.9228d , -5.9997d)}
        {(0.4427d , 2.0432d , -5.9258d)}
        {(0.4064d , 1.0518d , -3.7133d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0475d , 1.2108d , -3.6596d)}
        {(0.2013d , 2.1445d , -5.8797d)}
        {(0.1015d , 2.0614d , -5.9366d)}
        {(-0.1022d , 1.0789d , -3.7292d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2718d , 2.138d , -5.8791d)}
        {(0.3424d , 2.1315d , -5.8786d)}
        {(0.4175d , 3.244d , -7.9264d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1913d , 1.8527d , -6.0577d)}
        {(0.0296d , 0.7492d , -3.8748d)}
        {(-0.1191d , 0.8883d , -3.8186d)}
        {(0.091d , 1.941d , -6.0105d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4492d , 3.2161d , -7.9414d)}
        {(0.3972d , 3.2342d , -8.011d)}
        {(0.3729d , 3.2481d , -7.9268d)}
        {(0.4175d , 3.244d , -7.9264d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2013d , 2.1445d , -5.8797d)}
        {(0.3729d , 3.2481d , -7.9268d)}
        {(0.3414d , 3.2219d , -7.9448d)}
        {(0.1015d , 2.0614d , -5.9366d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4459d , 3.1781d , -7.9647d)}
        {(0.4143d , 3.1519d , -7.9827d)}
        {(0.3972d , 3.2342d , -8.011d)}
        {(0.4492d , 3.2161d , -7.9414d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.091d , 1.941d , -6.0105d)}
        {(0.1015d , 2.0614d , -5.9366d)}
        {(0.3414d , 3.2219d , -7.9448d)}
        {(0.3381d , 3.1838d , -7.9681d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2619d , 1.8462d , -6.0572d)}
        {(0.3698d , 3.1559d , -7.9831d)}
        {(0.4143d , 3.1519d , -7.9827d)}
        {(0.3324d , 1.8397d , -6.0566d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3972d , 3.2342d , -8.011d)}
        {(0.4143d , 3.1519d , -7.9827d)}
        {(0.3698d , 3.1559d , -7.9831d)}
        {(0.3381d , 3.1838d , -7.9681d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.573d , -1.3297d , 0.6799d)}
        {(-0.9629d , -1.2157d , 0.6408d)}
        {(-0.8305d , -1.4344d , 0.5456d)}
        {(-0.6577d , -1.4552d , 0.5089d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.819d , -2.8307d , 2.0656d)}
        {(-0.8569d , -2.83d , 2.0665d)}
        {(-0.8507d , -2.843d , 2.0169d)}
        {(-0.8286d , -2.8431d , 2.0162d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7118d , -2.3289d , 1.7064d)}
        {(-0.7342d , -2.6419d , 1.6904d)}
        {(-0.7379d , -2.8144d , 1.5001d)}
        {(-0.7063d , -2.4626d , 1.3184d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.2166d , -2.7269d , 1.8529d)}
        {(-1.2666d , -2.82d , 1.9449d)}
        {(-1.285d , -2.8181d , 1.9398d)}
        {(-1.3068d , -2.7157d , 1.821d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.974d , -2.623d , 1.6908d)}
        {(-0.9442d , -2.3108d , 1.704d)}
        {(-0.9377d , -2.4463d , 1.307d)}
        {(-0.9785d , -2.7953d , 1.4914d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.2845d , -2.2764d , 1.6164d)}
        {(-1.0564d , -2.3117d , 1.6698d)}
        {(-0.9458d , -2.453d , 1.2993d)}
        {(-1.1732d , -2.4139d , 1.2293d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5058d , -2.4965d , 1.2367d)}
        {(-0.5066d , -2.8614d , 1.3943d)}
        {(-0.6408d , -2.8247d , 0.8501d)}
        {(-0.5786d , -2.4796d , 0.973d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6871d , -2.8261d , 1.471d)}
        {(-0.6842d , -2.4597d , 1.2975d)}
        {(-0.7162d , -2.4048d , 1.0464d)}
        {(-0.8043d , -2.8327d , 0.8802d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6577d , -1.4552d , 0.5089d)}
        {(-0.703d , -2.4073d , 0.9023d)}
        {(-0.7374d , -2.5154d , 0.6252d)}
        {(-0.692d , -1.5634d , 0.2318d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9458d , -2.453d , 1.2993d)}
        {(-0.8694d , -2.3987d , 1.0382d)}
        {(-1.0686d , -2.4213d , 1.0038d)}
        {(-1.1732d , -2.4139d , 1.2293d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8758d , -2.3865d , 0.939d)}
        {(-0.9869d , -2.4324d , 0.7979d)}
        {(-1.0686d , -2.4213d , 1.0038d)}
        {(-0.8694d , -2.3987d , 1.0382d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9377d , -2.4463d , 1.307d)}
        {(-0.8694d , -2.3987d , 1.0382d)}
        {(-0.9656d , -2.8261d , 0.8735d)}
        {(-0.9785d , -2.7953d , 1.4914d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.9416d , -1.4804d , 0.4045d)}
        {(-0.8918d , -1.5868d , 0.1701d)}
        {(-0.9371d , -2.5389d , 0.5635d)}
        {(-0.9869d , -2.4324d , 0.7979d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7379d , -2.8144d , 1.5001d)}
        {(-0.9785d , -2.7953d , 1.4914d)}
        {(-0.9656d , -2.8261d , 0.8735d)}
        {(-0.8043d , -2.8327d , 0.8802d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.2437d , -2.7971d , 1.4077d)}
        {(-1.1247d , -2.8049d , 0.8298d)}
        {(-0.9656d , -2.8261d , 0.8735d)}
        {(-1.0524d , -2.795d , 1.4789d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7789d , -2.469d , 0.4847d)}
        {(-0.8104d , -2.5574d , 0.4594d)}
        {(-0.7992d , -2.5677d , 0.4148d)}
        {(-0.7489d , -2.4286d , 0.3654d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8303d , -2.5672d , 0.408d)}
        {(-0.8343d , -2.4307d , 0.3464d)}
        {(-0.7489d , -2.4286d , 0.3654d)}
        {(-0.7992d , -2.5677d , 0.4148d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.7539d , -2.402d , 0.5536d)}
        {(-0.7374d , -2.5154d , 0.6252d)}
        {(-0.9371d , -2.5389d , 0.5635d)}
        {(-0.9047d , -2.416d , 0.5129d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-1.3068d , -2.7157d , 1.821d)}
        {(-1.2957d , -2.6141d , 1.5901d)}
        {(-1.1001d , -2.6254d , 1.659d)}
        {(-1.2166d , -2.7269d , 1.8529d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.8569d , -2.83d , 2.0665d)}
        {(-0.931d , -2.5232d , 2.0631d)}
        {(-0.91d , -2.7351d , 1.9141d)}
        {(-0.8507d , -2.843d , 2.0169d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6076d , 0.0441d , -0.1182d)}
        {(-0.0244d , -0.3668d , -0.0565d)}
        {(-0.2165d , -0.5813d , 0.3923d)}
        {(-0.769d , -0.2461d , 0.156d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.073d , -0.455d , 0.4324d)}
        {(0.5025d , -0.808d , 0.3797d)}
        {(0.1849d , -0.3842d , -0.0638d)}
        {(0.7648d , -0.009d , -0.1797d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.073d , -0.455d , 0.4324d)}
        {(0.9511d , -1.0938d , -0.1284d)}
        {(0.5531d , -1.1394d , -0.1264d)}
        {(0.5025d , -0.808d , 0.3797d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8827d , -1.3626d , 0.6528d)}
        {(0.5531d , -1.1394d , -0.1264d)}
        {(0.7301d , -1.4519d , 0.1923d)}
        {(0.8908d , -1.3864d , 0.5041d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0565d , -2.8828d , 1.7035d)}
        {(1.0502d , -2.8727d , 1.7472d)}
        {(0.9409d , -2.5932d , 1.7473d)}
        {(0.9866d , -2.7723d , 1.6137d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3379d , 0.5781d , 2.2095d)}
        {(-0.3435d , 1.0256d , 2.2724d)}
        {(-0.5221d , 0.3785d , 1.3796d)}
        {(-0.3479d , 0.4138d , 1.8104d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7951d , -0.0556d , 2.3166d)}
        {(0.7483d , -0.1235d , 2.3535d)}
        {(0.7994d , -0.2929d , 2.2724d)}
        {(0.8499d , -0.2419d , 2.1263d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7754d , -0.1005d , 2.0646d)}
        {(0.7641d , -0.0428d , 2.2888d)}
        {(0.7951d , -0.0556d , 2.3166d)}
        {(0.8499d , -0.2419d , 2.1263d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6266d , -0.3128d , 2.2489d)}
        {(0.577d , -0.1476d , 2.3359d)}
        {(0.559d , -0.1096d , 2.3347d)}
        {(0.6095d , -0.2882d , 2.1389d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8499d , -0.2419d , 2.1263d)}
        {(0.6095d , -0.2882d , 2.1389d)}
        {(0.5709d , -0.1379d , 2.0864d)}
        {(0.7754d , -0.1005d , 2.0646d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5709d , -0.1379d , 2.0864d)}
        {(0.5632d , -0.0883d , 2.3109d)}
        {(0.4661d , 0.3101d , 2.2694d)}
        {(0.4851d , 0.2003d , 1.9992d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6065d , -0.5079d , 2.6256d)}
        {(0.6266d , -0.3128d , 2.2489d)}
        {(0.7994d , -0.2929d , 2.2724d)}
        {(0.7793d , -0.488d , 2.6491d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7951d , -0.0556d , 2.3166d)}
        {(0.7641d , -0.0428d , 2.2888d)}
        {(0.5632d , -0.0883d , 2.3109d)}
        {(0.559d , -0.1096d , 2.3347d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7793d , -0.488d , 2.6491d)}
        {(0.8183d , -0.4762d , 2.7799d)}
        {(0.7227d , -0.4923d , 2.7881d)}
        {(0.6277d , -0.5061d , 2.7818d)}
        {(0.5333d , -0.5177d , 2.7611d)}
        {(0.6065d , -0.5079d , 2.6256d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0155d , -0.5123d , 3.2918d)}
        {(-0.01d , -0.2556d , 3.3044d)}
        {(-0.0634d , -0.2536d , 3.3174d)}
        {(-0.0371d , -0.515d , 3.2982d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0634d , -0.2536d , 3.3174d)}
        {(-0.0691d , -0.3108d , 3.2501d)}
        {(-0.0431d , -0.5073d , 3.2629d)}
        {(-0.0371d , -0.515d , 3.2982d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0214d , -0.5048d , 3.2569d)}
        {(-0.0155d , -0.5123d , 3.2918d)}
        {(-0.0371d , -0.515d , 3.2982d)}
        {(-0.0431d , -0.5073d , 3.2629d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6126d , -0.3607d , 2.8057d)}
        {(0.6121d , -0.4181d , 3.0841d)}
        {(0.693d , -0.4074d , 3.0946d)}
        {(0.707d , -0.346d , 2.809d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3949d , 1.5271d , 2.8462d)}
        {(0.2418d , 1.1375d , 2.993d)}
        {(0.2086d , 0.4753d , 2.3087d)}
        {(0.2873d , 0.4414d , 2.3522d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7793d , -0.488d , 2.6491d)}
        {(0.7283d , -0.3187d , 2.7301d)}
        {(0.8019d , -0.329d , 2.7979d)}
        {(0.8183d , -0.4762d , 2.7799d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0158d , -0.3123d , 3.2379d)}
        {(-0.01d , -0.2556d , 3.3044d)}
        {(-0.0155d , -0.5123d , 3.2918d)}
        {(-0.0214d , -0.5048d , 3.2569d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0431d , -0.5073d , 3.2629d)}
        {(-0.0691d , -0.3108d , 3.2501d)}
        {(-0.0158d , -0.3123d , 3.2379d)}
        {(-0.0214d , -0.5048d , 3.2569d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0634d , -0.2536d , 3.3174d)}
        {(-0.0916d , -0.1767d , 3.227d)}
        {(-0.0806d , -0.3039d , 3.1912d)}
        {(-0.0691d , -0.3108d , 3.2501d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0158d , -0.3123d , 3.2379d)}
        {(-0.0691d , -0.3108d , 3.2501d)}
        {(-0.0806d , -0.3039d , 3.1912d)}
        {(-0.002d , -0.3013d , 3.1686d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4667d , -0.5688d , 3.0452d)}
        {(0.4438d , -0.5351d , 3.1197d)}
        {(0.477d , -0.439d , 3.061d)}
        {(0.4978d , -0.5446d , 2.9931d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5178d , -0.5744d , 3.0673d)}
        {(0.4799d , -0.7646d , 3.0118d)}
        {(0.4586d , -0.7604d , 3.0037d)}
        {(0.4667d , -0.5688d , 3.0452d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4799d , -0.7646d , 3.0118d)}
        {(0.4676d , -0.7808d , 3.0407d)}
        {(0.4467d , -0.7771d , 3.0322d)}
        {(0.4586d , -0.7604d , 3.0037d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2386d , -0.3004d , 3.1088d)}
        {(0.2711d , -0.2425d , 3.1629d)}
        {(0.2859d , -0.4947d , 3.1502d)}
        {(0.2638d , -0.4895d , 3.123d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1959d , -0.2987d , 3.1428d)}
        {(0.2386d , -0.3004d , 3.1088d)}
        {(0.2638d , -0.4895d , 3.123d)}
        {(0.248d , -0.4948d , 3.1382d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6109d , -0.5486d , 3.0732d)}
        {(0.5961d , -0.5132d , 3.1492d)}
        {(0.6121d , -0.4181d , 3.0841d)}
        {(0.6276d , -0.5257d , 3.0173d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6334d , -0.744d , 3.0444d)}
        {(0.6642d , -0.551d , 3.0878d)}
        {(0.6492d , -0.5139d , 3.1633d)}
        {(0.6254d , -0.7597d , 3.075d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6492d , -0.5139d , 3.1633d)}
        {(0.5961d , -0.5132d , 3.1492d)}
        {(0.6036d , -0.7578d , 3.0689d)}
        {(0.6254d , -0.7597d , 3.075d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6114d , -0.7415d , 3.0387d)}
        {(0.6109d , -0.5486d , 3.0732d)}
        {(0.6642d , -0.551d , 3.0878d)}
        {(0.6334d , -0.744d , 3.0444d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6036d , -0.7578d , 3.0689d)}
        {(0.6114d , -0.7415d , 3.0387d)}
        {(0.6334d , -0.744d , 3.0444d)}
        {(0.6254d , -0.7597d , 3.075d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8074d , -0.5245d , 3.0854d)}
        {(0.8034d , -0.4855d , 3.1617d)}
        {(0.7791d , -0.7345d , 3.0845d)}
        {(0.7812d , -0.7193d , 3.0524d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7582d , -0.7183d , 3.0503d)}
        {(0.7518d , -0.5242d , 3.0794d)}
        {(0.8074d , -0.5245d , 3.0854d)}
        {(0.7812d , -0.7193d , 3.0524d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7582d , -0.7183d , 3.0503d)}
        {(0.7561d , -0.734d , 3.0819d)}
        {(0.7479d , -0.4869d , 3.1562d)}
        {(0.7518d , -0.5242d , 3.0794d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.177d , 1.7721d , 3.0273d)}
        {(-0.2552d , 1.8997d , 3.1828d)}
        {(-0.166d , 2.1075d , 2.9905d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0562d , 1.7024d , 3.8747d)}
        {(0.0047d , 1.9978d , 3.4661d)}
        {(-0.1498d , 1.6519d , 3.5233d)}
        {(-0.0715d , 1.5601d , 3.8602d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0406d , 2.0735d , 3.6144d)}
        {(0.0047d , 1.9978d , 3.4661d)}
        {(0.0682d , 1.8706d , 3.6882d)}
        {(0.0647d , 2.0017d , 3.7503d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4212d , 1.1871d , 4.646d)}
        {(0.4335d , 1.2644d , 4.7099d)}
        {(0.3889d , 1.1827d , 4.7384d)}
        {(0.3969d , 1.1426d , 4.6616d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.46d , 1.0187d , 4.6769d)}
        {(0.4212d , 1.1871d , 4.646d)}
        {(0.3969d , 1.1426d , 4.6616d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5116d , 1.2836d , 4.7104d)}
        {(0.3942d , 1.761d , 4.1444d)}
        {(0.2775d , 1.7415d , 4.1513d)}
        {(0.4335d , 1.2644d , 4.7099d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5055d , 1.7435d , 4.1074d)}
        {(0.49d , 2.1451d , 4.018d)}
        {(0.3498d , 1.9455d , 3.8688d)}
        {(0.3942d , 1.761d , 4.1444d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5422d , 0.9252d , 4.7643d)}
        {(0.7381d , 0.9774d , 4.6543d)}
        {(0.7091d , 1.1182d , 4.7058d)}
        {(0.5696d , 0.9573d , 4.7657d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5371d , 1.1096d , 4.7964d)}
        {(0.5422d , 0.9252d , 4.7643d)}
        {(0.5696d , 0.9573d , 4.7657d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5696d , 0.9573d , 4.7657d)}
        {(0.6467d , 1.192d , 4.6934d)}
        {(0.6163d , 1.1467d , 4.6252d)}
        {(0.5744d , 1.019d , 4.6645d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6163d , 1.1467d , 4.6252d)}
        {(0.6467d , 1.192d , 4.6934d)}
        {(0.5843d , 1.2657d , 4.6809d)}
        {(0.5824d , 1.1869d , 4.6184d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6163d , 1.1467d , 4.6252d)}
        {(0.5824d , 1.1869d , 4.6184d)}
        {(0.5744d , 1.019d , 4.6645d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5824d , 1.1869d , 4.6184d)}
        {(0.5843d , 1.2657d , 4.6809d)}
        {(0.5696d , 0.9573d , 4.7657d)}
        {(0.5744d , 1.019d , 4.6645d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5116d , 1.2836d , 4.7104d)}
        {(0.5843d , 1.2657d , 4.6809d)}
        {(0.5055d , 1.7435d , 4.1074d)}
        {(0.3942d , 1.761d , 4.1444d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.552d , 1.9715d , 3.8832d)}
        {(0.5302d , 1.9952d , 3.9193d)}
        {(0.5954d , 1.778d , 3.941d)}
        {(0.5746d , 1.8304d , 3.9084d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2635d , 2.155d , 4.0439d)}
        {(0.2775d , 1.7415d , 4.1513d)}
        {(0.3942d , 1.761d , 4.1444d)}
        {(0.3498d , 1.9455d , 3.8688d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5049d , 0.955d , 4.7666d)}
        {(0.4335d , 1.2644d , 4.7099d)}
        {(0.4212d , 1.1871d , 4.646d)}
        {(0.46d , 1.0187d , 4.6769d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5049d , 0.955d , 4.7666d)}
        {(0.46d , 1.0187d , 4.6769d)}
        {(0.3969d , 1.1426d , 4.6616d)}
        {(0.3889d , 1.1827d , 4.7384d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5371d , 1.1096d , 4.7964d)}
        {(0.5049d , 0.955d , 4.7666d)}
        {(0.5422d , 0.9252d , 4.7643d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6518d , 2.0976d , 3.5368d)}
        {(0.6326d , 2.2749d , 3.2575d)}
        {(0.71d , 2.0461d , 3.9288d)}
        {(0.5302d , 1.9952d , 3.9193d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5746d , 1.8304d , 3.9084d)}
        {(0.5954d , 1.778d , 3.941d)}
        {(0.6364d , 1.7322d , 3.8026d)}
        {(0.5932d , 1.7643d , 3.772d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5422d , 0.9252d , 4.7643d)}
        {(0.5049d , 0.955d , 4.7666d)}
        {(0.3442d , 1.1009d , 4.7669d)}
        {(0.3127d , 0.9571d , 4.7396d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.49d , 2.1451d , 4.018d)}
        {(0.71d , 2.0461d , 3.9288d)}
        {(0.6326d , 2.2749d , 3.2575d)}
        {(0.2706d , 2.3731d , 3.4114d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6913d , 0.9388d , 4.6129d)}
        {(0.5975d , 1.0332d , 4.6213d)}
        {(0.5276d , 0.9286d , 4.6772d)}
        {(0.5196d , 0.8632d , 4.6912d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2775d , 1.7415d , 4.1513d)}
        {(0.0236d , 2.0674d , 4.0165d)}
        {(0.1874d , 1.9751d , 3.9679d)}
        {(0.1439d , 1.7397d , 4.0144d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1125d , 1.5912d , 4.0871d)}
        {(0.3442d , 1.1009d , 4.7669d)}
        {(0.3889d , 1.1827d , 4.7384d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5196d , 0.8632d , 4.6912d)}
        {(0.5276d , 0.9286d , 4.6772d)}
        {(0.4274d , 1.0082d , 4.658d)}
        {(0.3264d , 0.9215d , 4.674d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6157d , 0.9039d , 4.4607d)}
        {(0.6913d , 0.9388d , 4.6129d)}
        {(0.5196d , 0.8632d , 4.6912d)}
        {(0.5007d , 0.8593d , 4.5529d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5863d , 2.0251d , 3.4101d)}
        {(0.6364d , 1.7322d , 3.8026d)}
        {(0.7644d , 1.5849d , 3.7463d)}
        {(0.7456d , 1.6732d , 3.4139d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7644d , 1.5849d , 3.7463d)}
        {(0.7152d , 1.5696d , 3.7334d)}
        {(0.7456d , 1.6732d , 3.4139d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5007d , 0.8593d , 4.5529d)}
        {(0.5196d , 0.8632d , 4.6912d)}
        {(0.3264d , 0.9215d , 4.674d)}
        {(0.3587d , 0.9017d , 4.5102d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6157d , 0.9039d , 4.4607d)}
        {(0.5007d , 0.8593d , 4.5529d)}
        {(0.3587d , 0.9017d , 4.5102d)}
        {(0.4737d , 1.0134d , 4.3801d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0236d , 2.0674d , 4.0165d)}
        {(0.2635d , 2.155d , 4.0439d)}
        {(0.2706d , 2.3731d , 3.4114d)}
        {(-0.1196d , 2.2599d , 3.3935d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7431d , 1.476d , 3.7056d)}
        {(0.6909d , 1.6508d , 3.3437d)}
        {(0.7456d , 1.6732d , 3.4139d)}
        {(0.7152d , 1.5696d , 3.7334d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1874d , 1.9751d , 3.9679d)}
        {(-0.0406d , 2.0735d , 3.6144d)}
        {(0.0647d , 2.0017d , 3.7503d)}
        {(0.1522d , 1.9459d , 3.9554d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0562d , 1.7024d , 3.8747d)}
        {(0.1439d , 1.7397d , 4.0144d)}
        {(0.1533d , 1.7712d , 3.9431d)}
        {(0.101d , 1.7599d , 3.8138d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3127d , 0.9571d , 4.7396d)}
        {(0.3442d , 1.1009d , 4.7669d)}
        {(0.1125d , 1.5912d , 4.0871d)}
        {(0.043d , 1.4267d , 4.0389d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0562d , 1.7024d , 3.8747d)}
        {(0.101d , 1.7599d , 3.8138d)}
        {(0.0682d , 1.8706d , 3.6882d)}
        {(0.0047d , 1.9978d , 3.4661d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.358d , 1.1803d , 3.8055d)}
        {(0.48d , 1.2632d , 3.8095d)}
        {(0.4737d , 1.0134d , 4.3801d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.043d , 1.4267d , 4.0389d)}
        {(0.1125d , 1.5912d , 4.0871d)}
        {(0.1439d , 1.7397d , 4.0144d)}
        {(0.0562d , 1.7024d , 3.8747d)}
        {(-0.0715d , 1.5601d , 3.8602d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1191d , 1.4063d , 3.994d)}
        {(0.043d , 1.4267d , 4.0389d)}
        {(-0.0715d , 1.5601d , 3.8602d)}
        {(-0.028d , 1.5541d , 3.825d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1191d , 1.4063d , 3.994d)}
        {(-0.028d , 1.5541d , 3.825d)}
        {(-0.0662d , 1.4669d , 3.7954d)}
        {(0.0874d , 1.3452d , 3.9528d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.358d , 1.1803d , 3.8055d)}
        {(0.2449d , 1.2596d , 3.8559d)}
        {(0.2211d , 1.3312d , 3.7051d)}
        {(0.3388d , 1.2496d , 3.6623d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.028d , 1.5541d , 3.825d)}
        {(-0.0715d , 1.5601d , 3.8602d)}
        {(-0.1498d , 1.6519d , 3.5233d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6353d , 1.776d , 2.9696d)}
        {(0.6184d , 1.6748d , 2.6409d)}
        {(0.6238d , 1.8802d , 2.373d)}
        {(0.6464d , 2.1114d , 2.9328d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0047d , 1.9978d , 3.4661d)}
        {(-0.166d , 2.1075d , 2.9905d)}
        {(-0.2552d , 1.8997d , 3.1828d)}
        {(-0.1175d , 1.8382d , 3.4237d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1175d , 1.8382d , 3.4237d)}
        {(-0.2552d , 1.8997d , 3.1828d)}
        {(-0.177d , 1.7721d , 3.0273d)}
        {(-0.1199d , 1.6444d , 3.4175d)}
        {(-0.1498d , 1.6519d , 3.5233d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3388d , 1.2496d , 3.6623d)}
        {(0.2211d , 1.3312d , 3.7051d)}
        {(0.0518d , 1.7252d , 3.0649d)}
        {(0.2333d , 1.3541d , 3.1039d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4594d , 1.6524d , 2.9629d)}
        {(0.4467d , 1.7092d , 3.0393d)}
        {(0.2333d , 1.3541d , 3.1039d)}
        {(0.2418d , 1.1375d , 2.993d)}
        {(0.3949d , 1.5271d , 2.8462d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6326d , 2.2749d , 3.2575d)}
        {(0.3712d , 2.0236d , 2.2011d)}
        {(0.2056d , 2.1494d , 2.1109d)}
        {(0.2706d , 2.3731d , 3.4114d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.019d , 1.679d , 2.9799d)}
        {(0.0576d , 1.5399d , 2.8493d)}
        {(0.2418d , 1.1375d , 2.993d)}
        {(0.2333d , 1.3541d , 3.1039d)}
        {(0.0518d , 1.7252d , 3.0649d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.177d , 1.7721d , 3.0273d)}
        {(-0.1951d , 1.6833d , 2.6773d)}
        {(0.0576d , 1.5399d , 2.8493d)}
        {(0.019d , 1.679d , 2.9799d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.177d , 1.7721d , 3.0273d)}
        {(-0.166d , 2.1075d , 2.9905d)}
        {(-0.1897d , 1.8887d , 2.4095d)}
        {(-0.1951d , 1.6833d , 2.6773d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6238d , 1.8802d , 2.373d)}
        {(0.6184d , 1.6748d , 2.6409d)}
        {(0.7363d , 1.0109d , 2.2272d)}
        {(0.7452d , 1.3037d , 1.9373d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6184d , 1.6748d , 2.6409d)}
        {(0.3949d , 1.5271d , 2.8462d)}
        {(0.2873d , 0.4414d , 2.3522d)}
        {(0.7363d , 1.0109d , 2.2272d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8034d , -0.4855d , 3.1617d)}
        {(0.7479d , -0.4869d , 3.1562d)}
        {(0.7561d , -0.734d , 3.0819d)}
        {(0.7791d , -0.7345d , 3.0845d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7791d , -0.7345d , 3.0845d)}
        {(0.7561d , -0.734d , 3.0819d)}
        {(0.7582d , -0.7183d , 3.0503d)}
        {(0.7812d , -0.7193d , 3.0524d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6036d , -0.7578d , 3.0689d)}
        {(0.5961d , -0.5132d , 3.1492d)}
        {(0.6109d , -0.5486d , 3.0732d)}
        {(0.6114d , -0.7415d , 3.0387d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6642d , -0.551d , 3.0878d)}
        {(0.6109d , -0.5486d , 3.0732d)}
        {(0.6276d , -0.5257d , 3.0173d)}
        {(0.709d , -0.5167d , 3.0299d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2286d , -0.2402d , 3.1977d)}
        {(0.2711d , -0.2425d , 3.1629d)}
        {(0.2314d , -0.1674d , 3.07d)}
        {(0.1659d , -0.1642d , 3.1197d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1361d , -0.2468d , 3.2451d)}
        {(0.1141d , -0.1693d , 3.1465d)}
        {(0.0415d , -0.1684d , 3.1832d)}
        {(0.0876d , -0.2448d , 3.2692d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6738d , 0.6254d , 2.1931d)}
        {(0.4116d , 0.3791d , 2.3112d)}
        {(0.4661d , 0.3101d , 2.2694d)}
        {(0.7354d , 0.3731d , 2.1941d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8401d , -0.4916d , 3.0213d)}
        {(0.7571d , -0.503d , 3.0218d)}
        {(0.7227d , -0.4923d , 2.7881d)}
        {(0.8183d , -0.4762d , 2.7799d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5563d , -0.4316d , 3.0838d)}
        {(0.477d , -0.439d , 3.061d)}
        {(0.4438d , -0.5351d , 3.1197d)}
        {(0.4946d , -0.539d , 3.1412d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2859d , -0.4947d , 3.1502d)}
        {(0.2711d , -0.2425d , 3.1629d)}
        {(0.2286d , -0.2402d , 3.1977d)}
        {(0.2703d , -0.5001d , 3.1658d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2703d , -0.5001d , 3.1658d)}
        {(0.2286d , -0.2402d , 3.1977d)}
        {(0.1959d , -0.2987d , 3.1428d)}
        {(0.248d , -0.4948d , 3.1382d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2859d , -0.4947d , 3.1502d)}
        {(0.2703d , -0.5001d , 3.1658d)}
        {(0.248d , -0.4948d , 3.1382d)}
        {(0.2638d , -0.4895d , 3.123d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5178d , -0.5744d , 3.0673d)}
        {(0.4946d , -0.539d , 3.1412d)}
        {(0.4676d , -0.7808d , 3.0407d)}
        {(0.4799d , -0.7646d , 3.0118d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4676d , -0.7808d , 3.0407d)}
        {(0.4946d , -0.539d , 3.1412d)}
        {(0.4438d , -0.5351d , 3.1197d)}
        {(0.4467d , -0.7771d , 3.0322d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4667d , -0.5688d , 3.0452d)}
        {(0.4586d , -0.7604d , 3.0037d)}
        {(0.4467d , -0.7771d , 3.0322d)}
        {(0.4438d , -0.5351d , 3.1197d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5776d , -0.5388d , 3.018d)}
        {(0.5178d , -0.5744d , 3.0673d)}
        {(0.4667d , -0.5688d , 3.0452d)}
        {(0.4978d , -0.5446d , 2.9931d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5189d , -0.3731d , 2.7878d)}
        {(0.5569d , -0.3427d , 2.7125d)}
        {(0.6065d , -0.5079d , 2.6256d)}
        {(0.5333d , -0.5177d , 2.7611d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.577d , -0.1476d , 2.3359d)}
        {(0.7483d , -0.1235d , 2.3535d)}
        {(0.7951d , -0.0556d , 2.3166d)}
        {(0.559d , -0.1096d , 2.3347d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5569d , -0.3427d , 2.7125d)}
        {(0.577d , -0.1476d , 2.3359d)}
        {(0.6266d , -0.3128d , 2.2489d)}
        {(0.6065d , -0.5079d , 2.6256d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4851d , 0.2003d , 1.9992d)}
        {(0.7637d , 0.2573d , 1.9249d)}
        {(0.7754d , -0.1005d , 2.0646d)}
        {(0.5709d , -0.1379d , 2.0864d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.559d , -0.1096d , 2.3347d)}
        {(0.5632d , -0.0883d , 2.3109d)}
        {(0.5709d , -0.1379d , 2.0864d)}
        {(0.6095d , -0.2882d , 2.1389d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8499d , -0.2419d , 2.1263d)}
        {(0.7994d , -0.2929d , 2.2724d)}
        {(0.6266d , -0.3128d , 2.2489d)}
        {(0.6095d , -0.2882d , 2.1389d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8736d , 0.8556d , 1.0479d)}
        {(0.7452d , 1.3037d , 1.9373d)}
        {(0.7363d , 1.0109d , 2.2272d)}
        {(0.8524d , 0.3703d , 1.3459d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.076d , -0.2096d , 2.8329d)}
        {(0.2314d , -0.1674d , 3.07d)}
        {(0.2262d , -0.2927d , 3.0427d)}
        {(0.1045d , -0.355d , 2.849d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3949d , 1.505d , 1.748d)}
        {(0.7452d , 1.3037d , 1.9373d)}
        {(0.8736d , 0.8556d , 1.0479d)}
        {(0.4551d , 1.1906d , 0.8543d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1045d , -0.355d , 2.849d)}
        {(0.2262d , -0.2927d , 3.0427d)}
        {(0.1609d , -0.2908d , 3.092d)}
        {(0.0257d , -0.3531d , 2.9021d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1036d , 0.4467d , 2.3613d)}
        {(-0.3435d , 1.0256d , 2.2724d)}
        {(-0.3379d , 0.5781d , 2.2095d)}
        {(-0.0277d , 0.3962d , 2.3156d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1165d , -0.295d , 3.1145d)}
        {(0.0441d , -0.2955d , 3.1506d)}
        {(-0.0592d , -0.3538d , 2.9423d)}
        {(0.0257d , -0.3531d , 2.9021d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.076d , -0.2096d , 2.8329d)}
        {(0.1045d , -0.355d , 2.849d)}
        {(0.005d , -0.4004d , 2.7545d)}
        {(0.037d , -0.2088d , 2.7684d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1802d , 1.3933d , 0.803d)}
        {(0.1941d , 1.6581d , 1.6337d)}
        {(0.3949d , 1.505d , 1.748d)}
        {(0.4551d , 1.1906d , 0.8543d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1805d , -0.207d , 2.9533d)}
        {(-0.1168d , -0.2069d , 2.8457d)}
        {(-0.1481d , -0.4022d , 2.8307d)}
        {(-0.1503d , -0.3572d , 2.9694d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2873d , 0.4414d , 2.3522d)}
        {(0.2086d , 0.4753d , 2.3087d)}
        {(0.1679d , 0.0816d , 1.9902d)}
        {(0.3119d , 0.1379d , 1.9728d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1045d , -0.355d , 2.849d)}
        {(0.0257d , -0.3531d , 2.9021d)}
        {(-0.0592d , -0.3538d , 2.9423d)}
        {(-0.1503d , -0.3572d , 2.9694d)}
        {(-0.1481d , -0.4022d , 2.8307d)}
        {(0.005d , -0.4004d , 2.7545d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7505d , 0.86d , 0.5253d)}
        {(0.4551d , 1.1906d , 0.8543d)}
        {(0.8736d , 0.8556d , 1.0479d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0733d , 0.3123d , 2.2732d)}
        {(-0.0277d , 0.3962d , 2.3156d)}
        {(-0.3379d , 0.5781d , 2.2095d)}
        {(-0.3763d , 0.2986d , 2.2618d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7505d , 0.86d , 0.5253d)}
        {(0.8736d , 0.8556d , 1.0479d)}
        {(1.0286d , 0.6584d , 0.6701d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1142d , 1.2158d , 0.8548d)}
        {(-0.0168d , 1.5231d , 1.7537d)}
        {(0.1941d , 1.6581d , 1.6337d)}
        {(0.1802d , 1.3933d , 0.803d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0374d , 0.1947d , 1.9426d)}
        {(0.1036d , 0.4467d , 2.3613d)}
        {(-0.0277d , 0.3962d , 2.3156d)}
        {(-0.0406d , 0.2365d , 1.9232d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1168d , -0.2069d , 2.8457d)}
        {(0.037d , -0.2088d , 2.7684d)}
        {(-0.1456d , -0.1507d , 2.3969d)}
        {(-0.3193d , -0.1242d , 2.495d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0286d , 0.6584d , 0.6701d)}
        {(0.8524d , 0.3703d , 1.3459d)}
        {(1.1001d , -0.8344d , 1.5034d)}
        {(1.2657d , -0.0283d , 0.8121d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.5221d , 0.3785d , 1.3796d)}
        {(0.0374d , 0.1947d , 1.9426d)}
        {(-0.0406d , 0.2365d , 1.9232d)}
        {(-0.3479d , 0.4138d , 1.8104d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3347d , 1.3183d , 1.9824d)}
        {(-0.0168d , 1.5231d , 1.7537d)}
        {(-0.1142d , 1.2158d , 0.8548d)}
        {(-0.5008d , 0.8638d , 1.0815d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7505d , 0.86d , 0.5253d)}
        {(1.0286d , 0.6584d , 0.6701d)}
        {(0.8063d , 0.5449d , -0.3072d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0374d , 0.1947d , 1.9426d)}
        {(-0.5221d , 0.3785d , 1.3796d)}
        {(-0.2565d , 0.0023d , 1.4709d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1142d , 1.2158d , 0.8548d)}
        {(-0.3734d , 0.8985d , 0.4797d)}
        {(-0.5008d , 0.8638d , 1.0815d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.6631d , 0.6554d , 0.7402d)}
        {(-0.5008d , 0.8638d , 1.0815d)}
        {(-0.3734d , 0.8985d , 0.4797d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7648d , -0.009d , -0.1797d)}
        {(1.0286d , 0.6584d , 0.6701d)}
        {(1.2657d , -0.0283d , 0.8121d)}
        {(1.073d , -0.455d , 0.4324d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1142d , 1.2158d , 0.8548d)}
        {(-0.1654d , 0.9881d , -0.3553d)}
        {(-0.3734d , 0.8985d , 0.4797d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1142d , 1.2158d , 0.8548d)}
        {(0.1802d , 1.3933d , 0.803d)}
        {(0.1329d , 1.1593d , -0.3947d)}
        {(-0.1654d , 0.9881d , -0.3553d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.2657d , -0.0283d , 0.8121d)}
        {(1.1001d , -0.8344d , 1.5034d)}
        {(1.1466d , -1.2377d , 0.5993d)}
        {(1.2523d , -0.9985d , 0.4609d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.5251d , -2.4855d , 1.6111d)}
        {(1.5127d , -2.77d , 1.6536d)}
        {(1.4961d , -2.7858d , 1.6163d)}
        {(1.479d , -2.6777d , 1.5129d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.3776d , -2.6871d , 1.545d)}
        {(1.22d , -2.6008d , 1.3491d)}
        {(1.4356d , -2.5764d , 1.2718d)}
        {(1.479d , -2.6777d , 1.5129d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0806d , -1.3941d , 0.4536d)}
        {(1.0971d , -1.426d , 0.2502d)}
        {(1.2523d , -0.9985d , 0.4609d)}
        {(1.1466d , -1.2377d , 0.5993d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.9409d , -2.5932d , 1.7473d)}
        {(1.1124d , -2.5769d , 1.7371d)}
        {(1.0704d , -2.3687d , 1.3844d)}
        {(0.8623d , -2.3933d , 1.4069d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0842d , -2.8686d , 1.7454d)}
        {(1.1124d , -2.5769d , 1.7371d)}
        {(0.9409d , -2.5932d , 1.7473d)}
        {(1.0502d , -2.8727d , 1.7472d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.086d , -2.7657d , 1.603d)}
        {(1.1124d , -2.5769d , 1.7371d)}
        {(1.0842d , -2.8686d , 1.7454d)}
        {(1.0761d , -2.8803d , 1.7014d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0761d , -2.8803d , 1.7014d)}
        {(1.0565d , -2.8828d , 1.7035d)}
        {(0.9866d , -2.7723d , 1.6137d)}
        {(1.086d , -2.7657d , 1.603d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.9409d , -2.5932d , 1.7473d)}
        {(0.8623d , -2.3933d , 1.4069d)}
        {(0.8905d , -2.6639d , 1.3938d)}
        {(0.9866d , -2.7723d , 1.6137d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0704d , -2.3687d , 1.3844d)}
        {(1.1042d , -2.6496d , 1.3656d)}
        {(1.0952d , -2.822d , 1.1621d)}
        {(1.0387d , -2.5055d , 1.0035d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0537d , -2.4787d , 1.0112d)}
        {(1.1629d , -2.7882d , 1.1645d)}
        {(1.22d , -2.6008d , 1.3491d)}
        {(1.1779d , -2.3178d , 1.3652d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0537d , -2.4787d , 1.0112d)}
        {(1.2734d , -2.4838d , 0.9264d)}
        {(1.1664d , -2.5028d , 0.6647d)}
        {(1.0073d , -2.4766d , 0.8032d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.1664d , -2.5028d , 0.6647d)}
        {(1.1218d , -2.4827d , 0.4622d)}
        {(1.1053d , -2.4508d , 0.6657d)}
        {(1.0073d , -2.4766d , 0.8032d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4893d , -2.574d , 1.5092d)}
        {(0.5273d , -2.3928d , 1.1976d)}
        {(0.5247d , -2.6596d , 1.184d)}
        {(0.5502d , -2.752d , 1.3906d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0073d , -2.4766d , 0.8032d)}
        {(1.1053d , -2.4508d , 0.6657d)}
        {(0.9155d , -2.443d , 0.7162d)}
        {(0.7336d , -2.5351d , 0.6811d)}
        {(0.8638d , -2.5088d , 0.8174d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7365d , -2.6654d , 1.2278d)}
        {(0.5247d , -2.6596d , 1.184d)}
        {(0.5526d , -2.8336d , 1.0955d)}
        {(0.7616d , -2.842d , 1.1519d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8908d , -1.3864d , 0.5041d)}
        {(0.7301d , -1.4519d , 0.1923d)}
        {(0.7775d , -2.5088d , 0.3996d)}
        {(0.9155d , -2.443d , 0.7162d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.3782d , -2.7607d , 1.0886d)}
        {(1.1629d , -2.7882d , 1.1645d)}
        {(1.0588d , -2.8571d , 0.6544d)}
        {(1.2102d , -2.8191d , 0.5565d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.806d , -2.5295d , 1.0034d)}
        {(0.7616d , -2.842d , 1.1519d)}
        {(0.9109d , -2.8833d , 0.675d)}
        {(0.8638d , -2.5088d , 0.8174d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.9221d , -1.4718d , 0.0916d)}
        {(0.8979d , -2.1643d , 0.1671d)}
        {(0.7534d , -2.1505d , 0.2393d)}
        {(0.7301d , -1.4519d , 0.1923d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.1218d , -2.4827d , 0.4622d)}
        {(1.1664d , -2.5028d , 0.6647d)}
        {(1.2102d , -2.8191d , 0.5565d)}
        {(0.9695d , -2.5286d , 0.2989d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8979d , -2.1643d , 0.1671d)}
        {(0.9407d , -2.3787d , 0.2724d)}
        {(0.8716d , -2.4198d , 0.2329d)}
        {(0.8204d , -2.3539d , 0.1263d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7897d , -2.4145d , 0.271d)}
        {(0.7386d , -2.3486d , 0.1644d)}
        {(0.777d , -2.4993d , 0.1936d)}
        {(0.7988d , -2.498d , 0.2377d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.777d , -2.4993d , 0.1936d)}
        {(0.7386d , -2.3486d , 0.1644d)}
        {(0.8204d , -2.3539d , 0.1263d)}
        {(0.807d , -2.4989d , 0.1802d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.9221d , -1.4718d , 0.0916d)}
        {(0.9695d , -2.5286d , 0.2989d)}
        {(0.9407d , -2.3787d , 0.2724d)}
        {(0.8979d , -2.1643d , 0.1671d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7301d , -1.4519d , 0.1923d)}
        {(0.7534d , -2.1505d , 0.2393d)}
        {(0.7962d , -2.3649d , 0.3447d)}
        {(0.7775d , -2.5088d , 0.3996d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.2102d , -2.8191d , 0.5565d)}
        {(1.0588d , -2.8571d , 0.6544d)}
        {(0.9109d , -2.8833d , 0.675d)}
        {(0.7674d , -2.8514d , 0.5635d)}
        {(0.7775d , -2.5088d , 0.3996d)}
        {(0.9695d , -2.5286d , 0.2989d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.0537d , -2.4787d , 1.0112d)}
        {(1.0073d , -2.4766d , 0.8032d)}
        {(1.0588d , -2.8571d , 0.6544d)}
        {(1.1629d , -2.7882d , 1.1645d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7365d , -2.6654d , 1.2278d)}
        {(0.7616d , -2.842d , 1.1519d)}
        {(0.806d , -2.5295d , 1.0034d)}
        {(0.7354d , -2.3901d , 1.2461d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5797d , -2.8594d , 1.5369d)}
        {(0.4893d , -2.574d , 1.5092d)}
        {(0.5502d , -2.752d , 1.3906d)}
        {(0.5952d , -2.8696d , 1.4968d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(1.479d , -2.6777d , 1.5129d)}
        {(1.4961d , -2.7858d , 1.6163d)}
        {(1.476d , -2.7884d , 1.6228d)}
        {(1.3776d , -2.6871d , 1.545d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3379d , 0.5781d , 2.2095d)}
        {(-0.3479d , 0.4138d , 1.8104d)}
        {(-0.3832d , 0.1845d , 1.9845d)}
        {(-0.3763d , 0.2986d , 2.2618d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0823d , 0.2014d , 2.0006d)}
        {(-0.0733d , 0.3123d , 2.2732d)}
        {(-0.1736d , -0.0702d , 2.276d)}
        {(-0.2012d , -0.1905d , 2.1077d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0804d , -0.1281d , 2.361d)}
        {(-0.1456d , -0.1507d , 2.3969d)}
        {(-0.1578d , -0.3735d , 2.3724d)}
        {(-0.1281d , -0.3481d , 2.234d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1736d , -0.0702d , 2.276d)}
        {(-0.0804d , -0.1281d , 2.361d)}
        {(-0.1281d , -0.3481d , 2.234d)}
        {(-0.2012d , -0.1905d , 2.1077d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3432d , -0.0274d , 2.3128d)}
        {(-0.3763d , 0.2986d , 2.2618d)}
        {(-0.3832d , 0.1845d , 1.9845d)}
        {(-0.369d , -0.1506d , 2.144d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3832d , 0.1845d , 1.9845d)}
        {(-0.0823d , 0.2014d , 2.0006d)}
        {(-0.2012d , -0.1905d , 2.1077d)}
        {(-0.369d , -0.1506d , 2.144d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3193d , -0.1242d , 2.495d)}
        {(-0.3929d , -0.078d , 2.4354d)}
        {(-0.4401d , -0.3373d , 2.3116d)}
        {(-0.3362d , -0.3471d , 2.4588d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1578d , -0.3735d , 2.3724d)}
        {(-0.3362d , -0.3471d , 2.4588d)}
        {(-0.4401d , -0.3373d , 2.3116d)}
        {(-0.1281d , -0.3481d , 2.234d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.4401d , -0.3373d , 2.3116d)}
        {(-0.369d , -0.1506d , 2.144d)}
        {(-0.2012d , -0.1905d , 2.1077d)}
        {(-0.1281d , -0.3481d , 2.234d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.3193d , -0.1242d , 2.495d)}
        {(-0.1456d , -0.1507d , 2.3969d)}
        {(-0.0804d , -0.1281d , 2.361d)}
        {(-0.3929d , -0.078d , 2.4354d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4851d , 0.2003d , 1.9992d)}
        {(0.439d , 0.2211d , 1.9224d)}
        {(0.7146d , 0.4586d , 1.8057d)}
        {(0.7637d , 0.2573d , 1.9249d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7571d , -0.503d , 3.0218d)}
        {(0.7485d , -0.3931d , 3.0868d)}
        {(0.707d , -0.346d , 2.809d)}
        {(0.7227d , -0.4923d , 2.7881d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.693d , -0.4074d , 3.0946d)}
        {(0.709d , -0.5167d , 3.0299d)}
        {(0.7227d , -0.4923d , 2.7881d)}
        {(0.707d , -0.346d , 2.809d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5776d , -0.5388d , 3.018d)}
        {(0.5563d , -0.4316d , 3.0838d)}
        {(0.4946d , -0.539d , 3.1412d)}
        {(0.5178d , -0.5744d , 3.0673d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2286d , -0.2402d , 3.1977d)}
        {(0.1659d , -0.1642d , 3.1197d)}
        {(0.1609d , -0.2908d , 3.092d)}
        {(0.1959d , -0.2987d , 3.1428d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6126d , -0.3607d , 2.8057d)}
        {(0.5563d , -0.4316d , 3.0838d)}
        {(0.5776d , -0.5388d , 3.018d)}
        {(0.6277d , -0.5061d , 2.7818d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0634d , -0.2536d , 3.3174d)}
        {(-0.01d , -0.2556d , 3.3044d)}
        {(-0.0127d , -0.1754d , 3.2038d)}
        {(-0.0916d , -0.1767d , 3.227d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2262d , -0.2927d , 3.0427d)}
        {(0.2386d , -0.3004d , 3.1088d)}
        {(0.1959d , -0.2987d , 3.1428d)}
        {(0.1609d , -0.2908d , 3.092d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1164d , -0.3042d , 3.1832d)}
        {(0.0677d , -0.3028d , 3.2066d)}
        {(0.0441d , -0.2955d , 3.1506d)}
        {(0.1165d , -0.295d , 3.1145d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4978d , -0.5446d , 2.9931d)}
        {(0.477d , -0.439d , 3.061d)}
        {(0.5189d , -0.3731d , 2.7878d)}
        {(0.5333d , -0.5177d , 2.7611d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.4851d , 0.2003d , 1.9992d)}
        {(0.4661d , 0.3101d , 2.2694d)}
        {(0.4116d , 0.3791d , 2.3112d)}
        {(0.439d , 0.2211d , 1.9224d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8524d , 0.3703d , 1.3459d)}
        {(0.7363d , 1.0109d , 2.2272d)}
        {(0.6738d , 0.6254d , 2.1931d)}
        {(0.7146d , 0.4586d , 1.8057d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0415d , -0.1684d , 3.1832d)}
        {(0.1141d , -0.1693d , 3.1465d)}
        {(-0.0034d , -0.2061d , 2.8861d)}
        {(-0.0889d , -0.2052d , 2.9262d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0127d , -0.1754d , 3.2038d)}
        {(-0.0889d , -0.2052d , 2.9262d)}
        {(-0.1805d , -0.207d , 2.9533d)}
        {(-0.0916d , -0.1767d , 3.227d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0889d , -0.2052d , 2.9262d)}
        {(-0.0034d , -0.2061d , 2.8861d)}
        {(0.076d , -0.2096d , 2.8329d)}
        {(0.037d , -0.2088d , 2.7684d)}
        {(-0.1168d , -0.2069d , 2.8457d)}
        {(-0.1805d , -0.207d , 2.9533d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.0806d , -0.3039d , 3.1912d)}
        {(-0.0916d , -0.1767d , 3.227d)}
        {(-0.1805d , -0.207d , 2.9533d)}
        {(-0.1503d , -0.3572d , 2.9694d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8736d , 0.8556d , 1.0479d)}
        {(0.8524d , 0.3703d , 1.3459d)}
        {(1.0286d , 0.6584d , 0.6701d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6551d , 0.1244d , 1.3102d)}
        {(0.8524d , 0.3703d , 1.3459d)}
        {(0.3119d , 0.1379d , 1.9728d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2086d , 0.4753d , 2.3087d)}
        {(0.1036d , 0.4467d , 2.3613d)}
        {(0.0374d , 0.1947d , 1.9426d)}
        {(0.1679d , 0.0816d , 1.9902d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.002d , -0.3013d , 3.1686d)}
        {(-0.0592d , -0.3538d , 2.9423d)}
        {(-0.0889d , -0.2052d , 2.9262d)}
        {(-0.0127d , -0.1754d , 3.2038d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0257d , -0.3531d , 2.9021d)}
        {(0.1609d , -0.2908d , 3.092d)}
        {(0.1659d , -0.1642d , 3.1197d)}
        {(-0.0034d , -0.2061d , 2.8861d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7994d , -0.2929d , 2.2724d)}
        {(0.7483d , -0.1235d , 2.3535d)}
        {(0.7283d , -0.3187d , 2.7301d)}
        {(0.7793d , -0.488d , 2.6491d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.693d , -0.4074d , 3.0946d)}
        {(0.6121d , -0.4181d , 3.0841d)}
        {(0.5961d , -0.5132d , 3.1492d)}
        {(0.6492d , -0.5139d , 3.1633d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8074d , -0.5245d , 3.0854d)}
        {(0.7518d , -0.5242d , 3.0794d)}
        {(0.7571d , -0.503d , 3.0218d)}
        {(0.8401d , -0.4916d , 3.0213d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7485d , -0.3931d , 3.0868d)}
        {(0.7479d , -0.4869d , 3.1562d)}
        {(0.8034d , -0.4855d , 3.1617d)}
        {(0.831d , -0.38d , 3.0843d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0338d , 2.0363d , 2.2041d)}
        {(0.2056d , 2.1494d , 2.1109d)}
        {(0.1941d , 1.6581d , 1.6337d)}
        {(-0.0168d , 1.5231d , 1.7537d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.831d , -0.38d , 3.0843d)}
        {(0.8034d , -0.4855d , 3.1617d)}
        {(0.8074d , -0.5245d , 3.0854d)}
        {(0.8401d , -0.4916d , 3.0213d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7518d , -0.5242d , 3.0794d)}
        {(0.7479d , -0.4869d , 3.1562d)}
        {(0.7485d , -0.3931d , 3.0868d)}
        {(0.7571d , -0.503d , 3.0218d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7485d , -0.3931d , 3.0868d)}
        {(0.831d , -0.38d , 3.0843d)}
        {(0.8019d , -0.329d , 2.7979d)}
        {(0.707d , -0.346d , 2.809d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.693d , -0.4074d , 3.0946d)}
        {(0.6492d , -0.5139d , 3.1633d)}
        {(0.6642d , -0.551d , 3.0878d)}
        {(0.709d , -0.5167d , 3.0299d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.8401d , -0.4916d , 3.0213d)}
        {(0.8183d , -0.4762d , 2.7799d)}
        {(0.8019d , -0.329d , 2.7979d)}
        {(0.831d , -0.38d , 3.0843d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.2314d , -0.1674d , 3.07d)}
        {(0.2711d , -0.2425d , 3.1629d)}
        {(0.2386d , -0.3004d , 3.1088d)}
        {(0.2262d , -0.2927d , 3.0427d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5189d , -0.3731d , 2.7878d)}
        {(0.477d , -0.439d , 3.061d)}
        {(0.5563d , -0.4316d , 3.0838d)}
        {(0.6126d , -0.3607d , 2.8057d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1361d , -0.2468d , 3.2451d)}
        {(0.1164d , -0.3042d , 3.1832d)}
        {(0.1165d , -0.295d , 3.1145d)}
        {(0.1141d , -0.1693d , 3.1465d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6738d , 0.6254d , 2.1931d)}
        {(0.7354d , 0.3731d , 2.1941d)}
        {(0.7637d , 0.2573d , 1.9249d)}
        {(0.7146d , 0.4586d , 1.8057d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.709d , -0.5167d , 3.0299d)}
        {(0.6276d , -0.5257d , 3.0173d)}
        {(0.6277d , -0.5061d , 2.7818d)}
        {(0.7227d , -0.4923d , 2.7881d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.1951d , 1.6833d , 2.6773d)}
        {(-0.1897d , 1.8887d , 2.4095d)}
        {(-0.3347d , 1.3183d , 1.9824d)}
        {(-0.3435d , 1.0256d , 2.2724d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0576d , 1.5399d , 2.8493d)}
        {(-0.1951d , 1.6833d , 2.6773d)}
        {(-0.3435d , 1.0256d , 2.2724d)}
        {(0.1036d , 0.4467d , 2.3613d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7354d , 0.3731d , 2.1941d)}
        {(0.4661d , 0.3101d , 2.2694d)}
        {(0.5632d , -0.0883d , 2.3109d)}
        {(0.7641d , -0.0428d , 2.2888d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1226d , -0.5058d , 3.2456d)}
        {(0.0876d , -0.2448d , 3.2692d)}
        {(0.0677d , -0.3028d , 3.2066d)}
        {(0.108d , -0.4992d , 3.2131d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.1164d , -0.3042d , 3.1832d)}
        {(0.1271d , -0.4952d , 3.2022d)}
        {(0.108d , -0.4992d , 3.2131d)}
        {(0.0677d , -0.3028d , 3.2066d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.019d , 1.679d , 2.9799d)}
        {(0.0518d , 1.7252d , 3.0649d)}
        {(-0.1552d , 1.5527d , 3.0493d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(-0.177d , 1.7721d , 3.0273d)}
        {(0.019d , 1.679d , 2.9799d)}
        {(-0.1552d , 1.5527d , 3.0493d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.0943d , 1.2572d , 3.6936d)}
        {(0.2211d , 1.3312d , 3.7051d)}
        {(0.2449d , 1.2596d , 3.8559d)}
        {(0.1399d , 1.1784d , 3.8474d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.6345d , 1.521d , 2.9971d)}
        {(0.4467d , 1.7092d , 3.0393d)}
        {(0.4594d , 1.6524d , 2.9629d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.5932d , 1.7643d , 3.772d)}
        {(0.6364d , 1.7322d , 3.8026d)}
        {(0.5863d , 2.0251d , 3.4101d)}
        {(0.5768d , 1.9067d , 3.5976d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.3498d , 1.9455d , 3.8688d)}
        {(0.49d , 2.1451d , 4.018d)}
        {(0.2706d , 2.3731d , 3.4114d)}))
    (Polygon (color 0.0732511
        0.0422415
        0.0389452)
      (points {(0.7091d , 1.1182d , 4.7058d)}
        {(0.6467d , 1.192d , 4.6934d)}
        {(0.5696d , 0.9573d , 4.7657d)}))))
'
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> regularDodecahedron [
	"(JunOpenGL3dObject regularDodecahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject regularDodecahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject regularDodecahedron)."

	| compoundObject pointArray aSet totalDistance originPoint aRadius scaleFactor regularDodecahedron |
	compoundObject := JunOpenGL3dCompoundObject new.
	pointArray := Array new: 10.
	1 to: 5
		do: 
			[:each | 
			pointArray at: each
				put: (Jun3dPoint 
						x: (Double pi * (each * 2 + 1) / 5) cos * 2
						y: (Double pi * (each * 2 + 1) / 5) sin * 2
						z: (1.0d + 5.0d sqrt) / 2 + 1.0d).
			pointArray at: each + 5
				put: (Jun3dPoint 
						x: (Double pi * (each * 2 + 1) / 5) cos * (1.0d + 5.0d sqrt)
						y: (Double pi * (each * 2 + 1) / 5) sin * (1.0d + 5.0d sqrt)
						z: (1.0d + 5.0d sqrt) / 2 - 1.0d)].
	1 to: 10
		do: 
			[:each | 
			pointArray at: each
				put: (pointArray at: each) / (pointArray at: each) rho 
						* (0.81573786516665d / 0.79465447229177d)].
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: (pointArray at: 1)
						with: (pointArray at: 2)
						with: (pointArray at: 3)
						with: (pointArray at: 4)) , (Array with: (pointArray at: 5))).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: (pointArray at: 5) negated
						with: (pointArray at: 4) negated
						with: (pointArray at: 3) negated
						with: (pointArray at: 2) negated) 
							, (Array with: (pointArray at: 1) negated)).
	1 to: 5
		do: 
			[:each | 
			compoundObject add: (JunOpenGL3dPolygon 
						vertexes: (Array 
								with: (pointArray at: each)
								with: (pointArray at: each + 5)
								with: (pointArray at: (each + 2) \\ 5 + 1 + 5) negated
								with: (pointArray at: each \\ 5 + 1 + 5)) 
									, (Array with: (pointArray at: each \\ 5 + 1))).
			compoundObject add: (JunOpenGL3dPolygon 
						vertexes: (Array 
								with: (pointArray at: each \\ 5 + 1) negated
								with: (pointArray at: each \\ 5 + 1 + 5) negated
								with: (pointArray at: (each + 2) \\ 5 + 1 + 5)
								with: (pointArray at: each + 5) negated) 
									, (Array with: (pointArray at: each) negated))].
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	regularDodecahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	regularDodecahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	regularDodecahedron flushAllPaints.
	regularDodecahedron paint: self defaultPaint.
	regularDodecahedron name: 'regular dodecahedron'.
	^regularDodecahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> regularHexahedron [
	"(JunOpenGL3dObject regularHexahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject regularHexahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject regularHexahedron)."

	| compoundObject aSet totalDistance originPoint aRadius scaleFactor regularHexahedron |
	compoundObject := self cube.
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	regularHexahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	regularHexahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	regularHexahedron flushAllPaints.
	regularHexahedron paint: self defaultPaint.
	regularHexahedron name: 'regular hexahedron'.
	^regularHexahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> regularIcosahedron [
	"(JunOpenGL3dObject regularIcosahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject regularIcosahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject regularIcosahedron)."

	| compoundObject pointArray aSet totalDistance originPoint aRadius scaleFactor regularIcosahedron |
	compoundObject := JunOpenGL3dCompoundObject new.
	pointArray := Array new: 5.
	1 to: 5
		do: 
			[:each | 
			pointArray at: each
				put: (Jun3dPoint 
						x: (Double pi * each * 2 / 5) cos * 5.0d sqrt * 2 / 5
						y: (Double pi * each * 2 / 5) sin * 5.0d sqrt * 2 / 5
						z: 5.0d sqrt / 5)].
	1 to: 5
		do: 
			[:each | 
			compoundObject 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: 0.0d , 0.0d , 1.0d
								with: (pointArray at: each)
								with: (pointArray at: each \\ 5 + 1))).
			compoundObject 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: (pointArray at: each \\ 5 + 1)
								with: (pointArray at: each)
								with: (pointArray at: (each + 2) \\ 5 + 1) negated)).
			compoundObject 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: (pointArray at: each) negated
								with: (pointArray at: each \\ 5 + 1) negated
								with: (pointArray at: (each + 2) \\ 5 + 1))).
			compoundObject 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: (pointArray at: each \\ 5 + 1) negated
								with: (pointArray at: each) negated
								with: (0.0d , 0.0d , 1.0d) negated))].
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	regularIcosahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	regularIcosahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	regularIcosahedron flushAllPaints.
	regularIcosahedron paint: self defaultPaint.
	regularIcosahedron name: 'regular icosahedron'.
	^regularIcosahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> regularOctahedron [
	"(JunOpenGL3dObject regularOctahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject regularOctahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject regularOctahedron)."

	| p1 p2 p3 p4 p5 p6 compoundObject regularOctahedron |
	p1 := 0 , 0 , 1.
	p2 := 1 , 0 , 0.
	p3 := 0 , 1 , 0.
	p4 := -1 , 0 , 0.
	p5 := 0 , -1 , 0.
	p6 := 0 , 0 , -1.
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p1
						with: p2
						with: p3)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p1
						with: p3
						with: p4)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p1
						with: p4
						with: p5)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p1
						with: p5
						with: p2)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p2
						with: p6
						with: p3)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p3
						with: p6
						with: p4)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p4
						with: p6
						with: p5)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p5
						with: p6
						with: p2)).
	regularOctahedron := compoundObject.
	regularOctahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	regularOctahedron flushAllPaints.
	regularOctahedron paint: self defaultPaint.
	regularOctahedron name: 'regular octahedron'.
	^regularOctahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> regularTetrahedron [
	"(JunOpenGL3dObject regularTetrahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject regularTetrahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject regularTetrahedron)."

	| p1 p2 p3 p4 compoundObject aSet totalDistance originPoint aRadius scaleFactor regularTetrahedron |
	p1 := -0.81649658092773d , -1.4142135623731d , -0.57735026918962d.
	p2 := 1.6329931618555d , 0.0d , -0.57735026918963d.
	p3 := 0.0d , 0.0d , 1.7320508075689d.
	p4 := -0.81649658092773d , 1.4142135623731d , -0.57735026918962d.
	p1 := -1 , -1 , 1.
	p2 := 1 , -1 , -1.
	p3 := 1 , 1 , 1.
	p4 := -1 , 1 , -1.
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p1
						with: p2
						with: p3)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p1
						with: p3
						with: p4)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p1
						with: p4
						with: p2)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p4
						with: p3
						with: p2)).
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	regularTetrahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	regularTetrahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	regularTetrahedron flushAllPaints.
	regularTetrahedron paint: self defaultPaint.
	regularTetrahedron name: 'regular tetrahedron'.
	^regularTetrahedron
]

{ #category : #utilities }
JunOpenGL3dObject class >> rotate: arrayOfPoints divisions: divisionNumber [ 
	"
	| arrayOfPoints divisionNumber aBody |
	arrayOfPoints := Array 
						with: -1.0 , 1.0
						with: 0.0 , 2.0
						with: 1.0 , 1.0.
	divisionNumber := 18.
	aBody := JunOpenGL3dObject rotate: arrayOfPoints divisions: divisionNumber.
	aBody show.
	^aBody
	"

	| aModel aBody |
	aModel := JunOpenGLRotationModel new.
	aModel 
		polyline: (JunOpenGLRotationPolyline vertices: arrayOfPoints loop: true).
	aBody := (aModel rotatedBody: divisionNumber) asJunOpenGL3dObject.
	aBody polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	aBody
		flushAllPaints;
		paint: self defaultPaint;
		yourself.
	^aBody
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> saikoro [
	"(JunOpenGL3dObject saikoro 
		showIn: (400 , 400) alignedRectangleWithScreenCenter)
		grab: (JunAngle degrees: 6) sin , 0;
		yourself."

	| step length fore back triangulation circle rectangle first second third face1 face2 face3 face4 face5 face6 saikoro |
	step := 10.
	length := 3.
	fore := ColorValue brightness: 0.45.
	back := ColorValue brightness: 0.95.
	triangulation := JunFormTriangulation2.
	circle := 
			[| aCollection aTriangulation aBody |
			aCollection := OrderedCollection new.
			(0 to: 360 - step by: step) do: 
					[:degrees | 
					| angle x y |
					angle := JunAngle degrees: degrees.
					x := angle cos.
					y := angle sin.
					aCollection add: x , y].
			aTriangulation := triangulation points: aCollection.
			Cursor wait showWhile: [aCollection := aTriangulation triangles].
			aBody := JunOpenGL3dCompoundObject new.
			aCollection do: 
					[:array | 
					| points plane polygon |
					points := array collect: [:point | point x , point y , 0].
					plane := JunPlane vertexes: points.
					plane normalVector z < 0 ifTrue: [points := points reverse].
					polygon := JunOpenGL3dPolygon vertexes: points.
					polygon paint: nil.
					aBody add: polygon].
			aBody paint: fore.
			aBody name: 'circle'.
			aBody yourself].
	rectangle := 
			[| aCollection aTriangulation aBody |
			aCollection := OrderedCollection new.
			aCollection add: 0 , 0.
			aCollection add: length , 0.
			aCollection add: length , length.
			aCollection add: 0 , length.
			aTriangulation := triangulation points: aCollection.
			Cursor wait showWhile: [aCollection := aTriangulation triangles].
			aBody := JunOpenGL3dCompoundObject new.
			aCollection do: 
					[:array | 
					| points plane polygon |
					points := array collect: [:point | point x , point y , 0].
					plane := JunPlane vertexes: points.
					plane normalVector z < 0 ifTrue: [points := points reverse].
					polygon := JunOpenGL3dPolygon vertexes: points.
					polygon paint: nil.
					aBody add: polygon].
			aBody paint: back.
			aBody name: 'rectangle'.
			aBody yourself].
	first := 
			[| aCollection aTriangulation aBody |
			aCollection := OrderedCollection new.
			(0 to: 90 by: step) do: 
					[:degrees | 
					| angle x y |
					angle := JunAngle degrees: degrees.
					x := angle cos.
					y := angle sin.
					aCollection add: x , y].
			aCollection add: 0 , length.
			aCollection add: length , length.
			aCollection add: length , 0.
			aTriangulation := triangulation points: aCollection.
			Cursor wait showWhile: [aCollection := aTriangulation triangles].
			aBody := JunOpenGL3dCompoundObject new.
			aCollection do: 
					[:array | 
					| points plane polygon |
					points := array collect: [:point | point x , point y , 0].
					plane := JunPlane vertexes: points.
					plane normalVector z < 0 ifTrue: [points := points reverse].
					polygon := JunOpenGL3dPolygon vertexes: points.
					polygon paint: nil.
					aBody add: polygon].
			aBody paint: back.
			aBody name: 'first'.
			aBody yourself].
	second := 
			[| aCollection aTriangulation aBody |
			aCollection := OrderedCollection new.
			(0 to: 90 by: step) do: 
					[:degrees | 
					| angle x y |
					angle := JunAngle degrees: degrees.
					x := angle cos.
					y := angle sin.
					aCollection add: x , y].
			aCollection add: 0 , length.
			(180 to: 270 by: step) do: 
					[:degrees | 
					| angle x y |
					angle := JunAngle degrees: degrees.
					x := angle cos.
					y := angle sin.
					aCollection add: (x , y) + (length , length)].
			aCollection add: length , 0.
			aTriangulation := triangulation points: aCollection.
			Cursor wait showWhile: [aCollection := aTriangulation triangles].
			aBody := JunOpenGL3dCompoundObject new.
			aCollection do: 
					[:array | 
					| points plane polygon |
					points := array collect: [:point | point x , point y , 0].
					plane := JunPlane vertexes: points.
					plane normalVector z < 0 ifTrue: [points := points reverse].
					polygon := JunOpenGL3dPolygon vertexes: points.
					polygon paint: nil.
					aBody add: polygon].
			aBody paint: back.
			aBody name: 'second'.
			aBody yourself].
	third := 
			[| aCollection aTriangulation aBody |
			aCollection := OrderedCollection new.
			aCollection add: 0 , length.
			(180 to: 270 by: step) do: 
					[:degrees | 
					| angle x y |
					angle := JunAngle degrees: degrees.
					x := angle cos.
					y := angle sin.
					aCollection add: (x , y) + (length , length)].
			(90 to: 180 by: step) do: 
					[:degrees | 
					| angle x y |
					angle := JunAngle degrees: degrees.
					x := angle cos.
					y := angle sin.
					aCollection add: (x , y) + (length , 0)].
			aCollection add: 0 , 0.
			aTriangulation := triangulation points: aCollection.
			Cursor wait showWhile: [aCollection := aTriangulation triangles].
			aBody := JunOpenGL3dCompoundObject new.
			aCollection do: 
					[:array | 
					| points plane polygon |
					points := array collect: [:point | point x , point y , 0].
					plane := JunPlane vertexes: points.
					plane normalVector z < 0 ifTrue: [points := points reverse].
					polygon := JunOpenGL3dPolygon vertexes: points.
					polygon paint: nil.
					aBody add: polygon].
			aBody paint: back.
			aBody name: 'third'.
			aBody yourself].
	face1 := 
			[| aBody aPart aFace |
			aBody := JunOpenGL3dCompoundObject new.
			aPart := first value.
			aBody
				add: aPart;
				add: (aPart transform: (JunAngle degrees: 90) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 180) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 270) transformationToRotateZ).
			aFace := JunOpenGL3dCompoundObject with: aBody.
			aBody := circle value.
			aBody paint: ColorValue red.
			aFace add: aBody.
			aFace := aFace scaledBy: 2.
			aFace name: 'face1'.
			aFace yourself].
	face2 := 
			[| aBody aPart aFace |
			aBody := JunOpenGL3dCompoundObject new.
			aPart := first value.
			aBody
				add: aPart;
				add: (aPart transform: (JunAngle degrees: 90) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 180) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 270) transformationToRotateZ).
			aFace := JunOpenGL3dCompoundObject new.
			aPart := rectangle value.
			aBody := JunOpenGL3dCompoundObject 
						with: (aBody translatedBy: length , length , 0)
						with: ((aPart scaledBy: 2) translatedBy: (length * 2) negated , 0 , 0)
						with: (aBody translatedBy: length negated , length negated , 0)
						with: ((aPart scaledBy: 2) translatedBy: 0 , (length * 2) negated , 0).
			aFace add: aBody.
			aBody := circle value.
			aBody := JunOpenGL3dCompoundObject 
						with: (aBody translatedBy: length , length , 0)
						with: (aBody translatedBy: length negated , length negated , 0).
			aFace add: aBody.
			aFace name: 'face2'.
			aFace yourself].
	face3 := 
			[| aBody aPart anotherPart aFace |
			aBody := JunOpenGL3dCompoundObject new.
			aPart := second value.
			aBody add: aPart.
			aPart := first value.
			aBody
				add: (aPart translatedBy: length , length , 0);
				add: ((aPart transform: (JunAngle degrees: 90) transformationToRotateZ) 
							translatedBy: length , length , 0);
				add: ((aPart transform: (JunAngle degrees: 270) transformationToRotateZ) 
							translatedBy: length , length , 0).
			aPart := aBody.
			aBody := JunOpenGL3dCompoundObject new.
			anotherPart := first value.
			aBody add: anotherPart.
			anotherPart := rectangle value.
			aBody
				add: (anotherPart translatedBy: length , 0 , 0);
				add: (anotherPart translatedBy: length , length , 0);
				add: (anotherPart translatedBy: 0 , length , 0).
			anotherPart := aBody.
			aBody := JunOpenGL3dCompoundObject new.
			aBody
				add: aPart;
				add: (anotherPart transform: (JunAngle degrees: 90) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 180) transformationToRotateZ);
				add: (anotherPart 
							transform: (JunAngle degrees: 270) transformationToRotateZ).
			aFace := JunOpenGL3dCompoundObject new.
			aFace add: aBody.
			aPart := circle value.
			aBody := JunOpenGL3dCompoundObject new.
			aBody
				add: aPart;
				add: (aPart translatedBy: length , length , 0);
				add: (aPart translatedBy: length negated , length negated , 0).
			aFace add: aBody.
			aFace name: 'face3'.
			aFace yourself].
	face4 := 
			[| aBody aPart aFace |
			aBody := JunOpenGL3dCompoundObject new.
			aPart := first value.
			aBody
				add: aPart;
				add: (aPart transform: (JunAngle degrees: 90) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 180) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 270) transformationToRotateZ).
			aFace := JunOpenGL3dCompoundObject new.
			aBody := JunOpenGL3dCompoundObject 
						with: (aBody translatedBy: length , length , 0)
						with: (aBody translatedBy: length negated , length , 0)
						with: (aBody translatedBy: length negated , length negated , 0)
						with: (aBody translatedBy: length , length negated , 0).
			aFace add: aBody.
			aBody := circle value.
			aBody := JunOpenGL3dCompoundObject 
						with: (aBody translatedBy: length , length , 0)
						with: (aBody translatedBy: length negated , length , 0)
						with: (aBody translatedBy: length negated , length negated , 0)
						with: (aBody translatedBy: length , length negated , 0).
			aFace add: aBody.
			aFace name: 'face4'.
			aFace yourself].
	face5 := 
			[| aBody aPart aFace |
			aBody := JunOpenGL3dCompoundObject new.
			aPart := second value.
			aBody add: aPart.
			aPart := first value.
			aBody
				add: (aPart translatedBy: length , length , 0);
				add: ((aPart transform: (JunAngle degrees: 90) transformationToRotateZ) 
							translatedBy: length , length , 0);
				add: ((aPart transform: (JunAngle degrees: 270) transformationToRotateZ) 
							translatedBy: length , length , 0).
			aPart := aBody.
			aBody := JunOpenGL3dCompoundObject new.
			aBody
				add: aPart;
				add: (aPart transform: (JunAngle degrees: 90) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 180) transformationToRotateZ);
				add: (aPart transform: (JunAngle degrees: 270) transformationToRotateZ).
			aFace := JunOpenGL3dCompoundObject new.
			aFace add: aBody.
			aPart := circle value.
			aBody := JunOpenGL3dCompoundObject new.
			aBody
				add: aPart;
				add: (aPart translatedBy: length , length , 0);
				add: (aPart translatedBy: length negated , length , 0);
				add: (aPart translatedBy: length negated , length negated , 0);
				add: (aPart translatedBy: length , length negated , 0).
			aFace add: aBody.
			aFace name: 'face5'.
			aFace yourself].
	face6 := 
			[| aBody aPart aFace |
			aBody := JunOpenGL3dCompoundObject new.
			aPart := third value.
			aBody
				add: aPart;
				add: ((aPart transform: (JunAngle degrees: 180) transformationToRotateZ) 
							translatedBy: length * 2 , length , 0).
			aPart := first value.
			aBody
				add: (aPart translatedBy: length , length , 0);
				add: ((aPart transform: (JunAngle degrees: 90) transformationToRotateZ) 
							translatedBy: length , length , 0).
			aPart := aBody.
			aBody := JunOpenGL3dCompoundObject new.
			aBody
				add: aPart;
				add: (aPart translatedBy: (length * 2) negated , 0 , 0);
				add: (aPart transform: (JunAngle degrees: 180) transformationToRotateZ);
				add: ((aPart transform: (JunAngle degrees: 180) transformationToRotateZ) 
							translatedBy: length * 2 , 0 , 0).
			aFace := JunOpenGL3dCompoundObject new.
			aFace add: aBody.
			aPart := circle value.
			aBody := JunOpenGL3dCompoundObject new.
			aBody
				add: (aPart translatedBy: length , length , 0);
				add: (aPart translatedBy: length , 0 , 0);
				add: (aPart translatedBy: length , length negated , 0);
				add: (aPart translatedBy: length negated , length , 0);
				add: (aPart translatedBy: length negated , 0 , 0);
				add: (aPart translatedBy: length negated , length negated , 0).
			aFace add: aBody.
			aFace name: 'face6'.
			aFace yourself].
	saikoro := JunOpenGL3dCompoundObject new.
	saikoro
		add: (face1 value translatedBy: 0 , 0 , (length * 2));
		add: ((face6 value 
					transform: (JunAngle degrees: 180) transformationToRotateX) 
						translatedBy: 0 , 0 , (length * 2) negated);
		add: ((face5 value 
					transform: (JunAngle degrees: 90) transformationToRotateY) 
						translatedBy: length * 2 , 0 , 0);
		add: ((face2 value 
					transform: (JunAngle degrees: 270) transformationToRotateY) 
						translatedBy: (length * 2) negated , 0 , 0);
		add: ((face3 value 
					transform: (JunAngle degrees: 90) transformationToRotateX) 
						translatedBy: 0 , (length * 2) negated , 0);
		add: ((face4 value 
					transform: (JunAngle degrees: 270) transformationToRotateX) 
						translatedBy: 0 , (length * 2) , 0).
	saikoro := saikoro scaledBy: 1 / (length * 2).
	saikoro name: 'saikoro'.
	^saikoro
]

{ #category : #utilities }
JunOpenGL3dObject class >> sampleColor [
	"JunOpenGL3dObject sampleColor."

	| symbols symbol color |
	RandomStream isNil ifTrue: [RandomStream := JunRandomStream new].
	symbols := ColorValue constantNames.
	symbol := symbols at: (RandomStream next * (symbols size - 1)) rounded + 1.
	color := ColorValue perform: symbol.
	^color
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> serotonin [
	"(JunOpenGL3dObject serotonin) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
   -2.0643   -1.7321    2.0735 C
   -0.8413   -2.3669    2.0400 C
    0.2035   -1.7286    1.3277 C
   -0.0055   -0.5044    0.6855 C
   -1.2735    0.1279    0.7370 C
   -2.3034   -0.4808    1.4283 C
    1.5156   -2.0866    1.1044 N
    2.1281   -1.1118    0.3351 C
    1.2184   -0.1194    0.0567 C
    1.4312    1.1303   -0.7487 C
    2.8507    1.2863   -1.3070 C
    2.9677    2.5224   -2.0972 N
   -3.5275    0.1090    1.4906 O
   -2.8941   -2.2091    2.6211 H
   -0.6753   -3.3316    2.5430 H
   -1.4333    1.0927    0.2314 H
    1.9719   -2.9577    1.4595 H
    3.1781   -1.2045    0.0413 H
    1.1900    2.0059   -0.1008 H
    0.7013    1.1233   -1.5926 H
    3.1147    0.4263   -1.9659 H
    3.5929    1.3404   -0.4765 H
    3.9257    2.6560   -2.4202 H
    2.7511    3.3410   -1.5292 H
   -3.4794    0.9436    0.9955 H
	'.
	compoundObject name: 'serotonin'.
	^compoundObject
]

{ #category : #utilities }
JunOpenGL3dObject class >> sewPoints: firstPoints withPoints: secondPoints reverseFlag: aBoolean [ 
	"(JunOpenGL3dObject 
		sewPoints: (Array 
				with: -1 , 0 , 0
				with: 0 , 0 , 0
				with: 1 , 0 , 0)
		withPoints: (Array 
				with: -1 , 1 , 0
				with: 0 , 1 , 0
				with: 1 , 1 , 0)
		reverseFlag: false) show."

	| aCollection aBody aPolygon |
	aCollection := JunGeometry 
				sewPoints: firstPoints
				withPoints: secondPoints
				reverseFlag: aBoolean.
	aBody := JunOpenGL3dCompoundObject new.
	aCollection do: 
			[:triPoints | 
			aPolygon := JunOpenGL3dPolygon vertexes: triPoints.
			aBody add: aPolygon].
	aBody name: 'sewing'.
	aBody flushAllPaints.
	aBody paint: self defaultPaint.
	^aBody
]

{ #category : #utilities }
JunOpenGL3dObject class >> showHedron: aHedron [ 
	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject regularDodecahedron)."

	| originPoint pointSet displayModel |
	originPoint := 0 , 0 , 0.
	Transcript clear.
	Transcript show: aHedron name; cr; flush.
	pointSet := aHedron asPointArray asSet.
	Transcript tab; show: 'number of vertexes: ' , pointSet size printString; cr; flush.
	Transcript tab; show: 'number of faces: ' , aHedron components size printString; cr; flush.
	pointSet
		do: 
			[:point | 
			| distance |
			distance := point distance: originPoint.
			Transcript show: distance printString; space; flush].
	displayModel := JunOpenGLDisplayModel displayObject: (aHedron paint: ColorValue veryDarkGray; yourself).
	displayModel defaultSightPoint: 0 , 0 , 0.
	displayModel defaultEyePoint: 10 , 10 , 10.
	displayModel defaultProjection: #perspectiveProjection.
	displayModel defaultPresentation: #hiddenlinePresentation.
	displayModel open.
	^displayModel
]

{ #category : #utilities }
JunOpenGL3dObject class >> showHedronWithAxes: aHedron [ 
	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject regularDodecahedron)."

	| pointSet compoundObject displayModel |
	Transcript clear.
	Transcript show: aHedron name; cr; flush.
	pointSet := aHedron asPointArray asSet.
	Transcript tab; show: 'number of vertexes: ' , pointSet size printString; cr; flush.
	Transcript tab; show: 'number of faces: ' , aHedron components size printString; cr; flush.
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject add: (aHedron paint: ColorValue veryDarkGray; yourself).
	compoundObject add: (JunOpenGL3dObject xyzArrows scaledBy: 2 , 2 , 2).
	displayModel := JunOpenGLDisplayModel displayObject: compoundObject.
	displayModel defaultSightPoint: 0 , 0 , 0.
	displayModel defaultEyePoint: 10 , 10 , 10.
	displayModel defaultProjection: #perspectiveProjection.
	displayModel defaultPresentation: #hiddenlinePresentation.
	displayModel open.
	^displayModel
]

{ #category : #utilities }
JunOpenGL3dObject class >> showWithNormalVectors: anObject [ 
	"self showWithNormalVectors: self cone.
	self showWithNormalVectors: ((self cone) establishAllNormalVectors; yourself).
	self showWithNormalVectors: self cylinder.
	self showWithNormalVectors: ((self cylinder) establishAllNormalVectors; yourself).
	self showWithNormalVectors: self box.
	self showWithNormalVectors: ((self box) establishAllNormalVectorsWithSmoothingAngle: (JunAngle fromDeg: 91) ; yourself)."

	| objectWithNormalVectors line |
	objectWithNormalVectors := JunOpenGL3dCompoundObject new.
	objectWithNormalVectors add: anObject.
	anObject polygonsDo: 
			[:polygon | 
			polygon hasNormalVectors 
				ifTrue: 
					[(1 to: polygon numberOfVertexes) do: 
							[:index | 
							| vertex normalVector |
							vertex := polygon vertexes at: index.
							polygon normalVectors size >= index 
								ifTrue: 
									[normalVector := polygon normalVectors at: index.
									line := JunOpenGL3dPolyline 
												vertexes: (Array with: vertex with: vertex + normalVector).
									objectWithNormalVectors add: line]]]].
	objectWithNormalVectors show
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> slicedPieFrom: fromDegree to: toDegree by: byDegree [ 
	"((JunOpenGL3dObject 
		slicedPieFrom: 0
		to: 10
		by: 10) asCompoundObject)
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	"((JunOpenGL3dObject 
		slicedPieFrom: 90
		to: 120
		by: 10) asCompoundObject)
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	"((JunOpenGL3dObject 
		slicedPieFrom: 0
		to: -120
		by: -10) asCompoundObject)
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	^self 
		slicedPieFrom: fromDegree
		to: toDegree
		by: byDegree
		radius: 1
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> slicedPieFrom: fromDegree to: toDegree by: byDegree radius: radius [ 
	"((JunOpenGL3dObject 
		slicedPieFrom: 0
		to: 270
		by: 10
		radius: 1) asCompoundObject)
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	| rotationBlock standardPoint lastPoint point aPie |
	rotationBlock := 
			[:p :t | 
			| x y a |
			x := p x * t cos - (p y * t sin).
			y := p x * t sin + (p y * t cos).
			a := JunGeometry accuracy.
			x abs < a ifTrue: [x := 0].
			y abs < a ifTrue: [y := 0].
			x , y , 0.0d].
	aPie := JunOpenGL3dCompoundObject new.
	standardPoint := radius asDouble , 0.0d , 0.0d.
	lastPoint := rotationBlock value: standardPoint
				value: fromDegree asDouble degreesToRadians.
	fromDegree + byDegree to: toDegree
		by: byDegree
		do: 
			[:theta | 
			point := rotationBlock value: standardPoint
						value: theta asDouble degreesToRadians.
			aPie 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: lastPoint
								with: point
								with: 0 , 0 , 0)).
			lastPoint := theta = toDegree ifTrue: [nil] ifFalse: [point]].
	lastPoint notNil 
		ifTrue: 
			[point := rotationBlock value: standardPoint
						value: toDegree asDouble degreesToRadians.
			aPie 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: lastPoint
								with: point
								with: 0 , 0 , 0))].
	aPie objectsDo: [:each | each paint: nil].
	aPie paint: self defaultPaint.
	^aPie
]

{ #category : #'typical objects pie' }
JunOpenGL3dObject class >> slicedPieFrom: fromDegree to: toDegree by: byDegree radius: radius thickness: thickness [ 
	"((JunOpenGL3dObject 
		slicedPieFrom: 0
		to: 270
		by: 10
		radius: 0.8
		thickness: 0.2) asCompoundObject)
		paint: ColorValue red;
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	"((JunOpenGL3dObject 
		slicedPieFrom: 0
		to: 279
		by: 10
		radius: 0.8
		thickness: 0.2) asCompoundObject)
		paint: ColorValue red;
		add: JunOpenGL3dObject xyzUnitArrows;
		show."

	| rotationBlock standardPoint firstPoint lastPoint point extraDegreeExists aPie |
	rotationBlock := 
			[:p :t | 
			| x y a |
			x := p x * t cos - (p y * t sin).
			y := p x * t sin + (p y * t cos).
			a := JunGeometry accuracy.
			x abs < a ifTrue: [x := 0].
			y abs < a ifTrue: [y := 0].
			x , y].
	aPie := JunOpenGL3dCompoundObject new.
	standardPoint := radius asDouble , 0.0d , 0.0d.
	firstPoint := rotationBlock value: standardPoint
				value: fromDegree asDouble degreesToRadians.
	lastPoint := firstPoint.
	fromDegree + byDegree to: toDegree
		by: byDegree
		do: 
			[:theta | 
			point := rotationBlock value: standardPoint
						value: theta asDouble degreesToRadians.
			aPie 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: 0 , 0 , 0
								with: point , 0
								with: lastPoint , 0)).
			aPie 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: lastPoint , thickness
								with: point , thickness
								with: 0 , 0 , thickness)).
			aPie 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: lastPoint , 0
								with: point , 0
								with: point , thickness
								with: lastPoint , thickness)
						vectors: (Array 
								with: (0 , 0 , 0 to: lastPoint , 0) normalUnitVector
								with: (0 , 0 , 0 to: point , 0) normalUnitVector
								with: (0 , 0 , thickness to: point , thickness) normalUnitVector
								with: (0 , 0 , thickness to: lastPoint , thickness) normalUnitVector)).
			lastPoint := point.
			extraDegreeExists := theta = toDegree].
	extraDegreeExists 
		ifFalse: 
			[point := rotationBlock value: standardPoint
						value: toDegree asDouble degreesToRadians.
			aPie 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: 0 , 0 , 0
								with: point , 0
								with: lastPoint , 0)).
			aPie 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: lastPoint , thickness
								with: point , thickness
								with: 0 , 0 , thickness)).
			aPie 
				add: (JunOpenGL3dPolygon vertexes: (Array 
								with: lastPoint , 0
								with: point , 0
								with: point , thickness
								with: lastPoint , thickness)
						vectors: (Array 
								with: (0 , 0 , 0 to: lastPoint , 0) normalUnitVector
								with: (0 , 0 , 0 to: point , 0) normalUnitVector
								with: (0 , 0 , thickness to: point , thickness) normalUnitVector
								with: (0 , 0 , thickness to: lastPoint , thickness) normalUnitVector)).
			lastPoint := point].
	aPie 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: firstPoint , 0
						with: firstPoint , thickness
						with: 0 , 0 , thickness
						with: 0 , 0 , 0)).
	aPie 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: 0 , 0 , 0
						with: 0 , 0 , thickness
						with: lastPoint , thickness
						with: lastPoint , 0)).
	aPie objectsDo: [:each | each paint: nil].
	aPie paint: self defaultPaint.
	^aPie
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> smalltalk [
	"(JunOpenGL3dObject smalltalk) show."

	^self smalltalkCube
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> smalltalkCube [
	"(JunOpenGL3dObject smalltalkCube) show."

	| anImage aTexture aCube |
	anImage := JunOpenGLTexture imageSmalltalkBalloon.
	aTexture := JunOpenGLTexture image: anImage.
	aTexture
		linear: true;
		repeat: true.
	aTexture coordinates: (Array 
				with: 0.0 , 0.0
				with: 1.0 , 0.0
				with: 1.0 , 1.0
				with: 0.0 , 1.0).
	aCube := JunOpenGL3dObject cube.
	aCube paint: ColorValue white.
	aCube texture: aTexture.
	aCube name: 'smalltalk cube'.
	^aCube
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> smalltalkPlane [
	"(JunOpenGL3dObject smalltalkPlane) show."

	| anImage aTexture aPolygon |
	anImage := JunOpenGLTexture imageSmalltalkBalloon.
	aTexture := JunOpenGLTexture image: anImage.
	aTexture
		linear: true;
		repeat: true.
	aTexture coordinates: (Array 
				with: 0 , 0
				with: 1 , 0
				with: 1 , 1
				with: 0 , 1).
	aPolygon := JunOpenGL3dPolygon vertexes: (Array 
						with: 0 , 0 , 0
						with: 1 , 0 , 0
						with: 1 , 1 , 0
						with: 0 , 1 , 0).
	aPolygon paint: ColorValue white.
	aPolygon texture: aTexture.
	aPolygon name: 'smalltalk plane'.
	^aPolygon
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> soccerBall [
	"(JunOpenGL3dObject soccerBall) show."

	| soccerBall |
	soccerBall := JunOpenGL3dCompoundObject new.
	(self nAkisHedron: self truncatedIcosahedron) do: 
			[:compoundObject | 
			| color |
			compoundObject size > 5 
				ifTrue: [color := ColorValue veryLightGray]
				ifFalse: [color := ColorValue veryDarkGray].
			compoundObject primitivesDo: 
					[:polygon | 
					polygon paint: color.
					soccerBall add: polygon]].
	soccerBall polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	soccerBall name: 'soccer ball'.
	^soccerBall
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> sphere [
	"JunOpenGL3dObject sphere show."

	^self
		sphere: 10
		radius: 1
		longitude: 360
		latitude: 180
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> sphere: degree [ 
	"(JunOpenGL3dObject sphere: 15) show."

	^self
		sphere: degree
		radius: 1
		longitude: 360
		latitude: 180
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> sphere: degree radius: radius [ 
	"(JunOpenGL3dObject sphere: 15 radius: 5) show."

	^self
		sphere: degree
		radius: radius
		longitude: 360
		latitude: 180
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> sphere: degrees radius: radius center: center [ 
	"(JunOpenGL3dObject sphere: 15 radius: 5 center: 1, 1, 1) show."

	^(Jun3dTransformation align: 0 , 0 , 0 with: center)
		applyTo: (self sphere: degrees radius: radius)
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> sphere: degrees radius: radius longitude: logitude latitude: latitude [ 
	"(JunOpenGL3dObject sphere: 90 radius: 1 longitude: 360 latitude: 180) show."
	"(JunOpenGL3dObject sphere: 60 radius: 1 longitude: 360 latitude: 180) show."
	"(JunOpenGL3dObject sphere: 45 radius: 1 longitude: 360 latitude: 180) show."
	"(JunOpenGL3dObject sphere: 30 radius: 1 longitude: 360 latitude: 180) show."
	"(JunOpenGL3dObject sphere: 15 radius: 5 longitude: 360 latitude: 180) show."
	"(JunOpenGL3dObject sphere: 15 radius: 5 longitude: 180 latitude: 180) show."
	"(JunOpenGL3dObject sphere: 15 radius: 5 longitude: 360 latitude: 90) show."
	"(JunOpenGL3dObject sphere: 15 radius: 5 longitude: 180 latitude: 90) show."
	"(JunOpenGL3dObject sphere: 15 radius: 5 longitude: 90 latitude: 90) show."

	^(self
		xyPointsAndSphere: degrees
		radius: radius
		longitude: logitude
		latitude: latitude) last
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> sphereFrom: fromPoint to: toPoint width: widthFactor [ 
	"((JunOpenGL3dObject sphereFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject sphereFrom: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject sphereFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: self xUnitSphere
]

{ #category : #'typical objects spring' }
JunOpenGL3dObject class >> spring [
	"(JunOpenGL3dObject spring) showWithUnitAxes."

	^self 
		springBy: 10
		radius: 0.5
		height: 1
		repeat: 10
]

{ #category : #'typical objects spring' }
JunOpenGL3dObject class >> springBy: degree radius: radius height: height [ 
	"(JunOpenGL3dObject springBy: 15 radius: 1 height: 1) showWithUnitAxes."

	^self 
		springBy: degree
		radius: radius
		height: height
		repeat: height * 5
]

{ #category : #'typical objects spring' }
JunOpenGL3dObject class >> springBy: degree radius: radius height: height repeat: repeat [ 
	"(JunOpenGL3dObject springBy: 15 radius: 1 height: 1 repeat: 1) showWithUnitAxes."

	| aVector anArray aSpring aTransformation anIncrement aPoint aCollection aVertex aPolyline |
	aVector := radius , 0 , 0.
	anArray := (0 to: 360 by: degree) asArray.
	anArray last = 360 
		ifTrue: [anArray := anArray copyFrom: 1 to: anArray size - 1].
	anIncrement := height / (repeat max: 1) / anArray size.
	aSpring := JunOpenGL3dCompoundObject new.
	aPoint := 0 , 0 , 0.
	(repeat max: 1) timesRepeat: 
			[aCollection := OrderedCollection new.
			anArray do: 
					[:angle | 
					aTransformation := (Jun3dTransformation rotateZ: (JunAngle degrees: angle)) 
								product: (Jun3dTransformation translate: aPoint).
					aVertex := aVector transform: aTransformation.
					aPoint := aPoint + (0 , 0 , anIncrement).
					aCollection add: aVertex].
			aTransformation := (Jun3dTransformation rotateZ: (JunAngle degrees: 360)) 
						product: (Jun3dTransformation translate: aPoint).
			aVertex := aVector transform: aTransformation.
			aCollection add: aVertex.
			aPolyline := JunOpenGL3dPolyline vertexes: aCollection.
			aSpring add: aPolyline].
	aSpring name: 'spring'.
	aSpring paint: self defaultPaint.
	^aSpring
]

{ #category : #'typical objects spring' }
JunOpenGL3dObject class >> springFrom: fromPoint to: toPoint width: widthFactor [ 
	"(JunOpenGL3dObject springFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1) paint: ColorValue cyan; showWithUnitAxes."

	"(JunOpenGL3dObject springFrom: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1) paint: ColorValue cyan; showWithUnitAxes."

	"(JunOpenGL3dObject springFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1) paint: ColorValue cyan; showWithUnitAxes."

	^self 
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: self xUnitSpring
]

{ #category : #'typical objects spring' }
JunOpenGL3dObject class >> springFrom: fromPoint to: toPoint width: widthFactor repeat: howMany [ 
	"(JunOpenGL3dObject springFrom: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1 repeat: 50) paint: ColorValue cyan; showWithUnitAxes."

	"(JunOpenGL3dObject springFrom: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1 repeat: 50) paint: ColorValue cyan; showWithUnitAxes."

	"(JunOpenGL3dObject springFrom: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1repeat: 50) paint: ColorValue cyan; showWithUnitAxes."

	^self 
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: ((self 
				springBy: 10
				radius: 0.5
				height: 1
				repeat: howMany) 
					transform: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)))
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> squirrel [
	"(JunOpenGL3dObject squirrel) show."

	| aStream formTransporter anObject |
	aStream := JunFormTransporter exampleForm2 readStream.
	formTransporter := JunFormTransporter new.
	formTransporter loadFrom: aStream.
	formTransporter formObject isNil ifTrue: [^nil].
	anObject := formTransporter formObject.
	anObject name: 'squirrel'.
	anObject paint: (ColorValue yellow blendWith: ColorValue gray).
	^anObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> stack [
	"(JunOpenGL3dObject stack) show."

	| stack polyline color points body |
	stack := JunOpenGL3dCompoundObject new.
	stack name: 'stack'.
	polyline := OrderedCollection new.
	polyline add: -1 , -1 , 0.
	polyline add: -1 , 1 , 0.
	polyline add: 1 , 1 , 0.
	polyline add: 1 , -1 , 0.
	polyline := polyline asArray reverse.
	0
		to: 5
		by: 0.5
		do: 
			[:z | 
			color := self sampleColor.
			points := polyline collect: [:point | point + (0 , 0 , z negated)].
			body := JunOpenGL3dCompoundObject new.
			body add: (JunOpenGL3dPolygon vertexes: points paint: color).
			body add: (JunOpenGL3dPolyline vertexes: points , (Array with: points first) paint: ColorValue black).
			stack add: body].
	0
		to: 5
		by: 0.5
		do: 
			[:z | 
			color := JunOpenGL3dObject sampleColor.
			points := polyline collect: [:point | point + (0 , 0 , z)].
			body := JunOpenGL3dCompoundObject new.
			body add: (JunOpenGL3dPolygon vertexes: points paint: color).
			body add: (JunOpenGL3dPolyline vertexes: points , (Array with: points first) paint: ColorValue black).
			stack add: body].
	stack name: 'stack'.
	^stack
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> street [
	"(JunOpenGL3dObject street) show."

	"
	| aBody aTable aViewer |
	aBody := JunOpenGL3dObject street.
	aTable := Dictionary new.
	aTable add: #eyePoint -> (2 , 0 , 0).
	aTable add: #sightPoint -> (0 , 0 , 0).
	aTable add: #upVector -> (0 , 0 , 1).
	aTable add: #zoomHeight -> 2.5.
	aViewer := aBody showProjectionTable: aTable
				in: (50 @ 100 extent: 400 @ 300).
	aViewer movementVector: (JunAngle degrees: 1) sin negated, 0.
	^aViewer
	"

	| aStreet aBox aLand aBlock aBuilding |
	aStreet := JunOpenGL3dCompoundObject new.
	aBox := -1 , -1 , -0.001 box: 1 , 1 , -0.002.
	aLand := (aBox scaledBy: 2.5 , 3 , 2.5) translatedBy: -0.5 , 0 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aLand asJunOpenGL3dObjectColor: ColorValue brown alpha: nil)
				with: ((aLand asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBox := -1 , -1 , 0 box: 1 , 1 , -0.001.
	aBlock := (aBox scaledBy: 1 , 1 , 1) translatedBy: 0.5 , -1.5 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBlock asJunOpenGL3dObjectColor: ColorValue gray alpha: nil)
				with: ((aBlock asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBlock := (aBox scaledBy: 1 , 1 , 1) translatedBy: 0.5 , 1.5 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBlock asJunOpenGL3dObjectColor: ColorValue gray alpha: nil)
				with: ((aBlock asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBlock := (aBox scaledBy: 0.5 , 1 , 1) translatedBy: -2 , -1.5 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBlock asJunOpenGL3dObjectColor: ColorValue gray alpha: nil)
				with: ((aBlock asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBlock := (aBox scaledBy: 0.5 , 1 , 1) translatedBy: -2 , 1.5 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBlock asJunOpenGL3dObjectColor: ColorValue gray alpha: nil)
				with: ((aBlock asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBox := -1 , -1 , 0 box: 1 , 1 , 1.
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 3) translatedBy: 1 , -2 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 3 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 2) translatedBy: 0 , -2 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 4 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 4.002) translatedBy: -2 , -2 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 5 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 1) translatedBy: 1 , -1 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 0 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 2.5) translatedBy: 0 , -1 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 1 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 2) translatedBy: -2 , -1 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 2 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 2) translatedBy: 1 , 1 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 9 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 3) translatedBy: 0 , 1 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 10 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 3.5) translatedBy: -2 , 1 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 11 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 1.5) translatedBy: 1 , 2 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 6 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 2.5) translatedBy: 0 , 2 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 7 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aBuilding := (aBox scaledBy: 0.4 , 0.4 , 3) translatedBy: -2 , 2 , 0.
	aStreet add: (JunOpenGL3dCompoundObject 
				with: (aBuilding asJunOpenGL3dObjectColor: (ColorValue 
								hue: 8 / 12
								saturation: 1
								brightness: 1)
						alpha: nil)
				with: ((aBuilding asJunOpenGL3dPolylines)
						paint: ColorValue black;
						yourself)).
	aStreet := aStreet translatedBy: aStreet boundingBox center negated.
	aStreet := aStreet scaledBy: 1 / 3.
	aStreet name: 'street'.
	^aStreet

	"
	| aBody aTable aViewer aFilename aStream |
	aBody := JunOpenGL3dObject street.
	aTable := Dictionary new.
	aTable add: #eyePoint -> (2 , 0 , 0).
	aTable add: #sightPoint -> (0 , 0 , 0).
	aTable add: #upVector -> (0 , 0 , 1).
	aTable add: #zoomHeight -> 2.5.
	aViewer := aBody showProjectionTable: aTable
				in: (50 @ 100 extent: 400 @ 300).
	aFilename := Filename defaultDirectory construct: 'street.gif'.
	JunControlUtility 
		assert: 
			[aStream := JunGifAnimationStream on: aFilename writeStream.
			aStream tick: 100.
			aStream loop: 0]
		do: 
			[| aBox anAngle |
			aBox := aViewer getWindow displayBox.
			aBox := aBox expandedBy: (4 @ 23 corner: 4 @ 4).
			anAngle := JunAngle degrees: 6.
			(0 to: 360 by: anAngle degrees) do: 
					[:angle | 
					| anImage |
					anImage := JunImageUtility fromScreen: aBox.
					anImage := JunImageAdjuster adjust: anImage
								extent: (anImage extent / 2) rounded.
					aStream nextPutImage: anImage.
					aViewer grab: anAngle sin negated , 0]]
		ensure: [aStream close].
	aViewer closeRequest.
	^JunCartoonMovie showFile: aFilename
	"
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> string: aString [ 
	"(JunOpenGL3dObject string: JunSystem copyleftString) showWithUnitAxes."

	^self composedText: aString asComposedText
]

{ #category : #copyright }
JunOpenGL3dObject class >> system [
	^'Jun'
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> teddy [
	"(JunOpenGL3dObject teddy) show."

	| aStream formTransporter anObject |
	aStream := JunFormTransporter exampleForm1 readStream.
	formTransporter := JunFormTransporter new.
	formTransporter loadFrom: aStream.
	formTransporter formObject isNil ifTrue: [^nil].
	anObject := formTransporter formObject.
	anObject name: 'teddy'.
	anObject paint: (ColorValue brown blendWith: ColorValue white).
	^anObject
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> tetrakisHexahedron [
	"(JunOpenGL3dObject tetrakisHexahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject tetrakisHexahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject tetrakisHexahedron)."

	| tetrakisHexahedron |
	tetrakisHexahedron := self nAkisHedron: self regularHexahedron.
	tetrakisHexahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	tetrakisHexahedron flushAllPaints.
	tetrakisHexahedron paint: self defaultPaint.
	tetrakisHexahedron name: 'tetrakis hexahedron'.
	^tetrakisHexahedron
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text2d: aStringOrTextOrComposedText [ 
	"(JunOpenGL3dObject text2d: 'Jun') paint: ColorValue blue; show."

	^self text2d: aStringOrTextOrComposedText weight: 0.5
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text2d: aStringOrTextOrComposedText weight: aNumber [ 
	"(JunOpenGL3dObject text2d: 'Jun' weight: 0.1) paint: ColorValue blue; show."

	"(JunOpenGL3dObject text2d: 'Jun' weight: 0.5) paint: ColorValue blue; show."

	"(JunOpenGL3dObject text2d: 'Jun' weight: 0.9) paint: ColorValue blue; show."

	^self 
		text2d: aStringOrTextOrComposedText
		weight: aNumber
		style: TextAttributes default
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text2d: aStringOrTextOrComposedText weight: aNumber style: textAttributes [ 
	"(JunOpenGL3dObject text2d: 'Jun' weight: 0.1 style: (JunFontModel textStyleHeight: 72)) paint: ColorValue blue; show."

	"(JunOpenGL3dObject text2d: 'Jun' weight: 0.5 style: (JunFontModel textStyleHeight: 72)) paint: ColorValue blue; show."

	"(JunOpenGL3dObject text2d: 'Jun' weight: 0.9 style: (JunFontModel textStyleHeight: 72)) paint: ColorValue blue; show."

	| weight text pixmap image polygonalBoundary object box polygon |
	weight := (aNumber max: 0.1) min: 0.9.
	(aStringOrTextOrComposedText isKindOf: ComposedText) 
		ifTrue: [text := aStringOrTextOrComposedText]
		ifFalse: 
			[text := ComposedText withText: aStringOrTextOrComposedText asText
						style: textAttributes].
	JunControlUtility 
		assert: [pixmap := Pixmap extent: text extent + (2 @ 2)]
		do: 
			[| gc |
			pixmap background: ColorValue black.
			gc := pixmap graphicsContext.
			gc paint: ColorValue white.
			gc clear.
			text displayOn: gc at: pixmap bounds center - text bounds center.
			image := pixmap asImage]
		ensure: [pixmap close].
	polygonalBoundary := JunBorderGenerator 
				polygonalBoundaryWith: 
					[:x :y | 
					(image valueAtPoint: x @ (image height - y)) brightness]
				min: 1 - weight
				xInterval: (0 to: image width - 1)
				yInterval: (1 to: image height - 1)
				interim: [:b | ].
	object := polygonalBoundary asJunOpenGL3dObject.
	box := text bounds origin x , text bounds origin y , 0 
				extent: text bounds width , text bounds height , 0.
	polygon := JunOpenGL3dPolygon vertexes: (Array 
						with: box origin
						with: box corner x , box origin y , box origin z
						with: box corner x , box corner y , box origin z
						with: box origin x , box corner y , box origin z).
	polygon halftone: 0.
	object := JunOpenGL3dCompoundObject with: object with: polygon.
	object objectsDo: [:each | each paint: nil].
	object paint: self defaultPaint.
	^object
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text3d: aStringOrTextOrComposedText [ 
	"(JunOpenGL3dObject text3d: 'Jun') paint: ColorValue blue; show."

	^self text3d: aStringOrTextOrComposedText weight: 0.5
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text3d: aString from: fromPoint to: toPoint width: widthFactor [ 
	"((JunOpenGL3dObject text3d: 'Jun' from: 0 , 0 , 0 to: 3 , 4 , 5 width: 0.1) paint: ColorValue cyan; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject text3d: 'Jun' from: 0 , 0 , 0 to: -1 , -1 , 0 width: 0.1) paint: ColorValue magenta; asCompoundObject) add: JunOpenGL3dObject axes2; show."
	"((JunOpenGL3dObject text3d: 'Jun' from: -1 , -1 , -1 to: 1 , 1 , 1 width: 0.1) paint: ColorValue yellow; asCompoundObject) add: JunOpenGL3dObject axes2; show."

	^self
		from: fromPoint
		to: toPoint
		height: widthFactor
		depth: widthFactor
		with: (self xUnitText3d: aString)
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text3d: aStringOrTextOrComposedText weight: aNumber [ 
	"(JunOpenGL3dObject text3d: 'Jun' weight: 0.1) paint: ColorValue blue; show."

	"(JunOpenGL3dObject text3d: 'Jun' weight: 0.5) paint: ColorValue blue; show."

	"(JunOpenGL3dObject text3d: 'Jun' weight: 0.9) paint: ColorValue blue; show."

	^self 
		text3d: aStringOrTextOrComposedText
		weight: aNumber
		style: TextAttributes default
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text3d: aStringOrTextOrComposedText weight: aNumber style: textAttributes [ 
	"(JunOpenGL3dObject text3d: 'Jun' weight: 0.1 style: (JunFontModel textStyleHeight: 72)) paint: ColorValue blue; show."

	"(JunOpenGL3dObject text3d: 'Jun' weight: 0.5 style: (JunFontModel textStyleHeight: 72)) paint: ColorValue blue; show."

	"(JunOpenGL3dObject text3d: 'Jun' weight: 0.9 style: (JunFontModel textStyleHeight: 72)) paint: ColorValue blue; show."

	| weight text pixmap image polygons object box polygon |
	weight := (aNumber max: 0.1) min: 0.9.
	(aStringOrTextOrComposedText isKindOf: ComposedText) 
		ifTrue: [text := aStringOrTextOrComposedText]
		ifFalse: 
			[text := ComposedText withText: aStringOrTextOrComposedText asText
						style: textAttributes].
	JunControlUtility 
		assert: [pixmap := Pixmap extent: text extent + (2 @ 2)]
		do: 
			[| gc |
			pixmap background: ColorValue black.
			gc := pixmap graphicsContext.
			gc paint: ColorValue white.
			gc clear.
			text displayOn: gc at: pixmap bounds center - text bounds center.
			image := pixmap asImage]
		ensure: [pixmap close].
	polygons := JunBorderGenerator 
				contourPolygonsFrom: 
					[:x :y :z | 
					((1 - (image valueAtPoint: x @ (image height - y)) brightness) squared 
						+ z squared) sqrt]
				at: weight
				sign: -1
				xInterval: (0 to: image width - 1)
				yInterval: (1 to: image height)
				zInterval: (-1 to: 1)
				interim: [:ps | ].
	object := JunOpenGL3dCompoundObject 
				components: (polygons collect: [:each | each asJunOpenGL3dObject]).
	box := object boundingBox.
	box := text bounds origin x , text bounds origin y , 0 
				extent: text bounds width , text bounds height , 0.
	polygon := JunOpenGL3dPolygon vertexes: (Array 
						with: box origin
						with: box corner x , box origin y , box origin z
						with: box corner x , box corner y , box origin z
						with: box origin x , box corner y , box origin z).
	polygon halftone: 0.
	object := JunOpenGL3dCompoundObject with: object with: polygon.
	object objectsDo: [:each | each paint: nil].
	object paint: self defaultPaint.
	^object
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text: aStringOrTextOrComposedText [ 
	"(JunOpenGL3dObject
		text: (#jun_AOKI_Atsushi >> 'AOKI Atsushi') asString)
			paint: ColorValue blue;
			showIn: (200 @ 200 extent: 350 @ 350)."

	^self 
		text2d: aStringOrTextOrComposedText
		weight: 0.5
		style: JunFontModel textStyle
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> text: aStringOrTextOrComposedText style: aTextAttributes [ 
	"(JunOpenGL3dObject
		text: (#jun_Jun >> 'Jun') asString
		style: (JunFontModel textStyleHeight: 100))
			paint: ColorValue blue; 
			showIn: (200 @ 200 extent: 350 @ 350)."

	^self 
		text2d: aStringOrTextOrComposedText
		weight: 0.5
		style: aTextAttributes
]

{ #category : #'typical objects torus' }
JunOpenGL3dObject class >> torus [
	"(JunOpenGL3dObject torus) showIn: (200 @ 200 extent: 400 @ 400)."

	^self 
		torusRadius: 3 / 4
		divisions: 72
		tubeRadius: 1 / 4
		divisions: 27
]

{ #category : #'typical objects torus' }
JunOpenGL3dObject class >> torus: torusRadius divisions: torusDivision radius: sectionRadius divisions: sectionDivision [ 
	"(JunOpenGL3dObject torus: 8 divisions: 24 radius: 2 divisions: 10) show."

	| sectionPoints aStep sectionCenters torusSections aBody |
	sectionPoints := OrderedCollection new.
	aStep := 360 / sectionDivision.
	(0 to: 360 - aStep by: aStep) do: 
			[:angle | 
			| radians point |
			radians := angle degreesToRadians.
			point := (radians cos , radians sin , 0 scaledBy: sectionRadius) 
						translatedBy: 0 , torusRadius , 0.
			sectionPoints add: point].
	sectionCenters := OrderedCollection new.
	torusSections := OrderedCollection new.
	aStep := 360 / torusDivision.
	(0 to: 360 - aStep by: aStep) do: 
			[:angle | 
			| radians point transformedSection |
			radians := angle degreesToRadians.
			point := 0 , radians cos , radians sin scaledBy: torusRadius.
			sectionCenters add: point.
			transformedSection := sectionPoints 
						collect: [:p | p transform: (Jun3dTransformation rotateX: radians)].
			torusSections add: transformedSection].
	aBody := JunOpenGL3dCompoundObject new.
	(1 to: torusSections size) 
		with: (2 to: torusSections size) asArray , (Array with: 1)
		do: 
			[:firstSectionIndex :secondSectionIndex | 
			| firstSectionPoints secondSectionPoints firstSectionCenter secondSectionCenter |
			firstSectionPoints := torusSections at: firstSectionIndex.
			secondSectionPoints := torusSections at: secondSectionIndex.
			firstSectionCenter := sectionCenters at: firstSectionIndex.
			secondSectionCenter := sectionCenters at: secondSectionIndex.
			(1 to: sectionPoints size) 
				with: (2 to: sectionPoints size) asArray , (Array with: 1)
				do: 
					[:firstIndex :secondIndex | 
					| p1 p2 p3 p4 v1 v2 v3 v4 aPolygon |
					p1 := firstSectionPoints at: firstIndex.
					p2 := firstSectionPoints at: secondIndex.
					p3 := secondSectionPoints at: secondIndex.
					p4 := secondSectionPoints at: firstIndex.
					v1 := (firstSectionCenter to: p1) normalUnitVector.
					v2 := (firstSectionCenter to: p2) normalUnitVector.
					v3 := (secondSectionCenter to: p3) normalUnitVector.
					v4 := (secondSectionCenter to: p4) normalUnitVector.
					aPolygon := JunOpenGL3dPolygon vertexes: (Array 
										with: p1
										with: p2
										with: p3
										with: p4)
								vectors: (Array 
										with: v1
										with: v2
										with: v3
										with: v4).
					aBody add: aPolygon]].
	aBody name: 'torus'.
	aBody flushAllPaints.
	aBody paint: self defaultPaint.
	^aBody
]

{ #category : #'typical objects torus' }
JunOpenGL3dObject class >> torus: torusRadius radius: sectionRadius [ 
	"(JunOpenGL3dObject torus: 8 radius: 4) show."

	^self 
		torus: torusRadius
		divisions: 36
		radius: sectionRadius
		divisions: 18
]

{ #category : #'typical objects torus' }
JunOpenGL3dObject class >> torusRadius: torusRadius divisions: torusDivision tubeRadius: tubeRadius divisions: tubeDivision [ 
	"(((JunOpenGL3dObject 
		torusRadius: 3 / 4
		divisions: 36
		tubeRadius: 1 / 4
		divisions: 18)
		polygonsDo: [:each | each paint: ColorValue red];
		yourself) showIn: (200 @ 200 extent: 400 @ 400)) 
		yourself."

	| stepDegrees thetaCollection phiCollection compoundObject |
	torusRadius > tubeRadius ifFalse: [self error: 'can not create torus.'].
	stepDegrees := (1.0d / torusDivision) asDouble.
	thetaCollection := (((0.0d to: 1.0d - (stepDegrees / 2.0d) by: stepDegrees) 
				asOrderedCollection)
				add: 1.0d;
				yourself) asArray.
	stepDegrees := (1.0d / tubeDivision) asDouble.
	phiCollection := (((0.0d to: 1.0d - (stepDegrees / 2.0d) by: stepDegrees) 
				asOrderedCollection)
				add: 1.0d;
				yourself) asArray.
	compoundObject := JunOpenGL3dCompoundObject new.
	(thetaCollection copyFrom: 1 to: thetaCollection size - 1) 
		with: (thetaCollection copyFrom: 2 to: thetaCollection size)
		do: 
			[:firstTheta :secondTheta | 
			| firstPoints secondPoints theta x y z firstCenter secondCenter ringBody |
			firstPoints := OrderedCollection new.
			secondPoints := OrderedCollection new.
			theta := JunAngle fromRad: JunGeometry doublePi * firstTheta.
			x := torusRadius * theta cos.
			y := torusRadius * theta sin.
			z := 0.
			firstCenter := x , y , z.
			theta := JunAngle fromRad: JunGeometry doublePi * secondTheta.
			x := torusRadius * theta cos.
			y := torusRadius * theta sin.
			z := 0.
			secondCenter := x , y , z.
			phiCollection do: 
					[:phi | 
					firstPoints add: (JunGeometry 
								torusRadius: torusRadius
								normalizedTheta: firstTheta
								tubeRadius: tubeRadius
								normalizedPhi: phi).
					secondPoints add: (JunGeometry 
								torusRadius: torusRadius
								normalizedTheta: secondTheta
								tubeRadius: tubeRadius
								normalizedPhi: phi)].
			ringBody := JunOpenGL3dCompoundObject new.
			(1 to: firstPoints size - 1) with: (2 to: firstPoints size)
				do: 
					[:firstIndex :secondIndex | 
					| p1 p2 p3 p4 v1 v2 v3 v4 firstPolygon secondPolygon |
					p1 := firstPoints at: firstIndex.
					p2 := secondPoints at: firstIndex.
					p3 := firstPoints at: secondIndex.
					p4 := secondPoints at: secondIndex.
					v1 := firstCenter to: p1.
					v2 := secondCenter to: p2.
					v3 := firstCenter to: p3.
					v4 := secondCenter to: p4.
					firstPolygon := JunOpenGL3dPolygon vertexes: (Array 
										with: p1
										with: p2
										with: p3)
								vectors: (Array 
										with: v1 normalUnitVector
										with: v2 normalUnitVector
										with: v3 normalUnitVector).
					secondPolygon := JunOpenGL3dPolygon vertexes: (Array 
										with: p2
										with: p4
										with: p3)
								vectors: (Array 
										with: v2 normalUnitVector
										with: v4 normalUnitVector
										with: v3 normalUnitVector).
					ringBody add: firstPolygon.
					ringBody add: secondPolygon].
			compoundObject add: ringBody].
	compoundObject name: 'torus'.
	compoundObject flushAllPaints.
	compoundObject paint: self defaultPaint.
	^compoundObject
]

{ #category : #'typical objects torus' }
JunOpenGL3dObject class >> torusRadius: torusRadius tubeRadius: tubeRadius [ 
	"(JunOpenGL3dObject torusRadius: 1 tubeRadius: 0.4) showIn: (200 @ 200 extent: 400 @ 400)."

	^self 
		torusRadius: torusRadius
		divisions: 72
		tubeRadius: tubeRadius
		divisions: 36
]

{ #category : #'lisp support' }
JunOpenGL3dObject class >> transformationFromLispList: aList [ 
	| list array |
	list := aList detect: [:car | (car isKindOf: self defaultLispConsClass)
					and: [car head = #transformation]]
				ifNone: [nil].
	list isNil ifTrue: [^nil].
	list := list tail.
	array := Array new: 16.
	1 to: 16 do: [:index | array at: index put: (list nth: index)].
	^Jun3dTransformation fromArray: array
]

{ #category : #'lisp support' }
JunOpenGL3dObject class >> transformationFromLispList: aList for: a3dObject [ 
	| transformation |
	transformation := self transformationFromLispList: aList.
	transformation notNil ifTrue: [^a3dObject transform: transformation].
	^a3dObject
]

{ #category : #'lisp support' }
JunOpenGL3dObject class >> transformationToLispList: aTransformation [ 
	| list |
	list := self lispCons.
	list head: #transformation.
	list add: aTransformation a.
	list add: aTransformation b.
	list add: aTransformation c.
	list add: aTransformation p.
	list add: aTransformation d.
	list add: aTransformation e.
	list add: aTransformation f.
	list add: aTransformation q.
	list add: aTransformation g.
	list add: aTransformation h.
	list add: aTransformation i.
	list add: aTransformation r.
	list add: aTransformation l.
	list add: aTransformation m.
	list add: aTransformation n.
	list add: aTransformation s.
	^list
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> triakisIcosahedron [
	"(JunOpenGL3dObject triakisIcosahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject triakisIcosahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject triakisIcosahedron)."

	| triakisIcosahedron |
	triakisIcosahedron := self nAkisHedron: self regularIcosahedron.
	triakisIcosahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	triakisIcosahedron flushAllPaints.
	triakisIcosahedron paint: self defaultPaint.
	triakisIcosahedron name: 'triakis icosahedron'.
	^triakisIcosahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> triakisOctahedron [
	"(JunOpenGL3dObject triakisOctahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject triakisOctahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject triakisOctahedron)."

	| triakisOctahedron |
	triakisOctahedron := self nAkisHedron: self regularOctahedron.
	triakisOctahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	triakisOctahedron flushAllPaints.
	triakisOctahedron paint: self defaultPaint.
	triakisOctahedron name: 'triakis octahedron'.
	^triakisOctahedron
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> triball [
	"(JunOpenGL3dObject triball) show."

	"((JunOpenGL3dObject triball asCompoundObject)
		add: (JunOpenGL3dObject axes scaledBy: 3);
		yourself) show"

	| aBall displayObject |
	aBall := JunOpenGL3dObject ball: 2.
	aBall paint: (ColorValue blue blendWith: ColorValue white).
	aBall := aBall transform: (Jun3dTransformation translate: 0.75 , 0 , 0).
	displayObject := JunOpenGL3dCompoundObject new.
	(60 to: 360 by: 120) do: 
			[:each | 
			| aT |
			aT := Jun3dTransformation rotate: (JunAngle fromDeg: each).
			displayObject add: (aBall transform: aT)].
	displayObject name: 'tripleBall'.
	^displayObject
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> truncatedDodecahedron [
	"(JunOpenGL3dObject truncatedDodecahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject truncatedDodecahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject truncatedDodecahedron)."

	| originPoint aFactor aTable aCompound compoundObject aSet totalDistance aRadius scaleFactor truncatedDodecahedron |
	originPoint := 0 , 0 , 0.
	aFactor := 0.85065080835204d.
	aTable := Dictionary new.
	aCompound := JunOpenGL3dCompoundObject new.
	self regularDodecahedron primitivesDo: 
			[:pentahedron | 
			| aPlane aPoint aLine aCollection aDecahedron |
			aPlane := JunPlane 
						on: (pentahedron vertexes at: 1)
						on: (pentahedron vertexes at: 3)
						on: (pentahedron vertexes at: 5).
			aPoint := aPlane nearestPointFromPoint: originPoint.
			aLine := Jun3dLine from: originPoint to: aPoint.
			aCollection := OrderedCollection new: 10.
			(0 to: 9) do: 
					[:n | 
					| originalVertex roundedVertex |
					originalVertex := ((Jun3dLine from: aPoint to: (pentahedron vertexes at: 1)) 
								atT: aFactor) transform: (Jun3dTransformation 
											rotate: (JunAngle fromDeg: 360 / 10 * n + 18)
											around: aLine).
					roundedVertex := originalVertex roundTo: 1.0d-12.
					aTable at: roundedVertex put: originalVertex.
					aCollection add: roundedVertex].
			aDecahedron := JunOpenGL3dPolygon vertexes: aCollection asArray.
			aCompound add: aDecahedron].
	compoundObject := JunOpenGL3dCompoundObject new.
	aCompound primitivesDo: 
			[:decahedron | 
			compoundObject add: (JunOpenGL3dPolygon 
						vertexes: (decahedron vertexes collect: [:p | aTable at: p]))].
	aSet := compoundObject asPointArray asSet.
	aTable := OrderedCollection new.
	compoundObject primitivesDo: 
			[:decahedron | 
			| p1 p2 p aCollection p3 anArray aTriangle |
			p1 := decahedron vertexes at: 3.
			p2 := decahedron vertexes at: 2.
			p := (Jun3dLine from: p1 to: p2) atT: 0.5.
			aCollection := OrderedCollection new.
			aSet do: 
					[:each | 
					(each ~= p1 and: [each ~= p2]) 
						ifTrue: [aCollection add: (each distance: p) -> each]].
			aCollection := aCollection asSortedCollection.
			p3 := aCollection first value.
			(aTable detect: 
					[:array | 
					(array includes: p1) and: [(array includes: p2) and: [array includes: p3]]]
				ifNone: [nil]) isNil 
				ifTrue: 
					[anArray := Array 
								with: p1
								with: p2
								with: p3.
					aTable add: anArray.
					aTriangle := JunOpenGL3dPolygon vertexes: anArray.
					compoundObject add: aTriangle].
			p1 := decahedron vertexes at: 1.
			p2 := decahedron vertexes at: 10.
			p := (Jun3dLine from: p1 to: p2) atT: 0.5.
			aCollection := OrderedCollection new.
			aSet do: 
					[:each | 
					(each ~= p1 and: [each ~= p2]) 
						ifTrue: [aCollection add: (each distance: p) -> each]].
			aCollection := aCollection asSortedCollection.
			p3 := aCollection first value.
			(aTable detect: 
					[:array | 
					(array includes: p1) and: [(array includes: p2) and: [array includes: p3]]]
				ifNone: [nil]) isNil 
				ifTrue: 
					[anArray := Array 
								with: p1
								with: p2
								with: p3.
					aTable add: anArray.
					aTriangle := JunOpenGL3dPolygon vertexes: anArray.
					compoundObject add: aTriangle]].
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	truncatedDodecahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	truncatedDodecahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	truncatedDodecahedron flushAllPaints.
	truncatedDodecahedron paint: self defaultPaint.
	truncatedDodecahedron name: 'truncated dodecahedron'.
	^truncatedDodecahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> truncatedHexahedron [
	"(JunOpenGL3dObject truncatedHexahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject truncatedHexahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject truncatedHexahedron)."

	| compoundObject aSet totalDistance originPoint aRadius scaleFactor truncatedHexahedron offset p01 p02 p03 p04 p05 p06 p07 p08 p91 p92 p93 p94 p95 p96 p97 p98 p32 p33 p36 p37 p72 p73 p76 p77 |
	offset := (1 , 0 , 0 
				transform: (Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5))) x.
	p01 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset)).
	p02 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 45.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset)).
	p03 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 90.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset)).
	p04 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 135.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset)).
	p05 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 180.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset)).
	p06 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 225.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset)).
	p07 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 270.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset)).
	p08 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 315.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset)).
	p91 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset negated)).
	p92 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 45.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset negated)).
	p93 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 90.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset negated)).
	p94 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 135.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset negated)).
	p95 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 180.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset negated)).
	p96 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 225.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset negated)).
	p97 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 270.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset negated)).
	p98 := 1 , 0 , 0 
				transform: ((Jun3dTransformation rotateZ: (JunAngle fromDeg: 22.5 + 315.0)) 
						product: (Jun3dTransformation translate: 0 , 0 , offset negated)).
	p32 := 0 , 0 , 1 
				transform: ((Jun3dTransformation rotateY: (JunAngle fromDeg: 22.5 + 45.0)) 
						product: (Jun3dTransformation translate: 0 , offset , 0)).
	p33 := 0 , 0 , 1 
				transform: ((Jun3dTransformation rotateY: (JunAngle fromDeg: 22.5 + 90.0)) 
						product: (Jun3dTransformation translate: 0 , offset , 0)).
	p36 := 0 , 0 , 1 
				transform: ((Jun3dTransformation rotateY: (JunAngle fromDeg: 22.5 + 225.0)) 
						product: (Jun3dTransformation translate: 0 , offset , 0)).
	p37 := 0 , 0 , 1 
				transform: ((Jun3dTransformation rotateY: (JunAngle fromDeg: 22.5 + 270.0)) 
						product: (Jun3dTransformation translate: 0 , offset , 0)).
	p72 := 0 , 0 , 1 
				transform: ((Jun3dTransformation rotateY: (JunAngle fromDeg: 22.5 + 45.0)) 
						product: (Jun3dTransformation translate: 0 , offset negated , 0)).
	p73 := 0 , 0 , 1 
				transform: ((Jun3dTransformation rotateY: (JunAngle fromDeg: 22.5 + 90.0)) 
						product: (Jun3dTransformation translate: 0 , offset negated , 0)).
	p76 := 0 , 0 , 1 
				transform: ((Jun3dTransformation rotateY: (JunAngle fromDeg: 22.5 + 225.0)) 
						product: (Jun3dTransformation translate: 0 , offset negated , 0)).
	p77 := 0 , 0 , 1 
				transform: ((Jun3dTransformation rotateY: (JunAngle fromDeg: 22.5 + 270.0)) 
						product: (Jun3dTransformation translate: 0 , offset negated , 0)).
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p01
						with: p02
						with: p03
						with: p04) , (Array 
									with: p05
									with: p06
									with: p07
									with: p08)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p98
						with: p97
						with: p96
						with: p95) , (Array 
									with: p94
									with: p93
									with: p92
									with: p91)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p02
						with: p32
						with: p33
						with: p92) , (Array 
									with: p93
									with: p36
									with: p37
									with: p03)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p06
						with: p77
						with: p76
						with: p96) , (Array 
									with: p97
									with: p73
									with: p72
									with: p07)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p01
						with: p08
						with: p72
						with: p73) , (Array 
									with: p98
									with: p91
									with: p33
									with: p32)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p05
						with: p04
						with: p37
						with: p36) , (Array 
									with: p94
									with: p95
									with: p76
									with: p77)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p01
						with: p32
						with: p02)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p91
						with: p92
						with: p33)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p08
						with: p07
						with: p72)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p98
						with: p73
						with: p97)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p03
						with: p37
						with: p04)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p36
						with: p93
						with: p94)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p06
						with: p05
						with: p77)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p95
						with: p96
						with: p76)).
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	truncatedHexahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	truncatedHexahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	truncatedHexahedron flushAllPaints.
	truncatedHexahedron paint: self defaultPaint.
	truncatedHexahedron name: 'truncated hexahedron'.
	^truncatedHexahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> truncatedIcosahedron [
	"(JunOpenGL3dObject truncatedIcosahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject truncatedIcosahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject truncatedIcosahedron)."

	| compoundObject pointArray aBlock aSet totalDistance originPoint aRadius scaleFactor truncatedIcosahedron |
	compoundObject := JunOpenGL3dCompoundObject new.
	pointArray := Array new: 5.
	1 to: 5
		do: 
			[:each | 
			pointArray at: each
				put: (Jun3dPoint 
						x: (Double pi * each * 2 / 5) cos * 5.0d sqrt * 2 / 5
						y: (Double pi * each * 2 / 5) sin * 5.0d sqrt * 2 / 5
						z: 5.0d sqrt / 5)].
	aBlock := 
			[:p1 :p2 :p3 | 
			| anArray polygon |
			anArray := Array new: 6.
			anArray at: 1 put: (p1 * 2 + p2) / 3.
			anArray at: 2 put: (p1 + (p2 * 2)) / 3.
			anArray at: 3 put: (p2 * 2 + p3) / 3.
			anArray at: 4 put: (p2 + (p3 * 2)) / 3.
			anArray at: 5 put: (p3 * 2 + p1) / 3.
			anArray at: 6 put: (p3 + (p1 * 2)) / 3.
			polygon := JunOpenGL3dPolygon vertexes: anArray.
			compoundObject add: polygon].
	1 to: 5
		do: 
			[:each | 
			aBlock 
				value: 0.0d , 0.0d , 1.0d
				value: (pointArray at: each)
				value: (pointArray at: each \\ 5 + 1).
			aBlock 
				value: (pointArray at: each \\ 5 + 1)
				value: (pointArray at: each)
				value: (pointArray at: (each + 2) \\ 5 + 1) negated.
			aBlock 
				value: (pointArray at: each) negated
				value: (pointArray at: each \\ 5 + 1) negated
				value: (pointArray at: (each + 2) \\ 5 + 1).
			aBlock 
				value: (pointArray at: each \\ 5 + 1) negated
				value: (pointArray at: each) negated
				value: (0.0d , 0.0d , 1.0d) negated].
	aBlock := 
			[:p0 :pp | 
			| anArray polygon |
			anArray := Array new: 5.
			1 to: 5 do: [:each | anArray at: each put: (p0 * 2 + (pp at: each)) / 3].
			polygon := JunOpenGL3dPolygon vertexes: anArray.
			compoundObject add: polygon.
			1 to: 5
				do: [:each | anArray at: each put: ((p0 * 2 + (pp at: 6 - each)) / 3) negated].
			polygon := JunOpenGL3dPolygon vertexes: anArray.
			compoundObject add: polygon].
	aBlock value: 0.0d , 0.0d , 1.0d value: pointArray.
	1 to: 5
		do: 
			[:each | 
			aBlock value: (pointArray at: each)
				value: (Array 
						with: (pointArray at: (each + 3) \\ 5 + 1)
						with: (pointArray at: (each + 1) \\ 5 + 1) negated
						with: (pointArray at: (each + 2) \\ 5 + 1) negated
						with: (pointArray at: each \\ 5 + 1)) , (Array with: 0.0d , 0.0d , 1.0d)].
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	truncatedIcosahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	truncatedIcosahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	truncatedIcosahedron flushAllPaints.
	truncatedIcosahedron paint: self defaultPaint.
	truncatedIcosahedron name: 'truncated icosahedron'.
	^truncatedIcosahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> truncatedOctahedron [
	"(JunOpenGL3dObject truncatedOctahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject truncatedOctahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject truncatedOctahedron)."

	| p1 p2 p3 p4 p5 p6 aLine xy1 xy2 xy3 xy4 xy5 xy6 xy7 xy8 yz1 yz2 yz3 yz4 yz5 yz6 yz7 yz8 zx1 zx2 zx3 zx4 zx5 zx6 zx7 zx8 compoundObject aSet totalDistance originPoint aRadius scaleFactor truncatedOctahedron |
	p1 := 0 , 0 , 1.
	p2 := 1 , 0 , 0.
	p3 := 0 , 1 , 0.
	p4 := -1 , 0 , 0.
	p5 := 0 , -1 , 0.
	p6 := 0 , 0 , -1.
	aLine := Jun3dLine from: p2 to: p3.
	xy1 := aLine atT: 1 / 3.
	xy2 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p3 to: p4.
	xy3 := aLine atT: 1 / 3.
	xy4 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p4 to: p5.
	xy5 := aLine atT: 1 / 3.
	xy6 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p5 to: p2.
	xy7 := aLine atT: 1 / 3.
	xy8 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p3 to: p1.
	yz1 := aLine atT: 1 / 3.
	yz2 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p1 to: p5.
	yz3 := aLine atT: 1 / 3.
	yz4 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p5 to: p6.
	yz5 := aLine atT: 1 / 3.
	yz6 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p6 to: p3.
	yz7 := aLine atT: 1 / 3.
	yz8 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p1 to: p4.
	zx1 := aLine atT: 1 / 3.
	zx2 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p4 to: p6.
	zx3 := aLine atT: 1 / 3.
	zx4 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p6 to: p2.
	zx5 := aLine atT: 1 / 3.
	zx6 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p2 to: p1.
	zx7 := aLine atT: 1 / 3.
	zx8 := aLine atT: 2 / 3.
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: zx3
						with: xy5
						with: zx2
						with: xy4)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: zx7
						with: xy8
						with: zx6
						with: xy1)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: xy3
						with: yz1
						with: xy2
						with: yz8)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: xy6
						with: yz5
						with: xy7
						with: yz4)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: yz3
						with: zx8
						with: yz2
						with: zx1)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: yz7
						with: zx5
						with: yz6
						with: zx4)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: zx7
						with: zx8
						with: yz3) , (Array 
									with: yz4
									with: xy7
									with: xy8)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: zx1
						with: zx2
						with: xy5) , (Array 
									with: xy6
									with: yz4
									with: yz3)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: yz1
						with: yz2
						with: zx8) , (Array 
									with: zx7
									with: xy1
									with: xy2)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: yz1
						with: xy3
						with: xy4) , (Array 
									with: zx2
									with: zx1
									with: yz2)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: xy1
						with: zx6
						with: zx5) , (Array 
									with: yz7
									with: yz8
									with: xy2)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: xy8
						with: xy7
						with: yz5) , (Array 
									with: yz6
									with: zx5
									with: zx6)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: xy6
						with: xy5
						with: zx3) , (Array 
									with: zx4
									with: yz6
									with: yz5)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: xy3
						with: yz8
						with: yz7) , (Array 
									with: zx4
									with: zx3
									with: xy4)).
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	truncatedOctahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	truncatedOctahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	truncatedOctahedron flushAllPaints.
	truncatedOctahedron paint: self defaultPaint.
	truncatedOctahedron name: 'truncated octahedron'.
	^truncatedOctahedron
]

{ #category : #'typical objects hedron' }
JunOpenGL3dObject class >> truncatedTetrahedron [
	"(JunOpenGL3dObject truncatedTetrahedron) show."

	"JunOpenGL3dObject showHedron: (JunOpenGL3dObject truncatedTetrahedron)."

	"JunOpenGL3dObject showHedronWithAxes: (JunOpenGL3dObject truncatedTetrahedron)."

	| p1 p2 p3 p4 aLine p01 p02 p03 p04 p05 p06 p07 p08 p09 p10 p11 p12 compoundObject aSet totalDistance originPoint aRadius scaleFactor truncatedTetrahedron |
	p1 := -1 , -1 , 1.
	p2 := 1 , -1 , -1.
	p3 := 1 , 1 , 1.
	p4 := -1 , 1 , -1.
	aLine := Jun3dLine from: p1 to: p2.
	p01 := aLine atT: 1 / 3.
	p02 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p1 to: p3.
	p03 := aLine atT: 1 / 3.
	p04 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p1 to: p4.
	p05 := aLine atT: 1 / 3.
	p06 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p2 to: p3.
	p07 := aLine atT: 1 / 3.
	p08 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p2 to: p4.
	p09 := aLine atT: 1 / 3.
	p10 := aLine atT: 2 / 3.
	aLine := Jun3dLine from: p3 to: p4.
	p11 := aLine atT: 1 / 3.
	p12 := aLine atT: 2 / 3.
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p01
						with: p03
						with: p05)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p02
						with: p09
						with: p07)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p04
						with: p08
						with: p11)).
	compoundObject 
		add: (JunOpenGL3dPolygon vertexes: (Array 
						with: p06
						with: p12
						with: p10)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p01
						with: p02
						with: p07) , (Array 
									with: p08
									with: p04
									with: p03)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p03
						with: p04
						with: p11) , (Array 
									with: p12
									with: p06
									with: p05)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p08
						with: p07
						with: p09) , (Array 
									with: p10
									with: p12
									with: p11)).
	compoundObject add: (JunOpenGL3dPolygon 
				vertexes: (Array 
						with: p01
						with: p05
						with: p06) , (Array 
									with: p10
									with: p09
									with: p02)).
	aSet := compoundObject asPointArray asSet.
	totalDistance := 0.
	originPoint := 0 , 0 , 0.
	aSet 
		do: [:point | totalDistance := totalDistance + (point distance: originPoint)].
	aRadius := totalDistance / aSet size.
	scaleFactor := 1 / aRadius.
	truncatedTetrahedron := compoundObject 
				scaledBy: scaleFactor , scaleFactor , scaleFactor.
	truncatedTetrahedron polygonsDo: 
			[:polygon | 
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector])].
	truncatedTetrahedron flushAllPaints.
	truncatedTetrahedron paint: self defaultPaint.
	truncatedTetrahedron name: 'truncated tetrahedron'.
	^truncatedTetrahedron
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> tryptophan [
	"(JunOpenGL3dObject tryptophan) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
-0002.3570 00000.8018 00001.257  N
-0002.9089 00001.3879 00001.881  H
-0001.0050 00001.2860 00001.142  C
-0000.6046 00000.8179 00000.211  H
-0000.1153 00000.7372 00002.239  C
-0000.1772 -0000.3712 00002.713  O
-0000.9992 00002.8086 00000.954  C
00000.0114 00003.1129 00000.592  H
-0001.7048 00003.0643 00000.129  H
-0001.3369 00003.7159 00002.107  C
-0001.1998 00005.1075 00002.037  C
-0000.8534 00005.7258 00001.193  H
-0001.8092 00003.4954 00003.406  C
-0001.5426 00005.6340 00003.139  N
-0001.5249 00006.6626 00003.328  H
-0001.9090 00004.7637 00003.985  C
-0002.1597 00002.3728 00004.153  C
-0002.0989 00001.3533 00003.750  H
-0002.3494 00004.9552 00005.291  C
-0002.4178 00005.9665 00005.725  H
-0002.6068 00002.5499 00005.467  C
-0002.8886 00001.6688 00006.068  H
-0002.7027 00003.8253 00006.033  C
-0003.0583 00003.9415 00007.070  H
00000.7976 00001.6238 00002.631  O
-0002.3726 -0000.1257 00001.680  H
00001.3284 00001.1886 00003.319  H
	'.
	compoundObject name: 'tryptophan'.
	^compoundObject
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> tyrosine [
	"(JunOpenGL3dObject tyrosine) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
-0003.9770 00001.0414 00004.346  N
-0004.1081 00001.4803 00005.257  H
-0002.7061 00001.4126 00003.778  C
-0002.6033 00000.8446 00002.823  H
-0001.5710 00000.9848 00004.685  C
-0000.7041 00000.1865 00004.426  O
-0002.6921 00002.9180 00003.469  C
-0003.5584 00003.1795 00002.817  H
-0002.8243 00003.5092 00004.406  H
-0001.4124 00003.3190 00002.771  C
-0000.3360 00003.8611 00003.480  C
-0000.4118 00004.0052 00004.571  H
-0001.2722 00003.1536 00001.390  C
-0002.1025 00002.7271 00000.803  H
00000.8445 00004.2160 00002.826  C
00001.6819 00004.6344 00003.409  H
-0000.0906 00003.5140 00000.740  C
-0000.0060 00003.3703 -0000.348  H
00000.9906 00004.0503 00001.445  C
00002.1433 00004.3964 00000.814  O
00002.2310 00004.2630 -0000.113  H
-0001.6527 00001.5855 00005.872  O
-0004.0049 00000.0385 00004.530  H
-0000.9071 00001.2553 00006.401  H
	'.
	compoundObject name: 'tyrosine'.
	^compoundObject
]

{ #category : #utilities }
JunOpenGL3dObject class >> uniqueId [
	"JunOpenGL3dObject uniqueId."

	| currentClock |
	IdClock isNil ifTrue: [IdClock := Time totalSeconds].
	IdNumber isNil ifTrue: [IdNumber := 0].
	currentClock := Time totalSeconds.
	currentClock = IdClock
		ifTrue: [IdNumber := IdNumber + 1]
		ifFalse: 
			[IdClock := currentClock.
			IdNumber := 0].
	^'id' copy , IdClock printString , IdNumber printString
]

{ #category : #copyright }
JunOpenGL3dObject class >> version [
	^'799'
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> wasp [
	"(JunOpenGL3dObject wasp) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:23:12

(CompoundBody (name . "wasp")
  (bodies (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.9988d , 2.3926d , 0.2057d)}
	    {(1.0007d , 1.4328d , -0.075d)}
	    {(0.9973d , 1.4874d , -1.9946d)}
	    {(0.9954d , 2.1939d , -1.7139d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.0007d , 1.4328d , -0.075d)}
	    {(0.9988d , 2.3926d , 0.2057d)}
	    {(-1.0d , 2.3926d , 0.2057d)}
	    {(-1.0d , 1.4328d , -0.075d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(1.0007d , 1.4328d , -0.075d)}
	    {(1.0027d , 0.473d , -0.3556d)}
	    {(0.9993d , 0.781d , -2.2752d)}
	    {(0.9973d , 1.4874d , -1.9946d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-1.0d , 0.473d , -0.3556d)}
	    {(1.0027d , 0.473d , -0.3556d)}
	    {(1.0007d , 1.4328d , -0.075d)}
	    {(-1.0d , 1.4328d , -0.075d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.0046d , -0.4868d , -0.6363d)}
	    {(1.0027d , 0.473d , -0.3556d)}
	    {(-1.0d , 0.473d , -0.3556d)}
	    {(-1.0d , -0.4868d , -0.6363d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.5559d , -1.249d , -1.0482d)}
	    {(1.0046d , -0.4868d , -0.6363d)}
	    {(-1.0d , -0.4868d , -0.6363d)}
	    {(-0.5921d , -1.249d , -1.0482d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.5559d , -1.249d , -1.0482d)}
	    {(0.574d , -1.6019d , -2.2512d)}
	    {(1.0012d , 0.0745d , -2.5559d)}
	    {(1.0046d , -0.4868d , -0.6363d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.9993d , 0.781d , -2.2752d)}
	    {(1.0012d , 0.0745d , -2.5559d)}
	    {(-1.0d , 0.0745d , -2.5559d)}
	    {(-1.0d , 0.781d , -2.2752d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.2904d , -1.4369d , -1.0504d)}
	    {(-0.287d , -1.4369d , -1.0504d)}
	    {(-0.0976d , -1.9048d , -1.548d)}
	    {(0.1007d , -1.9048d , -1.548d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.1007d , -1.9048d , -1.548d)}
	    {(-0.0976d , -1.9048d , -1.548d)}
	    {(-0.0976d , -3.1407d , -0.6632d)}
	    {(0.1007d , -3.1407d , -0.6632d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.1007d , -3.1407d , -0.6632d)}
	    {(-0.0976d , -3.1407d , -0.6632d)}
	    {(-0.0976d , -3.2558d , -0.824d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.0976d , -3.2558d , -0.824d)}
	    {(-0.0976d , -2.0199d , -1.7089d)}
	    {(0.1003d , -2.0199d , -1.7089d)}
	    {(0.1003d , -3.2558d , -0.824d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.0976d , -2.0199d , -1.7089d)}
	    {(-0.0976d , -1.9048d , -1.548d)}
	    {(-0.287d , -1.4369d , -1.0504d)}
	    {(-0.287d , -1.7722d , -1.8388d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(1.0012d , 0.0745d , -2.5559d)}
	    {(0.574d , -1.6019d , -2.2512d)}
	    {(-0.5721d , -1.6019d , -2.2512d)}
	    {(-1.0d , 0.0745d , -2.5559d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.2894d , -1.7722d , -1.8388d)}
	    {(-0.287d , -1.7722d , -1.8388d)}
	    {(-0.5721d , -1.6019d , -2.2512d)}
	    {(0.574d , -1.6019d , -2.2512d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.9973d , 1.4874d , -1.9946d)}
	    {(0.9993d , 0.781d , -2.2752d)}
	    {(-1.0d , 0.781d , -2.2752d)}
	    {(-1.0d , 1.4874d , -1.9946d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.9954d , 2.1939d , -1.7139d)}
	    {(0.9973d , 1.4874d , -1.9946d)}
	    {(-1.0d , 1.4874d , -1.9946d)}
	    {(-1.0d , 2.1939d , -1.7139d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.9988d , 2.3926d , 0.2057d)}
	    {(0.9954d , 2.1939d , -1.7139d)}
	    {(-1.0d , 2.1939d , -1.7139d)}
	    {(-1.0d , 2.3926d , 0.2057d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.0d , 2.3926d , 0.2057d)}
	    {(-1.0d , 2.1939d , -1.7139d)}
	    {(-1.0d , 1.4874d , -1.9946d)}
	    {(-1.0d , 1.4328d , -0.075d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.9993d , 0.781d , -2.2752d)}
	    {(1.0027d , 0.473d , -0.3556d)}
	    {(1.0046d , -0.4868d , -0.6363d)}
	    {(1.0012d , 0.0745d , -2.5559d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-1.0d , 1.4328d , -0.075d)}
	    {(-1.0d , 1.4874d , -1.9946d)}
	    {(-1.0d , 0.781d , -2.2752d)}
	    {(-1.0d , 0.473d , -0.3556d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.5559d , -1.249d , -1.0482d)}
	    {(-0.5921d , -1.249d , -1.0482d)}
	    {(-0.287d , -1.4369d , -1.0504d)}
	    {(0.2904d , -1.4369d , -1.0504d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.5559d , -1.249d , -1.0482d)}
	    {(0.2904d , -1.4369d , -1.0504d)}
	    {(0.2894d , -1.7722d , -1.8388d)}
	    {(0.574d , -1.6019d , -2.2512d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.2894d , -1.7722d , -1.8388d)}
	    {(0.2904d , -1.4369d , -1.0504d)}
	    {(0.1007d , -1.9048d , -1.548d)}
	    {(0.1003d , -2.0199d , -1.7089d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.287d , -1.4369d , -1.0504d)}
	    {(-0.5921d , -1.249d , -1.0482d)}
	    {(-0.5721d , -1.6019d , -2.2512d)}
	    {(-0.287d , -1.7722d , -1.8388d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.5921d , -1.249d , -1.0482d)}
	    {(-1.0d , -0.4868d , -0.6363d)}
	    {(-1.0d , 0.0745d , -2.5559d)}
	    {(-0.5721d , -1.6019d , -2.2512d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.2894d , -1.7722d , -1.8388d)}
	    {(0.1003d , -2.0199d , -1.7089d)}
	    {(-0.0976d , -2.0199d , -1.7089d)}
	    {(-0.287d , -1.7722d , -1.8388d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.1003d , -2.0199d , -1.7089d)}
	    {(0.1007d , -1.9048d , -1.548d)}
	    {(0.1007d , -3.1407d , -0.6632d)}
	    {(0.1003d , -3.2558d , -0.824d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(0.1003d , -3.2558d , -0.824d)}
	    {(0.1007d , -3.1407d , -0.6632d)}
	    {(-0.0976d , -3.2558d , -0.824d)}))
        (Polygon (color 0.0
	    0.0
	    0.0)
	  (points {(-0.0976d , -3.1407d , -0.6632d)}
	    {(-0.0976d , -1.9048d , -1.548d)}
	    {(-0.0976d , -2.0199d , -1.7089d)}
	    {(-0.0976d , -3.2558d , -0.824d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.0d , -0.4868d , -0.6363d)}
	    {(-1.0d , 0.473d , -0.3556d)}
	    {(-1.0d , 0.781d , -2.2752d)}
	    {(-1.0d , 0.0745d , -2.5559d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.0d , 3.18d , 1.0d)}
	    {(-1.0d , 3.18d , 1.0d)}
	    {(-1.0d , 1.6d , 1.0d)}
	    {(1.0d , 1.6d , 1.0d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.0d , 3.18d , 1.0d)}
	    {(1.0d , 1.6d , 1.0d)}
	    {(1.0d , 1.6d , -1.0d)}
	    {(1.0d , 3.18d , -1.0d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.0d , 3.18d , 1.0d)}
	    {(1.0d , 3.18d , 1.0d)}
	    {(1.0d , 3.18d , -1.0d)}
	    {(-1.0d , 3.18d , -1.0d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.0d , 1.6d , 1.0d)}
	    {(-1.0d , 3.18d , 1.0d)}
	    {(-1.0d , 3.18d , -1.0d)}
	    {(-1.0d , 1.6d , -1.0d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.0d , 1.6d , -1.0d)}
	    {(1.0d , 1.6d , 1.0d)}
	    {(-1.0d , 1.6d , 1.0d)}
	    {(-1.0d , 1.6d , -1.0d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.0d , 1.6d , -1.0d)}
	    {(-1.0d , 1.6d , -1.0d)}
	    {(-1.0d , 3.18d , -1.0d)}
	    {(1.0d , 3.18d , -1.0d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.0d , 2.3794d , 1.7881d)}
	    {(0.7063d , 2.6988d , 1.7959d)}
	    {(0.0d , 2.6351d , 1.6712d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.7063d , 2.0076d , 1.6502d)}
	    {(0.7063d , 2.6988d , 1.7959d)}
	    {(0.0d , 2.3794d , 1.7881d)}
	    {(0.0d , 2.0987d , 2.0171d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.0d , 2.3794d , 1.7881d)}
	    {(0.0d , 2.6351d , 1.6712d)}
	    {(-0.7063d , 2.6988d , 1.7959d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.7063d , 2.0076d , 1.6502d)}
	    {(0.5692d , 2.0971d , 0.648d)}
	    {(0.5692d , 2.7275d , 0.7936d)}
	    {(0.7063d , 2.6988d , 1.7959d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.7063d , 2.0076d , 1.6502d)}
	    {(0.0d , 2.0987d , 2.0171d)}
	    {(0.0d , 2.3794d , 1.7881d)}
	    {(-0.7063d , 2.6988d , 1.7959d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.3532d , 1.3165d , 1.5046d)}
	    {(0.7063d , 2.0076d , 1.6502d)}
	    {(0.0d , 2.0987d , 2.0171d)}
	    {(0.0d , 0.704d , 2.1084d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.7063d , 2.0076d , 1.6502d)}
	    {(-0.7063d , 1.3165d , 1.5046d)}
	    {(-0.3532d , 1.3165d , 1.5046d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.7063d , 1.3165d , 1.5046d)}
	    {(0.3532d , 1.3165d , 1.5046d)}
	    {(-0.3532d , 1.3165d , 1.5046d)}
	    {(-0.7063d , 1.3165d , 1.5046d)}
	    {(-0.3028d , 1.6061d , 0.7574d)}
	    {(0.3028d , 1.6061d , 0.7574d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.0d , 0.704d , 2.1084d)}
	    {(0.0d , 2.0987d , 2.0171d)}
	    {(-0.7063d , 2.0076d , 1.6502d)}
	    {(-0.3532d , 1.3165d , 1.5046d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.0d , 2.6351d , 1.6712d)}
	    {(0.7063d , 2.6988d , 1.7959d)}
	    {(0.5692d , 2.7275d , 0.7936d)}
	    {(-0.5692d , 2.7275d , 0.7936d)}
	    {(-0.7063d , 2.6988d , 1.7959d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.7063d , 1.3165d , 1.5046d)}
	    {(0.7063d , 2.0076d , 1.6502d)}
	    {(0.3532d , 1.3165d , 1.5046d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.7063d , 2.0076d , 1.6502d)}
	    {(0.7063d , 1.3165d , 1.5046d)}
	    {(0.3028d , 1.6061d , 0.7574d)}
	    {(0.5692d , 2.0971d , 0.648d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.3532d , 1.3165d , 1.5046d)}
	    {(0.0d , 0.704d , 2.1084d)}
	    {(-0.3532d , 1.3165d , 1.5046d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.7063d , 2.6988d , 1.7959d)}
	    {(-0.5692d , 2.7275d , 0.7936d)}
	    {(-0.5692d , 2.0971d , 0.648d)}
	    {(-0.7063d , 2.0076d , 1.6502d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.5692d , 2.0971d , 0.648d)}
	    {(0.3028d , 1.6061d , 0.7574d)}
	    {(-0.3028d , 1.6061d , 0.7574d)}
	    {(-0.5692d , 2.0971d , 0.648d)}
	    {(-0.5692d , 2.7275d , 0.7936d)}
	    {(0.5692d , 2.7275d , 0.7936d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.5692d , 2.0971d , 0.648d)}
	    {(-0.3028d , 1.6061d , 0.7574d)}
	    {(-0.7063d , 1.3165d , 1.5046d)}
	    {(-0.7063d , 2.0076d , 1.6502d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.2065d , 1.474d , 1.7958d)}
	    {(-0.2065d , 1.5518d , 1.7772d)}
	    {(-0.4335d , 1.5518d , 1.7772d)}
	    {(-0.4335d , 1.474d , 1.7958d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.4335d , 1.5518d , 1.7772d)}
	    {(-0.2065d , 1.5518d , 1.7772d)}
	    {(-0.2065d , 1.4988d , 1.5564d)}
	    {(-0.4335d , 1.4988d , 1.5564d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.2065d , 1.474d , 1.7958d)}
	    {(-0.2291d , 1.248d , 1.8269d)}
	    {(-0.2291d , 1.2055d , 1.65d)}
	    {(-0.2065d , 1.421d , 1.5752d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1833d , 1.0276d , 1.8515d)}
	    {(-0.0567d , 1.0276d , 1.8515d)}
	    {(-0.2291d , 1.248d , 1.8269d)}
	    {(-0.4109d , 1.248d , 1.8269d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.2065d , 1.4988d , 1.5564d)}
	    {(-0.2065d , 1.421d , 1.5752d)}
	    {(-0.4335d , 1.421d , 1.5752d)}
	    {(-0.4335d , 1.4988d , 1.5564d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.2291d , 1.248d , 1.8269d)}
	    {(-0.0567d , 1.0276d , 1.8515d)}
	    {(-0.0567d , 0.9981d , 1.7282d)}
	    {(-0.2291d , 1.2055d , 1.65d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1833d , 0.9981d , 1.7282d)}
	    {(-0.1833d , 1.0276d , 1.8515d)}
	    {(-0.4109d , 1.248d , 1.8269d)}
	    {(-0.4109d , 1.2055d , 1.65d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.4335d , 1.474d , 1.7958d)}
	    {(-0.4335d , 1.421d , 1.5752d)}
	    {(-0.4109d , 1.2055d , 1.65d)}
	    {(-0.4109d , 1.248d , 1.8269d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.2065d , 1.5518d , 1.7772d)}
	    {(-0.2065d , 1.474d , 1.7958d)}
	    {(-0.2065d , 1.421d , 1.5752d)}
	    {(-0.2065d , 1.4988d , 1.5564d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.2065d , 1.474d , 1.7958d)}
	    {(-0.4335d , 1.474d , 1.7958d)}
	    {(-0.4109d , 1.248d , 1.8269d)}
	    {(-0.2291d , 1.248d , 1.8269d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1833d , 1.0276d , 1.8515d)}
	    {(-0.1833d , 0.9981d , 1.7282d)}
	    {(-0.0567d , 0.9981d , 1.7282d)}
	    {(-0.0567d , 1.0276d , 1.8515d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.2291d , 1.2055d , 1.65d)}
	    {(-0.4109d , 1.2055d , 1.65d)}
	    {(-0.4335d , 1.421d , 1.5752d)}
	    {(-0.2065d , 1.421d , 1.5752d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.0567d , 0.9981d , 1.7282d)}
	    {(-0.1833d , 0.9981d , 1.7282d)}
	    {(-0.4109d , 1.2055d , 1.65d)}
	    {(-0.2291d , 1.2055d , 1.65d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.4335d , 1.474d , 1.7958d)}
	    {(-0.4335d , 1.5518d , 1.7772d)}
	    {(-0.4335d , 1.4988d , 1.5564d)}
	    {(-0.4335d , 1.421d , 1.5752d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.4884d , 2.6094d , 2.1135d)}
	    {(-0.1121d , 2.6517d , 1.9127d)}
	    {(-0.5567d , 2.8198d , 1.1149d)}
	    {(-0.9329d , 2.7775d , 1.3157d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.5567d , 2.8198d , 1.1149d)}
	    {(-0.1121d , 2.6517d , 1.9127d)}
	    {(-0.1121d , 1.743d , 1.7212d)}
	    {(-0.4619d , 2.069d , 1.1343d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.9329d , 2.7775d , 1.3157d)}
	    {(-0.5567d , 2.8198d , 1.1149d)}
	    {(-0.4619d , 2.069d , 1.1343d)}
	    {(-0.8382d , 2.0267d , 1.3351d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1121d , 2.6517d , 1.9127d)}
	    {(-0.4884d , 2.6094d , 2.1135d)}
	    {(-0.4884d , 1.7007d , 1.922d)}
	    {(-0.1121d , 1.743d , 1.7212d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.4884d , 2.6094d , 2.1135d)}
	    {(-0.9329d , 2.7775d , 1.3157d)}
	    {(-0.8382d , 2.0267d , 1.3351d)}
	    {(-0.4884d , 1.7007d , 1.922d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1121d , 1.743d , 1.7212d)}
	    {(-0.4884d , 1.7007d , 1.922d)}
	    {(-0.8382d , 2.0267d , 1.3351d)}
	    {(-0.4619d , 2.069d , 1.1343d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.1392d , 2.6489d , 1.9257d)}
	    {(0.5323d , 2.6137d , 2.0929d)}
	    {(0.9025d , 2.7893d , 1.2597d)}
	    {(0.5095d , 2.8245d , 1.0925d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.9025d , 2.7893d , 1.2597d)}
	    {(0.5323d , 2.6137d , 2.0929d)}
	    {(0.5323d , 1.705d , 1.9014d)}
	    {(0.8236d , 2.0369d , 1.2867d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.5095d , 2.8245d , 1.0925d)}
	    {(0.9025d , 2.7893d , 1.2597d)}
	    {(0.8236d , 2.0369d , 1.2867d)}
	    {(0.4306d , 2.0722d , 1.1194d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.5323d , 2.6137d , 2.0929d)}
	    {(0.1392d , 2.6489d , 1.9257d)}
	    {(0.1392d , 1.7403d , 1.7342d)}
	    {(0.5323d , 1.705d , 1.9014d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.1392d , 1.7403d , 1.7342d)}
	    {(0.4306d , 2.0722d , 1.1194d)}
	    {(0.8236d , 2.0369d , 1.2867d)}
	    {(0.5323d , 1.705d , 1.9014d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.1392d , 2.6489d , 1.9257d)}
	    {(0.5095d , 2.8245d , 1.0925d)}
	    {(0.4306d , 2.0722d , 1.1194d)}
	    {(0.1392d , 1.7403d , 1.7342d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.1894d , 4.3129d , 0.6274d)}
	    {(-2.049d , 5.5846d , 0.1645d)}
	    {(-2.2129d , 5.5064d , 0.2471d)}
	    {(-1.3806d , 4.2218d , 0.7237d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.2129d , 5.5064d , 0.2471d)}
	    {(-2.049d , 5.5846d , 0.1645d)}
	    {(-3.0673d , 6.962d , -0.5112d)}
	    {(-3.2023d , 6.8976d , -0.4432d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-3.0673d , 6.962d , -0.5112d)}
	    {(-2.6408d , 5.627d , -0.9281d)}
	    {(-2.7758d , 5.5626d , -0.8601d)}
	    {(-3.2023d , 6.8976d , -0.4432d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.2129d , 5.5064d , 0.2471d)}
	    {(-3.2023d , 6.8976d , -0.4432d)}
	    {(-2.7758d , 5.5626d , -0.8601d)}
	    {(-2.5083d , 5.0182d , -0.8018d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.049d , 5.5846d , 0.1645d)}
	    {(-1.1894d , 4.3129d , 0.6274d)}
	    {(-1.534d , 3.7435d , -0.5958d)}
	    {(-2.3444d , 5.0963d , -0.8843d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.534d , 3.7435d , -0.5958d)}
	    {(-1.1894d , 4.3129d , 0.6274d)}
	    {(-0.4955d , 2.5572d , 0.3432d)}
	    {(-0.7173d , 2.7624d , -0.4745d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.5083d , 5.0182d , -0.8018d)}
	    {(-2.3444d , 5.0963d , -0.8843d)}
	    {(-1.534d , 3.7435d , -0.5958d)}
	    {(-1.7251d , 3.6523d , -0.4996d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.7251d , 3.6523d , -0.4996d)}
	    {(-1.534d , 3.7435d , -0.5958d)}
	    {(-0.7173d , 2.7624d , -0.4745d)}
	    {(-0.9084d , 2.6713d , -0.3783d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.1894d , 4.3129d , 0.6274d)}
	    {(-1.3806d , 4.2218d , 0.7237d)}
	    {(-0.6867d , 2.4661d , 0.4395d)}
	    {(-0.4955d , 2.5572d , 0.3432d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.3444d , 5.0963d , -0.8843d)}
	    {(-2.6408d , 5.627d , -0.9281d)}
	    {(-3.0673d , 6.962d , -0.5112d)}
	    {(-2.049d , 5.5846d , 0.1645d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.7758d , 5.5626d , -0.8601d)}
	    {(-2.6408d , 5.627d , -0.9281d)}
	    {(-2.3444d , 5.0963d , -0.8843d)}
	    {(-2.5083d , 5.0182d , -0.8018d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.3806d , 4.2218d , 0.7237d)}
	    {(-2.2129d , 5.5064d , 0.2471d)}
	    {(-2.5083d , 5.0182d , -0.8018d)}
	    {(-1.7251d , 3.6523d , -0.4996d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-0.4955d , 2.5572d , 0.3432d)}
	    {(-0.6867d , 2.4661d , 0.4395d)}
	    {(-0.9084d , 2.6713d , -0.3783d)}
	    {(-0.7173d , 2.7624d , -0.4745d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.7251d , 3.6523d , -0.4996d)}
	    {(-0.9084d , 2.6713d , -0.3783d)}
	    {(-0.6867d , 2.4661d , 0.4395d)}
	    {(-1.3806d , 4.2218d , 0.7237d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-0.695d , 2.338d , -0.038d)}
	    {(-0.5157d , 2.4509d , -0.134d)}
	    {(-1.6991d , 3.8289d , -0.7218d)}
	    {(-1.8784d , 3.7159d , -0.6258d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-0.5157d , 2.4509d , -0.134d)}
	    {(-0.695d , 2.338d , -0.038d)}
	    {(-0.7266d , 2.1521d , -0.8892d)}
	    {(-0.5474d , 2.2651d , -0.9851d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.527d , 2.7857d , -1.6282d)}
	    {(-0.5474d , 2.2651d , -0.9851d)}
	    {(-0.7266d , 2.1521d , -0.8892d)}
	    {(-1.7062d , 2.6727d , -1.5322d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.8784d , 3.7159d , -0.6258d)}
	    {(-2.8537d , 4.3704d , -1.7169d)}
	    {(-2.7061d , 3.476d , -2.4941d)}
	    {(-1.7062d , 2.6727d , -1.5322d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-3.8164d , 5.0671d , -3.1352d)}
	    {(-2.9541d , 3.9134d , -2.883d)}
	    {(-3.0807d , 3.8336d , -2.8152d)}
	    {(-3.943d , 4.9873d , -3.0674d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.6991d , 3.8289d , -0.7218d)}
	    {(-0.5157d , 2.4509d , -0.134d)}
	    {(-0.5474d , 2.2651d , -0.9851d)}
	    {(-1.527d , 2.7857d , -1.6282d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-0.695d , 2.338d , -0.038d)}
	    {(-1.8784d , 3.7159d , -0.6258d)}
	    {(-1.7062d , 2.6727d , -1.5322d)}
	    {(-0.7266d , 2.1521d , -0.8892d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.8784d , 3.7159d , -0.6258d)}
	    {(-1.6991d , 3.8289d , -0.7218d)}
	    {(-2.7d , 4.4673d , -1.7992d)}
	    {(-2.8537d , 4.3704d , -1.7169d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.7d , 4.4673d , -1.7992d)}
	    {(-1.6991d , 3.8289d , -0.7218d)}
	    {(-1.527d , 2.7857d , -1.6282d)}
	    {(-2.5524d , 3.5729d , -2.5764d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-1.527d , 2.7857d , -1.6282d)}
	    {(-1.7062d , 2.6727d , -1.5322d)}
	    {(-2.7061d , 3.476d , -2.4941d)}
	    {(-2.5524d , 3.5729d , -2.5764d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.7d , 4.4673d , -1.7992d)}
	    {(-2.5524d , 3.5729d , -2.5764d)}
	    {(-2.9541d , 3.9134d , -2.883d)}
	    {(-3.8164d , 5.0671d , -3.1352d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-3.8164d , 5.0671d , -3.1352d)}
	    {(-3.943d , 4.9873d , -3.0674d)}
	    {(-2.8537d , 4.3704d , -1.7169d)}
	    {(-2.7d , 4.4673d , -1.7992d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.5524d , 3.5729d , -2.5764d)}
	    {(-2.7061d , 3.476d , -2.4941d)}
	    {(-3.0807d , 3.8336d , -2.8152d)}
	    {(-2.9541d , 3.9134d , -2.883d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(-2.7061d , 3.476d , -2.4941d)}
	    {(-2.8537d , 4.3704d , -1.7169d)}
	    {(-3.943d , 4.9873d , -3.0674d)}
	    {(-3.0807d , 3.8336d , -2.8152d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(3.2218d , 6.7518d , -0.4765d)}
	    {(3.0879d , 6.8236d , -0.5392d)}
	    {(2.0262d , 5.4864d , 0.1505d)}
	    {(2.1887d , 5.3993d , 0.2266d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.1151d , 2.4329d , -0.2137d)}
	    {(1.5885d , 3.5821d , -0.5288d)}
	    {(1.3109d , 4.1489d , 0.7126d)}
	    {(0.5244d , 2.4329d , 0.4274d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(0.5244d , 2.4329d , 0.4274d)}
	    {(1.3109d , 4.1489d , 0.7126d)}
	    {(1.1214d , 4.2505d , 0.6239d)}
	    {(0.3349d , 2.5345d , 0.3386d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(0.3349d , 2.5345d , 0.3386d)}
	    {(1.1214d , 4.2505d , 0.6239d)}
	    {(1.399d , 3.6837d , -0.6175d)}
	    {(0.9256d , 2.5345d , -0.3025d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(3.0879d , 6.8236d , -0.5392d)}
	    {(3.2218d , 6.7518d , -0.4765d)}
	    {(2.7182d , 5.4452d , -0.8974d)}
	    {(2.5844d , 5.5169d , -0.9601d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(3.2218d , 6.7518d , -0.4765d)}
	    {(2.1887d , 5.3993d , 0.2266d)}
	    {(2.4267d , 4.9133d , -0.8377d)}
	    {(2.7182d , 5.4452d , -0.8974d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.0262d , 5.4864d , 0.1505d)}
	    {(3.0879d , 6.8236d , -0.5392d)}
	    {(2.5844d , 5.5169d , -0.9601d)}
	    {(2.2642d , 5.0005d , -0.9138d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.5844d , 5.5169d , -0.9601d)}
	    {(2.7182d , 5.4452d , -0.8974d)}
	    {(2.4267d , 4.9133d , -0.8377d)}
	    {(2.2642d , 5.0005d , -0.9138d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.1887d , 5.3993d , 0.2266d)}
	    {(2.0262d , 5.4864d , 0.1505d)}
	    {(1.1214d , 4.2505d , 0.6239d)}
	    {(1.3109d , 4.1489d , 0.7126d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.1887d , 5.3993d , 0.2266d)}
	    {(1.3109d , 4.1489d , 0.7126d)}
	    {(1.5885d , 3.5821d , -0.5288d)}
	    {(2.4267d , 4.9133d , -0.8377d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.0262d , 5.4864d , 0.1505d)}
	    {(2.2642d , 5.0005d , -0.9138d)}
	    {(1.399d , 3.6837d , -0.6175d)}
	    {(1.1214d , 4.2505d , 0.6239d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.399d , 3.6837d , -0.6175d)}
	    {(2.2642d , 5.0005d , -0.9138d)}
	    {(2.4267d , 4.9133d , -0.8377d)}
	    {(1.5885d , 3.5821d , -0.5288d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.399d , 3.6837d , -0.6175d)}
	    {(1.5885d , 3.5821d , -0.5288d)}
	    {(1.1151d , 2.4329d , -0.2137d)}
	    {(0.9256d , 2.5345d , -0.3025d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.1151d , 2.4329d , -0.2137d)}
	    {(0.5244d , 2.4329d , 0.4274d)}
	    {(0.3349d , 2.5345d , 0.3386d)}
	    {(0.9256d , 2.5345d , -0.3025d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(3.2418d , 4.8174d , -3.8324d)}
	    {(3.1079d , 4.8205d , -3.9277d)}
	    {(2.0462d , 4.413d , -2.4793d)}
	    {(2.2087d , 4.4092d , -2.3637d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.3309d , 3.9119d , -1.1178d)}
	    {(2.2087d , 4.4092d , -2.3637d)}
	    {(2.0462d , 4.413d , -2.4793d)}
	    {(1.1414d , 3.9163d , -1.2526d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(3.2418d , 4.8174d , -3.8324d)}
	    {(2.2087d , 4.4092d , -2.3637d)}
	    {(2.4467d , 3.2994d , -2.7342d)}
	    {(2.7382d , 3.6185d , -3.1638d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(0.5444d , 2.533d , -0.0573d)}
	    {(1.3309d , 3.9119d , -1.1178d)}
	    {(1.1414d , 3.9163d , -1.2526d)}
	    {(0.3549d , 2.5373d , -0.1921d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.4467d , 3.2994d , -2.7342d)}
	    {(2.2087d , 4.4092d , -2.3637d)}
	    {(1.3309d , 3.9119d , -1.1178d)}
	    {(1.6085d , 2.6175d , -1.5499d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.1351d , 2.0641d , -0.4945d)}
	    {(1.6085d , 2.6175d , -1.5499d)}
	    {(1.3309d , 3.9119d , -1.1178d)}
	    {(0.5444d , 2.533d , -0.0573d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.1351d , 2.0641d , -0.4945d)}
	    {(0.5444d , 2.533d , -0.0573d)}
	    {(0.3549d , 2.5373d , -0.1921d)}
	    {(0.9456d , 2.0685d , -0.6294d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.419d , 2.6218d , -1.6848d)}
	    {(2.2842d , 3.3031d , -2.8498d)}
	    {(2.4467d , 3.2994d , -2.7342d)}
	    {(1.6085d , 2.6175d , -1.5499d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.1351d , 2.0641d , -0.4945d)}
	    {(0.9456d , 2.0685d , -0.6294d)}
	    {(1.419d , 2.6218d , -1.6848d)}
	    {(1.6085d , 2.6175d , -1.5499d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.6044d , 3.6216d , -3.2591d)}
	    {(2.7382d , 3.6185d , -3.1638d)}
	    {(2.4467d , 3.2994d , -2.7342d)}
	    {(2.2842d , 3.3031d , -2.8498d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(3.1079d , 4.8205d , -3.9277d)}
	    {(3.2418d , 4.8174d , -3.8324d)}
	    {(2.7382d , 3.6185d , -3.1638d)}
	    {(2.6044d , 3.6216d , -3.2591d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.0462d , 4.413d , -2.4793d)}
	    {(3.1079d , 4.8205d , -3.9277d)}
	    {(2.6044d , 3.6216d , -3.2591d)}
	    {(2.2842d , 3.3031d , -2.8498d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(2.0462d , 4.413d , -2.4793d)}
	    {(2.2842d , 3.3031d , -2.8498d)}
	    {(1.419d , 2.6218d , -1.6848d)}
	    {(1.1414d , 3.9163d , -1.2526d)}))
        (Polygon (color 0.0
	    0.502014
	    1.0)
	  (points {(1.1414d , 3.9163d , -1.2526d)}
	    {(1.419d , 2.6218d , -1.6848d)}
	    {(0.9456d , 2.0685d , -0.6294d)}
	    {(0.3549d , 2.5373d , -0.1921d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6013d , 3.07d , 0.5552d)}
	    {(-1.6176d , 3.2642d , 0.6785d)}
	    {(-1.8337d , 3.0137d , 0.728d)}
	    {(-1.6666d , 2.9941d , 0.5701d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6013d , 3.07d , 0.5552d)}
	    {(-0.8331d , 2.3728d , 0.3792d)}
	    {(-0.8557d , 2.3728d , 0.2805d)}
	    {(-1.6238d , 3.07d , 0.4564d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6013d , 3.07d , 0.5552d)}
	    {(-1.6666d , 2.9941d , 0.5701d)}
	    {(-0.8985d , 2.2969d , 0.3942d)}
	    {(-0.8331d , 2.3728d , 0.3792d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6238d , 3.07d , 0.4564d)}
	    {(-1.6893d , 2.9941d , 0.4714d)}
	    {(-1.9084d , 3.0137d , 0.4019d)}
	    {(-1.6923d , 3.2642d , 0.3525d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.7314d , 2.3279d , 0.1905d)}
	    {(-0.682d , 2.3279d , 0.4062d)}
	    {(-0.8249d , 2.1621d , 0.4389d)}
	    {(-0.8743d , 2.1621d , 0.2232d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8557d , 2.3728d , 0.2805d)}
	    {(-0.7314d , 2.3279d , 0.1905d)}
	    {(-0.8743d , 2.1621d , 0.2232d)}
	    {(-0.9211d , 2.2969d , 0.2955d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.9211d , 2.2969d , 0.2955d)}
	    {(-1.6893d , 2.9941d , 0.4714d)}
	    {(-1.6238d , 3.07d , 0.4564d)}
	    {(-0.8557d , 2.3728d , 0.2805d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6176d , 3.2642d , 0.6785d)}
	    {(-1.6013d , 3.07d , 0.5552d)}
	    {(-1.6238d , 3.07d , 0.4564d)}
	    {(-1.6923d , 3.2642d , 0.3525d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8331d , 2.3728d , 0.3792d)}
	    {(-0.682d , 2.3279d , 0.4062d)}
	    {(-0.7314d , 2.3279d , 0.1905d)}
	    {(-0.8557d , 2.3728d , 0.2805d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8331d , 2.3728d , 0.3792d)}
	    {(-0.8985d , 2.2969d , 0.3942d)}
	    {(-0.8249d , 2.1621d , 0.4389d)}
	    {(-0.682d , 2.3279d , 0.4062d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.9211d , 2.2969d , 0.2955d)}
	    {(-0.8985d , 2.2969d , 0.3942d)}
	    {(-1.6666d , 2.9941d , 0.5701d)}
	    {(-1.6893d , 2.9941d , 0.4714d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8743d , 2.1621d , 0.2232d)}
	    {(-0.8249d , 2.1621d , 0.4389d)}
	    {(-0.8985d , 2.2969d , 0.3942d)}
	    {(-0.9211d , 2.2969d , 0.2955d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8337d , 3.0137d , 0.728d)}
	    {(-1.6176d , 3.2642d , 0.6785d)}
	    {(-1.6923d , 3.2642d , 0.3525d)}
	    {(-1.9084d , 3.0137d , 0.4019d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6666d , 2.9941d , 0.5701d)}
	    {(-1.8337d , 3.0137d , 0.728d)}
	    {(-1.9084d , 3.0137d , 0.4019d)}
	    {(-1.6893d , 2.9941d , 0.4714d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7708d , 2.3118d , 0.6038d)}
	    {(-2.7708d , 2.1523d , 0.5681d)}
	    {(-2.6498d , 2.1298d , 0.4965d)}
	    {(-2.5066d , 2.2628d , 0.4477d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.6498d , 2.1298d , 0.4965d)}
	    {(-2.7708d , 2.1523d , 0.5681d)}
	    {(-3.0957d , 1.2775d , 1.1826d)}
	    {(-2.8115d , 1.3052d , 1.1846d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.727d , 2.0739d , 0.3834d)}
	    {(-2.6498d , 2.1298d , 0.4965d)}
	    {(-2.8115d , 1.3052d , 1.1846d)}
	    {(-2.8024d , 1.2299d , 0.9208d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.1784d , 0.1531d , 1.4548d)}
	    {(-3.0957d , 1.2775d , 1.1826d)}
	    {(-3.0539d , 1.2046d , 0.8953d)}
	    {(-3.1814d , 0.5646d , 1.2167d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.1814d , 0.5646d , 1.2167d)}
	    {(-3.0539d , 1.2046d , 0.8953d)}
	    {(-2.8024d , 1.2299d , 0.9208d)}
	    {(-2.9124d , 1.0298d , 0.803d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7708d , 2.1523d , 0.5681d)}
	    {(-2.7708d , 2.3118d , 0.6038d)}
	    {(-2.9395d , 2.1896d , 0.3566d)}
	    {(-2.848d , 2.0964d , 0.4549d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.6753d , 2.1406d , 0.2005d)}
	    {(-2.727d , 2.0739d , 0.3834d)}
	    {(-2.848d , 2.0964d , 0.4549d)}
	    {(-2.9395d , 2.1896d , 0.3566d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.5066d , 2.2628d , 0.4477d)}
	    {(-2.6498d , 2.1298d , 0.4965d)}
	    {(-2.727d , 2.0739d , 0.3834d)}
	    {(-2.6753d , 2.1406d , 0.2005d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7708d , 2.3118d , 0.6038d)}
	    {(-2.5066d , 2.2628d , 0.4477d)}
	    {(-2.6753d , 2.1406d , 0.2005d)}
	    {(-2.9395d , 2.1896d , 0.3566d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.1784d , 0.1531d , 1.4548d)}
	    {(-2.657d , 1.2145d , 1.1768d)}
	    {(-2.8115d , 1.3052d , 1.1846d)}
	    {(-3.0957d , 1.2775d , 1.1826d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7708d , 2.1523d , 0.5681d)}
	    {(-2.848d , 2.0964d , 0.4549d)}
	    {(-3.0539d , 1.2046d , 0.8953d)}
	    {(-3.0957d , 1.2775d , 1.1826d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.848d , 2.0964d , 0.4549d)}
	    {(-2.727d , 2.0739d , 0.3834d)}
	    {(-2.8024d , 1.2299d , 0.9208d)}
	    {(-3.0539d , 1.2046d , 0.8953d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8115d , 1.3052d , 1.1846d)}
	    {(-2.657d , 1.2145d , 1.1768d)}
	    {(-2.9124d , 1.0298d , 0.803d)}
	    {(-2.8024d , 1.2299d , 0.9208d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.1784d , 0.1531d , 1.4548d)}
	    {(-3.1814d , 0.5646d , 1.2167d)}
	    {(-2.9124d , 1.0298d , 0.803d)}
	    {(-2.657d , 1.2145d , 1.1768d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6398d , 3.0023d , 0.4135d)}
	    {(-1.672d , 3.0023d , 0.624d)}
	    {(-1.7974d , 2.9581d , 0.5465d)}
	    {(-1.7826d , 2.9581d , 0.4501d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6398d , 3.0023d , 0.4135d)}
	    {(-1.7826d , 2.9581d , 0.4501d)}
	    {(-1.847d , 3.0307d , 0.4402d)}
	    {(-1.7804d , 3.1609d , 0.392d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.6071d , 2.3542d , 0.4225d)}
	    {(-2.5427d , 2.2817d , 0.4324d)}
	    {(-1.7974d , 2.9581d , 0.5465d)}
	    {(-1.8618d , 3.0307d , 0.5365d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.847d , 3.0307d , 0.4402d)}
	    {(-1.7826d , 2.9581d , 0.4501d)}
	    {(-2.528d , 2.2817d , 0.336d)}
	    {(-2.5924d , 2.3542d , 0.3261d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.528d , 2.2817d , 0.336d)}
	    {(-2.5427d , 2.2817d , 0.4324d)}
	    {(-2.5999d , 2.0943d , 0.5372d)}
	    {(-2.5512d , 2.0943d , 0.2189d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.5999d , 2.0943d , 0.5372d)}
	    {(-2.8125d , 2.334d , 0.5047d)}
	    {(-2.7639d , 2.334d , 0.1863d)}
	    {(-2.5512d , 2.0943d , 0.2189d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6398d , 3.0023d , 0.4135d)}
	    {(-1.7804d , 3.1609d , 0.392d)}
	    {(-1.8126d , 3.1609d , 0.6025d)}
	    {(-1.672d , 3.0023d , 0.624d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.672d , 3.0023d , 0.624d)}
	    {(-1.8126d , 3.1609d , 0.6025d)}
	    {(-1.8618d , 3.0307d , 0.5365d)}
	    {(-1.7974d , 2.9581d , 0.5465d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8126d , 3.1609d , 0.6025d)}
	    {(-1.7804d , 3.1609d , 0.392d)}
	    {(-1.847d , 3.0307d , 0.4402d)}
	    {(-1.8618d , 3.0307d , 0.5365d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.7826d , 2.9581d , 0.4501d)}
	    {(-1.7974d , 2.9581d , 0.5465d)}
	    {(-2.5427d , 2.2817d , 0.4324d)}
	    {(-2.528d , 2.2817d , 0.336d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8618d , 3.0307d , 0.5365d)}
	    {(-1.847d , 3.0307d , 0.4402d)}
	    {(-2.5924d , 2.3542d , 0.3261d)}
	    {(-2.6071d , 2.3542d , 0.4225d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.5999d , 2.0943d , 0.5372d)}
	    {(-2.5427d , 2.2817d , 0.4324d)}
	    {(-2.6071d , 2.3542d , 0.4225d)}
	    {(-2.8125d , 2.334d , 0.5047d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.5924d , 2.3542d , 0.3261d)}
	    {(-2.7639d , 2.334d , 0.1863d)}
	    {(-2.8125d , 2.334d , 0.5047d)}
	    {(-2.6071d , 2.3542d , 0.4225d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.5924d , 2.3542d , 0.3261d)}
	    {(-2.528d , 2.2817d , 0.336d)}
	    {(-2.5512d , 2.0943d , 0.2189d)}
	    {(-2.7639d , 2.334d , 0.1863d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.7173d , 2.3131d , -0.2014d)}
	    {(-0.8733d , 2.3098d , -0.2362d)}
	    {(-0.9309d , 2.3098d , -0.1528d)}
	    {(-0.8429d , 2.3131d , -0.0193d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8429d , 2.3131d , -0.0193d)}
	    {(-0.9309d , 2.3098d , -0.1528d)}
	    {(-0.9629d , 2.2163d , -0.1749d)}
	    {(-0.9129d , 2.1088d , -0.0675d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.7173d , 2.3131d , -0.2014d)}
	    {(-0.8429d , 2.3131d , -0.0193d)}
	    {(-0.9129d , 2.1088d , -0.0675d)}
	    {(-0.7872d , 2.1088d , -0.2497d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8824d , 2.8838d , -0.6676d)}
	    {(-1.7305d , 2.7142d , -0.7044d)}
	    {(-1.6729d , 2.7142d , -0.7878d)}
	    {(-1.6924d , 2.8838d , -0.9429d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.9309d , 2.3098d , -0.1528d)}
	    {(-1.7305d , 2.7142d , -0.7044d)}
	    {(-1.7625d , 2.6206d , -0.7265d)}
	    {(-0.9629d , 2.2163d , -0.1749d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6729d , 2.7142d , -0.7878d)}
	    {(-0.8733d , 2.3098d , -0.2362d)}
	    {(-0.9054d , 2.2163d , -0.2583d)}
	    {(-1.705d , 2.6206d , -0.8099d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.9054d , 2.2163d , -0.2583d)}
	    {(-0.9629d , 2.2163d , -0.1749d)}
	    {(-1.7625d , 2.6206d , -0.7265d)}
	    {(-1.705d , 2.6206d , -0.8099d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8824d , 2.8838d , -0.6676d)}
	    {(-1.9882d , 2.575d , -0.7406d)}
	    {(-1.7625d , 2.6206d , -0.7265d)}
	    {(-1.7305d , 2.7142d , -0.7044d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8824d , 2.8838d , -0.6676d)}
	    {(-1.6924d , 2.8838d , -0.9429d)}
	    {(-1.7983d , 2.575d , -1.0159d)}
	    {(-1.9882d , 2.575d , -0.7406d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.9054d , 2.2163d , -0.2583d)}
	    {(-0.7872d , 2.1088d , -0.2497d)}
	    {(-0.9129d , 2.1088d , -0.0675d)}
	    {(-0.9629d , 2.2163d , -0.1749d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8733d , 2.3098d , -0.2362d)}
	    {(-0.7173d , 2.3131d , -0.2014d)}
	    {(-0.7872d , 2.1088d , -0.2497d)}
	    {(-0.9054d , 2.2163d , -0.2583d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.9309d , 2.3098d , -0.1528d)}
	    {(-0.8733d , 2.3098d , -0.2362d)}
	    {(-1.6729d , 2.7142d , -0.7878d)}
	    {(-1.7305d , 2.7142d , -0.7044d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.6924d , 2.8838d , -0.9429d)}
	    {(-1.6729d , 2.7142d , -0.7878d)}
	    {(-1.705d , 2.6206d , -0.8099d)}
	    {(-1.7983d , 2.575d , -1.0159d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.7983d , 2.575d , -1.0159d)}
	    {(-1.705d , 2.6206d , -0.8099d)}
	    {(-1.7625d , 2.6206d , -0.7265d)}
	    {(-1.9882d , 2.575d , -0.7406d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.7141d , 2.8856d , -0.928d)}
	    {(-1.886d , 2.8856d , -0.6905d)}
	    {(-1.7274d , 2.6673d , -0.5756d)}
	    {(-1.5555d , 2.6673d , -0.8131d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8321d , 2.6065d , -0.7496d)}
	    {(-1.9048d , 2.7064d , -0.8022d)}
	    {(-2.7456d , 1.7751d , -1.4108d)}
	    {(-2.6729d , 1.6752d , -1.3582d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8321d , 2.6065d , -0.7496d)}
	    {(-2.6729d , 1.6752d , -1.3582d)}
	    {(-2.5942d , 1.6752d , -1.4669d)}
	    {(-1.7534d , 2.6065d , -0.8583d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8261d , 2.7064d , -0.9109d)}
	    {(-1.7534d , 2.6065d , -0.8583d)}
	    {(-2.5942d , 1.6752d , -1.4669d)}
	    {(-2.6669d , 1.7751d , -1.5195d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7456d , 1.7751d , -1.4108d)}
	    {(-2.6669d , 1.7751d , -1.5195d)}
	    {(-2.7888d , 1.7473d , -1.7986d)}
	    {(-3.0488d , 1.7473d , -1.4395d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.6669d , 1.7751d , -1.5195d)}
	    {(-2.5942d , 1.6752d , -1.4669d)}
	    {(-2.5489d , 1.4173d , -1.625d)}
	    {(-2.7888d , 1.7473d , -1.7986d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.7274d , 2.6673d , -0.5756d)}
	    {(-1.886d , 2.8856d , -0.6905d)}
	    {(-1.9048d , 2.7064d , -0.8022d)}
	    {(-1.8321d , 2.6065d , -0.7496d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.5555d , 2.6673d , -0.8131d)}
	    {(-1.7274d , 2.6673d , -0.5756d)}
	    {(-1.8321d , 2.6065d , -0.7496d)}
	    {(-1.7534d , 2.6065d , -0.8583d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.886d , 2.8856d , -0.6905d)}
	    {(-1.7141d , 2.8856d , -0.928d)}
	    {(-1.8261d , 2.7064d , -0.9109d)}
	    {(-1.9048d , 2.7064d , -0.8022d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.7141d , 2.8856d , -0.928d)}
	    {(-1.5555d , 2.6673d , -0.8131d)}
	    {(-1.7534d , 2.6065d , -0.8583d)}
	    {(-1.8261d , 2.7064d , -0.9109d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7456d , 1.7751d , -1.4108d)}
	    {(-1.9048d , 2.7064d , -0.8022d)}
	    {(-1.8261d , 2.7064d , -0.9109d)}
	    {(-2.6669d , 1.7751d , -1.5195d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.6729d , 1.6752d , -1.3582d)}
	    {(-2.7456d , 1.7751d , -1.4108d)}
	    {(-3.0488d , 1.7473d , -1.4395d)}
	    {(-2.8089d , 1.4173d , -1.2658d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.6729d , 1.6752d , -1.3582d)}
	    {(-2.8089d , 1.4173d , -1.2658d)}
	    {(-2.5489d , 1.4173d , -1.625d)}
	    {(-2.5942d , 1.6752d , -1.4669d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8089d , 1.4173d , -1.2658d)}
	    {(-3.0488d , 1.7473d , -1.4395d)}
	    {(-2.7888d , 1.7473d , -1.7986d)}
	    {(-2.5489d , 1.4173d , -1.625d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.1428d , 1.6955d , -1.457d)}
	    {(-2.8141d , 1.5412d , -1.226d)}
	    {(-2.5667d , 1.5412d , -1.5779d)}
	    {(-2.8954d , 1.6955d , -1.8089d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8141d , 1.5412d , -1.226d)}
	    {(-3.1428d , 1.6955d , -1.457d)}
	    {(-3.0639d , 1.4074d , -1.5441d)}
	    {(-2.9134d , 1.3368d , -1.4383d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8001d , 1.3368d , -1.5994d)}
	    {(-2.9134d , 1.3368d , -1.4383d)}
	    {(-3.6491d , -0.5612d , -1.744d)}
	    {(-3.3061d , -0.5612d , -1.8695d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.9507d , 1.4074d , -1.7052d)}
	    {(-2.8001d , 1.3368d , -1.5994d)}
	    {(-3.3061d , -0.5612d , -1.8695d)}
	    {(-3.3906d , -0.4538d , -2.1896d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.3061d , -0.5612d , -1.8695d)}
	    {(-3.1711d , -0.8191d , -2.1374d)}
	    {(-3.7031d , -1.8041d , -2.5113d)}
	    {(-3.3906d , -0.4538d , -2.1896d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.5452d , -0.8191d , -1.6051d)}
	    {(-3.6491d , -0.5612d , -1.744d)}
	    {(-3.7774d , -0.4538d , -2.095d)}
	    {(-4.0772d , -1.8041d , -1.979d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.3906d , -0.4538d , -2.1896d)}
	    {(-3.7031d , -1.8041d , -2.5113d)}
	    {(-4.0772d , -1.8041d , -1.979d)}
	    {(-3.7774d , -0.4538d , -2.095d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.5667d , 1.5412d , -1.5779d)}
	    {(-2.8141d , 1.5412d , -1.226d)}
	    {(-2.9134d , 1.3368d , -1.4383d)}
	    {(-2.8001d , 1.3368d , -1.5994d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8954d , 1.6955d , -1.8089d)}
	    {(-2.5667d , 1.5412d , -1.5779d)}
	    {(-2.8001d , 1.3368d , -1.5994d)}
	    {(-2.9507d , 1.4074d , -1.7052d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.1428d , 1.6955d , -1.457d)}
	    {(-2.8954d , 1.6955d , -1.8089d)}
	    {(-2.9507d , 1.4074d , -1.7052d)}
	    {(-3.0639d , 1.4074d , -1.5441d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.3061d , -0.5612d , -1.8695d)}
	    {(-3.6491d , -0.5612d , -1.744d)}
	    {(-3.5452d , -0.8191d , -1.6051d)}
	    {(-3.1711d , -0.8191d , -2.1374d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.9134d , 1.3368d , -1.4383d)}
	    {(-3.0639d , 1.4074d , -1.5441d)}
	    {(-3.7774d , -0.4538d , -2.095d)}
	    {(-3.6491d , -0.5612d , -1.744d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.9507d , 1.4074d , -1.7052d)}
	    {(-3.3906d , -0.4538d , -2.1896d)}
	    {(-3.7774d , -0.4538d , -2.095d)}
	    {(-3.0639d , 1.4074d , -1.5441d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.1711d , -0.8191d , -2.1374d)}
	    {(-3.5452d , -0.8191d , -1.6051d)}
	    {(-4.0772d , -1.8041d , -1.979d)}
	    {(-3.7031d , -1.8041d , -2.5113d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8584d , 2.3098d , 0.0212d)}
	    {(-0.8443d , 2.3098d , 0.1215d)}
	    {(-0.6892d , 2.3131d , 0.1603d)}
	    {(-0.72d , 2.3131d , -0.0589d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.6892d , 2.3131d , 0.1603d)}
	    {(-0.8443d , 2.3098d , 0.1215d)}
	    {(-0.8828d , 2.2163d , 0.1269d)}
	    {(-0.7734d , 2.1088d , 0.1721d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8443d , 2.3098d , 0.1215d)}
	    {(-0.8584d , 2.3098d , 0.0212d)}
	    {(-1.8204d , 2.7142d , 0.1564d)}
	    {(-1.8063d , 2.7142d , 0.2567d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8828d , 2.2163d , 0.1269d)}
	    {(-0.8443d , 2.3098d , 0.1215d)}
	    {(-1.8063d , 2.7142d , 0.2567d)}
	    {(-1.8448d , 2.6206d , 0.2621d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8584d , 2.3098d , 0.0212d)}
	    {(-0.8969d , 2.2163d , 0.0266d)}
	    {(-1.8589d , 2.6206d , 0.1618d)}
	    {(-1.8204d , 2.7142d , 0.1564d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.9397d , 2.8838d , 0.0554d)}
	    {(-1.8204d , 2.7142d , 0.1564d)}
	    {(-1.8589d , 2.6206d , 0.1618d)}
	    {(-2.067d , 2.575d , 0.0733d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.72d , 2.3131d , -0.0589d)}
	    {(-0.6892d , 2.3131d , 0.1603d)}
	    {(-0.7734d , 2.1088d , 0.1721d)}
	    {(-0.8042d , 2.1088d , -0.047d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8584d , 2.3098d , 0.0212d)}
	    {(-0.72d , 2.3131d , -0.0589d)}
	    {(-0.8042d , 2.1088d , -0.047d)}
	    {(-0.8969d , 2.2163d , 0.0266d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8828d , 2.2163d , 0.1269d)}
	    {(-0.8969d , 2.2163d , 0.0266d)}
	    {(-0.8042d , 2.1088d , -0.047d)}
	    {(-0.7734d , 2.1088d , 0.1721d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.9397d , 2.8838d , 0.0554d)}
	    {(-1.8931d , 2.8838d , 0.3866d)}
	    {(-1.8063d , 2.7142d , 0.2567d)}
	    {(-1.8204d , 2.7142d , 0.1564d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8063d , 2.7142d , 0.2567d)}
	    {(-1.8931d , 2.8838d , 0.3866d)}
	    {(-2.0205d , 2.575d , 0.4045d)}
	    {(-1.8448d , 2.6206d , 0.2621d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-0.8969d , 2.2163d , 0.0266d)}
	    {(-0.8828d , 2.2163d , 0.1269d)}
	    {(-1.8448d , 2.6206d , 0.2621d)}
	    {(-1.8589d , 2.6206d , 0.1618d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.0205d , 2.575d , 0.4045d)}
	    {(-1.8931d , 2.8838d , 0.3866d)}
	    {(-1.9397d , 2.8838d , 0.0554d)}
	    {(-2.067d , 2.575d , 0.0733d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.8589d , 2.6206d , 0.1618d)}
	    {(-1.8448d , 2.6206d , 0.2621d)}
	    {(-2.0205d , 2.575d , 0.4045d)}
	    {(-2.067d , 2.575d , 0.0733d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.0322d , 2.7609d , 0.1115d)}
	    {(-2.0073d , 2.7609d , 0.323d)}
	    {(-1.866d , 2.6023d , 0.3064d)}
	    {(-1.8908d , 2.6023d , 0.0949d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-2.0075d , 2.5581d , 0.2649d)}
	    {(-2.0189d , 2.5581d , 0.1681d)}
	    {(-1.8908d , 2.6023d , 0.0949d)}
	    {(-1.866d , 2.6023d , 0.3064d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.0322d , 2.7609d , 0.1115d)}
	    {(-1.8908d , 2.6023d , 0.0949d)}
	    {(-2.0189d , 2.5581d , 0.1681d)}
	    {(-2.0836d , 2.6307d , 0.1757d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8211d , 1.9542d , 0.3605d)}
	    {(-2.0723d , 2.6307d , 0.2725d)}
	    {(-2.0836d , 2.6307d , 0.1757d)}
	    {(-2.8325d , 1.9542d , 0.2637d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7564d , 1.8817d , 0.3529d)}
	    {(-2.8211d , 1.9542d , 0.3605d)}
	    {(-2.9973d , 1.934d , 0.4943d)}
	    {(-2.7837d , 1.6943d , 0.4692d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8325d , 1.9542d , 0.2637d)}
	    {(-2.7677d , 1.8817d , 0.2561d)}
	    {(-2.8213d , 1.6943d , 0.1493d)}
	    {(-3.0349d , 1.934d , 0.1744d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-1.866d , 2.6023d , 0.3064d)}
	    {(-2.0073d , 2.7609d , 0.323d)}
	    {(-2.0723d , 2.6307d , 0.2725d)}
	    {(-2.0075d , 2.5581d , 0.2649d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.0723d , 2.6307d , 0.2725d)}
	    {(-2.0073d , 2.7609d , 0.323d)}
	    {(-2.0322d , 2.7609d , 0.1115d)}
	    {(-2.0836d , 2.6307d , 0.1757d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.0075d , 2.5581d , 0.2649d)}
	    {(-2.0723d , 2.6307d , 0.2725d)}
	    {(-2.8211d , 1.9542d , 0.3605d)}
	    {(-2.7564d , 1.8817d , 0.3529d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.0189d , 2.5581d , 0.1681d)}
	    {(-2.0075d , 2.5581d , 0.2649d)}
	    {(-2.7564d , 1.8817d , 0.3529d)}
	    {(-2.7677d , 1.8817d , 0.2561d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8325d , 1.9542d , 0.2637d)}
	    {(-2.0836d , 2.6307d , 0.1757d)}
	    {(-2.0189d , 2.5581d , 0.1681d)}
	    {(-2.7677d , 1.8817d , 0.2561d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.9973d , 1.934d , 0.4943d)}
	    {(-2.8211d , 1.9542d , 0.3605d)}
	    {(-2.8325d , 1.9542d , 0.2637d)}
	    {(-3.0349d , 1.934d , 0.1744d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7677d , 1.8817d , 0.2561d)}
	    {(-2.7564d , 1.8817d , 0.3529d)}
	    {(-2.7837d , 1.6943d , 0.4692d)}
	    {(-2.8213d , 1.6943d , 0.1493d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.7837d , 1.6943d , 0.4692d)}
	    {(-2.9973d , 1.934d , 0.4943d)}
	    {(-3.0349d , 1.934d , 0.1744d)}
	    {(-2.8213d , 1.6943d , 0.1493d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.6385d , 1.7889d , 0.2542d)}
	    {(-2.8239d , 1.7889d , 0.5191d)}
	    {(-2.8988d , 1.6913d , 0.3597d)}
	    {(-2.8139d , 1.6913d , 0.2384d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.0712d , 1.8626d , 0.346d)}
	    {(-2.8239d , 1.7889d , 0.5191d)}
	    {(-2.6385d , 1.7889d , 0.2542d)}
	    {(-2.8857d , 1.8626d , 0.0811d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8988d , 1.6913d , 0.3597d)}
	    {(-2.8239d , 1.7889d , 0.5191d)}
	    {(-3.0712d , 1.8626d , 0.346d)}
	    {(-3.0121d , 1.725d , 0.2804d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8857d , 1.8626d , 0.0811d)}
	    {(-2.6385d , 1.7889d , 0.2542d)}
	    {(-2.8139d , 1.6913d , 0.2384d)}
	    {(-2.9271d , 1.725d , 0.1591d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8139d , 1.6913d , 0.2384d)}
	    {(-2.8988d , 1.6913d , 0.3597d)}
	    {(-3.4521d , 0.7851d , 0.1309d)}
	    {(-3.1945d , 0.7851d , 0.0361d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.9271d , 1.725d , 0.1591d)}
	    {(-2.8139d , 1.6913d , 0.2384d)}
	    {(-3.1945d , 0.7851d , 0.0361d)}
	    {(-3.2584d , 0.8363d , -0.2043d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-2.8988d , 1.6913d , 0.3597d)}
	    {(-3.0121d , 1.725d , 0.2804d)}
	    {(-3.5489d , 0.8363d , -0.1327d)}
	    {(-3.4521d , 0.7851d , 0.1309d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.1945d , 0.7851d , 0.0361d)}
	    {(-3.0934d , 0.6619d , -0.1653d)}
	    {(-3.4937d , 0.1916d , -0.4457d)}
	    {(-3.2584d , 0.8363d , -0.2043d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.3738d , 0.6619d , 0.2351d)}
	    {(-3.4521d , 0.7851d , 0.1309d)}
	    {(-3.5489d , 0.8363d , -0.1327d)}
	    {(-3.7741d , 0.1916d , -0.0452d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.5489d , 0.8363d , -0.1327d)}
	    {(-3.2584d , 0.8363d , -0.2043d)}
	    {(-3.4937d , 0.1916d , -0.4457d)}
	    {(-3.7741d , 0.1916d , -0.0452d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.0712d , 1.8626d , 0.346d)}
	    {(-2.8857d , 1.8626d , 0.0811d)}
	    {(-2.9271d , 1.725d , 0.1591d)}
	    {(-3.0121d , 1.725d , 0.2804d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.1945d , 0.7851d , 0.0361d)}
	    {(-3.4521d , 0.7851d , 0.1309d)}
	    {(-3.3738d , 0.6619d , 0.2351d)}
	    {(-3.0934d , 0.6619d , -0.1653d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.0121d , 1.725d , 0.2804d)}
	    {(-2.9271d , 1.725d , 0.1591d)}
	    {(-3.2584d , 0.8363d , -0.2043d)}
	    {(-3.5489d , 0.8363d , -0.1327d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(-3.0934d , 0.6619d , -0.1653d)}
	    {(-3.3738d , 0.6619d , 0.2351d)}
	    {(-3.7741d , 0.1916d , -0.0452d)}
	    {(-3.4937d , 0.1916d , -0.4457d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.4335d , 1.4698d , 1.8154d)}
	    {(0.4335d , 1.5476d , 1.7967d)}
	    {(0.2065d , 1.5476d , 1.7967d)}
	    {(0.2065d , 1.4698d , 1.8154d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.4335d , 1.5476d , 1.7967d)}
	    {(0.4335d , 1.4698d , 1.8154d)}
	    {(0.4335d , 1.4169d , 1.5947d)}
	    {(0.4335d , 1.4946d , 1.576d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.4335d , 1.4698d , 1.8154d)}
	    {(0.2065d , 1.4698d , 1.8154d)}
	    {(0.2291d , 1.2439d , 1.8465d)}
	    {(0.4109d , 1.2439d , 1.8465d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.4335d , 1.4698d , 1.8154d)}
	    {(0.4109d , 1.2439d , 1.8465d)}
	    {(0.4109d , 1.2014d , 1.6696d)}
	    {(0.4335d , 1.4169d , 1.5947d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.2065d , 1.4946d , 1.576d)}
	    {(0.4335d , 1.4946d , 1.576d)}
	    {(0.4335d , 1.4169d , 1.5947d)}
	    {(0.2065d , 1.4169d , 1.5947d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.4335d , 1.4169d , 1.5947d)}
	    {(0.4109d , 1.2014d , 1.6696d)}
	    {(0.2291d , 1.2014d , 1.6696d)}
	    {(0.2065d , 1.4169d , 1.5947d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.2291d , 1.2439d , 1.8465d)}
	    {(0.0367d , 1.0235d , 1.871d)}
	    {(0.1633d , 1.0235d , 1.871d)}
	    {(0.4109d , 1.2439d , 1.8465d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.4109d , 1.2439d , 1.8465d)}
	    {(0.1633d , 1.0235d , 1.871d)}
	    {(0.1633d , 0.9939d , 1.7478d)}
	    {(0.4109d , 1.2014d , 1.6696d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.0367d , 1.0235d , 1.871d)}
	    {(0.0367d , 0.9939d , 1.7478d)}
	    {(0.1633d , 0.9939d , 1.7478d)}
	    {(0.1633d , 1.0235d , 1.871d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.2065d , 1.5476d , 1.7967d)}
	    {(0.4335d , 1.5476d , 1.7967d)}
	    {(0.4335d , 1.4946d , 1.576d)}
	    {(0.2065d , 1.4946d , 1.576d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.2291d , 1.2439d , 1.8465d)}
	    {(0.2291d , 1.2014d , 1.6696d)}
	    {(0.0367d , 0.9939d , 1.7478d)}
	    {(0.0367d , 1.0235d , 1.871d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.0367d , 0.9939d , 1.7478d)}
	    {(0.2291d , 1.2014d , 1.6696d)}
	    {(0.4109d , 1.2014d , 1.6696d)}
	    {(0.1633d , 0.9939d , 1.7478d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.2065d , 1.4698d , 1.8154d)}
	    {(0.2065d , 1.4169d , 1.5947d)}
	    {(0.2291d , 1.2014d , 1.6696d)}
	    {(0.2291d , 1.2439d , 1.8465d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.2065d , 1.4698d , 1.8154d)}
	    {(0.2065d , 1.5476d , 1.7967d)}
	    {(0.2065d , 1.4946d , 1.576d)}
	    {(0.2065d , 1.4169d , 1.5947d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.5932d , 3.2642d , 0.6708d)}
	    {(1.7991d , 3.0137d , 0.7528d)}
	    {(1.9228d , 3.0137d , 0.442d)}
	    {(1.7168d , 3.2642d , 0.3601d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.7991d , 3.0137d , 0.7528d)}
	    {(1.5932d , 3.2642d , 0.6708d)}
	    {(1.5958d , 3.07d , 0.5464d)}
	    {(1.6582d , 2.9941d , 0.5712d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9228d , 3.0137d , 0.442d)}
	    {(1.7991d , 3.0137d , 0.7528d)}
	    {(1.6582d , 2.9941d , 0.5712d)}
	    {(1.6956d , 2.9941d , 0.4771d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.5958d , 3.07d , 0.5464d)}
	    {(0.8636d , 2.3728d , 0.255d)}
	    {(0.926d , 2.2969d , 0.2798d)}
	    {(1.6582d , 2.9941d , 0.5712d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.5958d , 3.07d , 0.5464d)}
	    {(1.6333d , 3.07d , 0.4523d)}
	    {(0.9011d , 2.3728d , 0.1609d)}
	    {(0.8636d , 2.3728d , 0.255d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.9634d , 2.2969d , 0.1857d)}
	    {(0.926d , 2.2969d , 0.2798d)}
	    {(0.8464d , 2.1621d , 0.3127d)}
	    {(0.9282d , 2.1621d , 0.1071d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.8636d , 2.3728d , 0.255d)}
	    {(0.9011d , 2.3728d , 0.1609d)}
	    {(0.792d , 2.3279d , 0.0529d)}
	    {(0.7102d , 2.3279d , 0.2585d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.9282d , 2.1621d , 0.1071d)}
	    {(0.8464d , 2.1621d , 0.3127d)}
	    {(0.7102d , 2.3279d , 0.2585d)}
	    {(0.792d , 2.3279d , 0.0529d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.5932d , 3.2642d , 0.6708d)}
	    {(1.7168d , 3.2642d , 0.3601d)}
	    {(1.6333d , 3.07d , 0.4523d)}
	    {(1.5958d , 3.07d , 0.5464d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.7168d , 3.2642d , 0.3601d)}
	    {(1.9228d , 3.0137d , 0.442d)}
	    {(1.6956d , 2.9941d , 0.4771d)}
	    {(1.6333d , 3.07d , 0.4523d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.6582d , 2.9941d , 0.5712d)}
	    {(0.926d , 2.2969d , 0.2798d)}
	    {(0.9634d , 2.2969d , 0.1857d)}
	    {(1.6956d , 2.9941d , 0.4771d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.6956d , 2.9941d , 0.4771d)}
	    {(0.9634d , 2.2969d , 0.1857d)}
	    {(0.9011d , 2.3728d , 0.1609d)}
	    {(1.6333d , 3.07d , 0.4523d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.926d , 2.2969d , 0.2798d)}
	    {(0.8636d , 2.3728d , 0.255d)}
	    {(0.7102d , 2.3279d , 0.2585d)}
	    {(0.8464d , 2.1621d , 0.3127d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.9011d , 2.3728d , 0.1609d)}
	    {(0.9634d , 2.2969d , 0.1857d)}
	    {(0.9282d , 2.1621d , 0.1071d)}
	    {(0.792d , 2.3279d , 0.0529d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3478d , 2.3542d , 1.1466d)}
	    {(2.4147d , 2.334d , 1.3575d)}
	    {(2.6298d , 2.334d , 1.1177d)}
	    {(2.4129d , 2.3542d , 1.074d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3478d , 2.3542d , 1.1466d)}
	    {(1.7866d , 3.0307d , 0.643d)}
	    {(1.7381d , 2.9581d , 0.5995d)}
	    {(2.2993d , 2.2817d , 1.1031d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.4129d , 2.3542d , 1.074d)}
	    {(2.3644d , 2.2817d , 1.0305d)}
	    {(1.8032d , 2.9581d , 0.5269d)}
	    {(1.8517d , 3.0307d , 0.5705d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3644d , 2.2817d , 1.0305d)}
	    {(2.2993d , 2.2817d , 1.1031d)}
	    {(1.7381d , 2.9581d , 0.5995d)}
	    {(1.8032d , 2.9581d , 0.5269d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.7866d , 3.0307d , 0.643d)}
	    {(1.7044d , 3.1609d , 0.6469d)}
	    {(1.5985d , 3.0023d , 0.5519d)}
	    {(1.7381d , 2.9581d , 0.5995d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.5985d , 3.0023d , 0.5519d)}
	    {(1.7044d , 3.1609d , 0.6469d)}
	    {(1.8466d , 3.1609d , 0.4884d)}
	    {(1.7407d , 3.0023d , 0.3934d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8466d , 3.1609d , 0.4884d)}
	    {(1.7044d , 3.1609d , 0.6469d)}
	    {(1.7866d , 3.0307d , 0.643d)}
	    {(1.8517d , 3.0307d , 0.5705d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.4147d , 2.334d , 1.3575d)}
	    {(2.3478d , 2.3542d , 1.1466d)}
	    {(2.2993d , 2.2817d , 1.1031d)}
	    {(2.2546d , 2.0943d , 1.2138d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3644d , 2.2817d , 1.0305d)}
	    {(2.4697d , 2.0943d , 0.9741d)}
	    {(2.2546d , 2.0943d , 1.2138d)}
	    {(2.2993d , 2.2817d , 1.1031d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.4129d , 2.3542d , 1.074d)}
	    {(2.6298d , 2.334d , 1.1177d)}
	    {(2.4697d , 2.0943d , 0.9741d)}
	    {(2.3644d , 2.2817d , 1.0305d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.6298d , 2.334d , 1.1177d)}
	    {(2.4147d , 2.334d , 1.3575d)}
	    {(2.2546d , 2.0943d , 1.2138d)}
	    {(2.4697d , 2.0943d , 0.9741d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3478d , 2.3542d , 1.1466d)}
	    {(2.4129d , 2.3542d , 1.074d)}
	    {(1.8517d , 3.0307d , 0.5705d)}
	    {(1.7866d , 3.0307d , 0.643d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.7407d , 3.0023d , 0.3934d)}
	    {(1.8466d , 3.1609d , 0.4884d)}
	    {(1.8517d , 3.0307d , 0.5705d)}
	    {(1.8032d , 2.9581d , 0.5269d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.7407d , 3.0023d , 0.3934d)}
	    {(1.8032d , 2.9581d , 0.5269d)}
	    {(1.7381d , 2.9581d , 0.5995d)}
	    {(1.5985d , 3.0023d , 0.5519d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.5993d , 2.1939d , 1.3628d)}
	    {(2.2844d , 2.2662d , 1.3505d)}
	    {(2.3406d , 2.1147d , 1.3255d)}
	    {(2.4847d , 2.0816d , 1.3312d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3988d , 0.9773d , 1.5213d)}
	    {(1.9226d , 1.0867d , 1.5029d)}
	    {(2.1688d , 1.1598d , 1.4946d)}
	    {(2.3781d , 1.0912d , 1.6583d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.1688d , 1.1598d , 1.4946d)}
	    {(1.9226d , 1.0867d , 1.5029d)}
	    {(1.7886d , 0.5748d , 1.9271d)}
	    {(2.0113d , 1.2231d , 1.6836d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3988d , 0.9773d , 1.5213d)}
	    {(2.3781d , 1.0912d , 1.6583d)}
	    {(2.218d , 1.1499d , 1.8873d)}
	    {(2.2114d , -0.1647d , 1.2154d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.7886d , 0.5748d , 1.9271d)}
	    {(2.2114d , -0.1647d , 1.2154d)}
	    {(2.218d , 1.1499d , 1.8873d)}
	    {(2.0113d , 1.2231d , 1.6836d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.6029d , 2.1577d , 1.0542d)}
	    {(2.4864d , 2.065d , 1.1898d)}
	    {(2.3423d , 2.0981d , 1.1842d)}
	    {(2.2881d , 2.23d , 1.0419d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.5993d , 2.1939d , 1.3628d)}
	    {(2.4847d , 2.0816d , 1.3312d)}
	    {(2.4864d , 2.065d , 1.1898d)}
	    {(2.6029d , 2.1577d , 1.0542d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.2844d , 2.2662d , 1.3505d)}
	    {(2.5993d , 2.1939d , 1.3628d)}
	    {(2.6029d , 2.1577d , 1.0542d)}
	    {(2.2881d , 2.23d , 1.0419d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3406d , 2.1147d , 1.3255d)}
	    {(2.2844d , 2.2662d , 1.3505d)}
	    {(2.2881d , 2.23d , 1.0419d)}
	    {(2.3423d , 2.0981d , 1.1842d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.218d , 1.1499d , 1.8873d)}
	    {(2.3781d , 1.0912d , 1.6583d)}
	    {(2.4864d , 2.065d , 1.1898d)}
	    {(2.4847d , 2.0816d , 1.3312d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.4847d , 2.0816d , 1.3312d)}
	    {(2.3406d , 2.1147d , 1.3255d)}
	    {(2.0113d , 1.2231d , 1.6836d)}
	    {(2.218d , 1.1499d , 1.8873d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.4864d , 2.065d , 1.1898d)}
	    {(2.3781d , 1.0912d , 1.6583d)}
	    {(2.1688d , 1.1598d , 1.4946d)}
	    {(2.3423d , 2.0981d , 1.1842d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.3406d , 2.1147d , 1.3255d)}
	    {(2.3423d , 2.0981d , 1.1842d)}
	    {(2.1688d , 1.1598d , 1.4946d)}
	    {(2.0113d , 1.2231d , 1.6836d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9226d , 1.0867d , 1.5029d)}
	    {(2.3988d , 0.9773d , 1.5213d)}
	    {(2.2114d , -0.1647d , 1.2154d)}
	    {(1.7886d , 0.5748d , 1.9271d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0571d , 2.575d , 0.2151d)}
	    {(1.9285d , 2.8838d , 0.2151d)}
	    {(1.8244d , 2.7142d , 0.0985d)}
	    {(1.8633d , 2.6206d , 0.0985d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0571d , 2.575d , 0.2151d)}
	    {(1.8633d , 2.6206d , 0.0985d)}
	    {(1.8633d , 2.6206d , -0.0028d)}
	    {(2.0571d , 2.575d , -0.1194d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8633d , 2.6206d , 0.0985d)}
	    {(0.8919d , 2.2163d , 0.0985d)}
	    {(0.8919d , 2.2163d , -0.0028d)}
	    {(1.8633d , 2.6206d , -0.0028d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.8919d , 2.2163d , 0.0985d)}
	    {(0.853d , 2.3098d , 0.0985d)}
	    {(0.7048d , 2.3131d , 0.1585d)}
	    {(0.7898d , 2.1088d , 0.1585d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.7048d , 2.3131d , 0.1585d)}
	    {(0.853d , 2.3098d , 0.0985d)}
	    {(0.853d , 2.3098d , -0.0028d)}
	    {(0.7048d , 2.3131d , -0.0628d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.7898d , 2.1088d , 0.1585d)}
	    {(0.7048d , 2.3131d , 0.1585d)}
	    {(0.7048d , 2.3131d , -0.0628d)}
	    {(0.7898d , 2.1088d , -0.0628d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9285d , 2.8838d , 0.2151d)}
	    {(2.0571d , 2.575d , 0.2151d)}
	    {(2.0571d , 2.575d , -0.1194d)}
	    {(1.9285d , 2.8838d , -0.1194d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9285d , 2.8838d , 0.2151d)}
	    {(1.9285d , 2.8838d , -0.1194d)}
	    {(1.8244d , 2.7142d , -0.0028d)}
	    {(1.8244d , 2.7142d , 0.0985d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8633d , 2.6206d , 0.0985d)}
	    {(1.8244d , 2.7142d , 0.0985d)}
	    {(0.853d , 2.3098d , 0.0985d)}
	    {(0.8919d , 2.2163d , 0.0985d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8244d , 2.7142d , -0.0028d)}
	    {(0.853d , 2.3098d , -0.0028d)}
	    {(0.853d , 2.3098d , 0.0985d)}
	    {(1.8244d , 2.7142d , 0.0985d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8244d , 2.7142d , -0.0028d)}
	    {(1.8633d , 2.6206d , -0.0028d)}
	    {(0.8919d , 2.2163d , -0.0028d)}
	    {(0.853d , 2.3098d , -0.0028d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.8919d , 2.2163d , -0.0028d)}
	    {(0.8919d , 2.2163d , 0.0985d)}
	    {(0.7898d , 2.1088d , 0.1585d)}
	    {(0.7898d , 2.1088d , -0.0628d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.853d , 2.3098d , -0.0028d)}
	    {(0.8919d , 2.2163d , -0.0028d)}
	    {(0.7898d , 2.1088d , -0.0628d)}
	    {(0.7048d , 2.3131d , -0.0628d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9285d , 2.8838d , -0.1194d)}
	    {(2.0571d , 2.575d , -0.1194d)}
	    {(1.8633d , 2.6206d , -0.0028d)}
	    {(1.8244d , 2.7142d , -0.0028d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0899d , 2.6307d , 0.0686d)}
	    {(2.8439d , 1.9542d , 0.0686d)}
	    {(2.8439d , 1.9542d , -0.0289d)}
	    {(2.0899d , 2.6307d , -0.0289d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0247d , 2.5581d , 0.0686d)}
	    {(2.0899d , 2.6307d , 0.0686d)}
	    {(2.0313d , 2.7609d , 0.1264d)}
	    {(1.889d , 2.6023d , 0.1264d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0247d , 2.5581d , 0.0686d)}
	    {(2.0247d , 2.5581d , -0.0289d)}
	    {(2.7787d , 1.8817d , -0.0289d)}
	    {(2.7787d , 1.8817d , 0.0686d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0313d , 2.7609d , 0.1264d)}
	    {(2.0313d , 2.7609d , -0.0866d)}
	    {(1.889d , 2.6023d , -0.0866d)}
	    {(1.889d , 2.6023d , 0.1264d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(2.0247d , 2.5581d , 0.0686d)}
	    {(1.889d , 2.6023d , 0.1264d)}
	    {(1.889d , 2.6023d , -0.0866d)}
	    {(2.0247d , 2.5581d , -0.0289d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0345d , 1.934d , -0.1412d)}
	    {(3.0345d , 1.934d , 0.1809d)}
	    {(2.8194d , 1.6943d , 0.1809d)}
	    {(2.8194d , 1.6943d , -0.1412d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.8194d , 1.6943d , 0.1809d)}
	    {(2.7787d , 1.8817d , 0.0686d)}
	    {(2.7787d , 1.8817d , -0.0289d)}
	    {(2.8194d , 1.6943d , -0.1412d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.8439d , 1.9542d , 0.0686d)}
	    {(3.0345d , 1.934d , 0.1809d)}
	    {(3.0345d , 1.934d , -0.1412d)}
	    {(2.8439d , 1.9542d , -0.0289d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0345d , 1.934d , 0.1809d)}
	    {(2.8439d , 1.9542d , 0.0686d)}
	    {(2.7787d , 1.8817d , 0.0686d)}
	    {(2.8194d , 1.6943d , 0.1809d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0313d , 2.7609d , 0.1264d)}
	    {(2.0899d , 2.6307d , 0.0686d)}
	    {(2.0899d , 2.6307d , -0.0289d)}
	    {(2.0313d , 2.7609d , -0.0866d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0247d , 2.5581d , 0.0686d)}
	    {(2.7787d , 1.8817d , 0.0686d)}
	    {(2.8439d , 1.9542d , 0.0686d)}
	    {(2.0899d , 2.6307d , 0.0686d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.8439d , 1.9542d , -0.0289d)}
	    {(3.0345d , 1.934d , -0.1412d)}
	    {(2.8194d , 1.6943d , -0.1412d)}
	    {(2.7787d , 1.8817d , -0.0289d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0899d , 2.6307d , -0.0289d)}
	    {(2.0247d , 2.5581d , -0.0289d)}
	    {(1.889d , 2.6023d , -0.0866d)}
	    {(2.0313d , 2.7609d , -0.0866d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0899d , 2.6307d , -0.0289d)}
	    {(2.8439d , 1.9542d , -0.0289d)}
	    {(2.7787d , 1.8817d , -0.0289d)}
	    {(2.0247d , 2.5581d , -0.0289d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0905d , 1.8626d , 0.0309d)}
	    {(2.8741d , 1.8626d , 0.2712d)}
	    {(2.9247d , 1.725d , 0.1988d)}
	    {(3.0238d , 1.725d , 0.0888d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.7405d , 0.1916d , 0.5048d)}
	    {(3.5063d , 0.8363d , 0.5642d)}
	    {(3.2092d , 0.8363d , 0.5999d)}
	    {(3.4133d , 0.1916d , 0.8681d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.7405d , 0.1916d , 0.5048d)}
	    {(3.4133d , 0.1916d , 0.8681d)}
	    {(3.0502d , 0.6619d , 0.5411d)}
	    {(3.3773d , 0.6619d , 0.1778d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.9247d , 1.725d , 0.1988d)}
	    {(2.8741d , 1.8626d , 0.2712d)}
	    {(2.6498d , 1.7889d , 0.0692d)}
	    {(2.822d , 1.6913d , 0.1063d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0905d , 1.8626d , 0.0309d)}
	    {(3.0238d , 1.725d , 0.0888d)}
	    {(2.921d , 1.6913d , -0.0037d)}
	    {(2.8661d , 1.7889d , -0.1711d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.921d , 1.6913d , -0.0037d)}
	    {(2.822d , 1.6913d , 0.1063d)}
	    {(2.6498d , 1.7889d , 0.0692d)}
	    {(2.8661d , 1.7889d , -0.1711d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0238d , 1.725d , 0.0888d)}
	    {(2.9247d , 1.725d , 0.1988d)}
	    {(3.2092d , 0.8363d , 0.5999d)}
	    {(3.5063d , 0.8363d , 0.5642d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.8741d , 1.8626d , 0.2712d)}
	    {(3.0905d , 1.8626d , 0.0309d)}
	    {(2.8661d , 1.7889d , -0.1711d)}
	    {(2.6498d , 1.7889d , 0.0692d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0238d , 1.725d , 0.0888d)}
	    {(3.5063d , 0.8363d , 0.5642d)}
	    {(3.4423d , 0.7851d , 0.2908d)}
	    {(2.921d , 1.6913d , -0.0037d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.2092d , 0.8363d , 0.5999d)}
	    {(2.9247d , 1.725d , 0.1988d)}
	    {(2.822d , 1.6913d , 0.1063d)}
	    {(3.1751d , 0.7851d , 0.3535d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.822d , 1.6913d , 0.1063d)}
	    {(2.921d , 1.6913d , -0.0037d)}
	    {(3.4423d , 0.7851d , 0.2908d)}
	    {(3.1751d , 0.7851d , 0.3535d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.5063d , 0.8363d , 0.5642d)}
	    {(3.7405d , 0.1916d , 0.5048d)}
	    {(3.3773d , 0.6619d , 0.1778d)}
	    {(3.4423d , 0.7851d , 0.2908d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.4133d , 0.1916d , 0.8681d)}
	    {(3.2092d , 0.8363d , 0.5999d)}
	    {(3.1751d , 0.7851d , 0.3535d)}
	    {(3.0502d , 0.6619d , 0.5411d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.1751d , 0.7851d , 0.3535d)}
	    {(3.4423d , 0.7851d , 0.2908d)}
	    {(3.3773d , 0.6619d , 0.1778d)}
	    {(3.0502d , 0.6619d , 0.5411d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0571d , 2.575d , -0.1849d)}
	    {(1.9285d , 2.8838d , -0.1849d)}
	    {(1.8244d , 2.7142d , -0.3015d)}
	    {(1.8633d , 2.6206d , -0.3015d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0571d , 2.575d , -0.1849d)}
	    {(1.8633d , 2.6206d , -0.3015d)}
	    {(1.8633d , 2.6206d , -0.4028d)}
	    {(2.0571d , 2.575d , -0.5194d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8633d , 2.6206d , -0.3015d)}
	    {(0.8919d , 2.2163d , -0.3015d)}
	    {(0.8919d , 2.2163d , -0.4028d)}
	    {(1.8633d , 2.6206d , -0.4028d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.8919d , 2.2163d , -0.3015d)}
	    {(0.853d , 2.3098d , -0.3015d)}
	    {(0.7048d , 2.3131d , -0.2415d)}
	    {(0.7898d , 2.1088d , -0.2415d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.7048d , 2.3131d , -0.2415d)}
	    {(0.853d , 2.3098d , -0.3015d)}
	    {(0.853d , 2.3098d , -0.4028d)}
	    {(0.7048d , 2.3131d , -0.4628d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.7898d , 2.1088d , -0.2415d)}
	    {(0.7048d , 2.3131d , -0.2415d)}
	    {(0.7048d , 2.3131d , -0.4628d)}
	    {(0.7898d , 2.1088d , -0.4628d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9285d , 2.8838d , -0.1849d)}
	    {(2.0571d , 2.575d , -0.1849d)}
	    {(2.0571d , 2.575d , -0.5194d)}
	    {(1.9285d , 2.8838d , -0.5194d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9285d , 2.8838d , -0.1849d)}
	    {(1.9285d , 2.8838d , -0.5194d)}
	    {(1.8244d , 2.7142d , -0.4028d)}
	    {(1.8244d , 2.7142d , -0.3015d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8633d , 2.6206d , -0.3015d)}
	    {(1.8244d , 2.7142d , -0.3015d)}
	    {(0.853d , 2.3098d , -0.3015d)}
	    {(0.8919d , 2.2163d , -0.3015d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8244d , 2.7142d , -0.4028d)}
	    {(0.853d , 2.3098d , -0.4028d)}
	    {(0.853d , 2.3098d , -0.3015d)}
	    {(1.8244d , 2.7142d , -0.3015d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.8244d , 2.7142d , -0.4028d)}
	    {(1.8633d , 2.6206d , -0.4028d)}
	    {(0.8919d , 2.2163d , -0.4028d)}
	    {(0.853d , 2.3098d , -0.4028d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.8919d , 2.2163d , -0.4028d)}
	    {(0.8919d , 2.2163d , -0.3015d)}
	    {(0.7898d , 2.1088d , -0.2415d)}
	    {(0.7898d , 2.1088d , -0.4628d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(0.853d , 2.3098d , -0.4028d)}
	    {(0.8919d , 2.2163d , -0.4028d)}
	    {(0.7898d , 2.1088d , -0.4628d)}
	    {(0.7048d , 2.3131d , -0.4628d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9285d , 2.8838d , -0.5194d)}
	    {(2.0571d , 2.575d , -0.5194d)}
	    {(1.8633d , 2.6206d , -0.4028d)}
	    {(1.8244d , 2.7142d , -0.4028d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0133d , 2.7064d , -0.3329d)}
	    {(3.0513d , 1.7751d , -0.3329d)}
	    {(3.0513d , 1.7751d , -0.4671d)}
	    {(2.0133d , 2.7064d , -0.4671d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9236d , 2.6065d , -0.3329d)}
	    {(2.0133d , 2.7064d , -0.3329d)}
	    {(1.9326d , 2.8856d , -0.2534d)}
	    {(1.7368d , 2.6673d , -0.2534d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9236d , 2.6065d , -0.3329d)}
	    {(1.9236d , 2.6065d , -0.4671d)}
	    {(2.9616d , 1.6752d , -0.4671d)}
	    {(2.9616d , 1.6752d , -0.3329d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9326d , 2.8856d , -0.2534d)}
	    {(1.9326d , 2.8856d , -0.5466d)}
	    {(1.7368d , 2.6673d , -0.5466d)}
	    {(1.7368d , 2.6673d , -0.2534d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9236d , 2.6065d , -0.3329d)}
	    {(1.7368d , 2.6673d , -0.2534d)}
	    {(1.7368d , 2.6673d , -0.5466d)}
	    {(1.9236d , 2.6065d , -0.4671d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.3137d , 1.7473d , -0.6217d)}
	    {(3.3137d , 1.7473d , -0.1783d)}
	    {(3.0176d , 1.4173d , -0.1783d)}
	    {(3.0176d , 1.4173d , -0.6217d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0176d , 1.4173d , -0.1783d)}
	    {(2.9616d , 1.6752d , -0.3329d)}
	    {(2.9616d , 1.6752d , -0.4671d)}
	    {(3.0176d , 1.4173d , -0.6217d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0513d , 1.7751d , -0.3329d)}
	    {(3.3137d , 1.7473d , -0.1783d)}
	    {(3.3137d , 1.7473d , -0.6217d)}
	    {(3.0513d , 1.7751d , -0.4671d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.3137d , 1.7473d , -0.1783d)}
	    {(3.0513d , 1.7751d , -0.3329d)}
	    {(2.9616d , 1.6752d , -0.3329d)}
	    {(3.0176d , 1.4173d , -0.1783d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9326d , 2.8856d , -0.2534d)}
	    {(2.0133d , 2.7064d , -0.3329d)}
	    {(2.0133d , 2.7064d , -0.4671d)}
	    {(1.9326d , 2.8856d , -0.5466d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(1.9236d , 2.6065d , -0.3329d)}
	    {(2.9616d , 1.6752d , -0.3329d)}
	    {(3.0513d , 1.7751d , -0.3329d)}
	    {(2.0133d , 2.7064d , -0.3329d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.0513d , 1.7751d , -0.4671d)}
	    {(3.3137d , 1.7473d , -0.6217d)}
	    {(3.0176d , 1.4173d , -0.6217d)}
	    {(2.9616d , 1.6752d , -0.4671d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0133d , 2.7064d , -0.4671d)}
	    {(1.9236d , 2.6065d , -0.4671d)}
	    {(1.7368d , 2.6673d , -0.5466d)}
	    {(1.9326d , 2.8856d , -0.5466d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(2.0133d , 2.7064d , -0.4671d)}
	    {(3.0513d , 1.7751d , -0.4671d)}
	    {(2.9616d , 1.6752d , -0.4671d)}
	    {(1.9236d , 2.6065d , -0.4671d)}))))
    (CompoundBody (bodies (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.409d , 1.6955d , -0.1849d)}
	    {(3.3946d , 1.4074d , -0.3015d)}
	    {(3.3946d , 1.4074d , -0.4985d)}
	    {(3.409d , 1.6955d , -0.6151d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.3946d , 1.4074d , -0.3015d)}
	    {(3.409d , 1.6955d , -0.1849d)}
	    {(3.0073d , 1.5412d , -0.1849d)}
	    {(3.2106d , 1.3368d , -0.3015d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.409d , 1.6955d , -0.1849d)}
	    {(3.409d , 1.6955d , -0.6151d)}
	    {(3.0073d , 1.5412d , -0.6151d)}
	    {(3.0073d , 1.5412d , -0.1849d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.3946d , 1.4074d , -0.4985d)}
	    {(3.3946d , 1.4074d , -0.3015d)}
	    {(4.0331d , -0.4538d , -0.1582d)}
	    {(4.2951d , -0.4538d , -0.458d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.2106d , 1.3368d , -0.4985d)}
	    {(3.3946d , 1.4074d , -0.4985d)}
	    {(4.2951d , -0.4538d , -0.458d)}
	    {(3.9883d , -0.5612d , -0.6714d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.2106d , 1.3368d , -0.3015d)}
	    {(3.2106d , 1.3368d , -0.4985d)}
	    {(3.9883d , -0.5612d , -0.6714d)}
	    {(3.7799d , -0.5612d , -0.3715d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(4.4737d , -1.8041d , -0.0747d)}
	    {(3.8235d , -0.8191d , -0.0747d)}
	    {(3.8235d , -0.8191d , -0.7253d)}
	    {(4.4737d , -1.8041d , -0.7253d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.409d , 1.6955d , -0.6151d)}
	    {(3.3946d , 1.4074d , -0.4985d)}
	    {(3.2106d , 1.3368d , -0.4985d)}
	    {(3.0073d , 1.5412d , -0.6151d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.2106d , 1.3368d , -0.3015d)}
	    {(3.0073d , 1.5412d , -0.1849d)}
	    {(3.0073d , 1.5412d , -0.6151d)}
	    {(3.2106d , 1.3368d , -0.4985d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.3946d , 1.4074d , -0.3015d)}
	    {(3.2106d , 1.3368d , -0.3015d)}
	    {(3.7799d , -0.5612d , -0.3715d)}
	    {(4.0331d , -0.4538d , -0.1582d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(4.0331d , -0.4538d , -0.1582d)}
	    {(3.7799d , -0.5612d , -0.3715d)}
	    {(3.8235d , -0.8191d , -0.0747d)}
	    {(4.4737d , -1.8041d , -0.0747d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.8235d , -0.8191d , -0.0747d)}
	    {(3.7799d , -0.5612d , -0.3715d)}
	    {(3.9883d , -0.5612d , -0.6714d)}
	    {(3.8235d , -0.8191d , -0.7253d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(4.2951d , -0.4538d , -0.458d)}
	    {(4.0331d , -0.4538d , -0.1582d)}
	    {(4.4737d , -1.8041d , -0.0747d)}
	    {(4.4737d , -1.8041d , -0.7253d)}))
        (Polygon (color 1.0
	    0.502014
	    0.0)
	  (points {(3.9883d , -0.5612d , -0.6714d)}
	    {(4.2951d , -0.4538d , -0.458d)}
	    {(4.4737d , -1.8041d , -0.7253d)}
	    {(3.8235d , -0.8191d , -0.7253d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.5763d , 3.0622d , 2.6148d)}
	    {(-0.6154d , 3.1519d , 2.5828d)}
	    {(-0.7087d , 3.1225d , 2.6146d)}
	    {(-0.6696d , 3.0327d , 2.6465d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.7087d , 3.1225d , 2.6146d)}
	    {(-0.6154d , 3.1519d , 2.5828d)}
	    {(-0.2422d , 2.8298d , 1.9902d)}
	    {(-0.3555d , 2.8004d , 2.0219d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.5763d , 3.0622d , 2.6148d)}
	    {(-0.6696d , 3.0327d , 2.6465d)}
	    {(-0.3163d , 2.7107d , 2.0538d)}
	    {(-0.2031d , 2.7401d , 2.022d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.2422d , 2.8298d , 1.9902d)}
	    {(-0.2031d , 2.7401d , 2.022d)}
	    {(-0.1141d , 2.6285d , 1.8831d)}
	    {(-0.1703d , 2.7571d , 1.8372d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.3163d , 2.7107d , 2.0538d)}
	    {(-0.248d , 2.5862d , 1.9287d)}
	    {(-0.1141d , 2.6285d , 1.8831d)}
	    {(-0.2031d , 2.7401d , 2.022d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1703d , 2.7571d , 1.8372d)}
	    {(-0.1141d , 2.6285d , 1.8831d)}
	    {(-0.1238d , 2.5443d , 1.7173d)}
	    {(-0.1939d , 2.7049d , 1.6601d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1141d , 2.6285d , 1.8831d)}
	    {(-0.248d , 2.5862d , 1.9287d)}
	    {(-0.291d , 2.4915d , 1.7742d)}
	    {(-0.1238d , 2.5443d , 1.7173d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.248d , 2.5862d , 1.9287d)}
	    {(-0.3042d , 2.7149d , 1.8829d)}
	    {(-0.3612d , 2.6521d , 1.7171d)}
	    {(-0.291d , 2.4915d , 1.7742d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.3612d , 2.6521d , 1.7171d)}
	    {(-0.3729d , 2.6263d , 1.6586d)}
	    {(-0.3028d , 2.4655d , 1.7157d)}
	    {(-0.291d , 2.4915d , 1.7742d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.6154d , 3.1519d , 2.5828d)}
	    {(-0.5763d , 3.0622d , 2.6148d)}
	    {(-0.2031d , 2.7401d , 2.022d)}
	    {(-0.2422d , 2.8298d , 1.9902d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.6696d , 3.0327d , 2.6465d)}
	    {(-0.7087d , 3.1225d , 2.6146d)}
	    {(-0.3555d , 2.8004d , 2.0219d)}
	    {(-0.3163d , 2.7107d , 2.0538d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.3555d , 2.8004d , 2.0219d)}
	    {(-0.2422d , 2.8298d , 1.9902d)}
	    {(-0.1703d , 2.7571d , 1.8372d)}
	    {(-0.3042d , 2.7149d , 1.8829d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.3163d , 2.7107d , 2.0538d)}
	    {(-0.3555d , 2.8004d , 2.0219d)}
	    {(-0.3042d , 2.7149d , 1.8829d)}
	    {(-0.248d , 2.5862d , 1.9287d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.3042d , 2.7149d , 1.8829d)}
	    {(-0.1703d , 2.7571d , 1.8372d)}
	    {(-0.1939d , 2.7049d , 1.6601d)}
	    {(-0.3612d , 2.6521d , 1.7171d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1939d , 2.7049d , 1.6601d)}
	    {(-0.1238d , 2.5443d , 1.7173d)}
	    {(-0.1355d , 2.5183d , 1.6588d)}
	    {(-0.2057d , 2.6791d , 1.6017d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1939d , 2.7049d , 1.6601d)}
	    {(-0.2057d , 2.6791d , 1.6017d)}
	    {(-0.3729d , 2.6263d , 1.6586d)}
	    {(-0.3612d , 2.6521d , 1.7171d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.1238d , 2.5443d , 1.7173d)}
	    {(-0.291d , 2.4915d , 1.7742d)}
	    {(-0.3028d , 2.4655d , 1.7157d)}
	    {(-0.1355d , 2.5183d , 1.6588d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(-0.3729d , 2.6263d , 1.6586d)}
	    {(-0.2057d , 2.6791d , 1.6017d)}
	    {(-0.1355d , 2.5183d , 1.6588d)}
	    {(-0.3028d , 2.4655d , 1.7157d)}))))
    (CompoundBody (bodies (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.9837d , 3.0576d , 2.6201d)}
	    {(0.9446d , 3.1474d , 2.5883d)}
	    {(0.8513d , 3.1179d , 2.62d)}
	    {(0.8904d , 3.0281d , 2.6518d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.9446d , 3.1474d , 2.5883d)}
	    {(0.9837d , 3.0576d , 2.6201d)}
	    {(0.4369d , 2.7366d , 2.0268d)}
	    {(0.3978d , 2.8263d , 1.9951d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.3297d , 2.7539d , 1.842d)}
	    {(0.3978d , 2.8263d , 1.9951d)}
	    {(0.4369d , 2.7366d , 2.0268d)}
	    {(0.3859d , 2.6252d , 1.8877d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.3045d , 2.7969d , 2.0268d)}
	    {(0.1958d , 2.7116d , 1.8876d)}
	    {(0.252d , 2.5828d , 1.9332d)}
	    {(0.3437d , 2.7071d , 2.0585d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.3297d , 2.7539d , 1.842d)}
	    {(0.3859d , 2.6252d , 1.8877d)}
	    {(0.3762d , 2.5413d , 1.7217d)}
	    {(0.3061d , 2.702d , 1.6648d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.1958d , 2.7116d , 1.8876d)}
	    {(0.3297d , 2.7539d , 1.842d)}
	    {(0.3061d , 2.702d , 1.6648d)}
	    {(0.1388d , 2.6491d , 1.7217d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.252d , 2.5828d , 1.9332d)}
	    {(0.209d , 2.4884d , 1.7785d)}
	    {(0.3762d , 2.5413d , 1.7217d)}
	    {(0.3859d , 2.6252d , 1.8877d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.209d , 2.4884d , 1.7785d)}
	    {(0.1388d , 2.6491d , 1.7217d)}
	    {(0.1271d , 2.6234d , 1.6632d)}
	    {(0.1972d , 2.4625d , 1.72d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.8513d , 3.1179d , 2.62d)}
	    {(0.9446d , 3.1474d , 2.5883d)}
	    {(0.3978d , 2.8263d , 1.9951d)}
	    {(0.3045d , 2.7969d , 2.0268d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.9837d , 3.0576d , 2.6201d)}
	    {(0.8904d , 3.0281d , 2.6518d)}
	    {(0.3437d , 2.7071d , 2.0585d)}
	    {(0.4369d , 2.7366d , 2.0268d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.8904d , 3.0281d , 2.6518d)}
	    {(0.8513d , 3.1179d , 2.62d)}
	    {(0.3045d , 2.7969d , 2.0268d)}
	    {(0.3437d , 2.7071d , 2.0585d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.3045d , 2.7969d , 2.0268d)}
	    {(0.3978d , 2.8263d , 1.9951d)}
	    {(0.3297d , 2.7539d , 1.842d)}
	    {(0.1958d , 2.7116d , 1.8876d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.252d , 2.5828d , 1.9332d)}
	    {(0.3859d , 2.6252d , 1.8877d)}
	    {(0.4369d , 2.7366d , 2.0268d)}
	    {(0.3437d , 2.7071d , 2.0585d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.2943d , 2.6763d , 1.6064d)}
	    {(0.3061d , 2.702d , 1.6648d)}
	    {(0.3762d , 2.5413d , 1.7217d)}
	    {(0.3645d , 2.5154d , 1.6632d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.252d , 2.5828d , 1.9332d)}
	    {(0.1958d , 2.7116d , 1.8876d)}
	    {(0.1388d , 2.6491d , 1.7217d)}
	    {(0.209d , 2.4884d , 1.7785d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.1271d , 2.6234d , 1.6632d)}
	    {(0.1388d , 2.6491d , 1.7217d)}
	    {(0.3061d , 2.702d , 1.6648d)}
	    {(0.2943d , 2.6763d , 1.6064d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.3762d , 2.5413d , 1.7217d)}
	    {(0.209d , 2.4884d , 1.7785d)}
	    {(0.1972d , 2.4625d , 1.72d)}
	    {(0.3645d , 2.5154d , 1.6632d)}))
        (Polygon (color 0.0
	    0.0
	    1.0)
	  (points {(0.2943d , 2.6763d , 1.6064d)}
	    {(0.3645d , 2.5154d , 1.6632d)}
	    {(0.1972d , 2.4625d , 1.72d)}
	    {(0.1271d , 2.6234d , 1.6632d)}))))))
'
]

{ #category : #'typical objects chemical' }
JunOpenGL3dObject class >> water [
	"(JunOpenGL3dObject water) show."

	| compoundObject |
	compoundObject := JunOpenGL3dObject 
				compoundFromString: '
   -0.4488   -0.3329   -0.0172 O
   -0.4087    0.6082   -0.0097 H
    0.4369   -0.6082    0.1470 H
	'.
	compoundObject name: 'water'.
	^compoundObject
]

{ #category : #'typical objects misc' }
JunOpenGL3dObject class >> wyvern [
	"(JunOpenGL3dObject wyvern) show."

	^JunOpenGL3dObject loadFrom: '%LST V1.0 List Shape Transmission (Lisp S Expression)
% This file was created by Jun588
% 2004/08/13 06:21:38

(CompoundBody (name . "wyvern")
  (bodies (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.6053d , 1.1751d , -2.8886d)}
        {(7.3593d , -0.6566d , -4.5112d)}
        {(7.4959d , -0.5646d , -4.4558d)}
        {(5.6922d , 1.2671d , -2.8332d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1493d , -3.0299d , 1.2402d)}
        {(0.1434d , -2.9444d , 1.1241d)}
        {(0.243d , -3.0375d , 1.0465d)}
        {(0.2531d , -3.1242d , 1.1617d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2293d , -2.6539d , 1.0525d)}
        {(0.4098d , -2.4531d , 0.771d)}
        {(0.1232d , -2.4261d , 0.6065d)}
        {(-0.0573d , -2.6269d , 0.888d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.6922d , 1.4074d , -3.1582d)}
        {(5.6922d , 1.2671d , -2.8332d)}
        {(7.4959d , -0.5646d , -4.4558d)}
        {(7.4959d , -0.4243d , -4.7808d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1574d , -3.0626d , 1.2861d)}
        {(0.055d , -3.2077d , 1.3838d)}
        {(-0.055d , -3.2077d , 1.3838d)}
        {(-0.1574d , -3.0626d , 1.2861d)}
        {(-0.1198d , -3.0728d , 1.2789d)}
        {(0.1198d , -3.0728d , 1.2789d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1151d , -3.0523d , 1.2502d)}
        {(0.1151d , -3.0523d , 1.2502d)}
        {(0.1198d , -3.0728d , 1.2789d)}
        {(-0.1198d , -3.0728d , 1.2789d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.488d , -2.4014d , 0.965d)}
        {(0.2182d , -2.1885d , 0.9656d)}
        {(0.0904d , -2.2038d , 0.9462d)}
        {(0.0752d , -2.2271d , 0.9381d)}
        {(0.1011d , -2.4014d , 0.965d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.243d , -3.0375d , 1.0465d)}
        {(0.1434d , -2.9444d , 1.1241d)}
        {(0.1649d , -2.8179d , 0.9467d)}
        {(0.2795d , -2.911d , 0.8691d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.7553d , 0.1055d , -3.3906d)}
        {(6.2549d , 0.0203d , -3.8858d)}
        {(5.6053d , 1.1751d , -2.8886d)}
        {(0.8001d , 2.3593d , -1.1741d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.243d , -3.0375d , 1.0465d)}
        {(-0.1993d , -2.7804d , 1.2299d)}
        {(-0.2293d , -2.6539d , 1.0525d)}
        {(-0.2795d , -2.911d , 0.8691d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1434d , -2.9444d , 1.1241d)}
        {(-0.243d , -3.0375d , 1.0465d)}
        {(-0.2795d , -2.911d , 0.8691d)}
        {(-0.1649d , -2.8179d , 0.9467d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0846d , -3.1071d , 0.7121d)}
        {(0.0704d , -3.1471d , 0.7329d)}
        {(0.1409d , -3.2234d , 0.8708d)}
        {(0.1693d , -3.1424d , 0.8315d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0846d , -3.1071d , 0.7121d)}
        {(0.1693d , -3.1424d , 0.8315d)}
        {(0.1693d , -3.1755d , 0.7633d)}
        {(0.0846d , -3.1392d , 0.6434d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.444d , -1.4386d , 0.2205d)}
        {(0.444d , -1.5651d , 0.3978d)}
        {(0.444d , -1.7536d , 0.2634d)}
        {(0.444d , -1.6271d , 0.086d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1409d , -3.2234d , 0.8708d)}
        {(-0.1409d , -3.2234d , 0.8708d)}
        {(-0.1409d , -3.2565d , 0.8026d)}
        {(0.1409d , -3.2565d , 0.8026d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1409d , -3.2234d , 0.8708d)}
        {(0.0704d , -3.1471d , 0.7329d)}
        {(-0.0704d , -3.1471d , 0.7329d)}
        {(-0.1409d , -3.2234d , 0.8708d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2795d , -2.6171d , 0.6652d)}
        {(0.2795d , -2.6171d , 0.6652d)}
        {(0.1649d , -2.8179d , 0.9467d)}
        {(-0.1649d , -2.8179d , 0.9467d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0846d , -3.1392d , 0.6434d)}
        {(0.1693d , -3.1755d , 0.7633d)}
        {(0.2702d , -2.8048d , 0.5833d)}
        {(0.1351d , -2.9564d , 0.5478d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1409d , -3.2565d , 0.8026d)}
        {(-0.1409d , -3.2234d , 0.8708d)}
        {(-0.1693d , -3.1424d , 0.8315d)}
        {(-0.1693d , -3.1755d , 0.7633d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0676d , -3.0114d , 0.9194d)}
        {(0.0843d , -2.8047d , 0.5537d)}
        {(-0.0843d , -2.8047d , 0.5537d)}
        {(-0.0676d , -3.0114d , 0.9194d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.116d , -3.3365d , 0.6379d)}
        {(0.1409d , -3.2565d , 0.8026d)}
        {(-0.1409d , -3.2565d , 0.8026d)}
        {(-0.116d , -3.3365d , 0.6379d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.714d , 0.1565d , -3.4886d)}
        {(5.7553d , 0.1055d , -3.3906d)}
        {(4.8782d , -0.3778d , -3.3053d)}
        {(4.8369d , -0.3267d , -3.4033d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.139d , -1.4106d , -3.3931d)}
        {(5.139d , -1.3638d , -3.5015d)}
        {(4.8369d , -0.3267d , -3.4033d)}
        {(4.8782d , -0.3778d , -3.3053d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3139d , -1.8076d , 0.1371d)}
        {(0.6152d , -2.2523d , 0.4895d)}
        {(0.676d , -2.5094d , 0.3061d)}
        {(0.3139d , -2.1194d , 0.0069d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1693d , -3.1755d , 0.7633d)}
        {(-0.0846d , -3.1392d , 0.6434d)}
        {(-0.1351d , -2.9564d , 0.5478d)}
        {(-0.2702d , -2.8048d , 0.5833d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2795d , -2.911d , 0.8691d)}
        {(-0.2293d , -2.6539d , 1.0525d)}
        {(-0.4098d , -2.4531d , 0.771d)}
        {(-0.4737d , -2.7102d , 0.5876d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2271d , -2.8848d , 0.4186d)}
        {(0.116d , -3.3365d , 0.6379d)}
        {(-0.116d , -3.3365d , 0.6379d)}
        {(-0.2271d , -2.8848d , 0.4186d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1351d , -2.9564d , 0.5478d)}
        {(-0.0843d , -2.8047d , 0.5537d)}
        {(-0.4737d , -2.7102d , 0.5876d)}
        {(-0.2702d , -2.8048d , 0.5833d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1839d , -1.5651d , 0.3978d)}
        {(-0.1493d , -1.6986d , 0.3027d)}
        {(-0.1493d , -1.572d , 0.1253d)}
        {(-0.1839d , -1.4386d , 0.2205d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(4.8782d , -0.3778d , -3.3053d)}
        {(5.7553d , 0.1055d , -3.3906d)}
        {(0.8001d , 2.3593d , -1.1741d)}
        {(0.8722d , 2.2673d , -1.2296d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1839d , -1.5651d , 0.3978d)}
        {(-0.1839d , -1.4386d , 0.2205d)}
        {(-0.444d , -1.4386d , 0.2205d)}
        {(-0.444d , -1.5651d , 0.3978d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3459d , -1.985d , 0.6802d)}
        {(-0.444d , -1.5651d , 0.3978d)}
        {(-0.444d , -1.7536d , 0.2634d)}
        {(-0.3885d , -2.1264d , 0.5793d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.444d , -1.4386d , 0.2205d)}
        {(-0.4326d , -1.4232d , 0.1849d)}
        {(-0.4326d , -1.5962d , 0.0615d)}
        {(-0.444d , -1.6271d , 0.086d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1621d , -1.5457d , 0.0976d)}
        {(-0.4326d , -1.5962d , 0.0615d)}
        {(-0.3738d , -1.2744d , -0.2919d)}
        {(-0.2282d , -1.2449d , -0.2762d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.4326d , -1.5962d , 0.0615d)}
        {(-0.4326d , -1.4232d , 0.1849d)}
        {(-0.3738d , -1.1734d , -0.2382d)}
        {(-0.3738d , -1.2744d , -0.2919d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2453d , -1.1734d , -0.2382d)}
        {(-0.2282d , -1.2449d , -0.2762d)}
        {(-0.2777d , -1.031d , -0.6345d)}
        {(-0.2838d , -1.0054d , -0.621d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2838d , -1.0054d , -0.621d)}
        {(-0.3298d , -1.0054d , -0.621d)}
        {(-0.3738d , -1.1734d , -0.2382d)}
        {(-0.2453d , -1.1734d , -0.2382d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2777d , -1.031d , -0.6345d)}
        {(-0.3298d , -1.0416d , -0.6402d)}
        {(-0.3298d , -1.0054d , -0.621d)}
        {(-0.2838d , -1.0054d , -0.621d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.444d , -1.5651d , 0.3978d)}
        {(-0.444d , -1.4386d , 0.2205d)}
        {(-0.444d , -1.6271d , 0.086d)}
        {(-0.444d , -1.7536d , 0.2634d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3139d , -2.1194d , 0.0069d)}
        {(0.676d , -2.5094d , 0.3061d)}
        {(0.4737d , -2.5634d , 0.2676d)}
        {(0.3139d , -2.3816d , -0.1604d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7279d , 2.4514d , -1.1186d)}
        {(0.5836d , 2.6354d , -1.0077d)}
        {(0.5246d , 2.3125d , -1.2101d)}
        {(0.8132d , 2.168d , -1.2724d)}
        {(0.8722d , 2.2673d , -1.2296d)}
        {(0.8001d , 2.3593d , -1.1741d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1897d , -2.3119d , -0.295d)}
        {(0.3139d , -2.0496d , -0.1276d)}
        {(0.3139d , -2.1194d , 0.0069d)}
        {(0.3139d , -2.3816d , -0.1604d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3139d , -1.8076d , 0.1371d)}
        {(0.3139d , -1.7379d , 0.0026d)}
        {(0.0338d , -1.7379d , 0.0026d)}
        {(0.0d , -1.7379d , 0.0026d)}
        {(-0.0338d , -1.7379d , 0.0026d)}
        {(-0.3139d , -1.7379d , 0.0026d)}
        {(-0.3139d , -1.8076d , 0.1371d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2271d , -2.8848d , 0.4186d)}
        {(-0.2702d , -2.8048d , 0.5833d)}
        {(-0.4737d , -2.7102d , 0.5876d)}
        {(-0.676d , -2.5094d , 0.3061d)}
        {(-0.4737d , -2.5634d , 0.2676d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.0801d , -1.5098d , -3.436d)}
        {(5.0801d , -1.5566d , -3.3276d)}
        {(0.8132d , 2.168d , -1.2724d)}
        {(2.7458d , -0.0506d , -2.7692d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7098d , -2.965d , -1.2985d)}
        {(1.6557d , -2.9819d , -1.2748d)}
        {(1.749d , -3.2373d , -1.294d)}
        {(1.7692d , -3.231d , -1.3028d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.676d , -2.5094d , 0.3061d)}
        {(-0.6152d , -2.2523d , 0.4895d)}
        {(-0.3139d , -1.8076d , 0.1371d)}
        {(-0.3139d , -2.1194d , 0.0069d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6467d , -2.9722d , -1.2884d)}
        {(1.6557d , -2.9819d , -1.2748d)}
        {(1.7098d , -2.965d , -1.2985d)}
        {(1.7008d , -2.9553d , -1.3121d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.8722d , 2.4076d , -1.5546d)}
        {(0.8132d , 2.3083d , -1.5975d)}
        {(0.5246d , 2.4528d , -1.5351d)}
        {(0.5836d , 2.7757d , -1.3327d)}
        {(0.7279d , 2.5917d , -1.4437d)}
        {(0.8001d , 2.4996d , -1.4992d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4761d , -0.1911d , -2.883d)}
        {(0.7751d , 2.152d , -1.3476d)}
        {(0.7751d , 0.4803d , -2.3272d)}
        {(0.7751d , 0.5105d , -2.3972d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3675d , -1.567d , -1.2727d)}
        {(-0.2221d , -1.8138d , -1.3679d)}
        {(-0.1897d , -2.3119d , -0.295d)}
        {(-0.3139d , -2.0496d , -0.1276d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4244d , -0.929d , -1.4905d)}
        {(0.4244d , -1.4928d , -1.5721d)}
        {(0.643d , -1.4203d , -2.087d)}
        {(0.643d , -0.579d , -2.2798d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7751d , 0.4803d , -2.3272d)}
        {(0.8459d , 0.3194d , -2.3405d)}
        {(0.8459d , 0.4786d , -2.6529d)}
        {(0.7751d , 0.5709d , -2.5371d)}
        {(0.7751d , 0.5407d , -2.4671d)}
        {(0.7751d , 0.5105d , -2.3972d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.6398d , -1.8697d , -2.2436d)}
        {(1.1173d , -2.1229d , -2.226d)}
        {(1.2011d , -1.9703d , -2.2526d)}
        {(0.7414d , -1.6848d , -2.2758d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7414d , -1.6848d , -2.2758d)}
        {(0.643d , -1.4203d , -2.087d)}
        {(0.3886d , -1.8754d , -2.0077d)}
        {(0.6398d , -1.8697d , -2.2436d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2565d , -1.7904d , -1.6397d)}
        {(-0.2221d , -1.8138d , -1.3679d)}
        {(-0.3675d , -1.567d , -1.2727d)}
        {(-0.4244d , -1.4928d , -1.5721d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7414d , -1.6848d , -2.2758d)}
        {(1.2011d , -1.9703d , -2.2526d)}
        {(1.2023d , -2.0105d , -2.4501d)}
        {(0.7428d , -1.7336d , -2.5151d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5351d , 0.1869d , -2.4561d)}
        {(0.492d , 0.3194d , -2.3405d)}
        {(0.492d , 0.4786d , -2.6529d)}
        {(0.5351d , 0.3073d , -2.6923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4823d , -0.6905d , -2.5202d)}
        {(0.4549d , -0.6445d , -2.2647d)}
        {(0.643d , -0.579d , -2.2798d)}
        {(0.643d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4244d , -0.929d , -1.4905d)}
        {(0.643d , -0.579d , -2.2798d)}
        {(0.4549d , -0.6445d , -2.2647d)}
        {(0.3215d , -0.579d , -2.2798d)}
        {(0.0755d , -0.579d , -2.2798d)}
        {(0.089d , -0.929d , -1.4905d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.6385d , -1.9144d , -2.5593d)}
        {(1.1162d , -2.1598d , -2.4865d)}
        {(1.1173d , -2.1229d , -2.226d)}
        {(0.6398d , -1.8697d , -2.2436d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.643d , -0.579d , -2.2798d)}
        {(0.643d , -1.4203d , -2.087d)}
        {(0.643d , -1.539d , -2.6789d)}
        {(0.643d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.8027d , 0.3073d , -2.6923d)}
        {(0.4823d , -0.6905d , -2.5202d)}
        {(0.3215d , -0.6905d , -2.5202d)}
        {(0.5351d , 0.3073d , -2.6923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , -0.929d , -1.4905d)}
        {(0.089d , -0.929d , -1.4905d)}
        {(0.0755d , -0.579d , -2.2798d)}
        {(0.0d , -0.579d , -2.2798d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2565d , -1.7904d , -1.6397d)}
        {(-0.3886d , -1.8754d , -2.0077d)}
        {(0.3886d , -1.8754d , -2.0077d)}
        {(0.2565d , -1.7904d , -1.6397d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.643d , -1.539d , -2.6789d)}
        {(0.643d , -1.4203d , -2.087d)}
        {(0.7414d , -1.6848d , -2.2758d)}
        {(0.7428d , -1.7336d , -2.5151d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , -0.579d , -2.2798d)}
        {(-0.066d , -0.579d , -2.2798d)}
        {(-0.0796d , -0.929d , -1.4905d)}
        {(0.0d , -0.929d , -1.4905d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2406d , -3.0019d , -1.324d)}
        {(-1.1555d , -3.26d , -1.3451d)}
        {(-1.1353d , -3.2543d , -1.3543d)}
        {(-1.1866d , -2.9866d , -1.3488d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5629d , 2.1521d , -1.3477d)}
        {(-0.5629d , 0.4803d , -2.3272d)}
        {(-0.5629d , 0.5709d , -2.5371d)}
        {(-0.5629d , 2.2426d , -1.5575d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2551d , -2.9862d , -1.3562d)}
        {(-1.2496d , -2.9919d , -1.3374d)}
        {(-1.1955d , -2.9766d , -1.3623d)}
        {(-1.2085d , -2.973d , -1.3777d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.4244d , -0.929d , -1.4905d)}
        {(-0.0796d , -0.929d , -1.4905d)}
        {(-0.066d , -0.579d , -2.2798d)}
        {(-0.3215d , -0.579d , -2.2798d)}
        {(-0.4823d , -0.579d , -2.2798d)}
        {(-0.643d , -0.579d , -2.2798d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2085d , -2.973d , -1.3777d)}
        {(-1.1955d , -2.9766d , -1.3623d)}
        {(-1.199d , -3.0534d , -1.417d)}
        {(-1.2114d , -3.0392d , -1.4249d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2441d , -3.0787d , -1.3788d)}
        {(-1.2531d , -3.0687d , -1.3922d)}
        {(-1.199d , -3.0534d , -1.417d)}
        {(-1.19d , -3.0634d , -1.4036d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4009d , -3.0206d , -1.2877d)}
        {(-1.4549d , -3.019d , -1.2865d)}
        {(-1.446d , -3.2912d , -1.2829d)}
        {(-1.4258d , -3.2918d , -1.2834d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4009d , -3.0206d , -1.2877d)}
        {(-1.4043d , -3.0974d , -1.3425d)}
        {(-1.4043d , -3.0864d , -1.3579d)}
        {(-1.4009d , -3.0096d , -1.3031d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4258d , -3.2918d , -1.2834d)}
        {(-1.4271d , -3.3204d , -1.3037d)}
        {(-1.4043d , -3.0974d , -1.3425d)}
        {(-1.4009d , -3.0206d , -1.2877d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3224d , -2.9116d , -1.4567d)}
        {(-1.2757d , -2.8984d , -1.4781d)}
        {(-1.282d , -2.8718d , -1.4944d)}
        {(-1.3422d , -2.8889d , -1.4667d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.4823d , -0.579d , -2.2798d)}
        {(-0.3215d , -0.579d , -2.2798d)}
        {(-0.5351d , 0.1869d , -2.4561d)}
        {(-0.8027d , 0.1869d , -2.4561d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2757d , -2.8984d , -1.4781d)}
        {(-1.2085d , -2.973d , -1.3777d)}
        {(-1.2114d , -3.0392d , -1.4249d)}
        {(-1.2787d , -2.9646d , -1.5253d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4515d , -2.9198d , -1.4369d)}
        {(-1.4515d , -3.0024d , -1.3212d)}
        {(-1.4048d , -3.0037d , -1.3222d)}
        {(-1.4048d , -2.9212d , -1.4379d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3422d , -2.8889d , -1.4667d)}
        {(-1.3461d , -2.9744d , -1.5278d)}
        {(-1.3254d , -2.9778d , -1.5039d)}
        {(-1.3224d , -2.9116d , -1.4567d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4544d , -3.0686d , -1.3685d)}
        {(-1.4515d , -3.0024d , -1.3212d)}
        {(-1.4515d , -2.9198d , -1.4369d)}
        {(-1.4544d , -2.986d , -1.4842d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4584d , -3.0847d , -1.3567d)}
        {(-1.4584d , -3.0957d , -1.3413d)}
        {(-1.4549d , -3.019d , -1.2865d)}
        {(-1.4549d , -3.008d , -1.302d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4258d , -3.2918d , -1.2834d)}
        {(-1.446d , -3.2912d , -1.2829d)}
        {(-1.4473d , -3.3198d , -1.3033d)}
        {(-1.4271d , -3.3204d , -1.3037d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.446d , -3.2912d , -1.2829d)}
        {(-1.4549d , -3.019d , -1.2865d)}
        {(-1.4584d , -3.0957d , -1.3413d)}
        {(-1.4473d , -3.3198d , -1.3033d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.199d , -3.0534d , -1.417d)}
        {(-1.2531d , -3.0687d , -1.3922d)}
        {(-1.2581d , -3.0524d , -1.4035d)}
        {(-1.2114d , -3.0392d , -1.4249d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.492d , 0.3194d , -2.3405d)}
        {(0.5629d , 0.4803d , -2.3272d)}
        {(0.5629d , 0.5709d , -2.5371d)}
        {(0.492d , 0.4786d , -2.6529d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2922d , -2.2126d , -2.2244d)}
        {(1.1907d , -2.1862d , -2.1832d)}
        {(1.1902d , -2.2338d , -2.5143d)}
        {(1.2919d , -2.2457d , -2.455d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4244d , -1.4928d , -1.5721d)}
        {(0.2565d , -1.7904d , -1.6397d)}
        {(0.3886d , -1.8754d , -2.0077d)}
        {(0.643d , -1.4203d , -2.087d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5629d , 2.152d , -1.3476d)}
        {(0.5629d , 2.2426d , -1.5575d)}
        {(0.5629d , 0.5709d , -2.5371d)}
        {(0.5629d , 0.4803d , -2.3272d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.492d , 0.3194d , -2.3405d)}
        {(0.8459d , 0.3194d , -2.3405d)}
        {(0.7751d , 0.4803d , -2.3272d)}
        {(0.5629d , 0.4803d , -2.3272d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7751d , 0.5709d , -2.5371d)}
        {(0.7751d , 2.2426d , -1.5575d)}
        {(1.4761d , -0.161d , -2.953d)}
        {(0.7751d , 0.5407d , -2.4671d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4761d , -0.1911d , -2.883d)}
        {(0.7751d , 0.5105d , -2.3972d)}
        {(0.7751d , 0.5407d , -2.4671d)}
        {(1.4761d , -0.161d , -2.953d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.7458d , -0.0506d , -2.7692d)}
        {(1.4761d , -0.1911d , -2.883d)}
        {(1.4761d , -0.161d , -2.953d)}
        {(2.7458d , -0.0039d , -2.8775d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3625d , -2.9603d , -1.4565d)}
        {(1.3159d , -2.9457d , -1.477d)}
        {(1.3226d , -2.9387d , -1.5072d)}
        {(1.3828d , -2.9575d , -1.4808d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2952d , -3.0329d , -1.3546d)}
        {(1.29d , -3.0491d , -1.3432d)}
        {(1.2359d , -3.0321d , -1.3669d)}
        {(1.2486d , -3.0183d , -1.3751d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4948d , -2.8082d , -1.5202d)}
        {(1.4948d , -2.8687d , -1.4354d)}
        {(1.4948d , -2.9438d , -1.4889d)}
        {(1.4948d , -2.8833d , -1.5738d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4413d , -2.9944d , -1.2574d)}
        {(1.445d , -2.9887d , -1.2766d)}
        {(1.445d , -3.0549d , -1.3238d)}
        {(1.4413d , -3.0712d , -1.3122d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3139d , -2.0496d , -0.1276d)}
        {(-0.1897d , -2.3119d , -0.295d)}
        {(-0.3139d , -2.3816d , -0.1604d)}
        {(-0.3139d , -2.1194d , 0.0069d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6467d , -2.9722d , -1.2884d)}
        {(1.6415d , -2.9667d , -1.3074d)}
        {(1.6415d , -3.0329d , -1.3546d)}
        {(1.6467d , -3.0491d , -1.3432d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5246d , 2.3125d , -1.2101d)}
        {(0.5836d , 2.6354d , -1.0077d)}
        {(0.5836d , 2.7757d , -1.3327d)}
        {(0.5246d , 2.4528d , -1.5351d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7692d , -3.2597d , -1.3233d)}
        {(1.7692d , -3.231d , -1.3028d)}
        {(1.749d , -3.2373d , -1.294d)}
        {(1.749d , -3.266d , -1.3144d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7098d , -3.0418d , -1.3533d)}
        {(1.7692d , -3.2597d , -1.3233d)}
        {(1.749d , -3.266d , -1.3144d)}
        {(1.6557d , -3.0587d , -1.3296d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7008d , -2.9553d , -1.3121d)}
        {(1.7098d , -2.965d , -1.2985d)}
        {(1.7098d , -3.0418d , -1.3533d)}
        {(1.7008d , -3.0321d , -1.3669d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6557d , -3.0587d , -1.3296d)}
        {(1.6557d , -2.9819d , -1.2748d)}
        {(1.6467d , -2.9722d , -1.2884d)}
        {(1.6467d , -3.0491d , -1.3432d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6881d , -3.0183d , -1.3751d)}
        {(1.7008d , -3.0321d , -1.3669d)}
        {(1.6467d , -3.0491d , -1.3432d)}
        {(1.6415d , -3.0329d , -1.3546d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.4737d , -2.5634d , 0.2676d)}
        {(-0.676d , -2.5094d , 0.3061d)}
        {(-0.3139d , -2.1194d , 0.0069d)}
        {(-0.3139d , -2.3816d , -0.1604d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4413d , -2.9944d , -1.2574d)}
        {(1.4954d , -2.9944d , -1.2574d)}
        {(1.4917d , -2.9887d , -1.2766d)}
        {(1.445d , -2.9887d , -1.2766d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4954d , -3.0054d , -1.242d)}
        {(1.4413d , -3.0054d , -1.242d)}
        {(1.4583d , -3.2773d , -1.2381d)}
        {(1.4785d , -3.2773d , -1.2381d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4785d , -3.3059d , -1.2585d)}
        {(1.4954d , -3.0822d , -1.2967d)}
        {(1.4954d , -3.0054d , -1.242d)}
        {(1.4785d , -3.2773d , -1.2381d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4954d , -2.9944d , -1.2574d)}
        {(1.4954d , -3.0054d , -1.242d)}
        {(1.4954d , -3.0822d , -1.2967d)}
        {(1.4954d , -3.0712d , -1.3122d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3139d , -2.3816d , -0.1604d)}
        {(-0.3139d , -2.3816d , -0.1604d)}
        {(-0.1897d , -2.3119d , -0.295d)}
        {(0.1897d , -2.3119d , -0.295d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6208d , -2.8794d , -1.4297d)}
        {(1.5742d , -2.894d , -1.4093d)}
        {(1.6415d , -2.9667d , -1.3074d)}
        {(1.6881d , -2.9521d , -1.3279d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4785d , -3.3059d , -1.2585d)}
        {(1.4785d , -3.2773d , -1.2381d)}
        {(1.4583d , -3.2773d , -1.2381d)}
        {(1.4583d , -3.3059d , -1.2585d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4917d , -3.0549d , -1.3238d)}
        {(1.4954d , -3.0712d , -1.3122d)}
        {(1.4413d , -3.0712d , -1.3122d)}
        {(1.445d , -3.0549d , -1.3238d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5539d , -2.8719d , -1.4198d)}
        {(1.6142d , -2.8531d , -1.4462d)}
        {(1.597d , -2.845d , -1.4687d)}
        {(1.5442d , -2.8615d , -1.4455d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6881d , -3.0183d , -1.3751d)}
        {(1.6415d , -3.0329d , -1.3546d)}
        {(1.5742d , -2.9603d , -1.4565d)}
        {(1.6208d , -2.9457d , -1.477d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6142d , -2.8531d , -1.4462d)}
        {(1.6208d , -2.8794d , -1.4297d)}
        {(1.6208d , -2.9457d , -1.477d)}
        {(1.6142d , -2.9387d , -1.5072d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4917d , -2.9887d , -1.2766d)}
        {(1.4917d , -3.0549d , -1.3238d)}
        {(1.4917d , -2.9724d , -1.4395d)}
        {(1.4917d , -2.9061d , -1.3923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5742d , -2.9603d , -1.4565d)}
        {(1.5742d , -2.894d , -1.4093d)}
        {(1.5539d , -2.8719d , -1.4198d)}
        {(1.5539d , -2.9575d , -1.4808d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4917d , -2.9061d , -1.3923d)}
        {(1.4985d , -2.88d , -1.4085d)}
        {(1.4382d , -2.88d , -1.4085d)}
        {(1.445d , -2.9061d , -1.3923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5539d , -2.9575d , -1.4808d)}
        {(1.6142d , -2.9387d , -1.5072d)}
        {(1.6208d , -2.9457d , -1.477d)}
        {(1.5742d , -2.9603d , -1.4565d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.597d , -2.845d , -1.4687d)}
        {(1.6142d , -2.8531d , -1.4462d)}
        {(1.6142d , -2.9387d , -1.5072d)}
        {(1.597d , -2.92d , -1.5222d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.281d , -2.9819d , -1.2748d)}
        {(1.29d , -2.9722d , -1.2884d)}
        {(1.2359d , -2.9553d , -1.3121d)}
        {(1.2269d , -2.965d , -1.2985d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.29d , -2.9722d , -1.2884d)}
        {(1.2952d , -2.9667d , -1.3074d)}
        {(1.2486d , -2.9521d , -1.3279d)}
        {(1.2359d , -2.9553d , -1.3121d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.29d , -3.0491d , -1.3432d)}
        {(1.29d , -2.9722d , -1.2884d)}
        {(1.281d , -2.9819d , -1.2748d)}
        {(1.281d , -3.0587d , -1.3296d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5476d , -2.7917d , -1.5434d)}
        {(1.597d , -2.845d , -1.4687d)}
        {(1.597d , -2.92d , -1.5222d)}
        {(1.5476d , -2.8668d , -1.5969d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5442d , -2.9365d , -1.4991d)}
        {(1.5442d , -2.8615d , -1.4455d)}
        {(1.4948d , -2.8082d , -1.5202d)}
        {(1.4948d , -2.8833d , -1.5738d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2359d , -3.0321d , -1.3669d)}
        {(1.2359d , -2.9553d , -1.3121d)}
        {(1.2486d , -2.9521d , -1.3279d)}
        {(1.2486d , -3.0183d , -1.3751d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5476d , -2.8668d , -1.5969d)}
        {(1.597d , -2.92d , -1.5222d)}
        {(1.5442d , -2.9365d , -1.4991d)}
        {(1.4948d , -2.8833d , -1.5738d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3828d , -2.8719d , -1.4198d)}
        {(1.3625d , -2.894d , -1.4093d)}
        {(1.3625d , -2.9603d , -1.4565d)}
        {(1.3828d , -2.9575d , -1.4808d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3828d , -2.8719d , -1.4198d)}
        {(1.3828d , -2.9575d , -1.4808d)}
        {(1.3926d , -2.9365d , -1.4991d)}
        {(1.3926d , -2.8615d , -1.4455d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4419d , -2.9438d , -1.4889d)}
        {(1.4419d , -2.8687d , -1.4354d)}
        {(1.4419d , -2.8082d , -1.5202d)}
        {(1.4419d , -2.8833d , -1.5738d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3398d , -2.845d , -1.4687d)}
        {(1.3926d , -2.8615d , -1.4455d)}
        {(1.4419d , -2.8082d , -1.5202d)}
        {(1.3891d , -2.7917d , -1.5434d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4948d , -2.9438d , -1.4889d)}
        {(1.4419d , -2.9438d , -1.4889d)}
        {(1.4419d , -2.8833d , -1.5738d)}
        {(1.4948d , -2.8833d , -1.5738d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3159d , -2.8794d , -1.4297d)}
        {(1.3226d , -2.8531d , -1.4462d)}
        {(1.3226d , -2.9387d , -1.5072d)}
        {(1.3159d , -2.9457d , -1.477d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5476d , -2.7917d , -1.5434d)}
        {(1.5476d , -2.8668d , -1.5969d)}
        {(1.5476d , -2.7417d , -1.7722d)}
        {(1.5476d , -2.6667d , -1.7187d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5629d , 2.1521d , -1.3477d)}
        {(-0.5629d , 2.2426d , -1.5575d)}
        {(-0.5335d , 2.4661d , -1.5294d)}
        {(-0.5342d , 2.3267d , -1.2039d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4244d , -1.4928d , -1.5721d)}
        {(0.3675d , -1.567d , -1.2727d)}
        {(0.2221d , -1.8138d , -1.3679d)}
        {(0.2565d , -1.7904d , -1.6397d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3671d , -2.0779d , -2.2479d)}
        {(1.2982d , -1.9929d , -2.2169d)}
        {(1.1907d , -2.1862d , -2.1832d)}
        {(1.2922d , -2.2126d , -2.2244d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0511d , -1.0923d , -1.1382d)}
        {(-0.0796d , -0.929d , -1.4905d)}
        {(-0.4244d , -0.929d , -1.4905d)}
        {(-0.3675d , -1.0923d , -1.1382d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1493d , -1.6986d , 0.3027d)}
        {(0.444d , -1.7536d , 0.2634d)}
        {(0.3139d , -1.8076d , 0.1371d)}
        {(-0.3139d , -1.8076d , 0.1371d)}
        {(-0.444d , -1.7536d , 0.2634d)}
        {(-0.1493d , -1.6986d , 0.3027d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4737d , -2.7102d , 0.5876d)}
        {(0.2795d , -2.6171d , 0.6652d)}
        {(-0.2795d , -2.6171d , 0.6652d)}
        {(-0.4737d , -2.7102d , 0.5876d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0168d , -2.3744d , 0.8004d)}
        {(-0.488d , -2.4014d , 0.965d)}
        {(-0.4098d , -2.4531d , 0.771d)}
        {(-0.1232d , -2.4261d , 0.6065d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1693d , -3.1424d , 0.8315d)}
        {(-0.1409d , -3.2234d , 0.8708d)}
        {(-0.0704d , -3.1471d , 0.7329d)}
        {(-0.0846d , -3.1071d , 0.7121d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.444d , -1.4386d , 0.2205d)}
        {(0.444d , -1.6271d , 0.086d)}
        {(0.4326d , -1.5962d , 0.0615d)}
        {(0.4326d , -1.4232d , 0.1849d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1493d , -1.6986d , 0.3027d)}
        {(0.1839d , -1.5651d , 0.3978d)}
        {(0.1839d , -1.4386d , 0.2205d)}
        {(0.1493d , -1.572d , 0.1253d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1839d , -1.4386d , 0.2205d)}
        {(0.1939d , -1.4232d , 0.1849d)}
        {(0.1621d , -1.5457d , 0.0976d)}
        {(0.1493d , -1.572d , 0.1253d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4326d , -1.5962d , 0.0615d)}
        {(0.1621d , -1.5457d , 0.0976d)}
        {(0.2282d , -1.2449d , -0.2762d)}
        {(0.3738d , -1.2744d , -0.2919d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2453d , -1.1734d , -0.2382d)}
        {(0.2282d , -1.2449d , -0.2762d)}
        {(0.1621d , -1.5457d , 0.0976d)}
        {(0.1939d , -1.4232d , 0.1849d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3738d , -1.2744d , -0.2919d)}
        {(0.2282d , -1.2449d , -0.2762d)}
        {(0.2777d , -1.031d , -0.6345d)}
        {(0.3298d , -1.0416d , -0.6402d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3298d , -1.0054d , -0.621d)}
        {(0.3298d , -1.0416d , -0.6402d)}
        {(0.2777d , -1.031d , -0.6345d)}
        {(0.2838d , -1.0054d , -0.621d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2702d , -2.8048d , 0.5833d)}
        {(0.4737d , -2.7102d , 0.5876d)}
        {(0.0843d , -2.8047d , 0.5537d)}
        {(0.1351d , -2.9564d , 0.5478d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.676d , -2.5094d , 0.3061d)}
        {(0.6152d , -2.2523d , 0.4895d)}
        {(0.4098d , -2.4531d , 0.771d)}
        {(0.4737d , -2.7102d , 0.5876d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0676d , -3.0114d , 0.9194d)}
        {(0.0458d , -3.1778d , 1.0121d)}
        {(0.0733d , -3.2252d , 0.9447d)}
        {(0.1084d , -3.0814d , 0.8197d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0676d , -3.0114d , 0.9194d)}
        {(-0.0676d , -3.0114d , 0.9194d)}
        {(-0.0458d , -3.1778d , 1.0121d)}
        {(0.0458d , -3.1778d , 1.0121d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0573d , -2.6269d , 0.888d)}
        {(-0.2293d , -2.6539d , 1.0525d)}
        {(-0.488d , -2.4014d , 0.965d)}
        {(-0.0168d , -2.3744d , 0.8004d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0573d , -2.6269d , 0.888d)}
        {(-0.0168d , -2.3744d , 0.8004d)}
        {(-0.1232d , -2.4261d , 0.6065d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0676d , -3.0114d , 0.9194d)}
        {(0.1084d , -3.0814d , 0.8197d)}
        {(0.1351d , -2.9564d , 0.5478d)}
        {(0.0843d , -2.8047d , 0.5537d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1153d , -1.985d , 0.6802d)}
        {(0.1839d , -1.5651d , 0.3978d)}
        {(0.1493d , -1.6986d , 0.3027d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1839d , -1.4386d , 0.2205d)}
        {(0.1839d , -1.5651d , 0.3978d)}
        {(0.444d , -1.5651d , 0.3978d)}
        {(0.444d , -1.4386d , 0.2205d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.444d , -1.4386d , 0.2205d)}
        {(0.4326d , -1.4232d , 0.1849d)}
        {(0.1939d , -1.4232d , 0.1849d)}
        {(0.1839d , -1.4386d , 0.2205d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1493d , -1.572d , 0.1253d)}
        {(0.444d , -1.6271d , 0.086d)}
        {(0.444d , -1.7536d , 0.2634d)}
        {(0.1493d , -1.6986d , 0.3027d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4326d , -1.5962d , 0.0615d)}
        {(0.3738d , -1.2744d , -0.2919d)}
        {(0.3738d , -1.1734d , -0.2382d)}
        {(0.4326d , -1.4232d , 0.1849d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4326d , -1.4232d , 0.1849d)}
        {(0.3738d , -1.1734d , -0.2382d)}
        {(0.2453d , -1.1734d , -0.2382d)}
        {(0.1939d , -1.4232d , 0.1849d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3738d , -1.1734d , -0.2382d)}
        {(0.3738d , -1.2744d , -0.2919d)}
        {(0.3298d , -1.0416d , -0.6402d)}
        {(0.3298d , -1.0054d , -0.621d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2838d , -1.0054d , -0.621d)}
        {(0.2453d , -1.1734d , -0.2382d)}
        {(0.3738d , -1.1734d , -0.2382d)}
        {(0.3298d , -1.0054d , -0.621d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2777d , -1.031d , -0.6345d)}
        {(0.2282d , -1.2449d , -0.2762d)}
        {(0.2453d , -1.1734d , -0.2382d)}
        {(0.2838d , -1.0054d , -0.621d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4326d , -1.5962d , 0.0615d)}
        {(0.444d , -1.6271d , 0.086d)}
        {(0.1493d , -1.572d , 0.1253d)}
        {(0.1621d , -1.5457d , 0.0976d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2182d , -2.1885d , 0.9656d)}
        {(-0.0998d , -2.2045d , 0.9473d)}
        {(-0.1153d , -1.985d , 0.6802d)}
        {(-0.3459d , -1.985d , 0.6802d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3139d , -1.8076d , 0.1371d)}
        {(0.444d , -1.7536d , 0.2634d)}
        {(0.3885d , -2.1264d , 0.5793d)}
        {(0.6152d , -2.2523d , 0.4895d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0704d , -3.1471d , 0.7329d)}
        {(0.0704d , -3.1471d , 0.7329d)}
        {(0.0846d , -3.1071d , 0.7121d)}
        {(-0.0846d , -3.1071d , 0.7121d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2293d , -2.6539d , 1.0525d)}
        {(0.0573d , -2.6269d , 0.888d)}
        {(-0.1232d , -2.4261d , 0.6065d)}
        {(-0.4098d , -2.4531d , 0.771d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4737d , -2.5634d , 0.2676d)}
        {(0.676d , -2.5094d , 0.3061d)}
        {(0.4737d , -2.7102d , 0.5876d)}
        {(0.2702d , -2.8048d , 0.5833d)}
        {(0.2271d , -2.8848d , 0.4186d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2702d , -2.8048d , 0.5833d)}
        {(0.1693d , -3.1755d , 0.7633d)}
        {(0.1409d , -3.2565d , 0.8026d)}
        {(0.116d , -3.3365d , 0.6379d)}
        {(0.2271d , -2.8848d , 0.4186d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.6053d , 1.3154d , -3.2137d)}
        {(6.1683d , 0.0175d , -3.9659d)}
        {(5.714d , 0.1565d , -3.4886d)}
        {(0.8001d , 2.4996d , -1.4992d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1084d , -3.0814d , 0.8197d)}
        {(-0.1084d , -3.0814d , 0.8197d)}
        {(-0.1351d , -2.9564d , 0.5478d)}
        {(0.1351d , -2.9564d , 0.5478d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.488d , -2.4014d , 0.965d)}
        {(-0.2182d , -2.1885d , 0.9656d)}
        {(-0.3459d , -1.985d , 0.6802d)}
        {(-0.3885d , -2.1264d , 0.5793d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1084d , -3.0814d , 0.8197d)}
        {(-0.0676d , -3.0114d , 0.9194d)}
        {(-0.0843d , -2.8047d , 0.5537d)}
        {(-0.1351d , -2.9564d , 0.5478d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2795d , -2.911d , 0.8691d)}
        {(-0.4737d , -2.7102d , 0.5876d)}
        {(-0.2795d , -2.6171d , 0.6652d)}
        {(-0.1649d , -2.8179d , 0.9467d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.139d , -1.4106d , -3.3931d)}
        {(4.8782d , -0.3778d , -3.3053d)}
        {(0.8722d , 2.2673d , -1.2296d)}
        {(5.139d , -1.4573d , -3.2848d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3459d , -1.985d , 0.6802d)}
        {(-0.1153d , -1.985d , 0.6802d)}
        {(-0.1839d , -1.5651d , 0.3978d)}
        {(-0.444d , -1.5651d , 0.3978d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4737d , -2.7102d , 0.5876d)}
        {(-0.4737d , -2.7102d , 0.5876d)}
        {(-0.0843d , -2.8047d , 0.5537d)}
        {(0.0843d , -2.8047d , 0.5537d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1409d , -3.2565d , 0.8026d)}
        {(-0.1693d , -3.1755d , 0.7633d)}
        {(-0.2702d , -2.8048d , 0.5833d)}
        {(-0.2271d , -2.8848d , 0.4186d)}
        {(-0.116d , -3.3365d , 0.6379d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3139d , -2.0496d , -0.1276d)}
        {(0.3139d , -1.7379d , 0.0026d)}
        {(0.3139d , -1.8076d , 0.1371d)}
        {(0.3139d , -2.1194d , 0.0069d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3885d , -2.1264d , 0.5793d)}
        {(-0.6152d , -2.2523d , 0.4895d)}
        {(-0.4098d , -2.4531d , 0.771d)}
        {(-0.488d , -2.4014d , 0.965d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.0801d , -1.5566d , -3.3276d)}
        {(5.139d , -1.4573d , -3.2848d)}
        {(0.8722d , 2.2673d , -1.2296d)}
        {(0.8132d , 2.168d , -1.2724d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(4.8369d , -0.3267d , -3.4033d)}
        {(5.139d , -1.3638d , -3.5015d)}
        {(5.139d , -1.317d , -3.6098d)}
        {(0.8722d , 2.4076d , -1.5546d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7279d , 2.4514d , -1.1186d)}
        {(5.6922d , 1.2671d , -2.8332d)}
        {(5.6922d , 1.4074d , -3.1582d)}
        {(0.7279d , 2.5917d , -1.4437d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3139d , -1.8076d , 0.1371d)}
        {(-0.6152d , -2.2523d , 0.4895d)}
        {(-0.3885d , -2.1264d , 0.5793d)}
        {(-0.444d , -1.7536d , 0.2634d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.139d , -1.317d , -3.6098d)}
        {(5.0801d , -1.4163d , -3.6527d)}
        {(0.8132d , 2.3083d , -1.5975d)}
        {(0.8722d , 2.4076d , -1.5546d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7098d , -2.965d , -1.2985d)}
        {(1.7692d , -3.231d , -1.3028d)}
        {(1.7692d , -3.2597d , -1.3233d)}
        {(1.7098d , -3.0418d , -1.3533d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6881d , -2.9521d , -1.3279d)}
        {(1.6415d , -2.9667d , -1.3074d)}
        {(1.6467d , -2.9722d , -1.2884d)}
        {(1.7008d , -2.9553d , -1.3121d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.749d , -3.2373d , -1.294d)}
        {(1.6557d , -2.9819d , -1.2748d)}
        {(1.6557d , -3.0587d , -1.3296d)}
        {(1.749d , -3.266d , -1.3144d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3139d , -2.1194d , 0.0069d)}
        {(-0.3139d , -1.8076d , 0.1371d)}
        {(-0.3139d , -1.7379d , 0.0026d)}
        {(-0.3139d , -2.0496d , -0.1276d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0338d , -1.7379d , 0.0026d)}
        {(0.0d , -1.7379d , 0.0026d)}
        {(0.0d , -1.0923d , -1.1382d)}
        {(-0.0511d , -1.0923d , -1.1382d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2221d , -1.8138d , -1.3679d)}
        {(0.3675d , -1.567d , -1.2727d)}
        {(0.3139d , -2.0496d , -0.1276d)}
        {(0.1897d , -2.3119d , -0.295d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.6044d , 2.6434d , -1.0047d)}
        {(-0.5342d , 2.3267d , -1.2039d)}
        {(-0.5335d , 2.4661d , -1.5294d)}
        {(-0.6037d , 2.7828d , -1.3301d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7751d , 2.2426d , -1.5575d)}
        {(0.8132d , 2.3083d , -1.5975d)}
        {(2.7458d , -0.0039d , -2.8775d)}
        {(1.4761d , -0.161d , -2.953d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7394d , 2.4456d , -1.1215d)}
        {(-0.6044d , 2.6434d , -1.0047d)}
        {(-0.6037d , 2.7828d , -1.3301d)}
        {(-0.7388d , 2.585d , -1.447d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0606d , -1.0923d , -1.1382d)}
        {(0.089d , -0.929d , -1.4905d)}
        {(0.0d , -0.929d , -1.4905d)}
        {(0.0d , -1.0923d , -1.1382d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2221d , -1.8138d , -1.3679d)}
        {(0.1897d , -2.3119d , -0.295d)}
        {(-0.1897d , -2.3119d , -0.295d)}
        {(-0.2221d , -1.8138d , -1.3679d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0511d , -1.0923d , -1.1382d)}
        {(0.0d , -1.0923d , -1.1382d)}
        {(0.0d , -0.929d , -1.4905d)}
        {(-0.0796d , -0.929d , -1.4905d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5808d , -2.5972d , -1.7835d)}
        {(1.5763d , -2.601d , -1.9351d)}
        {(1.3674d , -2.1131d , -2.4228d)}
        {(1.3671d , -2.0779d , -2.2479d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.1907d , -2.1862d , -2.1832d)}
        {(1.2982d , -1.9929d , -2.2169d)}
        {(1.2011d , -1.9703d , -2.2526d)}
        {(1.1173d , -2.1229d , -2.226d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5335d , 2.4661d , -1.5294d)}
        {(-0.8037d , 2.2941d , -1.6036d)}
        {(-0.8739d , 2.3873d , -1.5638d)}
        {(-0.8063d , 2.4861d , -1.5054d)}
        {(-0.7388d , 2.585d , -1.447d)}
        {(-0.6037d , 2.7828d , -1.3301d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3674d , -2.1131d , -2.4228d)}
        {(1.5763d , -2.601d , -1.9351d)}
        {(1.5033d , -2.6533d , -1.9355d)}
        {(1.2919d , -2.2457d , -2.455d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2986d , -2.0435d , -2.4681d)}
        {(1.3674d , -2.1131d , -2.4228d)}
        {(1.2919d , -2.2457d , -2.455d)}
        {(1.1902d , -2.2338d , -2.5143d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5629d , 2.2426d , -1.5575d)}
        {(0.7751d , 2.2426d , -1.5575d)}
        {(0.7751d , 0.5709d , -2.5371d)}
        {(0.5629d , 0.5709d , -2.5371d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.8301d , 0.2524d , -2.4712d)}
        {(0.8459d , 0.3194d , -2.3405d)}
        {(0.492d , 0.3194d , -2.3405d)}
        {(0.5351d , 0.1869d , -2.4561d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.8459d , 0.4786d , -2.6529d)}
        {(0.8459d , 0.3194d , -2.3405d)}
        {(0.8301d , 0.2524d , -2.4712d)}
        {(0.8027d , 0.3073d , -2.6923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3675d , -1.567d , -1.2727d)}
        {(-0.3675d , -1.0923d , -1.1382d)}
        {(-0.4244d , -0.929d , -1.4905d)}
        {(-0.4244d , -1.4928d , -1.5721d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7751d , 0.5709d , -2.5371d)}
        {(0.8459d , 0.4786d , -2.6529d)}
        {(0.492d , 0.4786d , -2.6529d)}
        {(0.5629d , 0.5709d , -2.5371d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4549d , -0.6445d , -2.2647d)}
        {(0.8301d , 0.2524d , -2.4712d)}
        {(0.5351d , 0.1869d , -2.4561d)}
        {(0.3215d , -0.579d , -2.2798d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.8027d , 0.3073d , -2.6923d)}
        {(0.8301d , 0.2524d , -2.4712d)}
        {(0.4549d , -0.6445d , -2.2647d)}
        {(0.4823d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3215d , -0.579d , -2.2798d)}
        {(0.5351d , 0.1869d , -2.4561d)}
        {(0.5351d , 0.3073d , -2.6923d)}
        {(0.3215d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7428d , -1.7336d , -2.5151d)}
        {(1.2023d , -2.0105d , -2.4501d)}
        {(1.1162d , -2.1598d , -2.4865d)}
        {(0.6385d , -1.9144d , -2.5593d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , -0.6905d , -2.5202d)}
        {(0.0d , -0.579d , -2.2798d)}
        {(0.0755d , -0.579d , -2.2798d)}
        {(0.3215d , -0.579d , -2.2798d)}
        {(0.3215d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3886d , -1.9879d , -2.7877d)}
        {(0.6385d , -1.9144d , -2.5593d)}
        {(0.6398d , -1.8697d , -2.2436d)}
        {(0.3886d , -1.8754d , -2.0077d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3886d , -1.9879d , -2.7877d)}
        {(0.643d , -1.539d , -2.6789d)}
        {(0.7428d , -1.7336d , -2.5151d)}
        {(0.6385d , -1.9144d , -2.5593d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2565d , -1.7904d , -1.6397d)}
        {(-0.4244d , -1.4928d , -1.5721d)}
        {(-0.643d , -1.4203d , -2.087d)}
        {(-0.3886d , -1.8754d , -2.0077d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2441d , -3.0787d , -1.3788d)}
        {(-1.2406d , -3.0019d , -1.324d)}
        {(-1.2496d , -2.9919d , -1.3374d)}
        {(-1.2531d , -3.0687d , -1.3922d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2551d , -2.9862d , -1.3562d)}
        {(-1.2581d , -3.0524d , -1.4035d)}
        {(-1.2531d , -3.0687d , -1.3922d)}
        {(-1.2496d , -2.9919d , -1.3374d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5629d , 0.4803d , -2.3272d)}
        {(-0.7751d , 0.4803d , -2.3272d)}
        {(-0.8459d , 0.3194d , -2.3405d)}
        {(-0.492d , 0.3194d , -2.3405d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4009d , -3.0096d , -1.3031d)}
        {(-1.4048d , -3.0037d , -1.3222d)}
        {(-1.4515d , -3.0024d , -1.3212d)}
        {(-1.4549d , -3.008d , -1.302d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4043d , -3.0974d , -1.3425d)}
        {(-1.4271d , -3.3204d , -1.3037d)}
        {(-1.4473d , -3.3198d , -1.3033d)}
        {(-1.4584d , -3.0957d , -1.3413d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4009d , -3.0096d , -1.3031d)}
        {(-1.4043d , -3.0864d , -1.3579d)}
        {(-1.4077d , -3.07d , -1.3695d)}
        {(-1.4048d , -3.0037d , -1.3222d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4043d , -3.0974d , -1.3425d)}
        {(-1.4584d , -3.0957d , -1.3413d)}
        {(-1.4584d , -3.0847d , -1.3567d)}
        {(-1.4043d , -3.0864d , -1.3579d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3422d , -2.8889d , -1.4667d)}
        {(-1.282d , -2.8718d , -1.4944d)}
        {(-1.2994d , -2.8632d , -1.5166d)}
        {(-1.3522d , -2.8782d , -1.4923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2114d , -3.0392d , -1.4249d)}
        {(-1.2581d , -3.0524d , -1.4035d)}
        {(-1.3254d , -2.9778d , -1.5039d)}
        {(-1.2787d , -2.9646d , -1.5253d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4048d , -3.0037d , -1.3222d)}
        {(-1.4077d , -3.07d , -1.3695d)}
        {(-1.4077d , -2.9874d , -1.4851d)}
        {(-1.4048d , -2.9212d , -1.4379d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3461d , -2.9744d , -1.5278d)}
        {(-1.3422d , -2.8889d , -1.4667d)}
        {(-1.3522d , -2.8782d , -1.4923d)}
        {(-1.3555d , -2.9531d , -1.5458d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6602d , -2.9628d , -1.3524d)}
        {(-1.6062d , -2.9813d , -1.3298d)}
        {(-1.6011d , -2.9759d , -1.3489d)}
        {(-1.6477d , -2.9599d , -1.3684d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.643d , -1.4203d , -2.087d)}
        {(-0.7378d , -1.6899d , -2.2687d)}
        {(-0.6363d , -1.8748d , -2.2365d)}
        {(-0.3886d , -1.8754d , -2.0077d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6062d , -2.9813d , -1.3298d)}
        {(-1.6152d , -2.9907d , -1.316d)}
        {(-1.6186d , -3.0675d , -1.3708d)}
        {(-1.6096d , -3.0581d , -1.3846d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6011d , -2.9759d , -1.3489d)}
        {(-1.6062d , -2.9813d , -1.3298d)}
        {(-1.6096d , -3.0581d , -1.3846d)}
        {(-1.6041d , -3.0421d , -1.3961d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4014d , -2.9808d , -1.5153d)}
        {(-1.4616d , -2.979d , -1.514d)}
        {(-1.4577d , -2.9573d , -1.5335d)}
        {(-1.4049d , -2.9589d , -1.5346d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2858d , -2.9574d , -1.5555d)}
        {(-1.2787d , -2.9646d , -1.5253d)}
        {(-1.3254d , -2.9778d , -1.5039d)}
        {(-1.3461d , -2.9744d , -1.5278d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2994d , -2.8632d , -1.5166d)}
        {(-1.282d , -2.8718d , -1.4944d)}
        {(-1.2858d , -2.9574d , -1.5555d)}
        {(-1.3028d , -2.9382d , -1.5701d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4015d , -2.8839d , -1.4811d)}
        {(-1.4543d , -2.8824d , -1.48d)}
        {(-1.4578d , -2.8935d , -1.453d)}
        {(-1.3976d , -2.8952d , -1.4543d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3976d , -2.8952d , -1.4543d)}
        {(-1.4048d , -2.9212d , -1.4379d)}
        {(-1.4077d , -2.9874d , -1.4851d)}
        {(-1.4014d , -2.9808d , -1.5153d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4077d , -3.07d , -1.3695d)}
        {(-1.4544d , -3.0686d , -1.3685d)}
        {(-1.4544d , -2.986d , -1.4842d)}
        {(-1.4077d , -2.9874d , -1.4851d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.643d , -0.561d , -3.3899d)}
        {(0.643d , -0.6905d , -2.5202d)}
        {(0.643d , -1.539d , -2.6789d)}
        {(0.643d , -1.4118d , -3.2444d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4015d , -2.8839d , -1.4811d)}
        {(-1.3976d , -2.8952d , -1.4543d)}
        {(-1.4014d , -2.9808d , -1.5153d)}
        {(-1.4049d , -2.9589d , -1.5346d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3522d , -2.8782d , -1.4923d)}
        {(-1.2994d , -2.8632d , -1.5166d)}
        {(-1.3487d , -2.8085d , -1.5902d)}
        {(-1.4015d , -2.8234d , -1.566d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4015d , -2.8839d , -1.4811d)}
        {(-1.4015d , -2.8234d , -1.566d)}
        {(-1.4543d , -2.8218d , -1.5649d)}
        {(-1.4543d , -2.8824d , -1.48d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4015d , -2.8839d , -1.4811d)}
        {(-1.4049d , -2.9589d , -1.5346d)}
        {(-1.4049d , -2.8984d , -1.6195d)}
        {(-1.4015d , -2.8234d , -1.566d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5339d , -2.9052d , -1.4522d)}
        {(-1.6011d , -2.9759d , -1.3489d)}
        {(-1.6041d , -3.0421d , -1.3961d)}
        {(-1.5369d , -2.9714d , -1.4994d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6096d , -3.0581d , -1.3846d)}
        {(-1.6637d , -3.0395d , -1.4071d)}
        {(-1.6507d , -3.0261d , -1.4156d)}
        {(-1.6041d , -3.0421d , -1.3961d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5805d , -2.8893d , -1.4716d)}
        {(-1.5339d , -2.9052d , -1.4522d)}
        {(-1.5132d , -2.8838d , -1.4631d)}
        {(-1.5734d , -2.8631d , -1.4882d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5037d , -2.8736d , -1.4891d)}
        {(-1.5132d , -2.8838d , -1.4631d)}
        {(-1.517d , -2.9693d , -1.5241d)}
        {(-1.507d , -2.9486d , -1.5426d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4577d , -2.9573d , -1.5335d)}
        {(-1.4543d , -2.8824d , -1.48d)}
        {(-1.4543d , -2.8218d , -1.5649d)}
        {(-1.4577d , -2.8968d , -1.6183d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4823d , -0.6905d , -2.5202d)}
        {(0.643d , -0.6905d , -2.5202d)}
        {(0.643d , -0.561d , -3.3899d)}
        {(0.0d , -0.561d , -3.3899d)}
        {(0.0d , -0.6905d , -2.5202d)}
        {(0.3215d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5105d , -2.7537d , -1.8156d)}
        {(-1.3521d , -2.7584d , -1.819d)}
        {(-1.3521d , -2.8835d , -1.6437d)}
        {(-1.4049d , -2.8984d , -1.6195d)}
        {(-1.4577d , -2.8968d , -1.6183d)}
        {(-1.5105d , -2.8787d , -1.6403d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1871d , -2.1913d , -2.1761d)}
        {(-1.1137d , -2.128d , -2.2188d)}
        {(-1.1976d , -1.9754d , -2.2454d)}
        {(-1.2946d , -1.998d , -2.2098d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.6349d , -1.9195d , -2.5521d)}
        {(-0.6363d , -1.8748d , -2.2365d)}
        {(-1.1137d , -2.128d , -2.2188d)}
        {(-1.1126d , -2.1649d , -2.4793d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1871d , -2.1913d , -2.1761d)}
        {(-1.2946d , -1.998d , -2.2098d)}
        {(-1.3635d , -2.083d , -2.2407d)}
        {(-1.2886d , -2.2177d , -2.2172d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1976d , -1.9754d , -2.2454d)}
        {(-0.7378d , -1.6899d , -2.2687d)}
        {(-0.7392d , -1.7387d , -2.508d)}
        {(-1.1987d , -2.0156d , -2.4429d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2886d , -2.2177d , -2.2172d)}
        {(-1.4219d , -2.6203d , -1.8312d)}
        {(-1.4504d , -2.6497d , -1.9308d)}
        {(-1.2883d , -2.2508d , -2.4479d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1867d , -2.2388d , -2.5071d)}
        {(-1.1871d , -2.1913d , -2.1761d)}
        {(-1.2886d , -2.2177d , -2.2172d)}
        {(-1.2883d , -2.2508d , -2.4479d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2883d , -2.2508d , -2.4479d)}
        {(-1.4504d , -2.6497d , -1.9308d)}
        {(-1.6362d , -2.6756d , -1.8581d)}
        {(-1.3638d , -2.1182d , -2.4156d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.6349d , -1.9195d , -2.5521d)}
        {(-1.1126d , -2.1649d , -2.4793d)}
        {(-1.1987d , -2.0156d , -2.4429d)}
        {(-0.7392d , -1.7387d , -2.508d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7392d , -1.7387d , -2.508d)}
        {(-0.7378d , -1.6899d , -2.2687d)}
        {(-0.643d , -1.4203d , -2.087d)}
        {(-0.643d , -1.539d , -2.6789d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3886d , -1.8754d , -2.0077d)}
        {(-0.6363d , -1.8748d , -2.2365d)}
        {(-0.6349d , -1.9195d , -2.5521d)}
        {(-0.3886d , -1.9879d , -2.7877d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3886d , -1.8706d , -3.1907d)}
        {(0.3886d , -1.9879d , -2.7877d)}
        {(-0.3886d , -1.9879d , -2.7877d)}
        {(-0.3886d , -1.8706d , -3.1907d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.643d , -1.4118d , -3.2444d)}
        {(0.3886d , -1.8706d , -3.1907d)}
        {(0.5469d , -2.1517d , -3.6534d)}
        {(0.4728d , -1.0179d , -4.0452d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3215d , -0.6905d , -2.5202d)}
        {(0.0d , -0.6905d , -2.5202d)}
        {(0.0d , -0.561d , -3.3899d)}
        {(-0.643d , -0.561d , -3.3899d)}
        {(-0.643d , -0.6905d , -2.5202d)}
        {(-0.4823d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.643d , -1.4118d , -3.2444d)}
        {(0.4728d , -1.0179d , -4.0452d)}
        {(0.9049d , -0.4747d , -4.4675d)}
        {(0.643d , -0.561d , -3.3899d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5469d , -2.1517d , -3.6534d)}
        {(0.3886d , -1.8706d , -3.1907d)}
        {(-0.3886d , -1.8706d , -3.1907d)}
        {(-0.5469d , -2.1517d , -3.6534d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , -0.561d , -3.3899d)}
        {(0.643d , -0.561d , -3.3899d)}
        {(0.9049d , -0.4747d , -4.4675d)}
        {(0.0d , -0.1393d , -4.3123d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.0057d , -0.8729d , -5.3919d)}
        {(0.9428d , -1.2233d , -3.7963d)}
        {(1.2574d , -1.8246d , -3.8354d)}
        {(1.4754d , -2.0221d , -4.7108d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3391d , -2.2215d , -3.6284d)}
        {(0.9523d , -2.4159d , -3.5659d)}
        {(1.1174d , -2.9846d , -5.0044d)}
        {(1.5307d , -2.6045d , -4.7853d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.643d , -0.561d , -3.3899d)}
        {(0.0d , -0.561d , -3.3899d)}
        {(0.0d , -0.1393d , -4.3123d)}
        {(-0.9049d , -0.4747d , -4.4675d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2574d , -1.8246d , -3.8354d)}
        {(-0.7513d , -2.2463d , -3.6221d)}
        {(-0.9402d , -1.2223d , -3.8006d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6445d , -1.9195d , -5.9788d)}
        {(1.4754d , -2.0221d , -4.7108d)}
        {(1.5307d , -2.6045d , -4.7853d)}
        {(1.1174d , -2.9846d , -5.0044d)}
        {(1.324d , -2.5686d , -5.835d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 0.4392d , -5.7931d)}
        {(0.0d , 0.11d , -5.0229d)}
        {(0.9049d , -0.155d , -5.1492d)}
        {(0.5681d , 0.1619d , -5.9155d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5469d , -2.1517d , -3.6534d)}
        {(-0.5469d , -2.1517d , -3.6534d)}
        {(-0.5469d , -2.3243d , -5.6472d)}
        {(0.5469d , -2.3243d , -5.6472d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3391d , -2.2215d , -3.6284d)}
        {(-1.2574d , -1.8246d , -3.8354d)}
        {(-1.4754d , -2.0221d , -4.7108d)}
        {(-1.5307d , -2.6045d , -4.7853d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5469d , -2.3243d , -5.6472d)}
        {(0.3434d , -1.2953d , -6.6027d)}
        {(0.5681d , -0.9639d , -6.3552d)}
        {(0.5614d , -0.8193d , -5.476d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 0.4392d , -5.7931d)}
        {(0.5681d , 0.1619d , -5.9155d)}
        {(0.3326d , 0.5881d , -6.881d)}
        {(0.0d , 0.8654d , -6.7586d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5681d , 0.1619d , -5.9155d)}
        {(0.5681d , -0.9639d , -6.3552d)}
        {(0.3326d , 0.0228d , -7.3103d)}
        {(0.3326d , 0.5881d , -6.881d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 0.4392d , -5.7931d)}
        {(0.0d , 0.8654d , -6.7586d)}
        {(-0.3326d , 0.5881d , -6.881d)}
        {(-0.5681d , 0.1619d , -5.9155d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5469d , -2.3243d , -5.6472d)}
        {(-0.5469d , -2.3243d , -5.6472d)}
        {(-0.4452d , -1.8098d , -6.1249d)}
        {(-0.3434d , -1.2953d , -6.6027d)}
        {(0.3434d , -1.2953d , -6.6027d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5469d , -2.3243d , -5.6472d)}
        {(-0.5598d , -0.8202d , -5.4758d)}
        {(-0.5681d , -0.9639d , -6.3552d)}
        {(-0.3434d , -1.2953d , -6.6027d)}
        {(-0.4452d , -1.8098d , -6.1249d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5681d , -0.9639d , -6.3552d)}
        {(0.3434d , -1.2953d , -6.6027d)}
        {(0.201d , -0.0918d , -7.5348d)}
        {(0.3326d , 0.0228d , -7.3103d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 1.3159d , -7.666d)}
        {(0.0d , 0.8654d , -6.7586d)}
        {(0.3326d , 0.5881d , -6.881d)}
        {(0.3326d , 1.3159d , -7.666d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3326d , 0.5881d , -6.881d)}
        {(0.3326d , 0.0228d , -7.3103d)}
        {(0.3326d , 0.7506d , -8.0952d)}
        {(0.3326d , 1.3159d , -7.666d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5681d , -0.9639d , -6.3552d)}
        {(-0.3326d , 0.0228d , -7.3103d)}
        {(-0.201d , -0.0918d , -7.5348d)}
        {(-0.3434d , -1.2953d , -6.6027d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3326d , 0.0228d , -7.3103d)}
        {(-0.3326d , 0.5881d , -6.881d)}
        {(-0.3326d , 1.3159d , -7.666d)}
        {(-0.3326d , 0.7506d , -8.0952d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 1.3159d , -7.666d)}
        {(0.3326d , 1.3159d , -7.666d)}
        {(0.2377d , 1.8966d , -8.5229d)}
        {(0.0d , 1.8966d , -8.5229d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.201d , -0.0918d , -7.5348d)}
        {(-0.3326d , 0.0228d , -7.3103d)}
        {(-0.3326d , 0.7506d , -8.0952d)}
        {(-0.201d , 0.636d , -8.3198d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2377d , 1.8966d , -8.5229d)}
        {(-0.3326d , 1.3159d , -7.666d)}
        {(0.0d , 1.3159d , -7.666d)}
        {(0.0d , 1.8966d , -8.5229d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 2.3357d , -9.0752d)}
        {(0.0d , 1.8966d , -8.5229d)}
        {(0.2377d , 1.8966d , -8.5229d)}
        {(0.2051d , 2.3357d , -9.0752d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2377d , 1.8966d , -8.5229d)}
        {(0.0d , 1.8966d , -8.5229d)}
        {(0.0d , 2.3357d , -9.0752d)}
        {(-0.205d , 2.3357d , -9.0752d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 2.3357d , -9.0752d)}
        {(0.2051d , 2.3357d , -9.0752d)}
        {(0.1741d , 3.1239d , -9.5416d)}
        {(0.0d , 3.1239d , -9.5416d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2051d , 2.3357d , -9.0752d)}
        {(0.2051d , 1.9752d , -9.3268d)}
        {(0.1741d , 2.8174d , -9.7546d)}
        {(0.1741d , 3.1239d , -9.5416d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0541d , 6.7328d , -10.0201d)}
        {(0.0d , 6.7328d , -10.0201d)}
        {(0.0d , 4.9985d , -10.0667d)}
        {(0.1095d , 4.9985d , -10.0667d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1437d , 1.4138d , -8.9938d)}
        {(-0.2377d , 1.479d , -8.8151d)}
        {(-0.205d , 1.9752d , -9.3268d)}
        {(-0.124d , 1.9276d , -9.4929d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.137d , 3.9409d , -9.8983d)}
        {(0.1095d , 4.9985d , -10.0667d)}
        {(0.0d , 4.9985d , -10.0667d)}
        {(0.0d , 3.9409d , -9.8983d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.137d , 3.6992d , -10.0651d)}
        {(0.137d , 3.9409d , -9.8983d)}
        {(0.1741d , 3.1239d , -9.5416d)}
        {(0.1741d , 2.8174d , -9.7546d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 6.7328d , -10.0201d)}
        {(-0.0541d , 6.7328d , -10.0201d)}
        {(-0.1095d , 4.9985d , -10.0667d)}
        {(0.0d , 4.9985d , -10.0667d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1741d , 3.1239d , -9.5416d)}
        {(-0.1741d , 2.8174d , -9.7546d)}
        {(-0.205d , 1.9752d , -9.3268d)}
        {(-0.205d , 2.3357d , -9.0752d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1741d , 3.1239d , -9.5416d)}
        {(0.0d , 3.1239d , -9.5416d)}
        {(0.0d , 3.9409d , -9.8983d)}
        {(-0.137d , 3.9409d , -9.8983d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 3.9409d , -9.8983d)}
        {(0.0d , 4.9985d , -10.0667d)}
        {(-0.1095d , 4.9985d , -10.0667d)}
        {(-0.137d , 3.9409d , -9.8983d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1095d , 4.8047d , -10.1993d)}
        {(0.1095d , 4.9985d , -10.0667d)}
        {(0.137d , 3.9409d , -9.8983d)}
        {(0.137d , 3.6992d , -10.0651d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1095d , 4.9985d , -10.0667d)}
        {(-0.0541d , 6.7328d , -10.0201d)}
        {(-0.0541d , 6.6352d , -10.0842d)}
        {(-0.1095d , 4.8047d , -10.1993d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1052d , 2.7865d , -9.9089d)}
        {(0.124d , 1.9276d , -9.4929d)}
        {(-0.124d , 1.9276d , -9.4929d)}
        {(-0.1052d , 2.7865d , -9.9089d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1741d , 2.8174d , -9.7546d)}
        {(0.1052d , 2.7865d , -9.9089d)}
        {(0.0828d , 3.6881d , -10.2052d)}
        {(0.137d , 3.6992d , -10.0651d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.205d , 1.9752d , -9.3268d)}
        {(-0.1741d , 2.8174d , -9.7546d)}
        {(-0.1052d , 2.7865d , -9.9089d)}
        {(-0.124d , 1.9276d , -9.4929d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0662d , 4.8084d , -10.3289d)}
        {(0.1095d , 4.8047d , -10.1993d)}
        {(0.137d , 3.6992d , -10.0651d)}
        {(0.0828d , 3.6881d , -10.2052d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0541d , 6.6352d , -10.0842d)}
        {(-0.0327d , 6.6685d , -10.1926d)}
        {(-0.0662d , 4.8084d , -10.3289d)}
        {(-0.1095d , 4.8047d , -10.1993d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0327d , 6.6685d , -10.1926d)}
        {(0.0327d , 6.6685d , -10.1926d)}
        {(0.0662d , 4.8084d , -10.3289d)}
        {(-0.0662d , 4.8084d , -10.3289d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1741d , 2.8174d , -9.7546d)}
        {(-0.137d , 3.6992d , -10.0651d)}
        {(-0.0828d , 3.6881d , -10.2052d)}
        {(-0.1052d , 2.7865d , -9.9089d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0662d , 4.8084d , -10.3289d)}
        {(0.0828d , 3.6881d , -10.2052d)}
        {(-0.0828d , 3.6881d , -10.2052d)}
        {(-0.0662d , 4.8084d , -10.3289d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5469d , -2.1517d , -3.6534d)}
        {(-0.7513d , -2.2463d , -3.6221d)}
        {(-0.6822d , -2.2853d , -5.7736d)}
        {(-0.5469d , -2.3243d , -5.6472d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.6822d , -2.2853d , -5.7736d)}
        {(-1.1174d , -2.9846d , -5.0044d)}
        {(-1.331d , -2.5715d , -5.8359d)}
        {(-1.0398d , -2.4363d , -5.927d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.0462d , -0.8901d , -5.3892d)}
        {(-1.3603d , -1.7872d , -6.0707d)}
        {(-1.6516d , -1.9224d , -5.9797d)}
        {(-1.4754d , -2.0221d , -4.7108d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8113d , -1.5786d , -7.4213d)}
        {(-1.331d , -2.5715d , -5.8359d)}
        {(-1.6516d , -1.9224d , -5.9797d)}
        {(-2.0393d , -1.1639d , -7.5537d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6516d , -1.9224d , -5.9797d)}
        {(-1.3603d , -1.7872d , -6.0707d)}
        {(-1.8309d , -1.0736d , -7.6227d)}
        {(-2.0393d , -1.1639d , -7.5537d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.1424d , -0.9897d , -7.6083d)}
        {(-1.934d , -0.8993d , -7.6773d)}
        {(-1.9651d , -0.9803d , -7.8771d)}
        {(-2.1735d , -1.0706d , -7.8082d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6029d , -1.4883d , -7.4902d)}
        {(-1.8113d , -1.5786d , -7.4213d)}
        {(-2.1857d , -1.8277d , -8.1945d)}
        {(-2.0374d , -1.8162d , -8.3606d)}
        {(-1.8632d , -1.7809d , -8.4087d)}
        {(-1.6631d , -1.7219d , -8.3388d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.2467d , -1.6227d , -8.358d)}
        {(-2.2825d , -1.6556d , -8.5215d)}
        {(-2.0732d , -1.8491d , -8.5241d)}
        {(-2.0374d , -1.8162d , -8.3606d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8991d , -1.8138d , -8.5721d)}
        {(-2.026d , -1.8062d , -8.794d)}
        {(-2.1076d , -1.7118d , -8.6871d)}
        {(-2.0829d , -1.6152d , -8.5689d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.1502d , -1.6498d , -8.927d)}
        {(-2.026d , -1.8062d , -8.794d)}
        {(-2.1326d , -1.8291d , -8.7685d)}
        {(-2.1902d , -1.6598d , -8.9158d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.1902d , -1.6598d , -8.9158d)}
        {(-2.1326d , -1.8291d , -8.7685d)}
        {(-2.2308d , -1.7329d , -8.6634d)}
        {(-2.2283d , -1.6218d , -8.8773d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.0703d , -1.2449d , -7.7537d)}
        {(-1.8619d , -1.1546d , -7.8226d)}
        {(-1.8216d , -1.5181d , -8.3348d)}
        {(-2.0471d , -1.5823d , -8.4054d)}
        {(-2.2467d , -1.6227d , -8.358d)}
        {(-2.4205d , -1.6394d , -8.1926d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.0374d , -1.8162d , -8.3606d)}
        {(-2.1857d , -1.8277d , -8.1945d)}
        {(-2.2885d , -1.9331d , -8.2877d)}
        {(-2.1402d , -1.9216d , -8.4538d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.2467d , -1.6227d , -8.358d)}
        {(-2.0374d , -1.8162d , -8.3606d)}
        {(-2.1402d , -1.9216d , -8.4538d)}
        {(-2.3495d , -1.7282d , -8.4513d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.5233d , -1.7448d , -8.2858d)}
        {(-2.3495d , -1.7282d , -8.4513d)}
        {(-2.4067d , -1.8727d , -8.4793d)}
        {(-2.5194d , -1.8796d , -8.3852d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.5194d , -1.8796d , -8.3852d)}
        {(-2.4067d , -1.8727d , -8.4793d)}
        {(-2.5939d , -1.8828d , -8.6285d)}
        {(-2.6407d , -1.8846d , -8.5963d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.4629d , -2.0287d , -8.4651d)}
        {(-2.5194d , -1.8796d , -8.3852d)}
        {(-2.6407d , -1.8846d , -8.5963d)}
        {(-2.6153d , -1.9423d , -8.6231d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.5939d , -1.8828d , -8.6285d)}
        {(-2.4067d , -1.8727d , -8.4793d)}
        {(-2.3695d , -2.015d , -8.5631d)}
        {(-2.5836d , -1.9361d , -8.6641d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.4629d , -2.0287d , -8.4651d)}
        {(-2.6153d , -1.9423d , -8.6231d)}
        {(-2.5836d , -1.9361d , -8.6641d)}
        {(-2.3695d , -2.015d , -8.5631d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6095d , -1.6821d , -8.4993d)}
        {(-1.6131d , -1.5773d , -8.7367d)}
        {(-1.7289d , -1.5206d , -8.6399d)}
        {(-1.7679d , -1.4783d , -8.4954d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8216d , -1.5181d , -8.3348d)}
        {(-1.7679d , -1.4783d , -8.4954d)}
        {(-1.9934d , -1.5425d , -8.566d)}
        {(-2.0471d , -1.5823d , -8.4054d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8095d , -1.7411d , -8.5693d)}
        {(-1.9934d , -1.5425d , -8.566d)}
        {(-1.8649d , -1.5604d , -8.6851d)}
        {(-1.7348d , -1.6085d , -8.7821d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8649d , -1.5604d , -8.6851d)}
        {(-1.7289d , -1.5206d , -8.6399d)}
        {(-1.7376d , -1.3544d , -8.8046d)}
        {(-1.7893d , -1.3713d , -8.8208d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6934d , -1.3778d , -8.8404d)}
        {(-1.6131d , -1.5773d , -8.7367d)}
        {(-1.7348d , -1.6085d , -8.7821d)}
        {(-1.7398d , -1.3879d , -8.8589d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.7348d , -1.6085d , -8.7821d)}
        {(-1.8649d , -1.5604d , -8.6851d)}
        {(-1.7893d , -1.3713d , -8.8208d)}
        {(-1.7398d , -1.3879d , -8.8589d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7513d , -2.2463d , -3.6221d)}
        {(0.5469d , -2.1517d , -3.6534d)}
        {(0.5469d , -2.3243d , -5.6472d)}
        {(0.639d , -2.2671d , -5.7806d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.324d , -2.5686d , -5.835d)}
        {(1.1174d , -2.9846d , -5.0044d)}
        {(0.639d , -2.2671d , -5.7806d)}
        {(1.0037d , -2.421d , -5.9348d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6445d , -1.9195d , -5.9788d)}
        {(1.324d , -2.5686d , -5.835d)}
        {(1.7813d , -1.5325d , -7.3272d)}
        {(1.9988d , -1.1131d , -7.4533d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3242d , -1.7719d , -6.0786d)}
        {(1.6445d , -1.9195d , -5.9788d)}
        {(1.9988d , -1.1131d , -7.4533d)}
        {(1.7873d , -1.0168d , -7.5238d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.9988d , -1.1131d , -7.4533d)}
        {(2.0966d , -0.9365d , -7.5054d)}
        {(1.885d , -0.8402d , -7.5759d)}
        {(1.7873d , -1.0168d , -7.5238d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.0037d , -2.421d , -5.9348d)}
        {(1.3242d , -1.7719d , -6.0786d)}
        {(1.7873d , -1.0168d , -7.5238d)}
        {(1.5698d , -1.4362d , -7.3976d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.1285d , -1.0136d , -7.7067d)}
        {(2.0307d , -1.1902d , -7.6546d)}
        {(1.8192d , -1.0938d , -7.7251d)}
        {(1.917d , -0.9173d , -7.7771d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.4546d , -1.682d , -8.2128d)}
        {(2.3806d , -1.5747d , -8.1006d)}
        {(2.1611d , -1.7662d , -8.1036d)}
        {(2.2564d , -1.8541d , -8.2151d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.4708d , -1.8237d , -8.3474d)}
        {(2.4546d , -1.682d , -8.2128d)}
        {(2.2564d , -1.8541d , -8.2151d)}
        {(2.4059d , -1.9478d , -8.4018d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.2941d , -1.6633d , -8.3627d)}
        {(2.4546d , -1.682d , -8.2128d)}
        {(2.4708d , -1.8237d , -8.3474d)}
        {(2.3738d , -1.8144d , -8.4275d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7709d , -1.4491d , -8.2455d)}
        {(1.8192d , -1.0938d , -7.7251d)}
        {(2.0307d , -1.1902d , -7.6546d)}
        {(2.3806d , -1.5747d , -8.1006d)}
        {(2.2029d , -1.5545d , -8.2674d)}
        {(1.9997d , -1.5126d , -8.3157d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.0399d , -1.7684d , -8.4375d)}
        {(2.0042d , -1.7501d , -8.2714d)}
        {(1.8219d , -1.7124d , -8.3207d)}
        {(1.8756d , -1.7345d , -8.4823d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.0729d , -1.6418d , -8.6356d)}
        {(2.0358d , -1.5543d , -8.4775d)}
        {(2.219d , -1.5921d , -8.4343d)}
        {(2.1789d , -1.6616d , -8.6149d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.219d , -1.5921d , -8.4343d)}
        {(2.0399d , -1.7684d , -8.4375d)}
        {(2.0927d , -1.7564d , -8.6799d)}
        {(2.1789d , -1.6616d , -8.6149d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.8756d , -1.7345d , -8.4823d)}
        {(2.0358d , -1.5543d , -8.4775d)}
        {(2.0729d , -1.6418d , -8.6356d)}
        {(1.9985d , -1.7359d , -8.7035d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.0927d , -1.7564d , -8.6799d)}
        {(1.9985d , -1.7359d , -8.7035d)}
        {(2.1119d , -1.6308d , -8.8588d)}
        {(2.1449d , -1.6389d , -8.8488d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7813d , -1.5325d , -7.3272d)}
        {(1.5698d , -1.4362d , -7.3976d)}
        {(1.6141d , -1.6531d , -8.2514d)}
        {(1.8219d , -1.7124d , -8.3207d)}
        {(2.0042d , -1.7501d , -8.2714d)}
        {(2.1611d , -1.7662d , -8.1036d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6141d , -1.6531d , -8.2514d)}
        {(1.7709d , -1.4491d , -8.2455d)}
        {(1.7332d , -1.4241d , -8.4105d)}
        {(1.5918d , -1.608d , -8.4156d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.8219d , -1.7124d , -8.3207d)}
        {(1.6141d , -1.6531d , -8.2514d)}
        {(1.5918d , -1.608d , -8.4156d)}
        {(1.7791d , -1.6614d , -8.4782d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7332d , -1.4241d , -8.4105d)}
        {(1.9394d , -1.4814d , -8.4735d)}
        {(1.8167d , -1.4686d , -8.6409d)}
        {(1.699d , -1.4354d , -8.6046d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7761d , -1.2855d , -8.7263d)}
        {(1.8167d , -1.4686d , -8.6409d)}
        {(1.7177d , -1.5567d , -8.6789d)}
        {(1.7266d , -1.3278d , -8.7458d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7177d , -1.5567d , -8.6789d)}
        {(1.7791d , -1.6614d , -8.4782d)}
        {(1.5918d , -1.608d , -8.4156d)}
        {(1.6109d , -1.5276d , -8.6411d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7761d , -1.2855d , -8.7263d)}
        {(1.7266d , -1.3278d , -8.7458d)}
        {(1.6728d , -1.3137d , -8.7257d)}
        {(1.7165d , -1.2681d , -8.7091d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6728d , -1.3137d , -8.7257d)}
        {(1.6109d , -1.5276d , -8.6411d)}
        {(1.699d , -1.4354d , -8.6046d)}
        {(1.7165d , -1.2681d , -8.7091d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.3738d , -1.8144d , -8.4275d)}
        {(2.4708d , -1.8237d , -8.3474d)}
        {(2.5443d , -1.8569d , -8.526d)}
        {(2.508d , -1.8538d , -8.5499d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.5443d , -1.8569d , -8.526d)}
        {(2.519d , -1.8994d , -8.541d)}
        {(2.4943d , -1.8951d , -8.5737d)}
        {(2.508d , -1.8538d , -8.5499d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.508d , -1.8538d , -8.5499d)}
        {(2.4943d , -1.8951d , -8.5737d)}
        {(2.3244d , -1.9355d , -8.4872d)}
        {(2.3738d , -1.8144d , -8.4275d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.2564d , -1.8541d , -8.2151d)}
        {(2.1154d , -1.8401d , -8.3668d)}
        {(2.3244d , -1.9355d , -8.4872d)}
        {(2.4059d , -1.9478d , -8.4018d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.2564d , -1.8541d , -8.2151d)}
        {(2.1611d , -1.7662d , -8.1036d)}
        {(2.0042d , -1.7501d , -8.2714d)}
        {(2.1154d , -1.8401d , -8.3668d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3886d , -1.9879d , -2.7877d)}
        {(-0.643d , -1.539d , -2.6789d)}
        {(-0.643d , -1.4118d , -3.2444d)}
        {(-0.3886d , -1.8706d , -3.1907d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.6349d , -1.9195d , -2.5521d)}
        {(-0.7392d , -1.7387d , -2.508d)}
        {(-0.643d , -1.539d , -2.6789d)}
        {(-0.3886d , -1.9879d , -2.7877d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6041d , -3.0421d , -1.3961d)}
        {(-1.6507d , -3.0261d , -1.4156d)}
        {(-1.5835d , -2.9555d , -1.5189d)}
        {(-1.5369d , -2.9714d , -1.4994d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6186d , -3.0675d , -1.3708d)}
        {(-1.6727d , -3.049d , -1.3933d)}
        {(-1.6637d , -3.0395d , -1.4071d)}
        {(-1.6096d , -3.0581d , -1.3846d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6186d , -3.0675d , -1.3708d)}
        {(-1.6152d , -2.9907d , -1.316d)}
        {(-1.7164d , -3.2432d , -1.3331d)}
        {(-1.7177d , -3.2718d , -1.3535d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.7164d , -3.2432d , -1.3331d)}
        {(-1.7365d , -3.2363d , -1.3415d)}
        {(-1.7378d , -3.2649d , -1.3619d)}
        {(-1.7177d , -3.2718d , -1.3535d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4584d , -3.0847d , -1.3567d)}
        {(-1.4549d , -3.008d , -1.302d)}
        {(-1.4515d , -3.0024d , -1.3212d)}
        {(-1.4544d , -3.0686d , -1.3685d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3224d , -2.9116d , -1.4567d)}
        {(-1.2551d , -2.9862d , -1.3562d)}
        {(-1.2085d , -2.973d , -1.3777d)}
        {(-1.2757d , -2.8984d , -1.4781d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5629d , 0.4803d , -2.3272d)}
        {(-0.492d , 0.3194d , -2.3405d)}
        {(-0.492d , 0.4786d , -2.6529d)}
        {(-0.5629d , 0.5709d , -2.5371d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4077d , -3.07d , -1.3695d)}
        {(-1.4043d , -3.0864d , -1.3579d)}
        {(-1.4584d , -3.0847d , -1.3567d)}
        {(-1.4544d , -3.0686d , -1.3685d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.643d , -0.579d , -2.2798d)}
        {(-0.4823d , -0.579d , -2.2798d)}
        {(-0.4823d , -0.6905d , -2.5202d)}
        {(-0.643d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2994d , -2.8632d , -1.5166d)}
        {(-1.3028d , -2.9382d , -1.5701d)}
        {(-1.3521d , -2.8835d , -1.6437d)}
        {(-1.3487d , -2.8085d , -1.5902d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.7164d , -3.2432d , -1.3331d)}
        {(-1.6152d , -2.9907d , -1.316d)}
        {(-1.6692d , -2.9722d , -1.3385d)}
        {(-1.7365d , -3.2363d , -1.3415d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6727d , -3.049d , -1.3933d)}
        {(-1.7378d , -3.2649d , -1.3619d)}
        {(-1.7365d , -3.2363d , -1.3415d)}
        {(-1.6692d , -2.9722d , -1.3385d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6186d , -3.0675d , -1.3708d)}
        {(-1.7177d , -3.2718d , -1.3535d)}
        {(-1.7378d , -3.2649d , -1.3619d)}
        {(-1.6727d , -3.049d , -1.3933d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6692d , -2.9722d , -1.3385d)}
        {(-1.6602d , -2.9628d , -1.3524d)}
        {(-1.6637d , -3.0395d , -1.4071d)}
        {(-1.6727d , -3.049d , -1.3933d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5734d , -2.8631d , -1.4882d)}
        {(-1.5132d , -2.8838d , -1.4631d)}
        {(-1.5037d , -2.8736d , -1.4891d)}
        {(-1.5564d , -2.8555d , -1.5111d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5132d , -2.8838d , -1.4631d)}
        {(-1.5339d , -2.9052d , -1.4522d)}
        {(-1.5369d , -2.9714d , -1.4994d)}
        {(-1.517d , -2.9693d , -1.5241d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3028d , -2.9382d , -1.5701d)}
        {(-1.3555d , -2.9531d , -1.5458d)}
        {(-1.4049d , -2.8984d , -1.6195d)}
        {(-1.3521d , -2.8835d , -1.6437d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5564d , -2.8555d , -1.5111d)}
        {(-1.5037d , -2.8736d , -1.4891d)}
        {(-1.4543d , -2.8218d , -1.5649d)}
        {(-1.5071d , -2.8038d , -1.5869d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3886d , -1.8706d , -3.1907d)}
        {(0.643d , -1.4118d , -3.2444d)}
        {(0.643d , -1.539d , -2.6789d)}
        {(0.3886d , -1.9879d , -2.7877d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6507d , -3.0261d , -1.4156d)}
        {(-1.6477d , -2.9599d , -1.3684d)}
        {(-1.5805d , -2.8893d , -1.4716d)}
        {(-1.5835d , -2.9555d , -1.5189d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4049d , -2.8984d , -1.6195d)}
        {(-1.4049d , -2.9589d , -1.5346d)}
        {(-1.4577d , -2.9573d , -1.5335d)}
        {(-1.4577d , -2.8968d , -1.6183d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4543d , -2.8218d , -1.5649d)}
        {(-1.5037d , -2.8736d , -1.4891d)}
        {(-1.507d , -2.9486d , -1.5426d)}
        {(-1.4577d , -2.8968d , -1.6183d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3391d , -2.2215d , -3.6284d)}
        {(1.2574d , -1.8246d , -3.8354d)}
        {(0.7513d , -2.2463d , -3.6221d)}
        {(0.9523d , -2.4159d , -3.5659d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5835d , -2.9555d , -1.5189d)}
        {(-1.5772d , -2.9487d , -1.5493d)}
        {(-1.517d , -2.9693d , -1.5241d)}
        {(-1.5369d , -2.9714d , -1.4994d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5351d , 0.1869d , -2.4561d)}
        {(-0.3215d , -0.579d , -2.2798d)}
        {(-0.3215d , -0.6905d , -2.5202d)}
        {(-0.5351d , 0.3073d , -2.6923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.492d , 0.3194d , -2.3405d)}
        {(-0.8459d , 0.3194d , -2.3405d)}
        {(-0.8027d , 0.1869d , -2.4561d)}
        {(-0.5351d , 0.1869d , -2.4561d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7751d , 0.4803d , -2.3272d)}
        {(-0.7751d , 2.1521d , -1.3477d)}
        {(-1.4071d , -0.099d , -3.0431d)}
        {(-0.7751d , 0.5105d , -2.3972d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.8971d , 0.9886d , -2.9732d)}
        {(-0.7394d , 2.4456d , -1.1215d)}
        {(-0.7388d , 2.585d , -1.447d)}
        {(-5.8964d , 1.128d , -3.2987d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7388d , 2.585d , -1.447d)}
        {(-0.8063d , 2.4861d , -1.5054d)}
        {(-5.7995d , 1.0291d , -3.3571d)}
        {(-5.8964d , 1.128d , -3.2987d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8745d , 2.2478d , -1.2384d)}
        {(-0.807d , 2.3467d , -1.18d)}
        {(-5.8132d , -0.6459d , -3.4698d)}
        {(-5.0209d , -0.9962d , -3.3466d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.8129d , -0.5994d , -3.5782d)}
        {(-5.0207d , -0.9497d , -3.4551d)}
        {(-5.0209d , -0.9962d , -3.3466d)}
        {(-5.8132d , -0.6459d , -3.4698d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.8971d , 0.9886d , -2.9732d)}
        {(-7.7711d , -0.9422d , -4.6457d)}
        {(-7.6224d , -1.0412d , -4.7041d)}
        {(-5.8001d , 0.8896d , -3.0317d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.8001d , 0.8896d , -3.0317d)}
        {(-7.6224d , -1.0412d , -4.7041d)}
        {(-7.6222d , -0.9947d , -4.8126d)}
        {(-6.122d , -0.0974d , -3.8773d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-7.6222d , -0.9947d , -4.8126d)}
        {(-7.622d , -0.9482d , -4.921d)}
        {(-6.1218d , -0.0509d , -3.9858d)}
        {(-6.122d , -0.0974d , -3.8773d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.7995d , 1.0291d , -3.3571d)}
        {(-6.1218d , -0.0509d , -3.9858d)}
        {(-7.622d , -0.9482d , -4.921d)}
        {(-7.6218d , -0.9017d , -5.0295d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.7995d , 1.0291d , -3.3571d)}
        {(-7.6218d , -0.9017d , -5.0295d)}
        {(-7.7704d , -0.8028d , -4.971d)}
        {(-5.8964d , 1.128d , -3.2987d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8745d , 2.2478d , -1.2384d)}
        {(-5.0209d , -0.9962d , -3.3466d)}
        {(-4.8683d , -1.8364d , -3.5774d)}
        {(-4.8686d , -1.8828d , -3.4689d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.4119d , 0.0974d , -2.8856d)}
        {(-4.7982d , -1.9295d , -3.6171d)}
        {(-4.798d , -1.883d , -3.7256d)}
        {(-2.4117d , 0.1438d , -2.9941d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-4.8679d , -1.7435d , -3.7943d)}
        {(-4.8681d , -1.7899d , -3.6859d)}
        {(-5.0207d , -0.9497d , -3.4551d)}
        {(-0.8739d , 2.3873d , -1.5638d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-4.7984d , -1.9759d , -3.5087d)}
        {(-4.8686d , -1.8828d , -3.4689d)}
        {(-4.8683d , -1.8364d , -3.5774d)}
        {(-4.8681d , -1.7899d , -3.6859d)}
        {(-4.8679d , -1.7435d , -3.7943d)}
        {(-4.7978d , -1.8365d , -3.8341d)}
        {(-4.798d , -1.883d , -3.7256d)}
        {(-4.7982d , -1.9295d , -3.6171d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.492d , 0.3194d , -2.3405d)}
        {(-0.5351d , 0.1869d , -2.4561d)}
        {(-0.5351d , 0.3073d , -2.6923d)}
        {(-0.492d , 0.4786d , -2.6529d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7751d , 0.4803d , -2.3272d)}
        {(-0.7751d , 0.5105d , -2.3972d)}
        {(-0.7751d , 0.5407d , -2.4671d)}
        {(-0.7751d , 0.5709d , -2.5371d)}
        {(-0.8459d , 0.4786d , -2.6529d)}
        {(-0.8459d , 0.3194d , -2.3405d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.4823d , -0.6905d , -2.5202d)}
        {(-0.4823d , -0.579d , -2.2798d)}
        {(-0.8027d , 0.1869d , -2.4561d)}
        {(-0.8027d , 0.3073d , -2.6923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8027d , 0.1869d , -2.4561d)}
        {(-0.8459d , 0.3194d , -2.3405d)}
        {(-0.8459d , 0.4786d , -2.6529d)}
        {(-0.8027d , 0.3073d , -2.6923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5476d , -2.8668d , -1.5969d)}
        {(1.4948d , -2.8833d , -1.5738d)}
        {(1.4419d , -2.8833d , -1.5738d)}
        {(1.3891d , -2.8668d , -1.5969d)}
        {(1.3891d , -2.7417d , -1.7722d)}
        {(1.5476d , -2.7417d , -1.7722d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4177d , -2.5902d , -1.783d)}
        {(1.5808d , -2.5972d , -1.7835d)}
        {(1.3671d , -2.0779d , -2.2479d)}
        {(1.2922d , -2.2126d , -2.2244d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3139d , -2.0496d , -0.1276d)}
        {(-0.3139d , -1.7379d , 0.0026d)}
        {(-0.3675d , -1.0923d , -1.1382d)}
        {(-0.3675d , -1.567d , -1.2727d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4177d , -2.5902d , -1.783d)}
        {(1.2922d , -2.2126d , -2.2244d)}
        {(1.2919d , -2.2457d , -2.455d)}
        {(1.5033d , -2.6533d , -1.9355d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5629d , 2.1521d , -1.3477d)}
        {(-0.7751d , 2.1521d , -1.3477d)}
        {(-0.7751d , 0.4803d , -2.3272d)}
        {(-0.5629d , 0.4803d , -2.3272d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1353d , -3.2543d , -1.3543d)}
        {(-1.1555d , -3.26d , -1.3451d)}
        {(-1.1567d , -3.2886d , -1.3655d)}
        {(-1.1366d , -3.2829d , -1.3747d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3215d , -0.579d , -2.2798d)}
        {(-0.066d , -0.579d , -2.2798d)}
        {(0.0d , -0.579d , -2.2798d)}
        {(0.0d , -0.6905d , -2.5202d)}
        {(-0.3215d , -0.6905d , -2.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1866d , -2.9866d , -1.3488d)}
        {(-1.1353d , -3.2543d , -1.3543d)}
        {(-1.1366d , -3.2829d , -1.3747d)}
        {(-1.19d , -3.0634d , -1.4036d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1567d , -3.2886d , -1.3655d)}
        {(-1.1555d , -3.26d , -1.3451d)}
        {(-1.2406d , -3.0019d , -1.324d)}
        {(-1.2441d , -3.0787d , -1.3788d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2441d , -3.0787d , -1.3788d)}
        {(-1.19d , -3.0634d , -1.4036d)}
        {(-1.1366d , -3.2829d , -1.3747d)}
        {(-1.1567d , -3.2886d , -1.3655d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1955d , -2.9766d , -1.3623d)}
        {(-1.1866d , -2.9866d , -1.3488d)}
        {(-1.19d , -3.0634d , -1.4036d)}
        {(-1.199d , -3.0534d , -1.417d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.4244d , -0.929d , -1.4905d)}
        {(-0.643d , -0.579d , -2.2798d)}
        {(-0.643d , -1.4203d , -2.087d)}
        {(-0.4244d , -1.4928d , -1.5721d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4009d , -3.0206d , -1.2877d)}
        {(-1.4009d , -3.0096d , -1.3031d)}
        {(-1.4549d , -3.008d , -1.302d)}
        {(-1.4549d , -3.019d , -1.2865d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7751d , 0.5709d , -2.5371d)}
        {(-0.7751d , 2.2426d , -1.5575d)}
        {(-0.5629d , 2.2426d , -1.5575d)}
        {(-0.5629d , 0.5709d , -2.5371d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3254d , -2.9778d , -1.5039d)}
        {(-1.2581d , -3.0524d , -1.4035d)}
        {(-1.2551d , -2.9862d , -1.3562d)}
        {(-1.3224d , -2.9116d , -1.4567d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3215d , -0.6905d , -2.5202d)}
        {(-0.4823d , -0.6905d , -2.5202d)}
        {(-0.8027d , 0.3073d , -2.6923d)}
        {(-0.5351d , 0.3073d , -2.6923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5351d , 0.3073d , -2.6923d)}
        {(-0.8027d , 0.3073d , -2.6923d)}
        {(-0.8459d , 0.4786d , -2.6529d)}
        {(-0.492d , 0.4786d , -2.6529d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7751d , 0.5709d , -2.5371d)}
        {(-0.5629d , 0.5709d , -2.5371d)}
        {(-0.492d , 0.4786d , -2.6529d)}
        {(-0.8459d , 0.4786d , -2.6529d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4071d , -0.0688d , -3.113d)}
        {(-0.7751d , 2.2426d , -1.5575d)}
        {(-0.7751d , 0.5709d , -2.5371d)}
        {(-0.7751d , 0.5407d , -2.4671d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7751d , 0.5105d , -2.3972d)}
        {(-1.4071d , -0.099d , -3.0431d)}
        {(-1.4071d , -0.0688d , -3.113d)}
        {(-0.7751d , 0.5407d , -2.4671d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8044d , 2.1547d , -1.2782d)}
        {(-2.4119d , 0.0974d , -2.8856d)}
        {(-1.4071d , -0.099d , -3.0431d)}
        {(-0.7751d , 2.1521d , -1.3477d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8037d , 2.2941d , -1.6036d)}
        {(-0.7751d , 2.2426d , -1.5575d)}
        {(-1.4071d , -0.0688d , -3.113d)}
        {(-2.4117d , 0.1438d , -2.9941d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.4119d , 0.0974d , -2.8856d)}
        {(-2.4117d , 0.1438d , -2.9941d)}
        {(-1.4071d , -0.0688d , -3.113d)}
        {(-1.4071d , -0.099d , -3.0431d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.8971d , 0.9886d , -2.9732d)}
        {(-5.8001d , 0.8896d , -3.0317d)}
        {(-0.807d , 2.3467d , -1.18d)}
        {(-0.7394d , 2.4456d , -1.1215d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8745d , 2.2478d , -1.2384d)}
        {(-4.8686d , -1.8828d , -3.4689d)}
        {(-4.7984d , -1.9759d , -3.5087d)}
        {(-0.8044d , 2.1547d , -1.2782d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8044d , 2.1547d , -1.2782d)}
        {(-4.7984d , -1.9759d , -3.5087d)}
        {(-4.7982d , -1.9295d , -3.6171d)}
        {(-2.4119d , 0.0974d , -2.8856d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.0209d , -0.9962d , -3.3466d)}
        {(-5.0207d , -0.9497d , -3.4551d)}
        {(-4.8681d , -1.7899d , -3.6859d)}
        {(-4.8683d , -1.8364d , -3.5774d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-4.7978d , -1.8365d , -3.8341d)}
        {(-0.8037d , 2.2941d , -1.6036d)}
        {(-2.4117d , 0.1438d , -2.9941d)}
        {(-4.798d , -1.883d , -3.7256d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8739d , 2.3873d , -1.5638d)}
        {(-0.8037d , 2.2941d , -1.6036d)}
        {(-4.7978d , -1.8365d , -3.8341d)}
        {(-4.8679d , -1.7435d , -3.7943d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.8739d , 2.3873d , -1.5638d)}
        {(-5.0207d , -0.9497d , -3.4551d)}
        {(-5.8129d , -0.5994d , -3.5782d)}
        {(-0.8063d , 2.4861d , -1.5054d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.807d , 2.3467d , -1.18d)}
        {(-5.8001d , 0.8896d , -3.0317d)}
        {(-6.122d , -0.0974d , -3.8773d)}
        {(-5.8132d , -0.6459d , -3.4698d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.7995d , 1.0291d , -3.3571d)}
        {(-0.8063d , 2.4861d , -1.5054d)}
        {(-5.8129d , -0.5994d , -3.5782d)}
        {(-6.1218d , -0.0509d , -3.9858d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.8129d , -0.5994d , -3.5782d)}
        {(-5.8132d , -0.6459d , -3.4698d)}
        {(-6.122d , -0.0974d , -3.8773d)}
        {(-6.1218d , -0.0509d , -3.9858d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-5.8971d , 0.9886d , -2.9732d)}
        {(-5.8964d , 1.128d , -3.2987d)}
        {(-7.7704d , -0.8028d , -4.971d)}
        {(-7.7711d , -0.9422d , -4.6457d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-7.6224d , -1.0412d , -4.7041d)}
        {(-7.7711d , -0.9422d , -4.6457d)}
        {(-7.7704d , -0.8028d , -4.971d)}
        {(-7.6218d , -0.9017d , -5.0295d)}
        {(-7.622d , -0.9482d , -4.921d)}
        {(-7.6222d , -0.9947d , -4.8126d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.282d , -2.8718d , -1.4944d)}
        {(-1.2757d , -2.8984d , -1.4781d)}
        {(-1.2787d , -2.9646d , -1.5253d)}
        {(-1.2858d , -2.9574d , -1.5555d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4515d , -2.9198d , -1.4369d)}
        {(-1.4048d , -2.9212d , -1.4379d)}
        {(-1.3976d , -2.8952d , -1.4543d)}
        {(-1.4578d , -2.8935d , -1.453d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6692d , -2.9722d , -1.3385d)}
        {(-1.6152d , -2.9907d , -1.316d)}
        {(-1.6062d , -2.9813d , -1.3298d)}
        {(-1.6602d , -2.9628d , -1.3524d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3886d , -1.8754d , -2.0077d)}
        {(-0.3886d , -1.8754d , -2.0077d)}
        {(-0.3886d , -1.9879d , -2.7877d)}
        {(0.3886d , -1.9879d , -2.7877d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5835d , -2.9555d , -1.5189d)}
        {(-1.5805d , -2.8893d , -1.4716d)}
        {(-1.5734d , -2.8631d , -1.4882d)}
        {(-1.5772d , -2.9487d , -1.5493d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3487d , -2.8085d , -1.5902d)}
        {(-1.3521d , -2.8835d , -1.6437d)}
        {(-1.3521d , -2.7584d , -1.819d)}
        {(-1.3487d , -2.6834d , -1.7655d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5071d , -2.8038d , -1.5869d)}
        {(-1.5071d , -2.6787d , -1.7622d)}
        {(-1.5105d , -2.7537d , -1.8156d)}
        {(-1.5105d , -2.8787d , -1.6403d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2574d , -1.8246d , -3.8354d)}
        {(0.9428d , -1.2233d , -3.7963d)}
        {(0.7513d , -2.2463d , -3.6221d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.643d , -1.4118d , -3.2444d)}
        {(-0.643d , -1.539d , -2.6789d)}
        {(-0.643d , -0.6905d , -2.5202d)}
        {(-0.643d , -0.561d , -3.3899d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2574d , -1.8246d , -3.8354d)}
        {(1.3391d , -2.2215d , -3.6284d)}
        {(1.5307d , -2.6045d , -4.7853d)}
        {(1.4754d , -2.0221d , -4.7108d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3886d , -1.8706d , -3.1907d)}
        {(-0.643d , -1.4118d , -3.2444d)}
        {(-0.4714d , -1.0188d , -4.045d)}
        {(-0.5469d , -2.1517d , -3.6534d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5469d , -2.1517d , -3.6534d)}
        {(-0.4714d , -1.0188d , -4.045d)}
        {(-0.9402d , -1.2223d , -3.8006d)}
        {(-0.7513d , -2.2463d , -3.6221d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.9049d , -0.4747d , -4.4675d)}
        {(0.9049d , -0.155d , -5.1492d)}
        {(0.0d , 0.11d , -5.0229d)}
        {(0.0d , -0.1393d , -4.3123d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.9049d , -0.4747d , -4.4675d)}
        {(0.4728d , -1.0179d , -4.0452d)}
        {(0.5614d , -0.8193d , -5.476d)}
        {(0.9049d , -0.155d , -5.1492d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.643d , -1.4118d , -3.2444d)}
        {(-0.643d , -0.561d , -3.3899d)}
        {(-0.9049d , -0.4747d , -4.4675d)}
        {(-0.4714d , -1.0188d , -4.045d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2574d , -1.8246d , -3.8354d)}
        {(-1.3391d , -2.2215d , -3.6284d)}
        {(-0.9523d , -2.4159d , -3.5659d)}
        {(-0.7513d , -2.2463d , -3.6221d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.0057d , -0.8729d , -5.3919d)}
        {(0.5614d , -0.8193d , -5.476d)}
        {(0.4728d , -1.0179d , -4.0452d)}
        {(0.9428d , -1.2233d , -3.7963d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.9523d , -2.4159d , -3.5659d)}
        {(0.7513d , -2.2463d , -3.6221d)}
        {(0.639d , -2.2671d , -5.7806d)}
        {(1.1174d , -2.9846d , -5.0044d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3242d , -1.7719d , -6.0786d)}
        {(1.0057d , -0.8729d , -5.3919d)}
        {(1.4754d , -2.0221d , -4.7108d)}
        {(1.6445d , -1.9195d , -5.9788d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.0966d , -0.9365d , -7.5054d)}
        {(1.9988d , -1.1131d , -7.4533d)}
        {(2.0307d , -1.1902d , -7.6546d)}
        {(2.1285d , -1.0136d , -7.7067d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.324d , -2.5686d , -5.835d)}
        {(1.0037d , -2.421d , -5.9348d)}
        {(1.5698d , -1.4362d , -7.3976d)}
        {(1.7813d , -1.5325d , -7.3272d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.0966d , -0.9365d , -7.5054d)}
        {(2.1285d , -1.0136d , -7.7067d)}
        {(1.917d , -0.9173d , -7.7771d)}
        {(1.885d , -0.8402d , -7.5759d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.0307d , -1.1902d , -7.6546d)}
        {(1.9988d , -1.1131d , -7.4533d)}
        {(1.7813d , -1.5325d , -7.3272d)}
        {(2.1611d , -1.7662d , -8.1036d)}
        {(2.3806d , -1.5747d , -8.1006d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.2029d , -1.5545d , -8.2674d)}
        {(2.3806d , -1.5747d , -8.1006d)}
        {(2.4546d , -1.682d , -8.2128d)}
        {(2.2941d , -1.6633d , -8.3627d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.5443d , -1.8569d , -8.526d)}
        {(2.4708d , -1.8237d , -8.3474d)}
        {(2.4059d , -1.9478d , -8.4018d)}
        {(2.519d , -1.8994d , -8.541d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.2029d , -1.5545d , -8.2674d)}
        {(2.2941d , -1.6633d , -8.3627d)}
        {(2.1154d , -1.8401d , -8.3668d)}
        {(2.0042d , -1.7501d , -8.2714d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.2941d , -1.6633d , -8.3627d)}
        {(2.3738d , -1.8144d , -8.4275d)}
        {(2.3244d , -1.9355d , -8.4872d)}
        {(2.1154d , -1.8401d , -8.3668d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.519d , -1.8994d , -8.541d)}
        {(2.4059d , -1.9478d , -8.4018d)}
        {(2.3244d , -1.9355d , -8.4872d)}
        {(2.4943d , -1.8951d , -8.5737d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.219d , -1.5921d , -8.4343d)}
        {(2.2029d , -1.5545d , -8.2674d)}
        {(2.0042d , -1.7501d , -8.2714d)}
        {(2.0399d , -1.7684d , -8.4375d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.9997d , -1.5126d , -8.3157d)}
        {(2.2029d , -1.5545d , -8.2674d)}
        {(2.219d , -1.5921d , -8.4343d)}
        {(2.0358d , -1.5543d , -8.4775d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5698d , -1.4362d , -7.3976d)}
        {(1.7873d , -1.0168d , -7.5238d)}
        {(1.8192d , -1.0938d , -7.7251d)}
        {(1.7709d , -1.4491d , -8.2455d)}
        {(1.6141d , -1.6531d , -8.2514d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7709d , -1.4491d , -8.2455d)}
        {(1.9997d , -1.5126d , -8.3157d)}
        {(1.9394d , -1.4814d , -8.4735d)}
        {(1.7332d , -1.4241d , -8.4105d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.9997d , -1.5126d , -8.3157d)}
        {(1.8219d , -1.7124d , -8.3207d)}
        {(1.7791d , -1.6614d , -8.4782d)}
        {(1.9394d , -1.4814d , -8.4735d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.8167d , -1.4686d , -8.6409d)}
        {(1.9394d , -1.4814d , -8.4735d)}
        {(1.7791d , -1.6614d , -8.4782d)}
        {(1.7177d , -1.5567d , -8.6789d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7165d , -1.2681d , -8.7091d)}
        {(1.699d , -1.4354d , -8.6046d)}
        {(1.8167d , -1.4686d , -8.6409d)}
        {(1.7761d , -1.2855d , -8.7263d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5918d , -1.608d , -8.4156d)}
        {(1.7332d , -1.4241d , -8.4105d)}
        {(1.699d , -1.4354d , -8.6046d)}
        {(1.6109d , -1.5276d , -8.6411d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7266d , -1.3278d , -8.7458d)}
        {(1.7177d , -1.5567d , -8.6789d)}
        {(1.6109d , -1.5276d , -8.6411d)}
        {(1.6728d , -1.3137d , -8.7257d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.0927d , -1.7564d , -8.6799d)}
        {(2.0399d , -1.7684d , -8.4375d)}
        {(1.8756d , -1.7345d , -8.4823d)}
        {(1.9985d , -1.7359d , -8.7035d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.1789d , -1.6616d , -8.6149d)}
        {(2.176d , -1.6044d , -8.8274d)}
        {(2.1378d , -1.5982d , -8.833d)}
        {(2.0729d , -1.6418d , -8.6356d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.1449d , -1.6389d , -8.8488d)}
        {(2.176d , -1.6044d , -8.8274d)}
        {(2.1789d , -1.6616d , -8.6149d)}
        {(2.0927d , -1.7564d , -8.6799d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.9985d , -1.7359d , -8.7035d)}
        {(2.0729d , -1.6418d , -8.6356d)}
        {(2.1378d , -1.5982d , -8.833d)}
        {(2.1119d , -1.6308d , -8.8588d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(2.1449d , -1.6389d , -8.8488d)}
        {(2.1119d , -1.6308d , -8.8588d)}
        {(2.1378d , -1.5982d , -8.833d)}
        {(2.176d , -1.6044d , -8.8274d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.8756d , -1.7345d , -8.4823d)}
        {(1.8219d , -1.7124d , -8.3207d)}
        {(1.9997d , -1.5126d , -8.3157d)}
        {(2.0358d , -1.5543d , -8.4775d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7873d , -1.0168d , -7.5238d)}
        {(1.885d , -0.8402d , -7.5759d)}
        {(1.917d , -0.9173d , -7.7771d)}
        {(1.8192d , -1.0938d , -7.7251d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.0037d , -2.421d , -5.9348d)}
        {(0.639d , -2.2671d , -5.7806d)}
        {(1.0057d , -0.8729d , -5.3919d)}
        {(1.3242d , -1.7719d , -6.0786d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.0057d , -0.8729d , -5.3919d)}
        {(0.639d , -2.2671d , -5.7806d)}
        {(0.5469d , -2.3243d , -5.6472d)}
        {(0.5614d , -0.8193d , -5.476d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.9049d , -0.4747d , -4.4675d)}
        {(0.0d , -0.1393d , -4.3123d)}
        {(0.0d , 0.11d , -5.0229d)}
        {(-0.9049d , -0.155d , -5.1492d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.9049d , -0.155d , -5.1492d)}
        {(0.5614d , -0.8193d , -5.476d)}
        {(0.5681d , -0.9639d , -6.3552d)}
        {(0.5681d , 0.1619d , -5.9155d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5598d , -0.8202d , -5.4758d)}
        {(-0.4714d , -1.0188d , -4.045d)}
        {(-0.9049d , -0.4747d , -4.4675d)}
        {(-0.9049d , -0.155d , -5.1492d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 0.4392d , -5.7931d)}
        {(-0.5681d , 0.1619d , -5.9155d)}
        {(-0.9049d , -0.155d , -5.1492d)}
        {(0.0d , 0.11d , -5.0229d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.0462d , -0.8901d , -5.3892d)}
        {(-0.9402d , -1.2223d , -3.8006d)}
        {(-0.4714d , -1.0188d , -4.045d)}
        {(-0.5598d , -0.8202d , -5.4758d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4754d , -2.0221d , -4.7108d)}
        {(-1.2574d , -1.8246d , -3.8354d)}
        {(-0.9402d , -1.2223d , -3.8006d)}
        {(-1.0462d , -0.8901d , -5.3892d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.9523d , -2.4159d , -3.5659d)}
        {(-1.3391d , -2.2215d , -3.6284d)}
        {(-1.5307d , -2.6045d , -4.7853d)}
        {(-1.1174d , -2.9846d , -5.0044d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7513d , -2.2463d , -3.6221d)}
        {(-0.9523d , -2.4159d , -3.5659d)}
        {(-1.1174d , -2.9846d , -5.0044d)}
        {(-0.6822d , -2.2853d , -5.7736d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.0462d , -0.8901d , -5.3892d)}
        {(-0.6822d , -2.2853d , -5.7736d)}
        {(-1.0398d , -2.4363d , -5.927d)}
        {(-1.3603d , -1.7872d , -6.0707d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5307d , -2.6045d , -4.7853d)}
        {(-1.4754d , -2.0221d , -4.7108d)}
        {(-1.6516d , -1.9224d , -5.9797d)}
        {(-1.331d , -2.5715d , -5.8359d)}
        {(-1.1174d , -2.9846d , -5.0044d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.0398d , -2.4363d , -5.927d)}
        {(-1.331d , -2.5715d , -5.8359d)}
        {(-1.8113d , -1.5786d , -7.4213d)}
        {(-1.6029d , -1.4883d , -7.4902d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3603d , -1.7872d , -6.0707d)}
        {(-1.0398d , -2.4363d , -5.927d)}
        {(-1.6029d , -1.4883d , -7.4902d)}
        {(-1.8309d , -1.0736d , -7.6227d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8309d , -1.0736d , -7.6227d)}
        {(-1.934d , -0.8993d , -7.6773d)}
        {(-2.1424d , -0.9897d , -7.6083d)}
        {(-2.0393d , -1.1639d , -7.5537d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8619d , -1.1546d , -7.8226d)}
        {(-1.8309d , -1.0736d , -7.6227d)}
        {(-1.6029d , -1.4883d , -7.4902d)}
        {(-1.6631d , -1.7219d , -8.3388d)}
        {(-1.8216d , -1.5181d , -8.3348d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8216d , -1.5181d , -8.3348d)}
        {(-1.6631d , -1.7219d , -8.3388d)}
        {(-1.6095d , -1.6821d , -8.4993d)}
        {(-1.7679d , -1.4783d , -8.4954d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6095d , -1.6821d , -8.4993d)}
        {(-1.6631d , -1.7219d , -8.3388d)}
        {(-1.8632d , -1.7809d , -8.4087d)}
        {(-1.8095d , -1.7411d , -8.5693d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8632d , -1.7809d , -8.4087d)}
        {(-2.0471d , -1.5823d , -8.4054d)}
        {(-1.9934d , -1.5425d , -8.566d)}
        {(-1.8095d , -1.7411d , -8.5693d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.7348d , -1.6085d , -8.7821d)}
        {(-1.6131d , -1.5773d , -8.7367d)}
        {(-1.6095d , -1.6821d , -8.4993d)}
        {(-1.8095d , -1.7411d , -8.5693d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8649d , -1.5604d , -8.6851d)}
        {(-1.9934d , -1.5425d , -8.566d)}
        {(-1.7679d , -1.4783d , -8.4954d)}
        {(-1.7289d , -1.5206d , -8.6399d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.7289d , -1.5206d , -8.6399d)}
        {(-1.6131d , -1.5773d , -8.7367d)}
        {(-1.6934d , -1.3778d , -8.8404d)}
        {(-1.7376d , -1.3544d , -8.8046d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6934d , -1.3778d , -8.8404d)}
        {(-1.7398d , -1.3879d , -8.8589d)}
        {(-1.7893d , -1.3713d , -8.8208d)}
        {(-1.7376d , -1.3544d , -8.8046d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8113d , -1.5786d , -7.4213d)}
        {(-2.0393d , -1.1639d , -7.5537d)}
        {(-2.0703d , -1.2449d , -7.7537d)}
        {(-2.4205d , -1.6394d , -8.1926d)}
        {(-2.1857d , -1.8277d , -8.1945d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.1857d , -1.8277d , -8.1945d)}
        {(-2.4205d , -1.6394d , -8.1926d)}
        {(-2.5233d , -1.7448d , -8.2858d)}
        {(-2.2885d , -1.9331d , -8.2877d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.5233d , -1.7448d , -8.2858d)}
        {(-2.4205d , -1.6394d , -8.1926d)}
        {(-2.2467d , -1.6227d , -8.358d)}
        {(-2.3495d , -1.7282d , -8.4513d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.2885d , -1.9331d , -8.2877d)}
        {(-2.5233d , -1.7448d , -8.2858d)}
        {(-2.5194d , -1.8796d , -8.3852d)}
        {(-2.4629d , -2.0287d , -8.4651d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.3495d , -1.7282d , -8.4513d)}
        {(-2.1402d , -1.9216d , -8.4538d)}
        {(-2.3695d , -2.015d , -8.5631d)}
        {(-2.4067d , -1.8727d , -8.4793d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.2885d , -1.9331d , -8.2877d)}
        {(-2.4629d , -2.0287d , -8.4651d)}
        {(-2.3695d , -2.015d , -8.5631d)}
        {(-2.1402d , -1.9216d , -8.4538d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.6407d , -1.8846d , -8.5963d)}
        {(-2.5939d , -1.8828d , -8.6285d)}
        {(-2.5836d , -1.9361d , -8.6641d)}
        {(-2.6153d , -1.9423d , -8.6231d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.0374d , -1.8162d , -8.3606d)}
        {(-2.0732d , -1.8491d , -8.5241d)}
        {(-1.8991d , -1.8138d , -8.5721d)}
        {(-1.8632d , -1.7809d , -8.4087d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8632d , -1.7809d , -8.4087d)}
        {(-1.8991d , -1.8138d , -8.5721d)}
        {(-2.0829d , -1.6152d , -8.5689d)}
        {(-2.0471d , -1.5823d , -8.4054d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.0471d , -1.5823d , -8.4054d)}
        {(-2.0829d , -1.6152d , -8.5689d)}
        {(-2.2825d , -1.6556d , -8.5215d)}
        {(-2.2467d , -1.6227d , -8.358d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.2825d , -1.6556d , -8.5215d)}
        {(-2.0829d , -1.6152d , -8.5689d)}
        {(-2.1076d , -1.7118d , -8.6871d)}
        {(-2.2308d , -1.7329d , -8.6634d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.0732d , -1.8491d , -8.5241d)}
        {(-2.1326d , -1.8291d , -8.7685d)}
        {(-2.026d , -1.8062d , -8.794d)}
        {(-1.8991d , -1.8138d , -8.5721d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.0732d , -1.8491d , -8.5241d)}
        {(-2.2825d , -1.6556d , -8.5215d)}
        {(-2.2308d , -1.7329d , -8.6634d)}
        {(-2.1326d , -1.8291d , -8.7685d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.1076d , -1.7118d , -8.6871d)}
        {(-2.026d , -1.8062d , -8.794d)}
        {(-2.1502d , -1.6498d , -8.927d)}
        {(-2.1808d , -1.6151d , -8.8847d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.2308d , -1.7329d , -8.6634d)}
        {(-2.1076d , -1.7118d , -8.6871d)}
        {(-2.1808d , -1.6151d , -8.8847d)}
        {(-2.2283d , -1.6218d , -8.8773d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.1502d , -1.6498d , -8.927d)}
        {(-2.1902d , -1.6598d , -8.9158d)}
        {(-2.2283d , -1.6218d , -8.8773d)}
        {(-2.1808d , -1.6151d , -8.8847d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.8619d , -1.1546d , -7.8226d)}
        {(-1.9651d , -0.9803d , -7.8771d)}
        {(-1.934d , -0.8993d , -7.6773d)}
        {(-1.8309d , -1.0736d , -7.6227d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.0393d , -1.1639d , -7.5537d)}
        {(-2.1424d , -0.9897d , -7.6083d)}
        {(-2.1735d , -1.0706d , -7.8082d)}
        {(-2.0703d , -1.2449d , -7.7537d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-2.1735d , -1.0706d , -7.8082d)}
        {(-1.9651d , -0.9803d , -7.8771d)}
        {(-1.8619d , -1.1546d , -7.8226d)}
        {(-2.0703d , -1.2449d , -7.7537d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5469d , -2.3243d , -5.6472d)}
        {(-0.6822d , -2.2853d , -5.7736d)}
        {(-1.0462d , -0.8901d , -5.3892d)}
        {(-0.5598d , -0.8202d , -5.4758d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.9049d , -0.155d , -5.1492d)}
        {(-0.5681d , 0.1619d , -5.9155d)}
        {(-0.5681d , -0.9639d , -6.3552d)}
        {(-0.5598d , -0.8202d , -5.4758d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5681d , -0.9639d , -6.3552d)}
        {(-0.5681d , 0.1619d , -5.9155d)}
        {(-0.3326d , 0.5881d , -6.881d)}
        {(-0.3326d , 0.0228d , -7.3103d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3434d , -1.2953d , -6.6027d)}
        {(-0.3434d , -1.2953d , -6.6027d)}
        {(-0.201d , -0.0918d , -7.5348d)}
        {(0.201d , -0.0918d , -7.5348d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 1.3159d , -7.666d)}
        {(-0.3326d , 1.3159d , -7.666d)}
        {(-0.3326d , 0.5881d , -6.881d)}
        {(0.0d , 0.8654d , -6.7586d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3326d , 0.7506d , -8.0952d)}
        {(0.3326d , 0.0228d , -7.3103d)}
        {(0.201d , -0.0918d , -7.5348d)}
        {(0.201d , 0.636d , -8.3198d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.201d , -0.0918d , -7.5348d)}
        {(-0.201d , -0.0918d , -7.5348d)}
        {(-0.201d , 0.636d , -8.3198d)}
        {(0.201d , 0.636d , -8.3198d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2377d , 1.8966d , -8.5229d)}
        {(0.3326d , 1.3159d , -7.666d)}
        {(0.3326d , 0.7506d , -8.0952d)}
        {(0.2377d , 1.479d , -8.8151d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3326d , 0.7506d , -8.0952d)}
        {(0.201d , 0.636d , -8.3198d)}
        {(0.1437d , 1.4138d , -8.9938d)}
        {(0.2377d , 1.479d , -8.8151d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3326d , 0.7506d , -8.0952d)}
        {(-0.3326d , 1.3159d , -7.666d)}
        {(-0.2377d , 1.8966d , -8.5229d)}
        {(-0.2377d , 1.479d , -8.8151d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2051d , 2.3357d , -9.0752d)}
        {(0.2377d , 1.8966d , -8.5229d)}
        {(0.2377d , 1.479d , -8.8151d)}
        {(0.2051d , 1.9752d , -9.3268d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.201d , 0.636d , -8.3198d)}
        {(-0.201d , 0.636d , -8.3198d)}
        {(-0.1437d , 1.4138d , -8.9938d)}
        {(0.1437d , 1.4138d , -8.9938d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.201d , 0.636d , -8.3198d)}
        {(-0.3326d , 0.7506d , -8.0952d)}
        {(-0.2377d , 1.479d , -8.8151d)}
        {(-0.1437d , 1.4138d , -8.9938d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0541d , 6.6352d , -10.0842d)}
        {(-0.0541d , 6.7328d , -10.0201d)}
        {(0.0d , 6.7328d , -10.0201d)}
        {(0.0541d , 6.7328d , -10.0201d)}
        {(0.0541d , 6.6352d , -10.0842d)}
        {(0.0327d , 6.6685d , -10.1926d)}
        {(-0.0327d , 6.6685d , -10.1926d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , 3.1239d , -9.5416d)}
        {(0.1741d , 3.1239d , -9.5416d)}
        {(0.137d , 3.9409d , -9.8983d)}
        {(0.0d , 3.9409d , -9.8983d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0541d , 6.6352d , -10.0842d)}
        {(0.0541d , 6.7328d , -10.0201d)}
        {(0.1095d , 4.9985d , -10.0667d)}
        {(0.1095d , 4.8047d , -10.1993d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2051d , 1.9752d , -9.3268d)}
        {(0.124d , 1.9276d , -9.4929d)}
        {(0.1052d , 2.7865d , -9.9089d)}
        {(0.1741d , 2.8174d , -9.7546d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0662d , 4.8084d , -10.3289d)}
        {(0.0327d , 6.6685d , -10.1926d)}
        {(0.0541d , 6.6352d , -10.0842d)}
        {(0.1095d , 4.8047d , -10.1993d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.137d , 3.9409d , -9.8983d)}
        {(-0.137d , 3.6992d , -10.0651d)}
        {(-0.1741d , 2.8174d , -9.7546d)}
        {(-0.1741d , 3.1239d , -9.5416d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.137d , 3.9409d , -9.8983d)}
        {(-0.1095d , 4.9985d , -10.0667d)}
        {(-0.1095d , 4.8047d , -10.1993d)}
        {(-0.137d , 3.6992d , -10.0651d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1052d , 2.7865d , -9.9089d)}
        {(-0.1052d , 2.7865d , -9.9089d)}
        {(-0.0828d , 3.6881d , -10.2052d)}
        {(0.0828d , 3.6881d , -10.2052d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.137d , 3.6992d , -10.0651d)}
        {(-0.1095d , 4.8047d , -10.1993d)}
        {(-0.0662d , 4.8084d , -10.3289d)}
        {(-0.0828d , 3.6881d , -10.2052d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1437d , 1.4138d , -8.9938d)}
        {(-0.124d , 1.9276d , -9.4929d)}
        {(0.124d , 1.9276d , -9.4929d)}
        {(0.1437d , 1.4138d , -8.9938d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.205d , 2.3357d , -9.0752d)}
        {(0.0d , 2.3357d , -9.0752d)}
        {(0.0d , 3.1239d , -9.5416d)}
        {(-0.1741d , 3.1239d , -9.5416d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2377d , 1.479d , -8.8151d)}
        {(0.1437d , 1.4138d , -8.9938d)}
        {(0.124d , 1.9276d , -9.4929d)}
        {(0.2051d , 1.9752d , -9.3268d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2377d , 1.8966d , -8.5229d)}
        {(-0.205d , 2.3357d , -9.0752d)}
        {(-0.205d , 1.9752d , -9.3268d)}
        {(-0.2377d , 1.479d , -8.8151d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.9428d , -1.2233d , -3.7963d)}
        {(0.4728d , -1.0179d , -4.0452d)}
        {(0.5469d , -2.1517d , -3.6534d)}
        {(0.7513d , -2.2463d , -3.6221d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5071d , -2.6787d , -1.7622d)}
        {(-1.3487d , -2.6834d , -1.7655d)}
        {(-1.4219d , -2.6203d , -1.8312d)}
        {(-1.6152d , -2.645d , -1.7842d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3487d , -2.6834d , -1.7655d)}
        {(-1.3521d , -2.7584d , -1.819d)}
        {(-1.4504d , -2.6497d , -1.9308d)}
        {(-1.4219d , -2.6203d , -1.8312d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1137d , -2.128d , -2.2188d)}
        {(-0.6363d , -1.8748d , -2.2365d)}
        {(-0.7378d , -1.6899d , -2.2687d)}
        {(-1.1976d , -1.9754d , -2.2454d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5105d , -2.7537d , -1.8156d)}
        {(-1.5071d , -2.6787d , -1.7622d)}
        {(-1.6152d , -2.645d , -1.7842d)}
        {(-1.6362d , -2.6756d , -1.8581d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5564d , -2.8555d , -1.5111d)}
        {(-1.5071d , -2.8038d , -1.5869d)}
        {(-1.5105d , -2.8787d , -1.6403d)}
        {(-1.5598d , -2.9305d , -1.5646d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5734d , -2.8631d , -1.4882d)}
        {(-1.5564d , -2.8555d , -1.5111d)}
        {(-1.5598d , -2.9305d , -1.5646d)}
        {(-1.5772d , -2.9487d , -1.5493d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.507d , -2.9486d , -1.5426d)}
        {(-1.517d , -2.9693d , -1.5241d)}
        {(-1.5772d , -2.9487d , -1.5493d)}
        {(-1.5598d , -2.9305d , -1.5646d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.507d , -2.9486d , -1.5426d)}
        {(-1.5598d , -2.9305d , -1.5646d)}
        {(-1.5105d , -2.8787d , -1.6403d)}
        {(-1.4577d , -2.8968d , -1.6183d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4543d , -2.8218d , -1.5649d)}
        {(-1.4015d , -2.8234d , -1.566d)}
        {(-1.3487d , -2.8085d , -1.5902d)}
        {(-1.3487d , -2.6834d , -1.7655d)}
        {(-1.5071d , -2.6787d , -1.7622d)}
        {(-1.5071d , -2.8038d , -1.5869d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.643d , -1.4203d , -2.087d)}
        {(-0.643d , -0.579d , -2.2798d)}
        {(-0.643d , -0.6905d , -2.5202d)}
        {(-0.643d , -1.539d , -2.6789d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6362d , -2.6756d , -1.8581d)}
        {(-1.4504d , -2.6497d , -1.9308d)}
        {(-1.3521d , -2.7584d , -1.819d)}
        {(-1.5105d , -2.7537d , -1.8156d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6152d , -2.645d , -1.7842d)}
        {(-1.3635d , -2.083d , -2.2407d)}
        {(-1.3638d , -2.1182d , -2.4156d)}
        {(-1.6362d , -2.6756d , -1.8581d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2946d , -1.998d , -2.2098d)}
        {(-1.1976d , -1.9754d , -2.2454d)}
        {(-1.1987d , -2.0156d , -2.4429d)}
        {(-1.2951d , -2.0486d , -2.4609d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1867d , -2.2388d , -2.5071d)}
        {(-1.1126d , -2.1649d , -2.4793d)}
        {(-1.1137d , -2.128d , -2.2188d)}
        {(-1.1871d , -2.1913d , -2.1761d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1987d , -2.0156d , -2.4429d)}
        {(-1.1126d , -2.1649d , -2.4793d)}
        {(-1.1867d , -2.2388d , -2.5071d)}
        {(-1.2951d , -2.0486d , -2.4609d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2946d , -1.998d , -2.2098d)}
        {(-1.2951d , -2.0486d , -2.4609d)}
        {(-1.3638d , -2.1182d , -2.4156d)}
        {(-1.3635d , -2.083d , -2.2407d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.1867d , -2.2388d , -2.5071d)}
        {(-1.2883d , -2.2508d , -2.4479d)}
        {(-1.3638d , -2.1182d , -2.4156d)}
        {(-1.2951d , -2.0486d , -2.4609d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6152d , -2.645d , -1.7842d)}
        {(-1.4219d , -2.6203d , -1.8312d)}
        {(-1.2886d , -2.2177d , -2.2172d)}
        {(-1.3635d , -2.083d , -2.2407d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.6637d , -3.0395d , -1.4071d)}
        {(-1.6602d , -2.9628d , -1.3524d)}
        {(-1.6477d , -2.9599d , -1.3684d)}
        {(-1.6507d , -3.0261d , -1.4156d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3522d , -2.8782d , -1.4923d)}
        {(-1.4015d , -2.8234d , -1.566d)}
        {(-1.4049d , -2.8984d , -1.6195d)}
        {(-1.3555d , -2.9531d , -1.5458d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.5805d , -2.8893d , -1.4716d)}
        {(-1.6477d , -2.9599d , -1.3684d)}
        {(-1.6011d , -2.9759d , -1.3489d)}
        {(-1.5339d , -2.9052d , -1.4522d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4616d , -2.979d , -1.514d)}
        {(-1.4578d , -2.8935d , -1.453d)}
        {(-1.4543d , -2.8824d , -1.48d)}
        {(-1.4577d , -2.9573d , -1.5335d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4515d , -2.9198d , -1.4369d)}
        {(-1.4578d , -2.8935d , -1.453d)}
        {(-1.4616d , -2.979d , -1.514d)}
        {(-1.4544d , -2.986d , -1.4842d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.4014d , -2.9808d , -1.5153d)}
        {(-1.4077d , -2.9874d , -1.4851d)}
        {(-1.4544d , -2.986d , -1.4842d)}
        {(-1.4616d , -2.979d , -1.514d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.3461d , -2.9744d , -1.5278d)}
        {(-1.3555d , -2.9531d , -1.5458d)}
        {(-1.3028d , -2.9382d , -1.5701d)}
        {(-1.2858d , -2.9574d , -1.5555d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-1.2406d , -3.0019d , -1.324d)}
        {(-1.1866d , -2.9866d , -1.3488d)}
        {(-1.1955d , -2.9766d , -1.3623d)}
        {(-1.2496d , -2.9919d , -1.3374d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.492d , 0.4786d , -2.6529d)}
        {(0.8459d , 0.4786d , -2.6529d)}
        {(0.8027d , 0.3073d , -2.6923d)}
        {(0.5351d , 0.3073d , -2.6923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2023d , -2.0105d , -2.4501d)}
        {(1.2986d , -2.0435d , -2.4681d)}
        {(1.1902d , -2.2338d , -2.5143d)}
        {(1.1162d , -2.1598d , -2.4865d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.1907d , -2.1862d , -2.1832d)}
        {(1.1173d , -2.1229d , -2.226d)}
        {(1.1162d , -2.1598d , -2.4865d)}
        {(1.1902d , -2.2338d , -2.5143d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2221d , -1.8138d , -1.3679d)}
        {(-0.2221d , -1.8138d , -1.3679d)}
        {(-0.2565d , -1.7904d , -1.6397d)}
        {(0.2565d , -1.7904d , -1.6397d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4419d , -2.8833d , -1.5738d)}
        {(1.3926d , -2.9365d , -1.4991d)}
        {(1.3398d , -2.92d , -1.5222d)}
        {(1.3891d , -2.8668d , -1.5969d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3926d , -2.9365d , -1.4991d)}
        {(1.3828d , -2.9575d , -1.4808d)}
        {(1.3226d , -2.9387d , -1.5072d)}
        {(1.3398d , -2.92d , -1.5222d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2952d , -3.0329d , -1.3546d)}
        {(1.2486d , -3.0183d , -1.3751d)}
        {(1.3159d , -2.9457d , -1.477d)}
        {(1.3625d , -2.9603d , -1.4565d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2359d , -3.0321d , -1.3669d)}
        {(1.29d , -3.0491d , -1.3432d)}
        {(1.281d , -3.0587d , -1.3296d)}
        {(1.2269d , -3.0418d , -1.3533d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.1675d , -3.231d , -1.3028d)}
        {(1.1877d , -3.2373d , -1.294d)}
        {(1.281d , -2.9819d , -1.2748d)}
        {(1.2269d , -2.965d , -1.2985d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.1675d , -3.231d , -1.3028d)}
        {(1.2269d , -2.965d , -1.2985d)}
        {(1.2269d , -3.0418d , -1.3533d)}
        {(1.1675d , -3.2597d , -1.3233d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2269d , -3.0418d , -1.3533d)}
        {(1.281d , -3.0587d , -1.3296d)}
        {(1.1877d , -3.266d , -1.3144d)}
        {(1.1675d , -3.2597d , -1.3233d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2486d , -2.9521d , -1.3279d)}
        {(1.2952d , -2.9667d , -1.3074d)}
        {(1.3625d , -2.894d , -1.4093d)}
        {(1.3159d , -2.8794d , -1.4297d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4382d , -2.9656d , -1.4696d)}
        {(1.4985d , -2.9656d , -1.4696d)}
        {(1.4917d , -2.9724d , -1.4395d)}
        {(1.445d , -2.9724d , -1.4395d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1693d , -3.1424d , 0.8315d)}
        {(-0.0846d , -3.1071d , 0.7121d)}
        {(-0.0846d , -3.1392d , 0.6434d)}
        {(-0.1693d , -3.1755d , 0.7633d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0733d , -3.2252d , 0.9447d)}
        {(-0.1084d , -3.0814d , 0.8197d)}
        {(0.1084d , -3.0814d , 0.8197d)}
        {(0.0733d , -3.2252d , 0.9447d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0733d , -3.2252d , 0.9447d)}
        {(-0.0458d , -3.1778d , 1.0121d)}
        {(-0.0676d , -3.0114d , 0.9194d)}
        {(-0.1084d , -3.0814d , 0.8197d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0752d , -2.2271d , 0.9381d)}
        {(-0.0998d , -2.2045d , 0.9473d)}
        {(-0.2182d , -2.1885d , 0.9656d)}
        {(-0.488d , -2.4014d , 0.965d)}
        {(-0.1011d , -2.4014d , 0.965d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.488d , -2.4014d , 0.965d)}
        {(0.1011d , -2.4014d , 0.965d)}
        {(-0.1011d , -2.4014d , 0.965d)}
        {(-0.488d , -2.4014d , 0.965d)}
        {(-0.2293d , -2.6539d , 1.0525d)}
        {(0.2293d , -2.6539d , 1.0525d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0764d , -3.2061d , 1.6414d)}
        {(-0.0932d , -3.3367d , 1.2806d)}
        {(0.0932d , -3.3367d , 1.2806d)}
        {(0.0764d , -3.2061d , 1.6414d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1493d , -3.0299d , 1.2402d)}
        {(0.2531d , -3.1242d , 1.1617d)}
        {(0.1948d , -3.1145d , 1.1545d)}
        {(0.115d , -3.0214d , 1.2321d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1151d , -3.0523d , 1.2502d)}
        {(0.115d , -3.0214d , 1.2321d)}
        {(0.1948d , -3.1145d , 1.1545d)}
        {(0.195d , -3.1537d , 1.1667d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1198d , -3.0728d , 1.2789d)}
        {(0.1151d , -3.0523d , 1.2502d)}
        {(0.195d , -3.1537d , 1.1667d)}
        {(0.203d , -3.1741d , 1.1954d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2816d , -3.1638d , 1.1402d)}
        {(0.2667d , -3.1569d , 1.2077d)}
        {(0.203d , -3.1741d , 1.1954d)}
        {(0.2179d , -3.181d , 1.1279d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.268d , -3.1311d , 1.0943d)}
        {(0.2099d , -3.1606d , 1.0992d)}
        {(0.195d , -3.1537d , 1.1667d)}
        {(0.2531d , -3.1242d , 1.1617d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.6142d , -2.9735d , 0.204d)}
        {(0.2816d , -3.1638d , 1.1402d)}
        {(0.2179d , -3.181d , 1.1279d)}
        {(0.548d , -2.9845d , 0.2038d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5839d , -2.868d , 0.1576d)}
        {(0.5941d , -2.932d , 0.2392d)}
        {(0.6142d , -2.9735d , 0.204d)}
        {(0.604d , -2.9095d , 0.1224d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5839d , -2.868d , 0.1576d)}
        {(0.604d , -2.9095d , 0.1224d)}
        {(0.5378d , -2.9205d , 0.1222d)}
        {(0.5256d , -2.8944d , 0.144d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2293d , -3.028d , 1.577d)}
        {(0.0764d , -3.2061d , 1.6414d)}
        {(0.0932d , -3.3367d , 1.2806d)}
        {(0.2667d , -3.1569d , 1.2077d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1574d , -3.0626d , 1.2861d)}
        {(0.2667d , -3.1569d , 1.2077d)}
        {(0.0932d , -3.3367d , 1.2806d)}
        {(0.055d , -3.2077d , 1.3838d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1198d , -3.0728d , 1.2789d)}
        {(0.203d , -3.1741d , 1.1954d)}
        {(0.2667d , -3.1569d , 1.2077d)}
        {(0.1574d , -3.0626d , 1.2861d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.268d , -3.1311d , 1.0943d)}
        {(0.2531d , -3.1242d , 1.1617d)}
        {(0.2667d , -3.1569d , 1.2077d)}
        {(0.2816d , -3.1638d , 1.1402d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2179d , -3.181d , 1.1279d)}
        {(0.203d , -3.1741d , 1.1954d)}
        {(0.195d , -3.1537d , 1.1667d)}
        {(0.2099d , -3.1606d , 1.0992d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.268d , -3.1311d , 1.0943d)}
        {(0.2816d , -3.1638d , 1.1402d)}
        {(0.6142d , -2.9735d , 0.204d)}
        {(0.5941d , -2.932d , 0.2392d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.268d , -3.1311d , 1.0943d)}
        {(0.5941d , -2.932d , 0.2392d)}
        {(0.5358d , -2.9583d , 0.2257d)}
        {(0.2099d , -3.1606d , 1.0992d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2179d , -3.181d , 1.1279d)}
        {(0.2099d , -3.1606d , 1.0992d)}
        {(0.5358d , -2.9583d , 0.2257d)}
        {(0.548d , -2.9845d , 0.2038d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5256d , -2.8944d , 0.144d)}
        {(0.5358d , -2.9583d , 0.2257d)}
        {(0.5941d , -2.932d , 0.2392d)}
        {(0.5839d , -2.868d , 0.1576d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.6142d , -2.9735d , 0.204d)}
        {(0.548d , -2.9845d , 0.2038d)}
        {(0.5378d , -2.9205d , 0.1222d)}
        {(0.604d , -2.9095d , 0.1224d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.548d , -2.9845d , 0.2038d)}
        {(0.5358d , -2.9583d , 0.2257d)}
        {(0.5256d , -2.8944d , 0.144d)}
        {(0.5378d , -2.9205d , 0.1222d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2531d , -3.1242d , 1.1617d)}
        {(0.195d , -3.1537d , 1.1667d)}
        {(0.1948d , -3.1145d , 1.1545d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2293d , -3.028d , 1.577d)}
        {(0.2667d , -3.1569d , 1.2077d)}
        {(0.2531d , -3.1242d , 1.1617d)}
        {(0.243d , -3.0375d , 1.0465d)}
        {(0.1993d , -2.7804d , 1.2299d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.055d , -3.2077d , 1.3838d)}
        {(0.0932d , -3.3367d , 1.2806d)}
        {(-0.0932d , -3.3367d , 1.2806d)}
        {(-0.055d , -3.2077d , 1.3838d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.115d , -3.0214d , 1.2321d)}
        {(0.115d , -3.0214d , 1.2321d)}
        {(0.1151d , -3.0523d , 1.2502d)}
        {(-0.1151d , -3.0523d , 1.2502d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2293d , -2.6539d , 1.0525d)}
        {(0.1993d , -2.7804d , 1.2299d)}
        {(0.243d , -3.0375d , 1.0465d)}
        {(0.2795d , -2.911d , 0.8691d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0904d , -2.2038d , 0.9462d)}
        {(0.2182d , -2.1885d , 0.9656d)}
        {(0.3459d , -1.985d , 0.6802d)}
        {(0.1153d , -1.985d , 0.6802d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.115d , -3.0214d , 1.2321d)}
        {(-0.1151d , -3.0523d , 1.2502d)}
        {(-0.195d , -3.1537d , 1.1667d)}
        {(-0.1948d , -3.1145d , 1.1545d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0458d , -3.1778d , 1.0121d)}
        {(-0.0458d , -3.1778d , 1.0121d)}
        {(-0.0733d , -3.2252d , 0.9447d)}
        {(0.0733d , -3.2252d , 0.9447d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1153d , -1.985d , 0.6802d)}
        {(-0.0998d , -2.2045d , 0.9473d)}
        {(-0.0752d , -2.2271d , 0.9381d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1153d , -1.985d , 0.6802d)}
        {(0.3459d , -1.985d , 0.6802d)}
        {(0.444d , -1.5651d , 0.3978d)}
        {(0.1839d , -1.5651d , 0.3978d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1153d , -1.985d , 0.6802d)}
        {(-0.0752d , -2.2271d , 0.9381d)}
        {(0.0752d , -2.2271d , 0.9381d)}
        {(0.1153d , -1.985d , 0.6802d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2293d , -3.028d , 1.577d)}
        {(-0.1993d , -2.7804d , 1.2299d)}
        {(-0.243d , -3.0375d , 1.0465d)}
        {(-0.2531d , -3.1242d , 1.1617d)}
        {(-0.2667d , -3.1569d , 1.2077d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.195d , -3.1537d , 1.1667d)}
        {(-0.203d , -3.1741d , 1.1954d)}
        {(-0.2179d , -3.181d , 1.1279d)}
        {(-0.2099d , -3.1606d , 1.0992d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5945d , -2.9959d , 0.1977d)}
        {(-0.2816d , -3.1638d , 1.1402d)}
        {(-0.268d , -3.1311d , 1.0943d)}
        {(-0.6124d , -2.9476d , 0.2244d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.541d , -2.8578d , 0.0936d)}
        {(-0.5484d , -2.9373d , 0.2335d)}
        {(-0.5369d , -2.9675d , 0.2171d)}
        {(-0.5296d , -2.8879d , 0.0772d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.541d , -2.8578d , 0.0936d)}
        {(-0.605d , -2.8681d , 0.0846d)}
        {(-0.6124d , -2.9476d , 0.2244d)}
        {(-0.5484d , -2.9373d , 0.2335d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5945d , -2.9959d , 0.1977d)}
        {(-0.6124d , -2.9476d , 0.2244d)}
        {(-0.605d , -2.8681d , 0.0846d)}
        {(-0.5872d , -2.9164d , 0.0579d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1948d , -3.1145d , 1.1545d)}
        {(-0.195d , -3.1537d , 1.1667d)}
        {(-0.2531d , -3.1242d , 1.1617d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(7.3593d , -0.6098d , -4.6196d)}
        {(6.2549d , 0.0203d , -3.8858d)}
        {(6.1683d , 0.0175d , -3.9659d)}
        {(7.3593d , -0.5631d , -4.7279d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(7.4959d , -0.5646d , -4.4558d)}
        {(7.3593d , -0.6566d , -4.5112d)}
        {(7.3593d , -0.6098d , -4.6196d)}
        {(7.3593d , -0.5631d , -4.7279d)}
        {(7.3593d , -0.5163d , -4.8363d)}
        {(7.4959d , -0.4243d , -4.7808d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2667d , -3.1569d , 1.2077d)}
        {(-0.0932d , -3.3367d , 1.2806d)}
        {(-0.0764d , -3.2061d , 1.6414d)}
        {(-0.2293d , -3.028d , 1.577d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0764d , -3.2061d , 1.6414d)}
        {(0.0764d , -3.2061d , 1.6414d)}
        {(0.2293d , -3.028d , 1.577d)}
        {(0.1993d , -2.7804d , 1.2299d)}
        {(-0.1993d , -2.7804d , 1.2299d)}
        {(-0.2293d , -3.028d , 1.577d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(7.3593d , -0.6566d , -4.5112d)}
        {(5.6053d , 1.1751d , -2.8886d)}
        {(6.2549d , 0.0203d , -3.8858d)}
        {(7.3593d , -0.6098d , -4.6196d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.115d , -3.0214d , 1.2321d)}
        {(-0.115d , -3.0214d , 1.2321d)}
        {(-0.1493d , -3.0299d , 1.2402d)}
        {(-0.1434d , -2.9444d , 1.1241d)}
        {(0.1434d , -2.9444d , 1.1241d)}
        {(0.1493d , -3.0299d , 1.2402d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1574d , -3.0626d , 1.2861d)}
        {(-0.055d , -3.2077d , 1.3838d)}
        {(-0.0932d , -3.3367d , 1.2806d)}
        {(-0.2667d , -3.1569d , 1.2077d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2182d , -2.1885d , 0.9656d)}
        {(0.488d , -2.4014d , 0.965d)}
        {(0.3885d , -2.1264d , 0.5793d)}
        {(0.3459d , -1.985d , 0.6802d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.714d , 0.1565d , -3.4886d)}
        {(6.1683d , 0.0175d , -3.9659d)}
        {(6.2549d , 0.0203d , -3.8858d)}
        {(5.7553d , 0.1055d , -3.3906d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.6053d , 1.3154d , -3.2137d)}
        {(5.6922d , 1.4074d , -3.1582d)}
        {(7.4959d , -0.4243d , -4.7808d)}
        {(7.3593d , -0.5163d , -4.8363d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(7.3593d , -0.5631d , -4.7279d)}
        {(6.1683d , 0.0175d , -3.9659d)}
        {(5.6053d , 1.3154d , -3.2137d)}
        {(7.3593d , -0.5163d , -4.8363d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1993d , -2.7804d , 1.2299d)}
        {(0.1993d , -2.7804d , 1.2299d)}
        {(0.2293d , -2.6539d , 1.0525d)}
        {(-0.2293d , -2.6539d , 1.0525d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.2293d , -2.6539d , 1.0525d)}
        {(0.2795d , -2.911d , 0.8691d)}
        {(0.4737d , -2.7102d , 0.5876d)}
        {(0.4098d , -2.4531d , 0.771d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.488d , -2.4014d , 0.965d)}
        {(0.4098d , -2.4531d , 0.771d)}
        {(0.6152d , -2.2523d , 0.4895d)}
        {(0.3885d , -2.1264d , 0.5793d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0752d , -2.2271d , 0.9381d)}
        {(0.0904d , -2.2038d , 0.9462d)}
        {(0.1153d , -1.985d , 0.6802d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1198d , -3.0728d , 1.2789d)}
        {(-0.203d , -3.1741d , 1.1954d)}
        {(-0.195d , -3.1537d , 1.1667d)}
        {(-0.1151d , -3.0523d , 1.2502d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2667d , -3.1569d , 1.2077d)}
        {(-0.203d , -3.1741d , 1.1954d)}
        {(-0.1198d , -3.0728d , 1.2789d)}
        {(-0.1574d , -3.0626d , 1.2861d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1011d , -2.4014d , 0.965d)}
        {(0.0752d , -2.2271d , 0.9381d)}
        {(-0.0752d , -2.2271d , 0.9381d)}
        {(-0.1011d , -2.4014d , 0.965d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1493d , -3.0299d , 1.2402d)}
        {(-0.115d , -3.0214d , 1.2321d)}
        {(-0.1948d , -3.1145d , 1.1545d)}
        {(-0.2531d , -3.1242d , 1.1617d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2667d , -3.1569d , 1.2077d)}
        {(-0.2816d , -3.1638d , 1.1402d)}
        {(-0.2179d , -3.181d , 1.1279d)}
        {(-0.203d , -3.1741d , 1.1954d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2531d , -3.1242d , 1.1617d)}
        {(-0.195d , -3.1537d , 1.1667d)}
        {(-0.2099d , -3.1606d , 1.0992d)}
        {(-0.268d , -3.1311d , 1.0943d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2667d , -3.1569d , 1.2077d)}
        {(-0.2531d , -3.1242d , 1.1617d)}
        {(-0.268d , -3.1311d , 1.0943d)}
        {(-0.2816d , -3.1638d , 1.1402d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5369d , -2.9675d , 0.2171d)}
        {(-0.5484d , -2.9373d , 0.2335d)}
        {(-0.2099d , -3.1606d , 1.0992d)}
        {(-0.2179d , -3.181d , 1.1279d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2099d , -3.1606d , 1.0992d)}
        {(-0.5484d , -2.9373d , 0.2335d)}
        {(-0.6124d , -2.9476d , 0.2244d)}
        {(-0.268d , -3.1311d , 1.0943d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2179d , -3.181d , 1.1279d)}
        {(-0.2816d , -3.1638d , 1.1402d)}
        {(-0.5945d , -2.9959d , 0.1977d)}
        {(-0.5369d , -2.9675d , 0.2171d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5296d , -2.8879d , 0.0772d)}
        {(-0.5369d , -2.9675d , 0.2171d)}
        {(-0.5945d , -2.9959d , 0.1977d)}
        {(-0.5872d , -2.9164d , 0.0579d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5296d , -2.8879d , 0.0772d)}
        {(-0.5872d , -2.9164d , 0.0579d)}
        {(-0.605d , -2.8681d , 0.0846d)}
        {(-0.541d , -2.8578d , 0.0936d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1493d , -3.0299d , 1.2402d)}
        {(-0.2531d , -3.1242d , 1.1617d)}
        {(-0.243d , -3.0375d , 1.0465d)}
        {(-0.1434d , -2.9444d , 1.1241d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.444d , -1.5651d , 0.3978d)}
        {(0.3459d , -1.985d , 0.6802d)}
        {(0.3885d , -2.1264d , 0.5793d)}
        {(0.444d , -1.7536d , 0.2634d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1649d , -2.8179d , 0.9467d)}
        {(0.2795d , -2.6171d , 0.6652d)}
        {(0.4737d , -2.7102d , 0.5876d)}
        {(0.2795d , -2.911d , 0.8691d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1434d , -2.9444d , 1.1241d)}
        {(-0.1434d , -2.9444d , 1.1241d)}
        {(-0.1649d , -2.8179d , 0.9467d)}
        {(0.1649d , -2.8179d , 0.9467d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1693d , -3.1424d , 0.8315d)}
        {(0.1409d , -3.2234d , 0.8708d)}
        {(0.1409d , -3.2565d , 0.8026d)}
        {(0.1693d , -3.1755d , 0.7633d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0846d , -3.1071d , 0.7121d)}
        {(0.0846d , -3.1392d , 0.6434d)}
        {(-0.0846d , -3.1392d , 0.6434d)}
        {(-0.0846d , -3.1071d , 0.7121d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.1153d , -1.985d , 0.6802d)}
        {(0.1493d , -1.6986d , 0.3027d)}
        {(-0.1493d , -1.6986d , 0.3027d)}
        {(-0.1153d , -1.985d , 0.6802d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0846d , -3.1392d , 0.6434d)}
        {(0.1351d , -2.9564d , 0.5478d)}
        {(-0.1351d , -2.9564d , 0.5478d)}
        {(-0.0846d , -3.1392d , 0.6434d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1839d , -1.5651d , 0.3978d)}
        {(-0.1153d , -1.985d , 0.6802d)}
        {(-0.1493d , -1.6986d , 0.3027d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.6053d , 1.1751d , -2.8886d)}
        {(5.6922d , 1.2671d , -2.8332d)}
        {(0.7279d , 2.4514d , -1.1186d)}
        {(0.8001d , 2.3593d , -1.1741d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.139d , -1.4106d , -3.3931d)}
        {(5.139d , -1.4573d , -3.2848d)}
        {(5.0801d , -1.5566d , -3.3276d)}
        {(5.0801d , -1.5098d , -3.436d)}
        {(5.0801d , -1.4631d , -3.5443d)}
        {(5.0801d , -1.4163d , -3.6527d)}
        {(5.139d , -1.317d , -3.6098d)}
        {(5.139d , -1.3638d , -3.5015d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.4098d , -2.4531d , 0.771d)}
        {(-0.6152d , -2.2523d , 0.4895d)}
        {(-0.676d , -2.5094d , 0.3061d)}
        {(-0.4737d , -2.7102d , 0.5876d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5836d , 2.7757d , -1.3327d)}
        {(0.5836d , 2.6354d , -1.0077d)}
        {(0.7279d , 2.4514d , -1.1186d)}
        {(0.7279d , 2.5917d , -1.4437d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7279d , 2.5917d , -1.4437d)}
        {(5.6922d , 1.4074d , -3.1582d)}
        {(5.6053d , 1.3154d , -3.2137d)}
        {(0.8001d , 2.4996d , -1.4992d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7751d , 2.152d , -1.3476d)}
        {(0.8132d , 2.168d , -1.2724d)}
        {(0.5246d , 2.3125d , -1.2101d)}
        {(0.5629d , 2.152d , -1.3476d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.8001d , 2.4996d , -1.4992d)}
        {(5.714d , 0.1565d , -3.4886d)}
        {(4.8369d , -0.3267d , -3.4033d)}
        {(0.8722d , 2.4076d , -1.5546d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4737d , -2.5634d , 0.2676d)}
        {(0.2271d , -2.8848d , 0.4186d)}
        {(-0.2271d , -2.8848d , 0.4186d)}
        {(-0.4737d , -2.5634d , 0.2676d)}
        {(-0.3139d , -2.3816d , -0.1604d)}
        {(0.3139d , -2.3816d , -0.1604d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6881d , -2.9521d , -1.3279d)}
        {(1.7008d , -2.9553d , -1.3121d)}
        {(1.7008d , -3.0321d , -1.3669d)}
        {(1.6881d , -3.0183d , -1.3751d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.7098d , -3.0418d , -1.3533d)}
        {(1.6557d , -3.0587d , -1.3296d)}
        {(1.6467d , -3.0491d , -1.3432d)}
        {(1.7008d , -3.0321d , -1.3669d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6415d , -3.0329d , -1.3546d)}
        {(1.6415d , -2.9667d , -1.3074d)}
        {(1.5742d , -2.894d , -1.4093d)}
        {(1.5742d , -2.9603d , -1.4565d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5442d , -2.8615d , -1.4455d)}
        {(1.597d , -2.845d , -1.4687d)}
        {(1.5476d , -2.7917d , -1.5434d)}
        {(1.4948d , -2.8082d , -1.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.445d , -2.9061d , -1.3923d)}
        {(1.4382d , -2.88d , -1.4085d)}
        {(1.4382d , -2.9656d , -1.4696d)}
        {(1.445d , -2.9724d , -1.4395d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2952d , -3.0329d , -1.3546d)}
        {(1.2952d , -2.9667d , -1.3074d)}
        {(1.29d , -2.9722d , -1.2884d)}
        {(1.29d , -3.0491d , -1.3432d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4382d , -2.9656d , -1.4696d)}
        {(1.4419d , -2.9438d , -1.4889d)}
        {(1.4948d , -2.9438d , -1.4889d)}
        {(1.4985d , -2.9656d , -1.4696d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4917d , -3.0549d , -1.3238d)}
        {(1.445d , -3.0549d , -1.3238d)}
        {(1.445d , -2.9724d , -1.4395d)}
        {(1.4917d , -2.9724d , -1.4395d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.0801d , -1.4631d , -3.5443d)}
        {(5.0801d , -1.5098d , -3.436d)}
        {(2.7458d , -0.0506d , -2.7692d)}
        {(2.7458d , -0.0039d , -2.8775d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4382d , -2.88d , -1.4085d)}
        {(1.4985d , -2.88d , -1.4085d)}
        {(1.4948d , -2.8687d , -1.4354d)}
        {(1.4419d , -2.8687d , -1.4354d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.445d , -2.9061d , -1.3923d)}
        {(1.445d , -2.9724d , -1.4395d)}
        {(1.445d , -3.0549d , -1.3238d)}
        {(1.445d , -2.9887d , -1.2766d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5539d , -2.8719d , -1.4198d)}
        {(1.5442d , -2.8615d , -1.4455d)}
        {(1.5442d , -2.9365d , -1.4991d)}
        {(1.5539d , -2.9575d , -1.4808d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5442d , -2.9365d , -1.4991d)}
        {(1.597d , -2.92d , -1.5222d)}
        {(1.6142d , -2.9387d , -1.5072d)}
        {(1.5539d , -2.9575d , -1.4808d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4413d , -3.0712d , -1.3122d)}
        {(1.4954d , -3.0712d , -1.3122d)}
        {(1.4954d , -3.0822d , -1.2967d)}
        {(1.4413d , -3.0822d , -1.2967d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4413d , -3.0822d , -1.2967d)}
        {(1.4954d , -3.0822d , -1.2967d)}
        {(1.4785d , -3.3059d , -1.2585d)}
        {(1.4583d , -3.3059d , -1.2585d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5246d , 2.3125d , -1.2101d)}
        {(0.5246d , 2.4528d , -1.5351d)}
        {(0.5629d , 2.2426d , -1.5575d)}
        {(0.5629d , 2.152d , -1.3476d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.5246d , 2.4528d , -1.5351d)}
        {(0.8132d , 2.3083d , -1.5975d)}
        {(0.7751d , 2.2426d , -1.5575d)}
        {(0.5629d , 2.2426d , -1.5575d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4413d , -2.9944d , -1.2574d)}
        {(1.4413d , -3.0054d , -1.242d)}
        {(1.4954d , -3.0054d , -1.242d)}
        {(1.4954d , -2.9944d , -1.2574d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4917d , -2.9887d , -1.2766d)}
        {(1.4954d , -2.9944d , -1.2574d)}
        {(1.4954d , -3.0712d , -1.3122d)}
        {(1.4917d , -3.0549d , -1.3238d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4583d , -3.2773d , -1.2381d)}
        {(1.4413d , -3.0054d , -1.242d)}
        {(1.4413d , -3.0822d , -1.2967d)}
        {(1.4583d , -3.3059d , -1.2585d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(5.0801d , -1.4631d , -3.5443d)}
        {(2.7458d , -0.0039d , -2.8775d)}
        {(0.8132d , 2.3083d , -1.5975d)}
        {(5.0801d , -1.4163d , -3.6527d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4413d , -2.9944d , -1.2574d)}
        {(1.4413d , -3.0712d , -1.3122d)}
        {(1.4413d , -3.0822d , -1.2967d)}
        {(1.4413d , -3.0054d , -1.242d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5539d , -2.8719d , -1.4198d)}
        {(1.5742d , -2.894d , -1.4093d)}
        {(1.6208d , -2.8794d , -1.4297d)}
        {(1.6142d , -2.8531d , -1.4462d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.6881d , -2.9521d , -1.3279d)}
        {(1.6881d , -3.0183d , -1.3751d)}
        {(1.6208d , -2.9457d , -1.477d)}
        {(1.6208d , -2.8794d , -1.4297d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.445d , -2.9887d , -1.2766d)}
        {(1.4917d , -2.9887d , -1.2766d)}
        {(1.4917d , -2.9061d , -1.3923d)}
        {(1.445d , -2.9061d , -1.3923d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4917d , -2.9061d , -1.3923d)}
        {(1.4917d , -2.9724d , -1.4395d)}
        {(1.4985d , -2.9656d , -1.4696d)}
        {(1.4985d , -2.88d , -1.4085d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4948d , -2.8687d , -1.4354d)}
        {(1.4985d , -2.88d , -1.4085d)}
        {(1.4985d , -2.9656d , -1.4696d)}
        {(1.4948d , -2.9438d , -1.4889d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4382d , -2.9656d , -1.4696d)}
        {(1.4382d , -2.88d , -1.4085d)}
        {(1.4419d , -2.8687d , -1.4354d)}
        {(1.4419d , -2.9438d , -1.4889d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4419d , -2.8687d , -1.4354d)}
        {(1.4948d , -2.8687d , -1.4354d)}
        {(1.4948d , -2.8082d , -1.5202d)}
        {(1.4419d , -2.8082d , -1.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.281d , -3.0587d , -1.3296d)}
        {(1.281d , -2.9819d , -1.2748d)}
        {(1.1877d , -3.2373d , -1.294d)}
        {(1.1877d , -3.266d , -1.3144d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.1877d , -3.266d , -1.3144d)}
        {(1.1877d , -3.2373d , -1.294d)}
        {(1.1675d , -3.231d , -1.3028d)}
        {(1.1675d , -3.2597d , -1.3233d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3625d , -2.894d , -1.4093d)}
        {(1.2952d , -2.9667d , -1.3074d)}
        {(1.2952d , -3.0329d , -1.3546d)}
        {(1.3625d , -2.9603d , -1.4565d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2269d , -2.965d , -1.2985d)}
        {(1.2359d , -2.9553d , -1.3121d)}
        {(1.2359d , -3.0321d , -1.3669d)}
        {(1.2269d , -3.0418d , -1.3533d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3159d , -2.8794d , -1.4297d)}
        {(1.3625d , -2.894d , -1.4093d)}
        {(1.3828d , -2.8719d , -1.4198d)}
        {(1.3226d , -2.8531d , -1.4462d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3828d , -2.8719d , -1.4198d)}
        {(1.3926d , -2.8615d , -1.4455d)}
        {(1.3398d , -2.845d , -1.4687d)}
        {(1.3226d , -2.8531d , -1.4462d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2486d , -2.9521d , -1.3279d)}
        {(1.3159d , -2.8794d , -1.4297d)}
        {(1.3159d , -2.9457d , -1.477d)}
        {(1.2486d , -3.0183d , -1.3751d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4419d , -2.8082d , -1.5202d)}
        {(1.3926d , -2.8615d , -1.4455d)}
        {(1.3926d , -2.9365d , -1.4991d)}
        {(1.4419d , -2.8833d , -1.5738d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3226d , -2.8531d , -1.4462d)}
        {(1.3398d , -2.845d , -1.4687d)}
        {(1.3398d , -2.92d , -1.5222d)}
        {(1.3226d , -2.9387d , -1.5072d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3398d , -2.92d , -1.5222d)}
        {(1.3398d , -2.845d , -1.4687d)}
        {(1.3891d , -2.7917d , -1.5434d)}
        {(1.3891d , -2.8668d , -1.5969d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4948d , -2.8082d , -1.5202d)}
        {(1.5476d , -2.7917d , -1.5434d)}
        {(1.5476d , -2.6667d , -1.7187d)}
        {(1.3891d , -2.6667d , -1.7187d)}
        {(1.3891d , -2.7917d , -1.5434d)}
        {(1.4419d , -2.8082d , -1.5202d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.3139d , -2.0496d , -0.1276d)}
        {(0.3675d , -1.567d , -1.2727d)}
        {(0.3675d , -1.0923d , -1.1382d)}
        {(0.3139d , -1.7379d , 0.0026d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0338d , -1.7379d , 0.0026d)}
        {(0.3139d , -1.7379d , 0.0026d)}
        {(0.3675d , -1.0923d , -1.1382d)}
        {(0.0606d , -1.0923d , -1.1382d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5808d , -2.5972d , -1.7835d)}
        {(1.5476d , -2.6667d , -1.7187d)}
        {(1.5476d , -2.7417d , -1.7722d)}
        {(1.5763d , -2.601d , -1.9351d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3891d , -2.6667d , -1.7187d)}
        {(1.5476d , -2.6667d , -1.7187d)}
        {(1.5808d , -2.5972d , -1.7835d)}
        {(1.4177d , -2.5902d , -1.783d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3891d , -2.8668d , -1.5969d)}
        {(1.3891d , -2.7917d , -1.5434d)}
        {(1.3891d , -2.6667d , -1.7187d)}
        {(1.3891d , -2.7417d , -1.7722d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4177d , -2.5902d , -1.783d)}
        {(1.5033d , -2.6533d , -1.9355d)}
        {(1.3891d , -2.7417d , -1.7722d)}
        {(1.3891d , -2.6667d , -1.7187d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.5476d , -2.7417d , -1.7722d)}
        {(1.3891d , -2.7417d , -1.7722d)}
        {(1.5033d , -2.6533d , -1.9355d)}
        {(1.5763d , -2.601d , -1.9351d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0d , -1.0923d , -1.1382d)}
        {(0.0d , -1.7379d , 0.0026d)}
        {(0.0338d , -1.7379d , 0.0026d)}
        {(0.0606d , -1.0923d , -1.1382d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.4761d , -0.1911d , -2.883d)}
        {(2.7458d , -0.0506d , -2.7692d)}
        {(0.8132d , 2.168d , -1.2724d)}
        {(0.7751d , 2.152d , -1.3476d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4244d , -0.929d , -1.4905d)}
        {(0.3675d , -1.0923d , -1.1382d)}
        {(0.3675d , -1.567d , -1.2727d)}
        {(0.4244d , -1.4928d , -1.5721d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.4244d , -0.929d , -1.4905d)}
        {(0.089d , -0.929d , -1.4905d)}
        {(0.0606d , -1.0923d , -1.1382d)}
        {(0.3675d , -1.0923d , -1.1382d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0511d , -1.0923d , -1.1382d)}
        {(-0.3675d , -1.0923d , -1.1382d)}
        {(-0.3139d , -1.7379d , 0.0026d)}
        {(-0.0338d , -1.7379d , 0.0026d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.7394d , 2.4456d , -1.1215d)}
        {(-0.807d , 2.3467d , -1.18d)}
        {(-0.8745d , 2.2478d , -1.2384d)}
        {(-0.8044d , 2.1547d , -1.2782d)}
        {(-0.5342d , 2.3267d , -1.2039d)}
        {(-0.6044d , 2.6434d , -1.0047d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5629d , 2.1521d , -1.3477d)}
        {(-0.5342d , 2.3267d , -1.2039d)}
        {(-0.8044d , 2.1547d , -1.2782d)}
        {(-0.7751d , 2.1521d , -1.3477d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.5335d , 2.4661d , -1.5294d)}
        {(-0.5629d , 2.2426d , -1.5575d)}
        {(-0.7751d , 2.2426d , -1.5575d)}
        {(-0.8037d , 2.2941d , -1.6036d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.7751d , 0.4803d , -2.3272d)}
        {(0.7751d , 2.152d , -1.3476d)}
        {(0.5629d , 2.152d , -1.3476d)}
        {(0.5629d , 0.4803d , -2.3272d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.3671d , -2.0779d , -2.2479d)}
        {(1.3674d , -2.1131d , -2.4228d)}
        {(1.2986d , -2.0435d , -2.4681d)}
        {(1.2982d , -1.9929d , -2.2169d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(1.2982d , -1.9929d , -2.2169d)}
        {(1.2986d , -2.0435d , -2.4681d)}
        {(1.2023d , -2.0105d , -2.4501d)}
        {(1.2011d , -1.9703d , -2.2526d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1839d , -1.4386d , 0.2205d)}
        {(-0.1493d , -1.572d , 0.1253d)}
        {(-0.1621d , -1.5457d , 0.0976d)}
        {(-0.1939d , -1.4232d , 0.1849d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1839d , -1.4386d , 0.2205d)}
        {(-0.1939d , -1.4232d , 0.1849d)}
        {(-0.4326d , -1.4232d , 0.1849d)}
        {(-0.444d , -1.4386d , 0.2205d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1493d , -1.572d , 0.1253d)}
        {(-0.1493d , -1.6986d , 0.3027d)}
        {(-0.444d , -1.7536d , 0.2634d)}
        {(-0.444d , -1.6271d , 0.086d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1621d , -1.5457d , 0.0976d)}
        {(-0.2282d , -1.2449d , -0.2762d)}
        {(-0.2453d , -1.1734d , -0.2382d)}
        {(-0.1939d , -1.4232d , 0.1849d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1939d , -1.4232d , 0.1849d)}
        {(-0.2453d , -1.1734d , -0.2382d)}
        {(-0.3738d , -1.1734d , -0.2382d)}
        {(-0.4326d , -1.4232d , 0.1849d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.2282d , -1.2449d , -0.2762d)}
        {(-0.3738d , -1.2744d , -0.2919d)}
        {(-0.3298d , -1.0416d , -0.6402d)}
        {(-0.2777d , -1.031d , -0.6345d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.3738d , -1.1734d , -0.2382d)}
        {(-0.3298d , -1.0054d , -0.621d)}
        {(-0.3298d , -1.0416d , -0.6402d)}
        {(-0.3738d , -1.2744d , -0.2919d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.1621d , -1.5457d , 0.0976d)}
        {(-0.1493d , -1.572d , 0.1253d)}
        {(-0.444d , -1.6271d , 0.086d)}
        {(-0.4326d , -1.5962d , 0.0615d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.488d , -2.4014d , 0.965d)}
        {(0.2293d , -2.6539d , 1.0525d)}
        {(-0.0573d , -2.6269d , 0.888d)}
        {(0.0168d , -2.3744d , 0.8004d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(0.0168d , -2.3744d , 0.8004d)}
        {(0.1232d , -2.4261d , 0.6065d)}
        {(0.4098d , -2.4531d , 0.771d)}
        {(0.488d , -2.4014d , 0.965d)}))
    (Polygon (color 1.0
        0.0352826
        0.12941)
      (points {(-0.0573d , -2.6269d , 0.888d)}
        {(0.1232d , -2.4261d , 0.6065d)}
        {(0.0168d , -2.3744d , 0.8004d)}))))
'
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> xArrow [
	"(JunOpenGL3dObject xArrow)
		show;
		yourself."

	| anArrow |
	anArrow := self xUnitArrow.
	anArrow components first 
		vertexes: (Array with: -1 , 0 , 0 with: 1 , 0 , 0).
	anArrow objectsDo: [:each | each paint: ColorValue red].
	anArrow name: 'x arrow'.
	^anArrow
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> xUnitArrow [
	"((JunOpenGL3dObject xUnitArrow)
		objectsDo: [:each | each paint: ColorValue cyan];
		asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	| compoundObject xLine xArrow |
	xLine := (JunOpenGL3dPolyline with: 0 , 0 , 0 with: 0.9 , 0 , 0)
				lineWidth: 1;
				yourself.
	xArrow := (
			[self 
				coneFrom: 0 , 0 , 0
				to: 0 , 0 , 2
				radius: 1
				by: 45] 
					value 
					transform: ((Jun3dTransformation 
							scale: (1 / 30) asDouble , (1 / 30) asDouble , (1 / 20) asDouble) 
								product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)))) 
					translatedBy: 0.9 , 0 , 0.
	compoundObject := JunOpenGL3dCompoundObject new.
	compoundObject add: xLine.
	compoundObject add: xArrow.
	compoundObject flushAllPaints.
	compoundObject paint: self defaultPaint.
	compoundObject name: 'x unit arrow'.
	^compoundObject
]

{ #category : #'typical objects ball' }
JunOpenGL3dObject class >> xUnitBall [
	"(((JunOpenGL3dObject xUnitBall) paint: ColorValue pink; asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	^self ball 
		transform: (((Jun3dTransformation scale: 0.5 , 0.5 , 0.5) 
				product: (Jun3dTransformation translate: 0 , 0 , 0.5)) 
					product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)))
]

{ #category : #'typical objects box' }
JunOpenGL3dObject class >> xUnitBox [
	"(((JunOpenGL3dObject xUnitBox) paint: ColorValue pink; asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	^self box transform: ((Jun3dTransformation translate: -0.5 , -0.5 , 0)
			product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)))
]

{ #category : #'typical objects circle' }
JunOpenGL3dObject class >> xUnitCircle [
	"(JunOpenGL3dObject xUnitCircle) showWithUnitAxes."

	^self circle 
		transform: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90))
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> xUnitComposedText: composedText [ 
	"(JunOpenGL3dObject xUnitComposedText: JunSystem copyleftString asComposedText) showWithUnitAxes."

	| aPolygon |
	aPolygon := self composedText: composedText.
	aPolygon := aPolygon 
				translatedBy: 0 , (aPolygon boundingBox height / 2) negated , 0.
	^aPolygon
]

{ #category : #'typical objects cone' }
JunOpenGL3dObject class >> xUnitCone [
	"(((JunOpenGL3dObject xUnitCone)
		paint: ColorValue pink;
		asCompoundObject)
		add: JunOpenGL3dObject axes2;
		show) wireframePresentation."

	^self cone transform: ((Jun3dTransformation scale: 0.5 , 0.5 , 0.5) 
				product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)))
]

{ #category : #'typical objects cylinder' }
JunOpenGL3dObject class >> xUnitCylinder [
	"((JunOpenGL3dObject xUnitCylinder) paint: ColorValue pink; showWithUnitAxes) wireframePresentation."

	^self cylinder 
		transform: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90))
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> xUnitGlobe [
	"(((JunOpenGL3dObject xUnitGlobe) paint: ColorValue pink; asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	^self globe 
		transform: (((Jun3dTransformation scale: 0.5 , 0.5 , 0.5) 
				product: (Jun3dTransformation translate: 0 , 0 , 0.5)) 
					product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)))
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> xUnitHemisphere [
	"(((JunOpenGL3dObject xUnitHemisphere) paint: ColorValue pink; asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	^self hemisphere transform: ((((Jun3dTransformation scale: 0.5 , 0.5 , 0.5)
			product: (Jun3dTransformation translate: 0 , 0 , 0.5))
			product: (Jun3dTransformation rotateZ: (JunAngle fromDeg: 90)))
			product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)))
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> xUnitSphere [
	"(((JunOpenGL3dObject xUnitSphere) paint: ColorValue pink; asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	^self sphere transform: (((Jun3dTransformation scale: 0.5 , 0.5 , 0.5)
			product: (Jun3dTransformation translate: 0 , 0 , 0.5))
			product: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90)))
]

{ #category : #'typical objects spring' }
JunOpenGL3dObject class >> xUnitSpring [
	"(JunOpenGL3dObject xUnitSpring) paint: ColorValue pink; showWithUnitAxes."

	^self spring 
		transform: (Jun3dTransformation rotateY: (JunAngle fromDeg: 90))
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> xUnitString: aString [ 
	"(JunOpenGL3dObject xUnitString: JunSystem copyleftString) showWithUnitAxes."

	| aPolygon |
	aPolygon := self string: aString.
	aPolygon := aPolygon 
				translatedBy: 0 , (aPolygon boundingBox height / 2) negated , 0.
	^aPolygon
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> xUnitText2d: aString [ 
	"(((JunOpenGL3dObject xUnitText2d: 'Jun') paint: ColorValue pink; asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	| anObject aBox |
	anObject := self text2d: aString.
	aBox := anObject boundingBox.
	anObject := anObject transform: (((Jun3dTransformation translate: aBox center negated)
					product: (Jun3dTransformation scale: 1 / aBox width))
					product: (Jun3dTransformation translate: 0.5 , 0 , 0)).
	^anObject
]

{ #category : #'typical objects text' }
JunOpenGL3dObject class >> xUnitText3d: aString [ 
	"(((JunOpenGL3dObject xUnitText3d: 'Jun') paint: ColorValue pink; asCompoundObject) add: JunOpenGL3dObject axes2; show) wireframePresentation."

	| anObject aBox |
	anObject := self text3d: aString.
	aBox := anObject boundingBox.
	anObject := anObject transform: (((Jun3dTransformation translate: aBox center negated)
					product: (Jun3dTransformation scale: 1 / aBox width))
					product: (Jun3dTransformation translate: 0.5 , 0 , 0)).
	^anObject
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> xyArrows [
	"(JunOpenGL3dObject xyArrows)
		show;
		yourself."

	^(JunOpenGL3dCompoundObject 
		with: 
			[| anArrow |
			anArrow := self xUnitArrow.
			anArrow components first 
				vertexes: (Array with: -1 , 0 , 0 with: 1 , 0 , 0).
			anArrow objectsDo: [:each | each paint: ColorValue red].
			anArrow yourself] 
					value
		with: 
			[| anArrow |
			anArrow := self yUnitArrow.
			anArrow components first 
				vertexes: (Array with: 0 , -1 , 0 with: 0 , 1 , 0).
			anArrow objectsDo: [:each | each paint: ColorValue green].
			anArrow yourself] 
					value)
		name: 'xy arrows';
		yourself
]

{ #category : #'typical objects sphere' }
JunOpenGL3dObject class >> xyPointsAndSphere: degrees radius: radius longitude: longitude latitude: latitude [ 
	"(JunOpenGL3dObject xyPointsAndSphere: 90 radius: 1 longitude: 360 latitude: 180) last show."

	"(JunOpenGL3dObject xyPointsAndSphere: 60 radius: 1 longitude: 360 latitude: 180) last show."

	"(JunOpenGL3dObject xyPointsAndSphere: 45 radius: 1 longitude: 360 latitude: 180) last show."

	"(JunOpenGL3dObject xyPointsAndSphere: 30 radius: 1 longitude: 360 latitude: 180) last show."

	"(JunOpenGL3dObject xyPointsAndSphere: 15 radius: 5 longitude: 360 latitude: 180) last show."

	"(JunOpenGL3dObject xyPointsAndSphere: 15 radius: 5 longitude: 180 latitude: 180) last show."

	"(JunOpenGL3dObject xyPointsAndSphere: 15 radius: 5 longitude: 360 latitude: 90) last show."

	"(JunOpenGL3dObject xyPointsAndSphere: 15 radius: 5 longitude: 180 latitude: 90) last show."

	"(JunOpenGL3dObject xyPointsAndSphere: 15 radius: 5 longitude: 90 latitude: 90) last show."

	| theDegrees theRadius theLongitude theLatitude xyzBlock xyBlock numberOfPolygons pointCollections xyCollection aSphere |
	theDegrees := 1 max: (degrees min: 90).
	theRadius := 0 max: radius.
	theLongitude := 1 max: (longitude min: 360).
	theLatitude := 1 max: (latitude min: 180).
	xyzBlock := 
			[:r :pd :td | 
			| phi theta x y z accuracy |
			phi := pd asDouble degreesToRadians.
			theta := td asDouble degreesToRadians.
			x := r * theta sin * phi cos.
			y := r * theta sin * phi sin.
			z := r * theta cos.
			accuracy := JunGeometry accuracy.
			(x - 0.0d) abs < accuracy ifTrue: [x := 0.0d].
			(y - 0.0d) abs < accuracy ifTrue: [y := 0.0d].
			(z - 0.0d) abs < accuracy ifTrue: [z := 0.0d].
			x , y , z].
	xyBlock := [:phi :theta | phi / theLongitude , (theta / theLatitude)].
	numberOfPolygons := (theLongitude / theDegrees 
				* (theLatitude / theDegrees)) rounded.
	pointCollections := OrderedCollection new: numberOfPolygons.
	xyCollection := OrderedCollection new: numberOfPolygons * 4.
	0 to: theLongitude - theDegrees
		by: theDegrees
		do: 
			[:phi | 
			0 to: theLatitude - theDegrees
				by: theDegrees
				do: 
					[:theta | 
					| pointCollection firstPoint previousPoint currentPoint |
					pointCollection := OrderedCollection new: 4.
					currentPoint := xyzBlock 
								value: theRadius
								value: phi
								value: theta.
					pointCollection add: currentPoint.
					xyCollection add: (xyBlock value: phi value: theta).
					firstPoint := currentPoint.
					previousPoint := currentPoint.
					currentPoint := xyzBlock 
								value: theRadius
								value: phi
								value: theta + theDegrees.
					currentPoint = previousPoint 
						ifFalse: 
							[pointCollection add: currentPoint.
							xyCollection add: (xyBlock value: phi value: theta + theDegrees)].
					previousPoint := currentPoint.
					currentPoint := xyzBlock 
								value: theRadius
								value: phi + theDegrees
								value: theta + theDegrees.
					currentPoint = previousPoint 
						ifFalse: 
							[pointCollection add: currentPoint.
							xyCollection 
								add: (xyBlock value: phi + theDegrees value: theta + theDegrees)].
					previousPoint := currentPoint.
					currentPoint := xyzBlock 
								value: theRadius
								value: phi + theDegrees
								value: theta.
					(currentPoint = previousPoint or: [currentPoint = firstPoint]) 
						ifFalse: 
							[pointCollection add: currentPoint.
							xyCollection add: (xyBlock value: phi + theDegrees value: theta)].
					previousPoint := currentPoint.
					pointCollections add: pointCollection asArray]].
	aSphere := JunOpenGL3dCompoundObject new.
	aSphere name: 'sphere'.
	pointCollections do: 
			[:each | 
			| polygon |
			polygon := JunOpenGL3dPolygon vertexes: each.
			polygon normalVectors: (polygon vertexes 
						collect: [:p | (0 , 0 , 0 to: p) normalUnitVector]).
			aSphere add: polygon].
	aSphere objectsDo: [:each | each paint: nil].
	aSphere paint: self defaultPaint.
	^Array with: xyCollection with: aSphere
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> xyUnitArrows [
	"(JunOpenGL3dObject xyUnitArrows)
		show;
		yourself."

	^(JunOpenGL3dCompoundObject with: ((self xUnitArrow)
				objectsDo: [:each | each paint: ColorValue red];
				yourself)
		with: ((self yUnitArrow)
				objectsDo: [:each | each paint: ColorValue green];
				yourself))
		name: 'xy unit arrows';
		yourself
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> xyzArrows [
	"(JunOpenGL3dObject xyzArrows)
		show;
		yourself."

	^(JunOpenGL3dCompoundObject 
		with: 
			[| anArrow |
			anArrow := self xUnitArrow.
			anArrow components first 
				vertexes: (Array with: -1 , 0 , 0 with: 1 , 0 , 0).
			anArrow objectsDo: [:each | each paint: ColorValue red].
			anArrow yourself] 
					value
		with: 
			[| anArrow |
			anArrow := self yUnitArrow.
			anArrow components first 
				vertexes: (Array with: 0 , -1 , 0 with: 0 , 1 , 0).
			anArrow objectsDo: [:each | each paint: ColorValue green].
			anArrow yourself] 
					value
		with: 
			[| anArrow |
			anArrow := self zUnitArrow.
			anArrow components first 
				vertexes: (Array with: 0 , 0 , -1 with: 0 , 0 , 1).
			anArrow objectsDo: [:each | each paint: ColorValue blue].
			anArrow yourself] 
					value)
		name: 'xyz arrows';
		yourself
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> xyzUnitArrows [
	"(JunOpenGL3dObject xyzUnitArrows)
		show;
		yourself."

	^(JunOpenGL3dCompoundObject 
		with: ((self xUnitArrow)
				objectsDo: [:each | each paint: ColorValue red];
				yourself)
		with: ((self yUnitArrow)
				objectsDo: [:each | each paint: ColorValue green];
				yourself)
		with: ((self zUnitArrow)
				objectsDo: [:each | each paint: ColorValue blue];
				yourself))
		name: 'xyz unit arrows';
		yourself
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> yArrow [
	"(JunOpenGL3dObject yArrow)
		show;
		yourself."

	| anArrow |
	anArrow := self yUnitArrow.
	anArrow components first 
		vertexes: (Array with: 0 , -1 , 0 with: 0 , 1 , 0).
	anArrow objectsDo: [:each | each paint: ColorValue green].
	anArrow name: 'y arrow'.
	^anArrow
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> yUnitArrow [
	"((JunOpenGL3dObject yUnitArrow)
		objectsDo: [:each | each paint: ColorValue magenta];
		asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	^(self xUnitArrow 
		transform: (Jun3dTransformation rotateZ: (JunAngle fromDeg: 90)))
		name: 'y unit arrow';
		yourself
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> yzArrows [
	"(JunOpenGL3dObject yzArrows)
		show;
		yourself."

	^(JunOpenGL3dCompoundObject 
		with: 
			[| anArrow |
			anArrow := self yUnitArrow.
			anArrow components first 
				vertexes: (Array with: 0 , -1 , 0 with: 0 , 1 , 0).
			anArrow objectsDo: [:each | each paint: ColorValue green].
			anArrow yourself] 
					value
		with: 
			[| anArrow |
			anArrow := self zUnitArrow.
			anArrow components first 
				vertexes: (Array with: 0 , 0 , -1 with: 0 , 0 , 1).
			anArrow objectsDo: [:each | each paint: ColorValue blue].
			anArrow yourself] 
					value)
		name: 'yz arrows';
		yourself
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> yzUnitArrows [
	"(JunOpenGL3dObject yzUnitArrows)
		show;
		yourself."

	^(JunOpenGL3dCompoundObject with: ((self yUnitArrow)
				objectsDo: [:each | each paint: ColorValue green];
				yourself)
		with: ((self zUnitArrow)
				objectsDo: [:each | each paint: ColorValue blue];
				yourself))
		name: 'yz unit arrows';
		yourself
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> zArrow [
	"(JunOpenGL3dObject zArrow)
		show;
		yourself."

	| anArrow |
	anArrow := self zUnitArrow.
	anArrow components first 
		vertexes: (Array with: 0 , 0 , -1 with: 0 , 0 , 1).
	anArrow objectsDo: [:each | each paint: ColorValue blue].
	anArrow name: 'z arrow'.
	^anArrow
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> zUnitArrow [
	"((JunOpenGL3dObject zUnitArrow)
		objectsDo: [:each | each paint: ColorValue yellow];
		asCompoundObject)
		add: ((JunOpenGL3dObject axes)
					objectsDo: [:each | each halftone: 0.5];
					yourself);
		show;
		yourself."

	^(self xUnitArrow 
		transform: (Jun3dTransformation rotateY: (JunAngle fromDeg: -90)))
		name: 'z unit arrow';
		yourself
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> zxArrows [
	"(JunOpenGL3dObject zxArrows)
		show;
		yourself."

	^(JunOpenGL3dCompoundObject 
		with: 
			[| anArrow |
			anArrow := self zUnitArrow.
			anArrow components first 
				vertexes: (Array with: 0 , 0 , -1 with: 0 , 0 , 1).
			anArrow objectsDo: [:each | each paint: ColorValue blue].
			anArrow yourself] 
					value
		with: 
			[| anArrow |
			anArrow := self xUnitArrow.
			anArrow components first 
				vertexes: (Array with: -1 , 0 , 0 with: 1 , 0 , 0).
			anArrow objectsDo: [:each | each paint: ColorValue red].
			anArrow yourself] 
					value)
		name: 'zx arrows';
		yourself
]

{ #category : #'typical objects arrow' }
JunOpenGL3dObject class >> zxUnitArrows [
	"(JunOpenGL3dObject zxUnitArrows)
		show;
		yourself."

	^(JunOpenGL3dCompoundObject with: ((self zUnitArrow)
				objectsDo: [:each | each paint: ColorValue blue];
				yourself)
		with: ((self xUnitArrow)
				objectsDo: [:each | each paint: ColorValue red];
				yourself))
		name: 'zx unit arrows';
		yourself
]

{ #category : #accessing }
JunOpenGL3dObject >> alpha [
	alpha isNil ifTrue: [^self defaultAlpha].
	^alpha
]

{ #category : #accessing }
JunOpenGL3dObject >> alpha: aNumber [ 
	alpha := aNumber
]

{ #category : #accessing }
JunOpenGL3dObject >> area [
	| area |
	area := 0.
	self asTriangles do: [:triangle | area := area + triangle area].
	^area
]

{ #category : #converting }
JunOpenGL3dObject >> asGeometryArray [
	"JunOpenGL3dObject cube asGeometryArray."
	"JunOpenGL3dObject axes asGeometryArray."

	| aStream |
	aStream := WriteStream on: (Array new: 128).
	self geometriesDo: [:geometry | aStream nextPut: geometry].
	^aStream contents
]

{ #category : #converting }
JunOpenGL3dObject >> asImage [
	"JunOpenGL3dObject aoki asImage."
	"JunImageStream show: JunOpenGL3dObject aoki2 asImage."

	^self asImageExtent: JunOpenGLDisplayModel new defaultImageExtent
]

{ #category : #converting }
JunOpenGL3dObject >> asImageExtent: imageExtent [ 
	"JunOpenGL3dObject aoki asImageExtent: 100 @ 100."
	"JunImageStream show: (JunOpenGL3dObject aoki2 asImageExtent: 400 @ 400)."

	| displayModel |
	displayModel := JunOpenGLDisplayModel displayObject: self.
	^self
		asImageExtent: imageExtent
		eyePoint: displayModel defaultEyePoint
		sightPoint: displayModel defaultSightPoint
		upVector: displayModel defaultUpVector
]

{ #category : #converting }
JunOpenGL3dObject >> asImageExtent: imageExtent eyePoint: eyePoint sightPoint: sightPoint upVector: upVector [ 
	"
	| a3dObject anImage | 
	a3dObject := JunOpenGL3dObject aoki2. 
	anImage := a3dObject 
		asImageExtent: 100, 100 
		eyePoint: 0, 0, 100 
		sightPoint: 0, 0, 0 upVector: 0, 1, 0. 
	JunImageStream show: anImage
	"

	| displayModel |
	displayModel := JunOpenGLDisplayModel displayObject: self.
	displayModel defaultEyePoint: eyePoint.
	displayModel defaultSightPoint: sightPoint.
	displayModel defaultUpVector: upVector.
	displayModel resetView.
	^displayModel asImageExtent: imageExtent
]

{ #category : #converting }
JunOpenGL3dObject >> asImageExtent: imageExtent projectionTable: aDictionary [ 
	"
	| a3dObject anImage | 
	a3dObject := JunOpenGL3dObject aoki2. 
	anImage := a3dObject 
		asImageExtent: 100, 100 
		projectionTable: (
			(Dictionary new)
				add: #eyePoint -> (12.0d , 12.0d , 12.0d);
				add: #sightPoint -> (0.0d , 0.0d , 0.0d);
				add: #upVector -> (-0.4d , -0.4d , 0.8d);
				add: #zoomHeight -> 4.0d;
				add: #viewFactor -> 10;
				yourself). 
	JunImageStream show: anImage
	"

	| displayModel |
	displayModel := JunOpenGLDisplayModel displayObject: self.
	displayModel projectionTable: aDictionary.
	^displayModel asImageExtent: imageExtent
]

{ #category : #converting }
JunOpenGL3dObject >> asJunOpenGL3dObject [
	^self
]

{ #category : #converting }
JunOpenGL3dObject >> asLineArray [
	"JunOpenGL3dObject cube asLineArray."
	"JunOpenGL3dObject axes asLineArray."

	| aStream |
	aStream := WriteStream on: (Array new: 128).
	self
		geometriesDo: 
			[:geometry | 
			geometry isPolygon ifTrue: [geometry lineSegmentsDo: [:line | aStream nextPut: line]].
			geometry isLine ifTrue: [aStream nextPut: geometry]].
	^aStream contents
]

{ #category : #converting }
JunOpenGL3dObject >> asPointArray [
	| aStream |
	aStream := WriteStream on: (Array new: 128).
	self pointsDo: [:point | aStream nextPut: point].
	^aStream contents
]

{ #category : #converting }
JunOpenGL3dObject >> asPolygonArray [
	"JunOpenGL3dObject cube asPolygonArray."
	"JunOpenGL3dObject axes asPolygonArray."

	| aStream |
	aStream := WriteStream on: (Array new: 128).
	self polygonsDo: [:polygon | aStream nextPut: polygon copy].
	^aStream contents
]

{ #category : #converting }
JunOpenGL3dObject >> asPolygons [
	"JunOpenGL3dObject cube asPolygons paint: ColorValue gray; show."
	"JunOpenGL3dObject axes asPolygons paint: ColorValue gray; show."
	"(JunOpenGL3dObject globe: 15) asPolygons paint: ColorValue gray; show."

	| compoundObject |
	compoundObject := JunOpenGL3dCompoundObject new.
	self asPolygonArray do: [:each | compoundObject add: each asJunOpenGL3dObject].
	^compoundObject
]

{ #category : #converting }
JunOpenGL3dObject >> asPolylineArray [
	"JunOpenGL3dObject cube asPolylineArray."
	"JunOpenGL3dObject axes asPolylineArray."

	^self asLineArray collect: [:each | each asJunOpenGL3dObject]
]

{ #category : #converting }
JunOpenGL3dObject >> asPolylines [
	"JunOpenGL3dObject cube asPolylines paint: ColorValue gray; show."
	"JunOpenGL3dObject axes asPolylines paint: ColorValue gray; show."
	"(JunOpenGL3dObject globe: 15) asPolylines paint: ColorValue gray; show."

	| compoundObject |
	compoundObject := JunOpenGL3dCompoundObject new.
	self asLineArray do: [:each | compoundObject add: each asJunOpenGL3dObject].
	^compoundObject
]

{ #category : #converting }
JunOpenGL3dObject >> asTriangle [
	"JunOpenGL3dObject cube asTriangle."

	"JunOpenGL3dObject axes asTriangle."

	| triangles |
	triangles := self asTriangles.
	triangles isEmpty ifTrue: [^nil].
	^triangles first
]

{ #category : #converting }
JunOpenGL3dObject >> asTriangleArray [
	"JunOpenGL3dObject cube asTriangleArray."

	"JunOpenGL3dObject axes asTriangleArray."

	^self asTriangles
]

{ #category : #converting }
JunOpenGL3dObject >> asTrianglePatchArray [
	"JunOpenGL3dObject cube asTrianglePatchArray."

	"JunOpenGL3dObject axes asTrianglePatchArray."

	^self asTrianglePolygonArray collect: [:each | each asJunOpenGL3dObject]
]

{ #category : #converting }
JunOpenGL3dObject >> asTrianglePatches [
	"(JunOpenGL3dObject cube asTrianglePatches paint: ColorValue gray; show) hiddenlinePresentation."

	"(JunOpenGL3dObject axes asTrianglePatches paint: ColorValue gray; show) hiddenlinePresentation."

	"((JunOpenGL3dObject globe: 15) asTrianglePatches paint: ColorValue gray; show) hiddenlinePresentation."

	| compoundObject |
	compoundObject := JunOpenGL3dCompoundObject new.
	self asTrianglePolygonArray 
		do: [:each | compoundObject add: each asJunOpenGL3dObject].
	^compoundObject
]

{ #category : #converting }
JunOpenGL3dObject >> asTrianglePolygonArray [
	"JunOpenGL3dObject cube asTrianglePolygonArray."

	"JunOpenGL3dObject axes asTrianglePolygonArray."

	| aStream |
	aStream := WriteStream on: (Array new: 128).
	self asGeometryArray do: 
			[:geometry | 
			geometry asArrayOfTrianglePolygons 
				do: [:trianglePolygon | trianglePolygon isNil ifFalse: [aStream nextPut: trianglePolygon]]].
	^aStream contents
]

{ #category : #converting }
JunOpenGL3dObject >> asTriangles [
	"JunOpenGL3dObject cube asTriangles."

	"JunOpenGL3dObject axes asTriangles."

	| aStream |
	aStream := WriteStream on: (Array new: 128).
	self asGeometryArray do: 
			[:geometry | 
			geometry asArrayOfTrianglePolygons do: 
					[:triangle | 
					triangle isNil 
						ifFalse: 
							[| points |
							points := triangle points.
							aStream nextPut: (Jun3dTriangle 
										on: (points at: 1)
										on: (points at: 2)
										on: (points at: 3))]]].
	^aStream contents
]

{ #category : #converting }
JunOpenGL3dObject >> averageVertex [
	| averageVertex howMany |
	averageVertex := Jun3dPoint zero.
	howMany := 0.
	self pointsDo: 
			[:p | 
			averageVertex := averageVertex + p.
			howMany := howMany + 1].
	howMany = 0 ifTrue: [^averageVertex].
	averageVertex := averageVertex / howMany.
	^averageVertex
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> boundingBox [
	bounds isNil ifTrue: [bounds := self preferredBoundingBox].
	^bounds
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> center [
	^self boundingBox center
]

{ #category : #'lisp support' }
JunOpenGL3dObject >> colorToLispList [
	| list |
	list := self lispCons.
	list head: #color.
	list add: self paint red asFloat.
	list add: self paint green asFloat.
	list add: self paint blue asFloat.
	self hasAlpha ifTrue: [list add: self alpha asFloat].
	^list
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> corner [
	^self boundingBox corner
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultAlpha [
	^self class defaultAlpha
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultLineWidth [
	^self class defaultLineWidth
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultLispConsClass [
	^self class defaultLispConsClass
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultLispNilClass [
	^self class defaultLispNilClass
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultName [
	^self class defaultName
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultPaint [
	^self class defaultPaint
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultPoint [
	^self class defaultPoint
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultSize [
	^self class defaultSize
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultSmoothingAngle [
	^self class defaultSmoothingAngle
]

{ #category : #defaults }
JunOpenGL3dObject >> defaultTransformation [
	^self class defaultTransformation
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> depth [
	^self boundingBox depth
]

{ #category : #'vector accessing' }
JunOpenGL3dObject >> establishAllNormalVectors [
	^self 
		establishAllNormalVectorsWithSmoothingAngle: self defaultSmoothingAngle
]

{ #category : #'vector accessing' }
JunOpenGL3dObject >> establishAllNormalVectorsWithSmoothingAngle: anAngle [ 
	"do nothing"
]

{ #category : #'vector accessing' }
JunOpenGL3dObject >> establishNormalVectors [
	"do nothing"
]

{ #category : #private }
JunOpenGL3dObject >> estimatedFileSizeToSave [
	| estimatedSize |
	self 
		assert: [JunDummyWriteStream new]
		do: [:aStream | self toLispList saveOn: aStream]
		ensure: [:aStream | estimatedSize := aStream position].
	^estimatedSize
]

{ #category : #private }
JunOpenGL3dObject >> estimatedFileSizeToSaveAsVRML [
	| estimatedSize |
	self 
		assert: [JunDummyWriteStream new]
		do: [:aStream | self vrml20On: aStream]
		ensure: [:aStream | estimatedSize := aStream position].
	^estimatedSize
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> extent [
	^self boundingBox extent
]

{ #category : #converting }
JunOpenGL3dObject >> flatten [
	| aBody |
	aBody := JunOpenGL3dCompoundObject new.
	self primitivesDo: [:aPolygon | aBody add: aPolygon].
	^aBody
]

{ #category : #converting }
JunOpenGL3dObject >> flattenAsPolygons [
	| aBody |
	aBody := JunOpenGL3dCompoundObject new.
	self polygonsDo: [:aPolygon | aBody add: aPolygon].
	^aBody
]

{ #category : #flushing }
JunOpenGL3dObject >> flushAllAlphas [
	^self subclassResponsibility
]

{ #category : #flushing }
JunOpenGL3dObject >> flushAllBounds [
	^self subclassResponsibility
]

{ #category : #flushing }
JunOpenGL3dObject >> flushAllColors [
	^self subclassResponsibility
]

{ #category : #flushing }
JunOpenGL3dObject >> flushAllNames [
	^self subclassResponsibility
]

{ #category : #flushing }
JunOpenGL3dObject >> flushAllNormalVectors [
	^self subclassResponsibility
]

{ #category : #flushing }
JunOpenGL3dObject >> flushAllPaints [
	^self subclassResponsibility
]

{ #category : #flushing }
JunOpenGL3dObject >> flushAlpha [
	alpha := nil
]

{ #category : #flushing }
JunOpenGL3dObject >> flushBounds [
	bounds := nil
]

{ #category : #flushing }
JunOpenGL3dObject >> flushColors [
	"do nothing"
]

{ #category : #flushing }
JunOpenGL3dObject >> flushName [
	self hasProperties ifTrue: [self properties removeKey: #name]
]

{ #category : #flushing }
JunOpenGL3dObject >> flushNormalVectors [
	"do nothing"
]

{ #category : #flushing }
JunOpenGL3dObject >> flushPaint [
	paint := nil
]

{ #category : #flushing }
JunOpenGL3dObject >> flushProperties [
	properties := nil
]

{ #category : #enumerating }
JunOpenGL3dObject >> geometriesDo: aBlock [ 
	^self subclassResponsibility
]

{ #category : #accessing }
JunOpenGL3dObject >> halftone [
	self halftone: 0.5
]

{ #category : #accessing }
JunOpenGL3dObject >> halftone: halftoneScale [ 
	"do nothing"

	^self
]

{ #category : #testing }
JunOpenGL3dObject >> hasAlpha [
	^alpha notNil
]

{ #category : #testing }
JunOpenGL3dObject >> hasCollisionWith: a3dObject [ 
	| myBox yourBox |
	myBox := self boundingBox expandedBy: JunGeometry accuracy.
	yourBox := a3dObject boundingBox expandedBy: JunGeometry accuracy.
	(myBox intersects: yourBox)
		ifFalse: [^false].
	self touch: a3dObject do: [:aPolygon | ^true].
	a3dObject touch: self do: [:aPolygon | ^true].
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> hasColor [
	^self hasPaint or: [self hasAlpha]
]

{ #category : #testing }
JunOpenGL3dObject >> hasColors [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> hasMaterial [
	^self hasPaint or: [self hasAlpha or: [self hasTexture]]
]

{ #category : #testing }
JunOpenGL3dObject >> hasName [
	^self hasProperties and: [(self propertyAt: #name) notNil]
]

{ #category : #testing }
JunOpenGL3dObject >> hasNormalVectors [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> hasPaint [
	^paint notNil
]

{ #category : #testing }
JunOpenGL3dObject >> hasProperties [
	^properties notNil
]

{ #category : #testing }
JunOpenGL3dObject >> hasStipple [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> hasTexture [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> hasTransparency [
	^self hasAlpha and: [self alpha < 1.0]
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> height [
	^self boundingBox height
]

{ #category : #testing }
JunOpenGL3dObject >> includes: a3dObject [ 
	^false
]

{ #category : #'initialize-release' }
JunOpenGL3dObject >> initialize [
	properties := nil.
	paint := nil.
	alpha := nil.
	bounds := nil
]

{ #category : #testing }
JunOpenGL3dObject >> intersects: a3dObject [ 
	^self hasCollisionWith: a3dObject
]

{ #category : #testing }
JunOpenGL3dObject >> isCompound [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> isLight [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> isPolygon [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> isPolyline [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> isPrimitive [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> isTransformedObject [
	^false
]

{ #category : #testing }
JunOpenGL3dObject >> isVertexesObject [
	^false
]

{ #category : #accessing }
JunOpenGL3dObject >> legalName [
	| stream |
	stream := WriteStream on: (String new: self name size).
	self name first isAlphabetic ifFalse: [stream nextPutAll: 'id'].
	self name do: [:c | c isAlphaNumeric
			ifTrue: [stream nextPut: c]
			ifFalse: [stream nextPutAll: '_']].
	^stream contents
]

{ #category : #accessing }
JunOpenGL3dObject >> name [
	(self propertyAt: #name) ifNil: [^self defaultName] ifNotNil: [:it | ^it]
]

{ #category : #accessing }
JunOpenGL3dObject >> name: aString [ 
	self propertyAt: #name put: aString
]

{ #category : #'lisp support' }
JunOpenGL3dObject >> nameToLispList [
	| list |
	self hasProperties ifFalse: [^self lispNil].
	list := self lispCons.
	list head: #name.
	list tail: self name.
	^list
]

{ #category : #utilities }
JunOpenGL3dObject >> numberOfEdges [

	| aSet |
	aSet := Set new.
	self asLineArray
		do: [:line | ((aSet includes: line) not and: [(aSet includes: line reversed) not]) ifTrue: [aSet add: line]].
	^aSet size
]

{ #category : #utilities }
JunOpenGL3dObject >> numberOfFaces [
	^self numberOfPolygons
]

{ #category : #utilities }
JunOpenGL3dObject >> numberOfPolygons [
	^self subclassResponsibility
]

{ #category : #utilities }
JunOpenGL3dObject >> numberOfPolylines [
	^self subclassResponsibility
]

{ #category : #utilities }
JunOpenGL3dObject >> numberOfPrimitives [
	^self subclassResponsibility
]

{ #category : #utilities }
JunOpenGL3dObject >> numberOfVertexes [

	^self asPointArray asSet size
]

{ #category : #enumerating }
JunOpenGL3dObject >> objectsDo: aBlock [
	^self subclassResponsibility
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> origin [
	^self boundingBox origin
]

{ #category : #accessing }
JunOpenGL3dObject >> paint [
	paint isNil ifTrue: [^self defaultPaint].
	^paint
]

{ #category : #accessing }
JunOpenGL3dObject >> paint: aColorValue [ 
	paint := aColorValue
]

{ #category : #accessing }
JunOpenGL3dObject >> paint: aColorValue alpha: aNumber [ 
	self paint: aColorValue.
	self alpha: aNumber
]

{ #category : #enumerating }
JunOpenGL3dObject >> pointsDo: aBlock [ 
	^self subclassResponsibility
]

{ #category : #enumerating }
JunOpenGL3dObject >> polygonsDo: aBlock [ 
	^self subclassResponsibility
]

{ #category : #enumerating }
JunOpenGL3dObject >> polylinesDo: aBlock [ 
	^self subclassResponsibility
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> preferredBoundingBox [
	| minX minY minZ maxX maxY maxZ |
	minX := nil.
	minY := nil.
	minZ := nil.
	maxX := nil.
	maxY := nil.
	maxZ := nil.
	self
		pointsDo: 
			[:p | 
			minX == nil
				ifTrue: [minX := p x]
				ifFalse: [minX := minX min: p x].
			minY == nil
				ifTrue: [minY := p y]
				ifFalse: [minY := minY min: p y].
			minZ == nil
				ifTrue: [minZ := p z]
				ifFalse: [minZ := minZ min: p z].
			maxX == nil
				ifTrue: [maxX := p x]
				ifFalse: [maxX := maxX max: p x].
			maxY == nil
				ifTrue: [maxY := p y]
				ifFalse: [maxY := maxY max: p y].
			maxZ == nil
				ifTrue: [maxZ := p z]
				ifFalse: [maxZ := maxZ max: p z]].
	minX == nil ifTrue: [minX := 0].
	minY == nil ifTrue: [minY := 0].
	minZ == nil ifTrue: [minZ := 0].
	maxX == nil ifTrue: [maxX := 0].
	maxY == nil ifTrue: [maxY := 0].
	maxZ == nil ifTrue: [maxZ := 0].
	^Jun3dBoundingBox origin: minX , minY , minZ corner: maxX , maxY , maxZ
]

{ #category : #enumerating }
JunOpenGL3dObject >> primitivesDo: aBlock [ 
	^self subclassResponsibility
]

{ #category : #printing }
JunOpenGL3dObject >> printOn: aStream [ 

	aStream nextPutAll: self kindName printString.
	self name ifNotNil: [ :name | 
		aStream 
			nextPutAll: ': ' ; 
			nextPutAll: name ]
]

{ #category : #accessing }
JunOpenGL3dObject >> properties [
	properties ifNil: [properties := JunAttributeTable new].
	^properties
]

{ #category : #accessing }
JunOpenGL3dObject >> properties: aTable [ 
	self hasProperties ifTrue: [self flushProperties].
	aTable ifNotNil: 
			[:it | 
			it keysAndValuesDo: [:key :value | self propertyAt: key put: value]]
]

{ #category : #'lisp support' }
JunOpenGL3dObject >> propertiesToLispList [
	| list |
	self hasProperties ifFalse: [^self lispNil].
	list := self lispCons.
	list head: #properties.
	list tail: self properties toLispList.
	^list
]

{ #category : #accessing }
JunOpenGL3dObject >> propertyAt: keySymbol [ 
	self hasProperties ifFalse: [^nil].
	^self properties at: keySymbol ifAbsent: [nil]
]

{ #category : #accessing }
JunOpenGL3dObject >> propertyAt: keySymbol put: valueObject [ 
	^self properties at: keySymbol put: valueObject
]

{ #category : #private }
JunOpenGL3dObject >> rawAlpha [
	^alpha
]

{ #category : #private }
JunOpenGL3dObject >> rawName [
	^self propertyAt: #name
]

{ #category : #private }
JunOpenGL3dObject >> rawPaint [
	^paint
]

{ #category : #rendering }
JunOpenGL3dObject >> renderOn: aRenderingContext [ 
	^self subclassResponsibility
]

{ #category : #converting }
JunOpenGL3dObject >> reversed [
	^self subclassResponsibility
]

{ #category : #transforming }
JunOpenGL3dObject >> rotatedBy: anAngle [ 
	^self transform: (Jun3dTransformation rotate: anAngle)
]

{ #category : #'lisp support' }
JunOpenGL3dObject >> saveOn: aStream [ 
	| aList |
	Cursor wait showWhile: [aList := self toLispList].
	aList saveOn: aStream
]

{ #category : #transforming }
JunOpenGL3dObject >> scaledBy: a3dPoint [ 
	^self transform: (Jun3dTransformation scale: a3dPoint)
]

{ #category : #viewing }
JunOpenGL3dObject >> show [
	"JunOpenGL3dObject aoki show."

	^self showEyePoint: nil
]

{ #category : #viewing }
JunOpenGL3dObject >> showAt: displayPoint [ 
	"JunOpenGL3dObject aoki showAt: 200@200."

	^self 
		showEyePoint: nil
		sightPoint: nil
		upVector: nil
		viewFactor: nil
		in: (displayPoint extent: 300 @ 300)
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint [ 
	^self showEyePoint: eyePoint sightPoint: nil
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint sightPoint: sightPoint [ 
	^self 
		showEyePoint: eyePoint
		sightPoint: sightPoint
		upVector: nil
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint sightPoint: sightPoint upVector: upVector [ 
	^self 
		showEyePoint: eyePoint
		sightPoint: sightPoint
		upVector: upVector
		viewFactor: nil
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint sightPoint: sightPoint upVector: upVector in: displayRectangle [ 
	^self 
		showEyePoint: eyePoint
		sightPoint: sightPoint
		upVector: upVector
		viewFactor: nil
		in: displayRectangle
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint sightPoint: sightPoint upVector: upVector viewFactor: viewFactor [ 
	^self 
		showEyePoint: eyePoint
		sightPoint: sightPoint
		upVector: upVector
		viewFactor: viewFactor
		in: nil
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint sightPoint: sightPoint upVector: upVector viewFactor: viewFactor in: displayRectangle [ 
	^self 
		showEyePoint: eyePoint
		sightPoint: sightPoint
		upVector: upVector
		viewFactor: viewFactor
		zoomHeight: nil
		in: displayRectangle
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint sightPoint: sightPoint upVector: upVector viewFactor: viewFactor zoomHeight: zoomHeight in: displayRectangle [ 
	^JunOpenGLDisplayModel 
		show: self
		eyePoint: eyePoint
		sightPoint: sightPoint
		upVector: upVector
		viewFactor: viewFactor
		zoomHeight: zoomHeight
		in: displayRectangle
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint sightPoint: sightPoint upVector: upVector zoomHeight: zoomHeight [ 
	^self 
		showEyePoint: eyePoint
		sightPoint: sightPoint
		upVector: upVector
		zoomHeight: zoomHeight
		in: nil
]

{ #category : #viewing }
JunOpenGL3dObject >> showEyePoint: eyePoint sightPoint: sightPoint upVector: upVector zoomHeight: zoomHeight in: displayRectangle [ 
	^self 
		showEyePoint: eyePoint
		sightPoint: sightPoint
		upVector: upVector
		viewFactor: nil
		zoomHeight: zoomHeight
		in: displayRectangle
]

{ #category : #viewing }
JunOpenGL3dObject >> showIn: displayRectangle [ 
	"JunOpenGL3dObject aoki showIn: (200@200 extent: 400@400)."

	^self 
		showEyePoint: nil
		sightPoint: nil
		upVector: nil
		viewFactor: nil
		in: displayRectangle
]

{ #category : #viewing }
JunOpenGL3dObject >> showProjectionTable: aDictionary [ 
	"JunOpenGL3dObject cube 
		showProjectionTable: (Dictionary new
			add: #presentation -> #solidPresentation;
			add: #sightPoint -> (0.0d , 0.0d , 0.0d);
			add: #eyePoint -> (8.9144349065121d , 5.018580708957d , 6.2726946335082d);
			add: #shading -> #flatShading;
			add: #upVector -> (-0.29701438733281d , -0.49387349075548d , 0.81723401106801d);
			add: #viewFactor -> 10;
			add: #zoomHeight -> 3.9191837441874d;
			yourself)."

	^self showProjectionTable: aDictionary in: nil
]

{ #category : #viewing }
JunOpenGL3dObject >> showProjectionTable: aDictionary in: aRectangle [ 
	"JunOpenGL3dObject cube 
		showProjectionTable: (Dictionary new
			add: #presentation -> #solidPresentation;
			add: #sightPoint -> (0.0d , 0.0d , 0.0d);
			add: #eyePoint -> (8.9144349065121d , 5.018580708957d , 6.2726946335082d);
			add: #shading -> #flatShading;
			add: #upVector -> (-0.29701438733281d , -0.49387349075548d , 0.81723401106801d);
			add: #viewFactor -> 10;
			add: #zoomHeight -> 3.9191837441874d;
			yourself) 
		in: (200 @ 200 extent: 400 @ 200)."

	^JunOpenGLDisplayModel 
		show: self
		projectionTable: aDictionary
		in: aRectangle
]

{ #category : #viewing }
JunOpenGL3dObject >> showWithAxes [
	"JunOpenGL3dObject aoki showWithAxes."

	^self withAxes show
]

{ #category : #viewing }
JunOpenGL3dObject >> showWithAxesIn: displayRectangle [ 
	"JunOpenGL3dObject aoki showWithAxesIn: (200@250 extent: 300@300)."

	^self withAxes showIn: displayRectangle
]

{ #category : #viewing }
JunOpenGL3dObject >> showWithTranslatedAxes [
	"JunOpenGL3dObject aoki showWithTranslatedAxes."

	^self withTranslatedAxes show
]

{ #category : #viewing }
JunOpenGL3dObject >> showWithTranslatedAxesIn: displayRectangle [ 
	"JunOpenGL3dObject aoki showWithTranslatedAxesIn: (200@250 extent: 300@300)."

	^self withTranslatedAxes showIn: displayRectangle
]

{ #category : #viewing }
JunOpenGL3dObject >> showWithUnitAxes [
	"JunOpenGL3dObject aoki showWithUnitAxes."

	^self withUnitAxes show
]

{ #category : #viewing }
JunOpenGL3dObject >> showWithUnitAxesIn: displayRectangle [ 
	"JunOpenGL3dObject aoki showWithUnitAxesIn: (200@250 extent: 300@300)."

	^self withUnitAxes showIn: displayRectangle
]

{ #category : #accessing }
JunOpenGL3dObject >> smoothingAngle [
	^nil
]

{ #category : #accessing }
JunOpenGL3dObject >> stipple [
	^nil
]

{ #category : #accessing }
JunOpenGL3dObject >> stipple: aStipple [ 
	"do nothing"

	^self
]

{ #category : #accessing }
JunOpenGL3dObject >> texture [
	^nil
]

{ #category : #accessing }
JunOpenGL3dObject >> texture: aTexture [ 
	"do nothing"

	^self
]

{ #category : #'lisp support' }
JunOpenGL3dObject >> toLispList [
	"self showLispList: ((JunOpenGL3dObject box) toLispList)."

	^self subclassResponsibility
]

{ #category : #'obj support' }
JunOpenGL3dObject >> toOBJUsing: aJunOBJWriter [ 
	^self
]

{ #category : #touching }
JunOpenGL3dObject >> touch: a3dObject do: aBlock [ 
	a3dObject asLineArray do: 
			[:gLine | 
			| lineBox |
			lineBox := (Jun3dBoundingBox origin: gLine from corner: gLine to) 
						expandedBy: JunGeometry accuracy.
			self polygonsDo: 
					[:aPolygon | 
					| polygonBox |
					polygonBox := aPolygon boundingBox expandedBy: JunGeometry accuracy.
					(lineBox intersects: polygonBox) 
						ifTrue: 
							[| aCollection aPoint |
							aCollection := aPolygon asTrianglePolygonArray.
							aCollection do: 
									[:gPolygon | 
									aPoint := gPolygon intersectingPointWithLineSegment: gLine.
									aPoint notNil ifTrue: [aBlock value: aPolygon]]]]]
]

{ #category : #touching }
JunOpenGL3dObject >> touchingPolygons: a3dObject [ 
	| aStream |
	aStream := WriteStream on: (Array new: 32).
	self touch: a3dObject do: [:aPolygon | aStream nextPut: aPolygon].
	^aStream contents
]

{ #category : #transforming }
JunOpenGL3dObject >> transform: aTransformation [ 
	^self subclassResponsibility
]

{ #category : #transforming }
JunOpenGL3dObject >> transformation [
	^Jun3dTransformation unity
]

{ #category : #'lisp support' }
JunOpenGL3dObject >> transformationToLispList [
	^self transformationToLispList: self transformation
]

{ #category : #'lisp support' }
JunOpenGL3dObject >> transformationToLispList: aTransformation [ 
	^self class transformationToLispList: aTransformation
]

{ #category : #transforming }
JunOpenGL3dObject >> translatedBy: a3dPoint [ 
	^self transform: (Jun3dTransformation translate: a3dPoint)
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrml10ColorOn: aStream [ 
	self hasColor
		ifTrue: 
			[aStream tab.
			aStream nextPutAll: 'Material {'.
			aStream cr.
			aStream tab.
			aStream tab.
			aStream nextPutAll: 'diffuseColor'.
			aStream space.
			aStream nextPutAll: self paint red asFloat printString.
			aStream space.
			aStream nextPutAll: self paint green asFloat printString.
			aStream space.
			aStream nextPutAll: self paint blue asFloat printString.
			aStream cr.
			aStream tab.
			aStream nextPutAll: '} #Material'.
			aStream cr]
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrml10On: aStream [ 
	^self subclassResponsibility
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrml10String [
	| aStream |
	aStream := WriteStream on: String new.
	self vrml10On: aStream.
	^aStream contents
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrml20AppearanceOn: aStream [ 
	(self hasColor or: [self hasTexture])
		ifTrue: 
			[aStream tab.
			aStream nextPutAll: 'appearance Appearance {'.
			aStream cr.
			self hasColor
				ifTrue: 
					[aStream tab.
					aStream tab.
					aStream nextPutAll: 'material Material {'.
					aStream cr.
					aStream tab.
					aStream tab.
					aStream tab.
					aStream nextPutAll: 'diffuseColor'.
					aStream space.
					aStream nextPutAll: self paint red asFloat printString.
					aStream space.
					aStream nextPutAll: self paint green asFloat printString.
					aStream space.
					aStream nextPutAll: self paint blue asFloat printString.
					aStream cr.
					aStream tab.
					aStream tab.
					aStream nextPutAll: '} #Material'.
					aStream cr].
			self hasTexture
				ifTrue: 
					[aStream tab.
					aStream tab.
					aStream nextPutAll: 'texture PixelTexture {'.
					aStream cr.
					aStream tab.
					aStream tab.
					aStream tab.
					aStream nextPutAll: 'image '.
					self texture vrmlSFImageOn: aStream.
					aStream cr.
					aStream tab.
					aStream tab.
					aStream nextPutAll: '} #Texture'.
					aStream cr].
			aStream tab.
			aStream nextPutAll: '} #Appearance'.
			aStream cr]
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrml20ColorOn: aStream [ 
	self hasColor
		ifTrue: 
			[aStream tab.
			aStream nextPutAll: 'appearance Appearance {'.
			aStream cr.
			aStream tab.
			aStream tab.
			aStream nextPutAll: 'material Material {'.
			aStream cr.
			aStream tab.
			aStream tab.
			aStream tab.
			aStream nextPutAll: 'diffuseColor'.
			aStream space.
			aStream nextPutAll: self paint red asFloat printString.
			aStream space.
			aStream nextPutAll: self paint green asFloat printString.
			aStream space.
			aStream nextPutAll: self paint blue asFloat printString.
			aStream cr.
			aStream tab.
			aStream tab.
			aStream nextPutAll: '} #Material'.
			aStream cr.
			aStream tab.
			aStream nextPutAll: '} #Appearance'.
			aStream cr]
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrml20On: aStream [ 
	^self subclassResponsibility
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrml20String [
	| aStream |
	aStream := WriteStream on: String new.
	self vrml20On: aStream.
	^aStream contents
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrmlOn: aStream [ 
	^self vrml20On: aStream
]

{ #category : #'vrml support' }
JunOpenGL3dObject >> vrmlString [
	^self vrml20String
]

{ #category : #'bounds accessing' }
JunOpenGL3dObject >> width [
	^self boundingBox width
]

{ #category : #converting }
JunOpenGL3dObject >> with: firstObject [ 
	^JunOpenGL3dCompoundObject with: self with: firstObject
]

{ #category : #converting }
JunOpenGL3dObject >> with: firstObject with: secondObject [ 
	^JunOpenGL3dCompoundObject 
		with: self
		with: firstObject
		with: secondObject
]

{ #category : #converting }
JunOpenGL3dObject >> with: firstObject with: secondObject with: thirdObject [ 
	^JunOpenGL3dCompoundObject 
		with: self
		with: firstObject
		with: secondObject
		with: thirdObject
]

{ #category : #viewing }
JunOpenGL3dObject >> withAxes [
	"JunOpenGL3dObject aoki withAxes show."

	| box axes |
	box := self boundingBox merge: Jun3dPoint zero asBoundingBox.
	axes := self class xyzArrows 
				scaledBy: ((box width max: box height) max: box depth) * 1.2.
	^JunOpenGL3dCompoundObject with: self with: axes
]

{ #category : #viewing }
JunOpenGL3dObject >> withTranslatedAxes [
	"JunOpenGL3dObject aoki withTranslatedAxes show."

	| box axes |
	box := self boundingBox.
	axes := (self class xyzArrows 
				scaledBy: ((box width max: box height) max: box depth) * 0.8) 
					translatedBy: box center.
	^JunOpenGL3dCompoundObject with: self with: axes
]

{ #category : #viewing }
JunOpenGL3dObject >> withUnitAxes [
	"JunOpenGL3dObject aoki withUnitAxes show."

	^JunOpenGL3dCompoundObject with: self with: self class xyzArrows
]
